{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf\"] = factory();else root[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();\n})(this, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = [\n        /* 0 */\n      ,\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.addLinkAttributes = addLinkAttributes;\n        exports.deprecated = deprecated;\n        exports.getFilenameFromUrl = getFilenameFromUrl;\n        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;\n        exports.getXfaPageViewport = getXfaPageViewport;\n        exports.isDataScheme = isDataScheme;\n        exports.isPdfFile = isPdfFile;\n        exports.isValidFetchUrl = isValidFetchUrl;\n        exports.loadScript = loadScript;\n        exports.StatTimer = exports.RenderingCancelledException = exports.PixelsPerInch = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMStandardFontDataFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n        const PixelsPerInch = {\n          CSS: 96.0,\n          PDF: 72.0,\n\n          get PDF_TO_CSS_UNITS() {\n            return (0, _util.shadow)(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n          }\n\n        };\n        exports.PixelsPerInch = PixelsPerInch;\n\n        class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {\n          constructor() {\n            let {\n              ownerDocument = globalThis.document\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            super();\n            this._document = ownerDocument;\n          }\n\n          _createCanvas(width, height) {\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n          }\n\n        }\n\n        exports.DOMCanvasFactory = DOMCanvasFactory;\n\n        async function fetchData(url) {\n          let asTypedArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (isValidFetchUrl(url, document.baseURI)) {\n            const response = await fetch(url);\n\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return asTypedArray ? new Uint8Array(await response.arrayBuffer()) : (0, _util.stringToBytes)(await response.text());\n          }\n\n          return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open(\"GET\", url, true);\n\n            if (asTypedArray) {\n              request.responseType = \"arraybuffer\";\n            }\n\n            request.onreadystatechange = () => {\n              if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n              }\n\n              if (request.status === 200 || request.status === 0) {\n                let data;\n\n                if (asTypedArray && request.response) {\n                  data = new Uint8Array(request.response);\n                } else if (!asTypedArray && request.responseText) {\n                  data = (0, _util.stringToBytes)(request.responseText);\n                }\n\n                if (data) {\n                  resolve(data);\n                  return;\n                }\n              }\n\n              reject(new Error(request.statusText));\n            };\n\n            request.send(null);\n          });\n        }\n\n        class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return fetchData(url, this.isCompressed).then(data => {\n              return {\n                cMapData: data,\n                compressionType\n              };\n            });\n          }\n\n        }\n\n        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n        class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {\n          _fetchData(url) {\n            return fetchData(url, true);\n          }\n\n        }\n\n        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;\n\n        class DOMSVGFactory extends _base_factory.BaseSVGFactory {\n          _createSVG(type) {\n            return document.createElementNS(SVG_NS, type);\n          }\n\n        }\n\n        exports.DOMSVGFactory = DOMSVGFactory;\n\n        class PageViewport {\n          constructor(_ref) {\n            let {\n              viewBox,\n              scale,\n              rotation,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = _ref;\n            this.viewBox = viewBox;\n            this.scale = scale;\n            this.rotation = rotation;\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            const centerX = (viewBox[2] + viewBox[0]) / 2;\n            const centerY = (viewBox[3] + viewBox[1]) / 2;\n            let rotateA, rotateB, rotateC, rotateD;\n            rotation %= 360;\n\n            if (rotation < 0) {\n              rotation += 360;\n            }\n\n            switch (rotation) {\n              case 180:\n                rotateA = -1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = 1;\n                break;\n\n              case 90:\n                rotateA = 0;\n                rotateB = 1;\n                rotateC = 1;\n                rotateD = 0;\n                break;\n\n              case 270:\n                rotateA = 0;\n                rotateB = -1;\n                rotateC = -1;\n                rotateD = 0;\n                break;\n\n              case 0:\n                rotateA = 1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = -1;\n                break;\n\n              default:\n                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n            }\n\n            if (dontFlip) {\n              rotateC = -rotateC;\n              rotateD = -rotateD;\n            }\n\n            let offsetCanvasX, offsetCanvasY;\n            let width, height;\n\n            if (rotateA === 0) {\n              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n              width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n              height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n            } else {\n              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n              width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n              height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n            }\n\n            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n            this.width = width;\n            this.height = height;\n          }\n\n          clone() {\n            let {\n              scale = this.scale,\n              rotation = this.rotation,\n              offsetX = this.offsetX,\n              offsetY = this.offsetY,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new PageViewport({\n              viewBox: this.viewBox.slice(),\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          convertToViewportPoint(x, y) {\n            return _util.Util.applyTransform([x, y], this.transform);\n          }\n\n          convertToViewportRectangle(rect) {\n            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n          }\n\n          convertToPdfPoint(x, y) {\n            return _util.Util.applyInverseTransform([x, y], this.transform);\n          }\n\n        }\n\n        exports.PageViewport = PageViewport;\n\n        class RenderingCancelledException extends _util.BaseException {\n          constructor(msg, type) {\n            super(msg, \"RenderingCancelledException\");\n            this.type = type;\n          }\n\n        }\n\n        exports.RenderingCancelledException = RenderingCancelledException;\n        const LinkTarget = {\n          NONE: 0,\n          SELF: 1,\n          BLANK: 2,\n          PARENT: 3,\n          TOP: 4\n        };\n        exports.LinkTarget = LinkTarget;\n\n        function addLinkAttributes(link) {\n          let {\n            url,\n            target,\n            rel,\n            enabled = true\n          } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n          const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n          if (enabled) {\n            link.href = link.title = urlNullRemoved;\n          } else {\n            link.href = \"\";\n            link.title = `Disabled: ${urlNullRemoved}`;\n\n            link.onclick = () => {\n              return false;\n            };\n          }\n\n          let targetStr = \"\";\n\n          switch (target) {\n            case LinkTarget.NONE:\n              break;\n\n            case LinkTarget.SELF:\n              targetStr = \"_self\";\n              break;\n\n            case LinkTarget.BLANK:\n              targetStr = \"_blank\";\n              break;\n\n            case LinkTarget.PARENT:\n              targetStr = \"_parent\";\n              break;\n\n            case LinkTarget.TOP:\n              targetStr = \"_top\";\n              break;\n          }\n\n          link.target = targetStr;\n          link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n        }\n\n        function isDataScheme(url) {\n          const ii = url.length;\n          let i = 0;\n\n          while (i < ii && url[i].trim() === \"\") {\n            i++;\n          }\n\n          return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n\n        function isPdfFile(filename) {\n          return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n\n        function getFilenameFromUrl(url) {\n          const anchor = url.indexOf(\"#\");\n          const query = url.indexOf(\"?\");\n          const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n          return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n        }\n\n        function getPdfFilenameFromUrl(url) {\n          let defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"document.pdf\";\n\n          if (typeof url !== \"string\") {\n            return defaultFilename;\n          }\n\n          if (isDataScheme(url)) {\n            (0, _util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n            return defaultFilename;\n          }\n\n          const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n          const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n          const splitURI = reURI.exec(url);\n          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n          if (suggestedFilename) {\n            suggestedFilename = suggestedFilename[0];\n\n            if (suggestedFilename.includes(\"%\")) {\n              try {\n                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n              } catch (ex) {}\n            }\n          }\n\n          return suggestedFilename || defaultFilename;\n        }\n\n        class StatTimer {\n          constructor() {\n            this.started = Object.create(null);\n            this.times = [];\n          }\n\n          time(name) {\n            if (name in this.started) {\n              (0, _util.warn)(`Timer is already running for ${name}`);\n            }\n\n            this.started[name] = Date.now();\n          }\n\n          timeEnd(name) {\n            if (!(name in this.started)) {\n              (0, _util.warn)(`Timer has not been started for ${name}`);\n            }\n\n            this.times.push({\n              name,\n              start: this.started[name],\n              end: Date.now()\n            });\n            delete this.started[name];\n          }\n\n          toString() {\n            const outBuf = [];\n            let longest = 0;\n\n            for (const time of this.times) {\n              const name = time.name;\n\n              if (name.length > longest) {\n                longest = name.length;\n              }\n            }\n\n            for (const time of this.times) {\n              const duration = time.end - time.start;\n              outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n            }\n\n            return outBuf.join(\"\");\n          }\n\n        }\n\n        exports.StatTimer = StatTimer;\n\n        function isValidFetchUrl(url, baseUrl) {\n          try {\n            const {\n              protocol\n            } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            return protocol === \"http:\" || protocol === \"https:\";\n          } catch (ex) {\n            return false;\n          }\n        }\n\n        function loadScript(src) {\n          let removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = src;\n\n            script.onload = function (evt) {\n              if (removeScriptElement) {\n                script.remove();\n              }\n\n              resolve(evt);\n            };\n\n            script.onerror = function () {\n              reject(new Error(`Cannot load script at: ${script.src}`));\n            };\n\n            (document.head || document.documentElement).appendChild(script);\n          });\n        }\n\n        function deprecated(details) {\n          console.log(\"Deprecated API usage: \" + details);\n        }\n\n        let pdfDateStringRegex;\n\n        class PDFDateString {\n          static toDateObject(input) {\n            if (!input || !(0, _util.isString)(input)) {\n              return null;\n            }\n\n            if (!pdfDateStringRegex) {\n              pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n            }\n\n            const matches = pdfDateStringRegex.exec(input);\n\n            if (!matches) {\n              return null;\n            }\n\n            const year = parseInt(matches[1], 10);\n            let month = parseInt(matches[2], 10);\n            month = month >= 1 && month <= 12 ? month - 1 : 0;\n            let day = parseInt(matches[3], 10);\n            day = day >= 1 && day <= 31 ? day : 1;\n            let hour = parseInt(matches[4], 10);\n            hour = hour >= 0 && hour <= 23 ? hour : 0;\n            let minute = parseInt(matches[5], 10);\n            minute = minute >= 0 && minute <= 59 ? minute : 0;\n            let second = parseInt(matches[6], 10);\n            second = second >= 0 && second <= 59 ? second : 0;\n            const universalTimeRelation = matches[7] || \"Z\";\n            let offsetHour = parseInt(matches[8], 10);\n            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n            let offsetMinute = parseInt(matches[9], 10) || 0;\n            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n            if (universalTimeRelation === \"-\") {\n              hour += offsetHour;\n              minute += offsetMinute;\n            } else if (universalTimeRelation === \"+\") {\n              hour -= offsetHour;\n              minute -= offsetMinute;\n            }\n\n            return new Date(Date.UTC(year, month, day, hour, minute, second));\n          }\n\n        }\n\n        exports.PDFDateString = PDFDateString;\n\n        function getXfaPageViewport(xfaPage, _ref2) {\n          let {\n            scale = 1,\n            rotation = 0\n          } = _ref2;\n          const {\n            width,\n            height\n          } = xfaPage.attributes.style;\n          const viewBox = [0, 0, parseInt(width), parseInt(height)];\n          return new PageViewport({\n            viewBox,\n            scale,\n            rotation\n          });\n        }\n        /***/\n\n      },\n      /* 2 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.arrayByteLength = arrayByteLength;\n        exports.arraysToBytes = arraysToBytes;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createObjectURL = createObjectURL;\n        exports.createPromiseCapability = createPromiseCapability;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.escapeString = escapeString;\n        exports.getModificationDate = getModificationDate;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isAscii = isAscii;\n        exports.isBool = isBool;\n        exports.isNum = isNum;\n        exports.isSameOrigin = isSameOrigin;\n        exports.isString = isString;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.removeNullCharacters = removeNullCharacters;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF16BEString = stringToUTF16BEString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n        exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.RenderingIntentFlag = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMode = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n        __w_pdfjs_require__(3);\n\n        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        const RenderingIntentFlag = {\n          ANY: 0x01,\n          DISPLAY: 0x02,\n          PRINT: 0x04,\n          ANNOTATIONS_FORMS: 0x10,\n          ANNOTATIONS_STORAGE: 0x20,\n          ANNOTATIONS_DISABLE: 0x40,\n          OPLIST: 0x100\n        };\n        exports.RenderingIntentFlag = RenderingIntentFlag;\n        const AnnotationMode = {\n          DISABLE: 0,\n          ENABLE: 1,\n          ENABLE_FORMS: 2,\n          ENABLE_STORAGE: 3\n        };\n        exports.AnnotationMode = AnnotationMode;\n        const PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        const TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        const ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        const AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        const AnnotationStateModelType = {\n          MARKED: \"Marked\",\n          REVIEW: \"Review\"\n        };\n        exports.AnnotationStateModelType = AnnotationStateModelType;\n        const AnnotationMarkedState = {\n          MARKED: \"Marked\",\n          UNMARKED: \"Unmarked\"\n        };\n        exports.AnnotationMarkedState = AnnotationMarkedState;\n        const AnnotationReviewState = {\n          ACCEPTED: \"Accepted\",\n          REJECTED: \"Rejected\",\n          CANCELLED: \"Cancelled\",\n          COMPLETED: \"Completed\",\n          NONE: \"None\"\n        };\n        exports.AnnotationReviewState = AnnotationReviewState;\n        const AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        const AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        const AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        const AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        const AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        const DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        const PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        const StreamType = {\n          UNKNOWN: \"UNKNOWN\",\n          FLATE: \"FLATE\",\n          LZW: \"LZW\",\n          DCT: \"DCT\",\n          JPX: \"JPX\",\n          JBIG: \"JBIG\",\n          A85: \"A85\",\n          AHX: \"AHX\",\n          CCF: \"CCF\",\n          RLX: \"RLX\"\n        };\n        exports.StreamType = StreamType;\n        const FontType = {\n          UNKNOWN: \"UNKNOWN\",\n          TYPE1: \"TYPE1\",\n          TYPE1STANDARD: \"TYPE1STANDARD\",\n          TYPE1C: \"TYPE1C\",\n          CIDFONTTYPE0: \"CIDFONTTYPE0\",\n          CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n          TRUETYPE: \"TRUETYPE\",\n          CIDFONTTYPE2: \"CIDFONTTYPE2\",\n          TYPE3: \"TYPE3\",\n          OPENTYPE: \"OPENTYPE\",\n          TYPE0: \"TYPE0\",\n          MMTYPE1: \"MMTYPE1\"\n        };\n        exports.FontType = FontType;\n        const VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        const CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1,\n          STREAM: 2\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        const OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotations: 78,\n          endAnnotations: 79,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintJpegXObject: 82,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        const UNSUPPORTED_FEATURES = {\n          unknown: \"unknown\",\n          forms: \"forms\",\n          javaScript: \"javaScript\",\n          signatures: \"signatures\",\n          smask: \"smask\",\n          shadingPattern: \"shadingPattern\",\n          font: \"font\",\n          errorTilingPattern: \"errorTilingPattern\",\n          errorExtGState: \"errorExtGState\",\n          errorXObject: \"errorXObject\",\n          errorFontLoadType3: \"errorFontLoadType3\",\n          errorFontState: \"errorFontState\",\n          errorFontMissing: \"errorFontMissing\",\n          errorFontTranslate: \"errorFontTranslate\",\n          errorColorSpace: \"errorColorSpace\",\n          errorOperatorList: \"errorOperatorList\",\n          errorFontToUnicode: \"errorFontToUnicode\",\n          errorFontLoadNative: \"errorFontLoadNative\",\n          errorFontBuildPath: \"errorFontBuildPath\",\n          errorFontGetPath: \"errorFontGetPath\",\n          errorMarkedContent: \"errorMarkedContent\",\n          errorContentSubStream: \"errorContentSubStream\"\n        };\n        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n        const PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        let verbosity = VerbosityLevel.WARNINGS;\n\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(`Info: ${msg}`);\n          }\n        }\n\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(`Warning: ${msg}`);\n          }\n        }\n\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n\n        function isSameOrigin(baseUrl, otherUrl) {\n          let base;\n\n          try {\n            base = new URL(baseUrl);\n\n            if (!base.origin || base.origin === \"null\") {\n              return false;\n            }\n          } catch (e) {\n            return false;\n          }\n\n          const other = new URL(otherUrl, base);\n          return base.origin === other.origin;\n        }\n\n        function _isValidProtocol(url) {\n          if (!url) {\n            return false;\n          }\n\n          switch (url.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function createValidAbsoluteUrl(url) {\n          let baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (!url) {\n            return null;\n          }\n\n          try {\n            if (options && typeof url === \"string\") {\n              if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n                const dots = url.match(/\\./g);\n\n                if (dots && dots.length >= 2) {\n                  url = `http://${url}`;\n                }\n              }\n\n              if (options.tryConvertEncoding) {\n                try {\n                  url = stringToUTF8String(url);\n                } catch (ex) {}\n              }\n            }\n\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch (ex) {}\n\n          return null;\n        }\n\n        function shadow(obj, prop, value) {\n          Object.defineProperty(obj, prop, {\n            value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n\n        const BaseException = function BaseExceptionClosure() {\n          function BaseException(message, name) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n\n            this.message = message;\n            this.name = name;\n          }\n\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n\n        exports.BaseException = BaseException;\n\n        class PasswordException extends BaseException {\n          constructor(msg, code) {\n            super(msg, \"PasswordException\");\n            this.code = code;\n          }\n\n        }\n\n        exports.PasswordException = PasswordException;\n\n        class UnknownErrorException extends BaseException {\n          constructor(msg, details) {\n            super(msg, \"UnknownErrorException\");\n            this.details = details;\n          }\n\n        }\n\n        exports.UnknownErrorException = UnknownErrorException;\n\n        class InvalidPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"InvalidPDFException\");\n          }\n\n        }\n\n        exports.InvalidPDFException = InvalidPDFException;\n\n        class MissingPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"MissingPDFException\");\n          }\n\n        }\n\n        exports.MissingPDFException = MissingPDFException;\n\n        class UnexpectedResponseException extends BaseException {\n          constructor(msg, status) {\n            super(msg, \"UnexpectedResponseException\");\n            this.status = status;\n          }\n\n        }\n\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n\n        class FormatError extends BaseException {\n          constructor(msg) {\n            super(msg, \"FormatError\");\n          }\n\n        }\n\n        exports.FormatError = FormatError;\n\n        class AbortException extends BaseException {\n          constructor(msg) {\n            super(msg, \"AbortException\");\n          }\n\n        }\n\n        exports.AbortException = AbortException;\n        const NullCharactersRegExp = /\\x00/g;\n\n        function removeNullCharacters(str) {\n          if (typeof str !== \"string\") {\n            warn(\"The argument for removeNullCharacters must be a string.\");\n            return str;\n          }\n\n          return str.replace(NullCharactersRegExp, \"\");\n        }\n\n        function bytesToString(bytes) {\n          assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n          const length = bytes.length;\n          const MAX_ARGUMENT_COUNT = 8192;\n\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n\n          const strBuf = [];\n\n          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            const chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToBytes(str) {\n          assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n          const length = str.length;\n          const bytes = new Uint8Array(length);\n\n          for (let i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n\n          return bytes;\n        }\n\n        function arrayByteLength(arr) {\n          if (arr.length !== undefined) {\n            return arr.length;\n          }\n\n          assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n          return arr.byteLength;\n        }\n\n        function arraysToBytes(arr) {\n          const length = arr.length;\n\n          if (length === 1 && arr[0] instanceof Uint8Array) {\n            return arr[0];\n          }\n\n          let resultLength = 0;\n\n          for (let i = 0; i < length; i++) {\n            resultLength += arrayByteLength(arr[i]);\n          }\n\n          let pos = 0;\n          const data = new Uint8Array(resultLength);\n\n          for (let i = 0; i < length; i++) {\n            let item = arr[i];\n\n            if (!(item instanceof Uint8Array)) {\n              if (typeof item === \"string\") {\n                item = stringToBytes(item);\n              } else {\n                item = new Uint8Array(item);\n              }\n            }\n\n            const itemLength = item.byteLength;\n            data.set(item, pos);\n            pos += itemLength;\n          }\n\n          return data;\n        }\n\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n\n        function objectFromMap(map) {\n          const obj = Object.create(null);\n\n          for (const [key, value] of map) {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function isLittleEndian() {\n          const buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n\n        const IsLittleEndianCached = {\n          get value() {\n            return shadow(this, \"value\", isLittleEndian());\n          }\n\n        };\n        exports.IsLittleEndianCached = IsLittleEndianCached;\n\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        const IsEvalSupportedCached = {\n          get value() {\n            return shadow(this, \"value\", isEvalSupported());\n          }\n\n        };\n        exports.IsEvalSupportedCached = IsEvalSupportedCached;\n        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n        class Util {\n          static makeHexColor(r, g, b) {\n            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n          }\n\n          static transform(m1, m2) {\n            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n          }\n\n          static applyTransform(p, m) {\n            const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n            const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n            return [xt, yt];\n          }\n\n          static applyInverseTransform(p, m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n            return [xt, yt];\n          }\n\n          static getAxialAlignedBoundingBox(r, m) {\n            const p1 = Util.applyTransform(r, m);\n            const p2 = Util.applyTransform(r.slice(2, 4), m);\n            const p3 = Util.applyTransform([r[0], r[3]], m);\n            const p4 = Util.applyTransform([r[2], r[1]], m);\n            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n          }\n\n          static inverseTransform(m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n          }\n\n          static apply3dTransform(m, v) {\n            return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n          }\n\n          static singularValueDecompose2dScale(m) {\n            const transpose = [m[0], m[2], m[1], m[3]];\n            const a = m[0] * transpose[0] + m[1] * transpose[2];\n            const b = m[0] * transpose[1] + m[1] * transpose[3];\n            const c = m[2] * transpose[0] + m[3] * transpose[2];\n            const d = m[2] * transpose[1] + m[3] * transpose[3];\n            const first = (a + d) / 2;\n            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n            const sx = first + second || 1;\n            const sy = first - second || 1;\n            return [Math.sqrt(sx), Math.sqrt(sy)];\n          }\n\n          static normalizeRect(rect) {\n            const r = rect.slice(0);\n\n            if (rect[0] > rect[2]) {\n              r[0] = rect[2];\n              r[2] = rect[0];\n            }\n\n            if (rect[1] > rect[3]) {\n              r[1] = rect[3];\n              r[3] = rect[1];\n            }\n\n            return r;\n          }\n\n          static intersect(rect1, rect2) {\n            function compare(a, b) {\n              return a - b;\n            }\n\n            const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n            const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n            const result = [];\n            rect1 = Util.normalizeRect(rect1);\n            rect2 = Util.normalizeRect(rect2);\n\n            if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n              result[0] = orderedX[1];\n              result[2] = orderedX[2];\n            } else {\n              return null;\n            }\n\n            if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n              result[1] = orderedY[1];\n              result[3] = orderedY[2];\n            } else {\n              return null;\n            }\n\n            return result;\n          }\n\n        }\n\n        exports.Util = Util;\n        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\n\n        function stringToPDFString(str) {\n          const length = str.length,\n                strBuf = [];\n\n          if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n            }\n          } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n            }\n          } else {\n            for (let i = 0; i < length; ++i) {\n              const code = PDFStringTranslateTable[str.charCodeAt(i)];\n              strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n            }\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function escapeString(str) {\n          return str.replace(/([()\\\\\\n\\r])/g, match => {\n            if (match === \"\\n\") {\n              return \"\\\\n\";\n            } else if (match === \"\\r\") {\n              return \"\\\\r\";\n            }\n\n            return `\\\\${match}`;\n          });\n        }\n\n        function isAscii(str) {\n          return /^[\\x00-\\x7F]*$/.test(str);\n        }\n\n        function stringToUTF16BEString(str) {\n          const buf = [\"\\xFE\\xFF\"];\n\n          for (let i = 0, ii = str.length; i < ii; i++) {\n            const char = str.charCodeAt(i);\n            buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));\n          }\n\n          return buf.join(\"\");\n        }\n\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n\n        function isBool(v) {\n          return typeof v === \"boolean\";\n        }\n\n        function isNum(v) {\n          return typeof v === \"number\";\n        }\n\n        function isString(v) {\n          return typeof v === \"string\";\n        }\n\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n        }\n\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n\n          for (let i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function getModificationDate() {\n          let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n\n        function createPromiseCapability() {\n          const capability = Object.create(null);\n          let isSettled = false;\n          Object.defineProperty(capability, \"settled\", {\n            get() {\n              return isSettled;\n            }\n\n          });\n          capability.promise = new Promise(function (resolve, reject) {\n            capability.resolve = function (data) {\n              isSettled = true;\n              resolve(data);\n            };\n\n            capability.reject = function (reason) {\n              isSettled = true;\n              reject(reason);\n            };\n          });\n          return capability;\n        }\n\n        function createObjectURL(data) {\n          let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n          let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (URL.createObjectURL && !forceDataSchema) {\n            return URL.createObjectURL(new Blob([data], {\n              type: contentType\n            }));\n          }\n\n          const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        }\n        /***/\n\n      },\n      /* 3 */\n\n      /***/\n      (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n        var _is_node = __w_pdfjs_require__(4);\n\n        ;\n        /***/\n      },\n      /* 4 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.isNodeJS = void 0;\n        const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n        /***/\n      },\n      /* 5 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.BaseSVGFactory = exports.BaseStandardFontDataFactory = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseCanvasFactory {\n          constructor() {\n            if (this.constructor === BaseCanvasFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            const canvas = this._createCanvas(width, height);\n\n            return {\n              canvas,\n              context: canvas.getContext(\"2d\")\n            };\n          }\n\n          reset(canvasAndContext, width, height) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            canvasAndContext.canvas.width = width;\n            canvasAndContext.canvas.height = height;\n          }\n\n          destroy(canvasAndContext) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            canvasAndContext.canvas.width = 0;\n            canvasAndContext.canvas.height = 0;\n            canvasAndContext.canvas = null;\n            canvasAndContext.context = null;\n          }\n\n          _createCanvas(width, height) {\n            (0, _util.unreachable)(\"Abstract method `_createCanvas` called.\");\n          }\n\n        }\n\n        exports.BaseCanvasFactory = BaseCanvasFactory;\n\n        class BaseCMapReaderFactory {\n          constructor(_ref3) {\n            let {\n              baseUrl = null,\n              isCompressed = false\n            } = _ref3;\n\n            if (this.constructor === BaseCMapReaderFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n            this.isCompressed = isCompressed;\n          }\n\n          async fetch(_ref4) {\n            let {\n              name\n            } = _ref4;\n\n            if (!this.baseUrl) {\n              throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n            }\n\n            if (!name) {\n              throw new Error(\"CMap name must be specified.\");\n            }\n\n            const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n            const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n            return this._fetchData(url, compressionType).catch(reason => {\n              throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n            });\n          }\n\n          _fetchData(url, compressionType) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n        class BaseStandardFontDataFactory {\n          constructor(_ref5) {\n            let {\n              baseUrl = null\n            } = _ref5;\n\n            if (this.constructor === BaseStandardFontDataFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n          }\n\n          async fetch(_ref6) {\n            let {\n              filename\n            } = _ref6;\n\n            if (!this.baseUrl) {\n              throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n            }\n\n            if (!filename) {\n              throw new Error(\"Font filename must be specified.\");\n            }\n\n            const url = `${this.baseUrl}${filename}`;\n            return this._fetchData(url).catch(reason => {\n              throw new Error(`Unable to load font data at: ${url}`);\n            });\n          }\n\n          _fetchData(url) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;\n\n        class BaseSVGFactory {\n          constructor() {\n            if (this.constructor === BaseSVGFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid SVG dimensions\");\n            }\n\n            const svg = this._createSVG(\"svg:svg\");\n\n            svg.setAttribute(\"version\", \"1.1\");\n            svg.setAttribute(\"width\", `${width}px`);\n            svg.setAttribute(\"height\", `${height}px`);\n            svg.setAttribute(\"preserveAspectRatio\", \"none\");\n            svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n            return svg;\n          }\n\n          createElement(type) {\n            if (typeof type !== \"string\") {\n              throw new Error(\"Invalid SVG element type\");\n            }\n\n            return this._createSVG(type);\n          }\n\n          _createSVG(type) {\n            (0, _util.unreachable)(\"Abstract method `_createSVG` called.\");\n          }\n\n        }\n\n        exports.BaseSVGFactory = BaseSVGFactory;\n        /***/\n      },\n      /* 6 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getDocument = getDocument;\n        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n        exports.version = exports.RenderTask = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _font_loader = __w_pdfjs_require__(7);\n\n        var _node_utils = __w_pdfjs_require__(8);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _canvas = __w_pdfjs_require__(10);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _message_handler = __w_pdfjs_require__(13);\n\n        var _metadata = __w_pdfjs_require__(14);\n\n        var _optional_content_config = __w_pdfjs_require__(15);\n\n        var _transport_stream = __w_pdfjs_require__(16);\n\n        var _xfa_text = __w_pdfjs_require__(17);\n\n        const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n        const RENDERING_CANCELLED_TIMEOUT = 100;\n        const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n        exports.DefaultCanvasFactory = DefaultCanvasFactory;\n        const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n        const DefaultStandardFontDataFactory = _is_node.isNodeJS ? _node_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;\n        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;\n        let createPDFNetworkStream;\n\n        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n          createPDFNetworkStream = pdfNetworkStreamFactory;\n        }\n\n        function getDocument(src) {\n          const task = new PDFDocumentLoadingTask();\n          let source;\n\n          if (typeof src === \"string\" || src instanceof URL) {\n            source = {\n              url: src\n            };\n          } else if ((0, _util.isArrayBuffer)(src)) {\n            source = {\n              data: src\n            };\n          } else if (src instanceof PDFDataRangeTransport) {\n            source = {\n              range: src\n            };\n          } else {\n            if (typeof src !== \"object\") {\n              throw new Error(\"Invalid parameter in getDocument, \" + \"need either string, URL, Uint8Array, or parameter object.\");\n            }\n\n            if (!src.url && !src.data && !src.range) {\n              throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n            }\n\n            source = src;\n          }\n\n          const params = Object.create(null);\n          let rangeTransport = null,\n              worker = null;\n\n          for (const key in source) {\n            const value = source[key];\n\n            switch (key) {\n              case \"url\":\n                if (typeof window !== \"undefined\") {\n                  try {\n                    params[key] = new URL(value, window.location).href;\n                    continue;\n                  } catch (ex) {\n                    (0, _util.warn)(`Cannot create valid URL: \"${ex}\".`);\n                  }\n                } else if (typeof value === \"string\" || value instanceof URL) {\n                  params[key] = value.toString();\n                  continue;\n                }\n\n                throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n\n              case \"range\":\n                rangeTransport = value;\n                continue;\n\n              case \"worker\":\n                worker = value;\n                continue;\n\n              case \"data\":\n                if (_is_node.isNodeJS && typeof Buffer !== \"undefined\" && value instanceof Buffer) {\n                  params[key] = new Uint8Array(value);\n                } else if (value instanceof Uint8Array) {\n                  break;\n                } else if (typeof value === \"string\") {\n                  params[key] = (0, _util.stringToBytes)(value);\n                } else if (typeof value === \"object\" && value !== null && !isNaN(value.length)) {\n                  params[key] = new Uint8Array(value);\n                } else if ((0, _util.isArrayBuffer)(value)) {\n                  params[key] = new Uint8Array(value);\n                } else {\n                  throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string, or array-like object is expected in the data property.\");\n                }\n\n                continue;\n            }\n\n            params[key] = value;\n          }\n\n          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n          params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n          params.ignoreErrors = params.stopAtErrors !== true;\n          params.fontExtraProperties = params.fontExtraProperties === true;\n          params.pdfBug = params.pdfBug === true;\n          params.enableXfa = params.enableXfa === true;\n\n          if (typeof params.docBaseUrl !== \"string\" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {\n            params.docBaseUrl = null;\n          }\n\n          if (!Number.isInteger(params.maxImageSize)) {\n            params.maxImageSize = -1;\n          }\n\n          if (typeof params.useWorkerFetch !== \"boolean\") {\n            params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;\n          }\n\n          if (typeof params.isEvalSupported !== \"boolean\") {\n            params.isEvalSupported = true;\n          }\n\n          if (typeof params.disableFontFace !== \"boolean\") {\n            params.disableFontFace = _is_node.isNodeJS;\n          }\n\n          if (typeof params.useSystemFonts !== \"boolean\") {\n            params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;\n          }\n\n          if (typeof params.ownerDocument === \"undefined\") {\n            params.ownerDocument = globalThis.document;\n          }\n\n          if (typeof params.disableRange !== \"boolean\") {\n            params.disableRange = false;\n          }\n\n          if (typeof params.disableStream !== \"boolean\") {\n            params.disableStream = false;\n          }\n\n          if (typeof params.disableAutoFetch !== \"boolean\") {\n            params.disableAutoFetch = false;\n          }\n\n          (0, _util.setVerbosityLevel)(params.verbosity);\n\n          if (!worker) {\n            const workerParams = {\n              verbosity: params.verbosity,\n              port: _worker_options.GlobalWorkerOptions.workerPort\n            };\n            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n            task._worker = worker;\n          }\n\n          const docId = task.docId;\n          worker.promise.then(function () {\n            if (task.destroyed) {\n              throw new Error(\"Loading aborted\");\n            }\n\n            const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n            const networkStreamPromise = new Promise(function (resolve) {\n              let networkStream;\n\n              if (rangeTransport) {\n                networkStream = new _transport_stream.PDFDataTransportStream({\n                  length: params.length,\n                  initialData: params.initialData,\n                  progressiveDone: params.progressiveDone,\n                  contentDispositionFilename: params.contentDispositionFilename,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                }, rangeTransport);\n              } else if (!params.data) {\n                networkStream = createPDFNetworkStream({\n                  url: params.url,\n                  length: params.length,\n                  httpHeaders: params.httpHeaders,\n                  withCredentials: params.withCredentials,\n                  rangeChunkSize: params.rangeChunkSize,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                });\n              }\n\n              resolve(networkStream);\n            });\n            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref7) {\n              let [workerId, networkStream] = _ref7;\n\n              if (task.destroyed) {\n                throw new Error(\"Loading aborted\");\n              }\n\n              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n              messageHandler.postMessageTransfers = worker.postMessageTransfers;\n              const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n              task._transport = transport;\n              messageHandler.send(\"Ready\", null);\n            });\n          }).catch(task._capability.reject);\n          return task;\n        }\n\n        async function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          if (pdfDataRangeTransport) {\n            source.length = pdfDataRangeTransport.length;\n            source.initialData = pdfDataRangeTransport.initialData;\n            source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;\n          }\n\n          const workerId = await worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n            docId,\n            apiVersion: '2.11.338',\n            source: {\n              data: source.data,\n              url: source.url,\n              password: source.password,\n              disableAutoFetch: source.disableAutoFetch,\n              rangeChunkSize: source.rangeChunkSize,\n              length: source.length\n            },\n            maxImageSize: source.maxImageSize,\n            disableFontFace: source.disableFontFace,\n            postMessageTransfers: worker.postMessageTransfers,\n            docBaseUrl: source.docBaseUrl,\n            ignoreErrors: source.ignoreErrors,\n            isEvalSupported: source.isEvalSupported,\n            fontExtraProperties: source.fontExtraProperties,\n            enableXfa: source.enableXfa,\n            useSystemFonts: source.useSystemFonts,\n            cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n            standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null\n          });\n\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          return workerId;\n        }\n\n        class PDFDocumentLoadingTask {\n          static get idCounters() {\n            return (0, _util.shadow)(this, \"idCounters\", {\n              doc: 0\n            });\n          }\n\n          constructor() {\n            this._capability = (0, _util.createPromiseCapability)();\n            this._transport = null;\n            this._worker = null;\n            this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n            this.destroyed = false;\n            this.onPassword = null;\n            this.onProgress = null;\n            this.onUnsupportedFeature = null;\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          async destroy() {\n            this.destroyed = true;\n            await this._transport?.destroy();\n            this._transport = null;\n\n            if (this._worker) {\n              this._worker.destroy();\n\n              this._worker = null;\n            }\n          }\n\n        }\n\n        exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;\n\n        class PDFDataRangeTransport {\n          constructor(length, initialData) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this.length = length;\n            this.initialData = initialData;\n            this.progressiveDone = progressiveDone;\n            this.contentDispositionFilename = contentDispositionFilename;\n            this._rangeListeners = [];\n            this._progressListeners = [];\n            this._progressiveReadListeners = [];\n            this._progressiveDoneListeners = [];\n            this._readyCapability = (0, _util.createPromiseCapability)();\n          }\n\n          addRangeListener(listener) {\n            this._rangeListeners.push(listener);\n          }\n\n          addProgressListener(listener) {\n            this._progressListeners.push(listener);\n          }\n\n          addProgressiveReadListener(listener) {\n            this._progressiveReadListeners.push(listener);\n          }\n\n          addProgressiveDoneListener(listener) {\n            this._progressiveDoneListeners.push(listener);\n          }\n\n          onDataRange(begin, chunk) {\n            for (const listener of this._rangeListeners) {\n              listener(begin, chunk);\n            }\n          }\n\n          onDataProgress(loaded, total) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressListeners) {\n                listener(loaded, total);\n              }\n            });\n          }\n\n          onDataProgressiveRead(chunk) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveReadListeners) {\n                listener(chunk);\n              }\n            });\n          }\n\n          onDataProgressiveDone() {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveDoneListeners) {\n                listener();\n              }\n            });\n          }\n\n          transportReady() {\n            this._readyCapability.resolve();\n          }\n\n          requestDataRange(begin, end) {\n            (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n          }\n\n          abort() {}\n\n        }\n\n        exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n        class PDFDocumentProxy {\n          constructor(pdfInfo, transport) {\n            this._pdfInfo = pdfInfo;\n            this._transport = transport;\n            Object.defineProperty(this, \"fingerprint\", {\n              get() {\n                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.fingerprint`, \" + \"please use `PDFDocumentProxy.fingerprints` instead.\");\n                return this.fingerprints[0];\n              }\n\n            });\n          }\n\n          get annotationStorage() {\n            return this._transport.annotationStorage;\n          }\n\n          get numPages() {\n            return this._pdfInfo.numPages;\n          }\n\n          get fingerprints() {\n            return this._pdfInfo.fingerprints;\n          }\n\n          get isPureXfa() {\n            return !!this._transport._htmlForXfa;\n          }\n\n          get allXfaHtml() {\n            return this._transport._htmlForXfa;\n          }\n\n          getPage(pageNumber) {\n            return this._transport.getPage(pageNumber);\n          }\n\n          getPageIndex(ref) {\n            return this._transport.getPageIndex(ref);\n          }\n\n          getDestinations() {\n            return this._transport.getDestinations();\n          }\n\n          getDestination(id) {\n            return this._transport.getDestination(id);\n          }\n\n          getPageLabels() {\n            return this._transport.getPageLabels();\n          }\n\n          getPageLayout() {\n            return this._transport.getPageLayout();\n          }\n\n          getPageMode() {\n            return this._transport.getPageMode();\n          }\n\n          getViewerPreferences() {\n            return this._transport.getViewerPreferences();\n          }\n\n          getOpenAction() {\n            return this._transport.getOpenAction();\n          }\n\n          getAttachments() {\n            return this._transport.getAttachments();\n          }\n\n          getJavaScript() {\n            return this._transport.getJavaScript();\n          }\n\n          getJSActions() {\n            return this._transport.getDocJSActions();\n          }\n\n          getOutline() {\n            return this._transport.getOutline();\n          }\n\n          getOptionalContentConfig() {\n            return this._transport.getOptionalContentConfig();\n          }\n\n          getPermissions() {\n            return this._transport.getPermissions();\n          }\n\n          getMetadata() {\n            return this._transport.getMetadata();\n          }\n\n          getMarkInfo() {\n            return this._transport.getMarkInfo();\n          }\n\n          getData() {\n            return this._transport.getData();\n          }\n\n          getDownloadInfo() {\n            return this._transport.downloadInfoCapability.promise;\n          }\n\n          getStats() {\n            return this._transport.getStats();\n          }\n\n          cleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n          }\n\n          destroy() {\n            return this.loadingTask.destroy();\n          }\n\n          get loadingParams() {\n            return this._transport.loadingParams;\n          }\n\n          get loadingTask() {\n            return this._transport.loadingTask;\n          }\n\n          saveDocument() {\n            if (this._transport.annotationStorage.size <= 0) {\n              (0, _display_utils.deprecated)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n            }\n\n            return this._transport.saveDocument();\n          }\n\n          getFieldObjects() {\n            return this._transport.getFieldObjects();\n          }\n\n          hasJSActions() {\n            return this._transport.hasJSActions();\n          }\n\n          getCalculationOrderIds() {\n            return this._transport.getCalculationOrderIds();\n          }\n\n        }\n\n        exports.PDFDocumentProxy = PDFDocumentProxy;\n\n        class PDFPageProxy {\n          constructor(pageIndex, pageInfo, transport, ownerDocument) {\n            let pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n            this._pageIndex = pageIndex;\n            this._pageInfo = pageInfo;\n            this._ownerDocument = ownerDocument;\n            this._transport = transport;\n            this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n            this._pdfBug = pdfBug;\n            this.commonObjs = transport.commonObjs;\n            this.objs = new PDFObjects();\n            this.cleanupAfterRender = false;\n            this.pendingCleanup = false;\n            this._intentStates = new Map();\n            this._annotationPromises = new Map();\n            this.destroyed = false;\n          }\n\n          get pageNumber() {\n            return this._pageIndex + 1;\n          }\n\n          get rotate() {\n            return this._pageInfo.rotate;\n          }\n\n          get ref() {\n            return this._pageInfo.ref;\n          }\n\n          get userUnit() {\n            return this._pageInfo.userUnit;\n          }\n\n          get view() {\n            return this._pageInfo.view;\n          }\n\n          getViewport() {\n            let {\n              scale,\n              rotation = this.rotate,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new _display_utils.PageViewport({\n              viewBox: this.view,\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          getAnnotations() {\n            let {\n              intent = \"display\"\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            const intentArgs = this._transport.getRenderingIntent(intent);\n\n            let promise = this._annotationPromises.get(intentArgs.cacheKey);\n\n            if (!promise) {\n              promise = this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);\n\n              this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n              promise = promise.then(annotations => {\n                for (const annotation of annotations) {\n                  if (annotation.titleObj !== undefined) {\n                    Object.defineProperty(annotation, \"title\", {\n                      get() {\n                        (0, _display_utils.deprecated)(\"`title`-property on annotation, please use `titleObj` instead.\");\n                        return annotation.titleObj.str;\n                      }\n\n                    });\n                  }\n\n                  if (annotation.contentsObj !== undefined) {\n                    Object.defineProperty(annotation, \"contents\", {\n                      get() {\n                        (0, _display_utils.deprecated)(\"`contents`-property on annotation, please use `contentsObj` instead.\");\n                        return annotation.contentsObj.str;\n                      }\n\n                    });\n                  }\n                }\n\n                return annotations;\n              });\n            }\n\n            return promise;\n          }\n\n          getJSActions() {\n            return this._jsActionsPromise ||= this._transport.getPageJSActions(this._pageIndex);\n          }\n\n          async getXfa() {\n            return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n          }\n\n          render(_ref8) {\n            let {\n              canvasContext,\n              viewport,\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE,\n              transform = null,\n              imageLayer = null,\n              canvasFactory = null,\n              background = null,\n              optionalContentConfigPromise = null\n            } = _ref8;\n\n            if (arguments[0]?.renderInteractiveForms !== undefined) {\n              (0, _display_utils.deprecated)(\"render no longer accepts the `renderInteractiveForms`-option, \" + \"please use the `annotationMode`-option instead.\");\n\n              if (arguments[0].renderInteractiveForms === true && annotationMode === _util.AnnotationMode.ENABLE) {\n                annotationMode = _util.AnnotationMode.ENABLE_FORMS;\n              }\n            }\n\n            if (arguments[0]?.includeAnnotationStorage !== undefined) {\n              (0, _display_utils.deprecated)(\"render no longer accepts the `includeAnnotationStorage`-option, \" + \"please use the `annotationMode`-option instead.\");\n\n              if (arguments[0].includeAnnotationStorage === true && annotationMode === _util.AnnotationMode.ENABLE) {\n                annotationMode = _util.AnnotationMode.ENABLE_STORAGE;\n              }\n            }\n\n            if (this._stats) {\n              this._stats.time(\"Overall\");\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode);\n\n            this.pendingCleanup = false;\n\n            if (!optionalContentConfigPromise) {\n              optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n            }\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n              ownerDocument: this._ownerDocument\n            });\n            const intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);\n\n            if (!intentState.displayReadyCapability) {\n              intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            const complete = error => {\n              intentState.renderTasks.delete(internalRenderTask);\n\n              if (this.cleanupAfterRender || intentPrint) {\n                this.pendingCleanup = true;\n              }\n\n              this._tryCleanup();\n\n              if (error) {\n                internalRenderTask.capability.reject(error);\n\n                this._abortOperatorList({\n                  intentState,\n                  reason: error instanceof Error ? error : new Error(error)\n                });\n              } else {\n                internalRenderTask.capability.resolve();\n              }\n\n              if (this._stats) {\n                this._stats.timeEnd(\"Rendering\");\n\n                this._stats.timeEnd(\"Overall\");\n              }\n            };\n\n            const internalRenderTask = new InternalRenderTask({\n              callback: complete,\n              params: {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              },\n              objs: this.objs,\n              commonObjs: this.commonObjs,\n              operatorList: intentState.operatorList,\n              pageIndex: this._pageIndex,\n              canvasFactory: canvasFactoryInstance,\n              useRequestAnimationFrame: !intentPrint,\n              pdfBug: this._pdfBug\n            });\n            (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n            const renderTask = internalRenderTask.task;\n            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(_ref9 => {\n              let [transparency, optionalContentConfig] = _ref9;\n\n              if (this.pendingCleanup) {\n                complete();\n                return;\n              }\n\n              if (this._stats) {\n                this._stats.time(\"Rendering\");\n              }\n\n              internalRenderTask.initializeGraphics({\n                transparency,\n                optionalContentConfig\n              });\n              internalRenderTask.operatorListChanged();\n            }).catch(complete);\n            return renderTask;\n          }\n\n          getOperatorList() {\n            let {\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            function operatorListChanged() {\n              if (intentState.operatorList.lastChunk) {\n                intentState.opListReadCapability.resolve(intentState.operatorList);\n                intentState.renderTasks.delete(opListTask);\n              }\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, true);\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            let opListTask;\n\n            if (!intentState.opListReadCapability) {\n              opListTask = Object.create(null);\n              opListTask.operatorListChanged = operatorListChanged;\n              intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n              (intentState.renderTasks ||= new Set()).add(opListTask);\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            return intentState.opListReadCapability.promise;\n          }\n\n          streamTextContent() {\n            let {\n              normalizeWhitespace = false,\n              disableCombineTextItems = false,\n              includeMarkedContent = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const TEXT_CONTENT_CHUNK_SIZE = 100;\n            return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n              pageIndex: this._pageIndex,\n              normalizeWhitespace: normalizeWhitespace === true,\n              combineTextItems: disableCombineTextItems !== true,\n              includeMarkedContent: includeMarkedContent === true\n            }, {\n              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n              size(textContent) {\n                return textContent.items.length;\n              }\n\n            });\n          }\n\n          getTextContent() {\n            let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this._transport._htmlForXfa) {\n              return this.getXfa().then(xfa => {\n                return _xfa_text.XfaText.textContent(xfa);\n              });\n            }\n\n            const readableStream = this.streamTextContent(params);\n            return new Promise(function (resolve, reject) {\n              function pump() {\n                reader.read().then(function (_ref10) {\n                  let {\n                    value,\n                    done\n                  } = _ref10;\n\n                  if (done) {\n                    resolve(textContent);\n                    return;\n                  }\n\n                  Object.assign(textContent.styles, value.styles);\n                  textContent.items.push(...value.items);\n                  pump();\n                }, reject);\n              }\n\n              const reader = readableStream.getReader();\n              const textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              pump();\n            });\n          }\n\n          getStructTree() {\n            return this._structTreePromise ||= this._transport.getStructTree(this._pageIndex);\n          }\n\n          _destroy() {\n            this.destroyed = true;\n            this._transport.pageCache[this._pageIndex] = null;\n            const waitOn = [];\n\n            for (const intentState of this._intentStates.values()) {\n              this._abortOperatorList({\n                intentState,\n                reason: new Error(\"Page was destroyed.\"),\n                force: true\n              });\n\n              if (intentState.opListReadCapability) {\n                continue;\n              }\n\n              for (const internalRenderTask of intentState.renderTasks) {\n                waitOn.push(internalRenderTask.completed);\n                internalRenderTask.cancel();\n              }\n            }\n\n            this.objs.clear();\n\n            this._annotationPromises.clear();\n\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n            this.pendingCleanup = false;\n            return Promise.all(waitOn);\n          }\n\n          cleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.pendingCleanup = true;\n            return this._tryCleanup(resetStats);\n          }\n\n          _tryCleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.pendingCleanup) {\n              return false;\n            }\n\n            for (const {\n              renderTasks,\n              operatorList\n            } of this._intentStates.values()) {\n              if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                return false;\n              }\n            }\n\n            this._intentStates.clear();\n\n            this.objs.clear();\n\n            this._annotationPromises.clear();\n\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n\n            if (resetStats && this._stats) {\n              this._stats = new _display_utils.StatTimer();\n            }\n\n            this.pendingCleanup = false;\n            return true;\n          }\n\n          _startRenderPage(transparency, cacheKey) {\n            const intentState = this._intentStates.get(cacheKey);\n\n            if (!intentState) {\n              return;\n            }\n\n            if (this._stats) {\n              this._stats.timeEnd(\"Page Request\");\n            }\n\n            if (intentState.displayReadyCapability) {\n              intentState.displayReadyCapability.resolve(transparency);\n            }\n          }\n\n          _renderPageChunk(operatorListChunk, intentState) {\n            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n            }\n\n            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n\n            if (operatorListChunk.lastChunk) {\n              this._tryCleanup();\n            }\n          }\n\n          _pumpOperatorList(_ref11) {\n            let {\n              renderingIntent,\n              cacheKey\n            } = _ref11;\n\n            const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n              pageIndex: this._pageIndex,\n              intent: renderingIntent,\n              cacheKey,\n              annotationStorage: renderingIntent & _util.RenderingIntentFlag.ANNOTATIONS_STORAGE ? this._transport.annotationStorage.serializable : null\n            });\n\n            const reader = readableStream.getReader();\n\n            const intentState = this._intentStates.get(cacheKey);\n\n            intentState.streamReader = reader;\n\n            const pump = () => {\n              reader.read().then(_ref12 => {\n                let {\n                  value,\n                  done\n                } = _ref12;\n\n                if (done) {\n                  intentState.streamReader = null;\n                  return;\n                }\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                this._renderPageChunk(value, intentState);\n\n                pump();\n              }, reason => {\n                intentState.streamReader = null;\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                if (intentState.operatorList) {\n                  intentState.operatorList.lastChunk = true;\n\n                  for (const internalRenderTask of intentState.renderTasks) {\n                    internalRenderTask.operatorListChanged();\n                  }\n\n                  this._tryCleanup();\n                }\n\n                if (intentState.displayReadyCapability) {\n                  intentState.displayReadyCapability.reject(reason);\n                } else if (intentState.opListReadCapability) {\n                  intentState.opListReadCapability.reject(reason);\n                } else {\n                  throw reason;\n                }\n              });\n            };\n\n            pump();\n          }\n\n          _abortOperatorList(_ref13) {\n            let {\n              intentState,\n              reason,\n              force = false\n            } = _ref13;\n\n            if (!intentState.streamReader) {\n              return;\n            }\n\n            if (!force) {\n              if (intentState.renderTasks.size > 0) {\n                return;\n              }\n\n              if (reason instanceof _display_utils.RenderingCancelledException) {\n                intentState.streamReaderCancelTimeout = setTimeout(() => {\n                  this._abortOperatorList({\n                    intentState,\n                    reason,\n                    force: true\n                  });\n\n                  intentState.streamReaderCancelTimeout = null;\n                }, RENDERING_CANCELLED_TIMEOUT);\n                return;\n              }\n            }\n\n            intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(() => {});\n            intentState.streamReader = null;\n\n            if (this._transport.destroyed) {\n              return;\n            }\n\n            for (const [curCacheKey, curIntentState] of this._intentStates) {\n              if (curIntentState === intentState) {\n                this._intentStates.delete(curCacheKey);\n\n                break;\n              }\n            }\n\n            this.cleanup();\n          }\n\n          get stats() {\n            return this._stats;\n          }\n\n        }\n\n        exports.PDFPageProxy = PDFPageProxy;\n\n        class LoopbackPort {\n          constructor() {\n            this._listeners = [];\n            this._deferred = Promise.resolve(undefined);\n          }\n\n          postMessage(obj, transfers) {\n            function cloneValue(value) {\n              if (typeof value === \"function\" || typeof value === \"symbol\" || value instanceof URL) {\n                throw new Error(`LoopbackPort.postMessage - cannot clone: ${value?.toString()}`);\n              }\n\n              if (typeof value !== \"object\" || value === null) {\n                return value;\n              }\n\n              if (cloned.has(value)) {\n                return cloned.get(value);\n              }\n\n              let buffer, result;\n\n              if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n                if (transfers?.includes(buffer)) {\n                  result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n                } else {\n                  result = new value.constructor(value);\n                }\n\n                cloned.set(value, result);\n                return result;\n              }\n\n              if (value instanceof Map) {\n                result = new Map();\n                cloned.set(value, result);\n\n                for (const [key, val] of value) {\n                  result.set(key, cloneValue(val));\n                }\n\n                return result;\n              }\n\n              if (value instanceof Set) {\n                result = new Set();\n                cloned.set(value, result);\n\n                for (const val of value) {\n                  result.add(cloneValue(val));\n                }\n\n                return result;\n              }\n\n              result = Array.isArray(value) ? [] : Object.create(null);\n              cloned.set(value, result);\n\n              for (const i in value) {\n                let desc,\n                    p = value;\n\n                while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n                  p = Object.getPrototypeOf(p);\n                }\n\n                if (typeof desc.value === \"undefined\") {\n                  continue;\n                }\n\n                if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n                  continue;\n                }\n\n                result[i] = cloneValue(desc.value);\n              }\n\n              return result;\n            }\n\n            const cloned = new WeakMap();\n            const event = {\n              data: cloneValue(obj)\n            };\n\n            this._deferred.then(() => {\n              for (const listener of this._listeners) {\n                listener.call(this, event);\n              }\n            });\n          }\n\n          addEventListener(name, listener) {\n            this._listeners.push(listener);\n          }\n\n          removeEventListener(name, listener) {\n            const i = this._listeners.indexOf(listener);\n\n            this._listeners.splice(i, 1);\n          }\n\n          terminate() {\n            this._listeners.length = 0;\n          }\n\n        }\n\n        exports.LoopbackPort = LoopbackPort;\n        const PDFWorkerUtil = {\n          isWorkerDisabled: false,\n          fallbackWorkerSrc: null,\n          fakeWorkerId: 0\n        };\n        {\n          if (_is_node.isNodeJS && typeof require === \"function\") {\n            PDFWorkerUtil.isWorkerDisabled = true;\n            PDFWorkerUtil.fallbackWorkerSrc = \"./pdf.worker.js\";\n          } else if (typeof document === \"object\") {\n            const pdfjsFilePath = document?.currentScript?.src;\n\n            if (pdfjsFilePath) {\n              PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n            }\n          }\n\n          PDFWorkerUtil.createCDNWrapper = function (url) {\n            const wrapper = `importScripts(\"${url}\");`;\n            return URL.createObjectURL(new Blob([wrapper]));\n          };\n        }\n\n        class PDFWorker {\n          static get _workerPorts() {\n            return (0, _util.shadow)(this, \"_workerPorts\", new WeakMap());\n          }\n\n          constructor() {\n            let {\n              name = null,\n              port = null,\n              verbosity = (0, _util.getVerbosityLevel)()\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (port && PDFWorker._workerPorts.has(port)) {\n              throw new Error(\"Cannot use more than one PDFWorker per port.\");\n            }\n\n            this.name = name;\n            this.destroyed = false;\n            this.postMessageTransfers = true;\n            this.verbosity = verbosity;\n            this._readyCapability = (0, _util.createPromiseCapability)();\n            this._port = null;\n            this._webWorker = null;\n            this._messageHandler = null;\n\n            if (port) {\n              PDFWorker._workerPorts.set(port, this);\n\n              this._initializeFromPort(port);\n\n              return;\n            }\n\n            this._initialize();\n          }\n\n          get promise() {\n            return this._readyCapability.promise;\n          }\n\n          get port() {\n            return this._port;\n          }\n\n          get messageHandler() {\n            return this._messageHandler;\n          }\n\n          _initializeFromPort(port) {\n            this._port = port;\n            this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n            this._messageHandler.on(\"ready\", function () {});\n\n            this._readyCapability.resolve();\n          }\n\n          _initialize() {\n            if (typeof Worker !== \"undefined\" && !PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {\n              let workerSrc = PDFWorker.workerSrc;\n\n              try {\n                if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n                  workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);\n                }\n\n                const worker = new Worker(workerSrc);\n                const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n                const terminateEarly = () => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n                  messageHandler.destroy();\n                  worker.terminate();\n\n                  if (this.destroyed) {\n                    this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                  } else {\n                    this._setupFakeWorker();\n                  }\n                };\n\n                const onWorkerError = () => {\n                  if (!this._webWorker) {\n                    terminateEarly();\n                  }\n                };\n\n                worker.addEventListener(\"error\", onWorkerError);\n                messageHandler.on(\"test\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  if (data) {\n                    this._messageHandler = messageHandler;\n                    this._port = worker;\n                    this._webWorker = worker;\n\n                    if (!data.supportTransfers) {\n                      this.postMessageTransfers = false;\n                    }\n\n                    this._readyCapability.resolve();\n\n                    messageHandler.send(\"configure\", {\n                      verbosity: this.verbosity\n                    });\n                  } else {\n                    this._setupFakeWorker();\n\n                    messageHandler.destroy();\n                    worker.terminate();\n                  }\n                });\n                messageHandler.on(\"ready\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  try {\n                    sendTest();\n                  } catch (e) {\n                    this._setupFakeWorker();\n                  }\n                });\n\n                const sendTest = () => {\n                  const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n                  try {\n                    messageHandler.send(\"test\", testObj, [testObj.buffer]);\n                  } catch (ex) {\n                    (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                    testObj[0] = 0;\n                    messageHandler.send(\"test\", testObj);\n                  }\n                };\n\n                sendTest();\n                return;\n              } catch (e) {\n                (0, _util.info)(\"The worker has been disabled.\");\n              }\n            }\n\n            this._setupFakeWorker();\n          }\n\n          _setupFakeWorker() {\n            if (!PDFWorkerUtil.isWorkerDisabled) {\n              (0, _util.warn)(\"Setting up fake worker.\");\n              PDFWorkerUtil.isWorkerDisabled = true;\n            }\n\n            PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n                return;\n              }\n\n              const port = new LoopbackPort();\n              this._port = port;\n              const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n              const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n              WorkerMessageHandler.setup(workerHandler, port);\n              const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n              this._messageHandler = messageHandler;\n\n              this._readyCapability.resolve();\n\n              messageHandler.send(\"configure\", {\n                verbosity: this.verbosity\n              });\n            }).catch(reason => {\n              this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n            });\n          }\n\n          destroy() {\n            this.destroyed = true;\n\n            if (this._webWorker) {\n              this._webWorker.terminate();\n\n              this._webWorker = null;\n            }\n\n            PDFWorker._workerPorts.delete(this._port);\n\n            this._port = null;\n\n            if (this._messageHandler) {\n              this._messageHandler.destroy();\n\n              this._messageHandler = null;\n            }\n          }\n\n          static fromPort(params) {\n            if (!params?.port) {\n              throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n            }\n\n            if (this._workerPorts.has(params.port)) {\n              return this._workerPorts.get(params.port);\n            }\n\n            return new PDFWorker(params);\n          }\n\n          static get workerSrc() {\n            if (_worker_options.GlobalWorkerOptions.workerSrc) {\n              return _worker_options.GlobalWorkerOptions.workerSrc;\n            }\n\n            if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n              if (!_is_node.isNodeJS) {\n                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n              }\n\n              return PDFWorkerUtil.fallbackWorkerSrc;\n            }\n\n            throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n          }\n\n          static get _mainThreadWorkerMessageHandler() {\n            try {\n              return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n            } catch (ex) {\n              return null;\n            }\n          }\n\n          static get _setupFakeWorkerGlobal() {\n            const loader = async () => {\n              const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n              if (mainWorkerMessageHandler) {\n                return mainWorkerMessageHandler;\n              }\n\n              if (_is_node.isNodeJS && typeof require === \"function\") {\n                const worker = eval(\"require\")(this.workerSrc);\n                return worker.WorkerMessageHandler;\n              }\n\n              await (0, _display_utils.loadScript)(this.workerSrc);\n              return window.pdfjsWorker.WorkerMessageHandler;\n            };\n\n            return (0, _util.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\n          }\n\n        }\n\n        exports.PDFWorker = PDFWorker;\n        {\n          PDFWorker.getWorkerSrc = function () {\n            (0, _display_utils.deprecated)(\"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\");\n            return this.workerSrc;\n          };\n        }\n\n        class WorkerTransport {\n          constructor(messageHandler, loadingTask, networkStream, params) {\n            this.messageHandler = messageHandler;\n            this.loadingTask = loadingTask;\n            this.commonObjs = new PDFObjects();\n            this.fontLoader = new _font_loader.FontLoader({\n              docId: loadingTask.docId,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              ownerDocument: params.ownerDocument,\n              styleElement: params.styleElement\n            });\n            this._params = params;\n\n            if (!params.useWorkerFetch) {\n              this.CMapReaderFactory = new params.CMapReaderFactory({\n                baseUrl: params.cMapUrl,\n                isCompressed: params.cMapPacked\n              });\n              this.StandardFontDataFactory = new params.StandardFontDataFactory({\n                baseUrl: params.standardFontDataUrl\n              });\n            }\n\n            this.destroyed = false;\n            this.destroyCapability = null;\n            this._passwordCapability = null;\n            this._networkStream = networkStream;\n            this._fullReader = null;\n            this._lastProgress = null;\n            this.pageCache = [];\n            this.pagePromises = [];\n            this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n            this.setupMessageHandler();\n          }\n\n          get annotationStorage() {\n            return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n          }\n\n          getRenderingIntent(intent) {\n            let annotationMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _util.AnnotationMode.ENABLE;\n            let isOpList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let renderingIntent = _util.RenderingIntentFlag.DISPLAY;\n            let lastModified = \"\";\n\n            switch (intent) {\n              case \"any\":\n                renderingIntent = _util.RenderingIntentFlag.ANY;\n                break;\n\n              case \"display\":\n                break;\n\n              case \"print\":\n                renderingIntent = _util.RenderingIntentFlag.PRINT;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent}`);\n            }\n\n            switch (annotationMode) {\n              case _util.AnnotationMode.DISABLE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;\n                break;\n\n              case _util.AnnotationMode.ENABLE:\n                break;\n\n              case _util.AnnotationMode.ENABLE_FORMS:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;\n                break;\n\n              case _util.AnnotationMode.ENABLE_STORAGE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;\n                lastModified = this.annotationStorage.lastModified;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n            }\n\n            if (isOpList) {\n              renderingIntent += _util.RenderingIntentFlag.OPLIST;\n            }\n\n            return {\n              renderingIntent,\n              cacheKey: `${renderingIntent}_${lastModified}`\n            };\n          }\n\n          destroy() {\n            if (this.destroyCapability) {\n              return this.destroyCapability.promise;\n            }\n\n            this.destroyed = true;\n            this.destroyCapability = (0, _util.createPromiseCapability)();\n\n            if (this._passwordCapability) {\n              this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n            }\n\n            const waitOn = [];\n\n            for (const page of this.pageCache) {\n              if (page) {\n                waitOn.push(page._destroy());\n              }\n            }\n\n            this.pageCache.length = 0;\n            this.pagePromises.length = 0;\n\n            if (this.hasOwnProperty(\"annotationStorage\")) {\n              this.annotationStorage.resetModified();\n            }\n\n            const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n            waitOn.push(terminated);\n            Promise.all(waitOn).then(() => {\n              this.commonObjs.clear();\n              this.fontLoader.clear();\n              this._getFieldObjectsPromise = null;\n              this._hasJSActionsPromise = null;\n\n              if (this._networkStream) {\n                this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n              }\n\n              if (this.messageHandler) {\n                this.messageHandler.destroy();\n                this.messageHandler = null;\n              }\n\n              this.destroyCapability.resolve();\n            }, this.destroyCapability.reject);\n            return this.destroyCapability.promise;\n          }\n\n          setupMessageHandler() {\n            const {\n              messageHandler,\n              loadingTask\n            } = this;\n            messageHandler.on(\"GetReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n              this._fullReader = this._networkStream.getFullReader();\n\n              this._fullReader.onProgress = evt => {\n                this._lastProgress = {\n                  loaded: evt.loaded,\n                  total: evt.total\n                };\n              };\n\n              sink.onPull = () => {\n                this._fullReader.read().then(function (_ref14) {\n                  let {\n                    value,\n                    done\n                  } = _ref14;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                this._fullReader.cancel(reason);\n\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"ReaderHeadersReady\", data => {\n              const headersCapability = (0, _util.createPromiseCapability)();\n              const fullReader = this._fullReader;\n              fullReader.headersReady.then(() => {\n                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                  if (this._lastProgress && loadingTask.onProgress) {\n                    loadingTask.onProgress(this._lastProgress);\n                  }\n\n                  fullReader.onProgress = evt => {\n                    if (loadingTask.onProgress) {\n                      loadingTask.onProgress({\n                        loaded: evt.loaded,\n                        total: evt.total\n                      });\n                    }\n                  };\n                }\n\n                headersCapability.resolve({\n                  isStreamingSupported: fullReader.isStreamingSupported,\n                  isRangeSupported: fullReader.isRangeSupported,\n                  contentLength: fullReader.contentLength\n                });\n              }, headersCapability.reject);\n              return headersCapability.promise;\n            });\n            messageHandler.on(\"GetRangeReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n              if (!rangeReader) {\n                sink.close();\n                return;\n              }\n\n              sink.onPull = () => {\n                rangeReader.read().then(function (_ref15) {\n                  let {\n                    value,\n                    done\n                  } = _ref15;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                rangeReader.cancel(reason);\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"GetDoc\", _ref16 => {\n              let {\n                pdfInfo\n              } = _ref16;\n              this._numPages = pdfInfo.numPages;\n              this._htmlForXfa = pdfInfo.htmlForXfa;\n              delete pdfInfo.htmlForXfa;\n\n              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n            });\n            messageHandler.on(\"DocException\", function (ex) {\n              let reason;\n\n              switch (ex.name) {\n                case \"PasswordException\":\n                  reason = new _util.PasswordException(ex.message, ex.code);\n                  break;\n\n                case \"InvalidPDFException\":\n                  reason = new _util.InvalidPDFException(ex.message);\n                  break;\n\n                case \"MissingPDFException\":\n                  reason = new _util.MissingPDFException(ex.message);\n                  break;\n\n                case \"UnexpectedResponseException\":\n                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                  break;\n\n                case \"UnknownErrorException\":\n                  reason = new _util.UnknownErrorException(ex.message, ex.details);\n                  break;\n\n                default:\n                  (0, _util.unreachable)(\"DocException - expected a valid Error.\");\n              }\n\n              loadingTask._capability.reject(reason);\n            });\n            messageHandler.on(\"PasswordRequest\", exception => {\n              this._passwordCapability = (0, _util.createPromiseCapability)();\n\n              if (loadingTask.onPassword) {\n                const updatePassword = password => {\n                  this._passwordCapability.resolve({\n                    password\n                  });\n                };\n\n                try {\n                  loadingTask.onPassword(updatePassword, exception.code);\n                } catch (ex) {\n                  this._passwordCapability.reject(ex);\n                }\n              } else {\n                this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n              }\n\n              return this._passwordCapability.promise;\n            });\n            messageHandler.on(\"DataLoaded\", data => {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.length,\n                  total: data.length\n                });\n              }\n\n              this.downloadInfoCapability.resolve(data);\n            });\n            messageHandler.on(\"StartRenderPage\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const page = this.pageCache[data.pageIndex];\n\n              page._startRenderPage(data.transparency, data.cacheKey);\n            });\n            messageHandler.on(\"commonobj\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const [id, type, exportedData] = data;\n\n              if (this.commonObjs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Font\":\n                  const params = this._params;\n\n                  if (\"error\" in exportedData) {\n                    const exportedError = exportedData.error;\n                    (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                    this.commonObjs.resolve(id, exportedError);\n                    break;\n                  }\n\n                  let fontRegistry = null;\n\n                  if (params.pdfBug && globalThis.FontInspector?.enabled) {\n                    fontRegistry = {\n                      registerFont(font, url) {\n                        globalThis.FontInspector.fontAdded(font, url);\n                      }\n\n                    };\n                  }\n\n                  const font = new _font_loader.FontFaceObject(exportedData, {\n                    isEvalSupported: params.isEvalSupported,\n                    disableFontFace: params.disableFontFace,\n                    ignoreErrors: params.ignoreErrors,\n                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n                    fontRegistry\n                  });\n                  this.fontLoader.bind(font).catch(reason => {\n                    return messageHandler.sendWithPromise(\"FontFallback\", {\n                      id\n                    });\n                  }).finally(() => {\n                    if (!params.fontExtraProperties && font.data) {\n                      font.data = null;\n                    }\n\n                    this.commonObjs.resolve(id, font);\n                  });\n                  break;\n\n                case \"FontPath\":\n                case \"Image\":\n                  this.commonObjs.resolve(id, exportedData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown common object type ${type}`);\n              }\n            });\n            messageHandler.on(\"obj\", data => {\n              if (this.destroyed) {\n                return undefined;\n              }\n\n              const [id, pageIndex, type, imageData] = data;\n              const pageProxy = this.pageCache[pageIndex];\n\n              if (pageProxy.objs.has(id)) {\n                return undefined;\n              }\n\n              switch (type) {\n                case \"Image\":\n                  pageProxy.objs.resolve(id, imageData);\n                  const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n                  if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n                    pageProxy.cleanupAfterRender = true;\n                  }\n\n                  break;\n\n                case \"Pattern\":\n                  pageProxy.objs.resolve(id, imageData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown object type ${type}`);\n              }\n\n              return undefined;\n            });\n            messageHandler.on(\"DocProgress\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.loaded,\n                  total: data.total\n                });\n              }\n            });\n            messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n            messageHandler.on(\"FetchBuiltInCMap\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.CMapReaderFactory) {\n                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.CMapReaderFactory.fetch(data);\n            });\n            messageHandler.on(\"FetchStandardFontData\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.StandardFontDataFactory) {\n                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.StandardFontDataFactory.fetch(data);\n            });\n          }\n\n          _onUnsupportedFeature(_ref17) {\n            let {\n              featureId\n            } = _ref17;\n\n            if (this.destroyed) {\n              return;\n            }\n\n            if (this.loadingTask.onUnsupportedFeature) {\n              this.loadingTask.onUnsupportedFeature(featureId);\n            }\n          }\n\n          getData() {\n            return this.messageHandler.sendWithPromise(\"GetData\", null);\n          }\n\n          getPage(pageNumber) {\n            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n              return Promise.reject(new Error(\"Invalid page request\"));\n            }\n\n            const pageIndex = pageNumber - 1;\n\n            if (pageIndex in this.pagePromises) {\n              return this.pagePromises[pageIndex];\n            }\n\n            const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n              pageIndex\n            }).then(pageInfo => {\n              if (this.destroyed) {\n                throw new Error(\"Transport destroyed\");\n              }\n\n              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n              this.pageCache[pageIndex] = page;\n              return page;\n            });\n            this.pagePromises[pageIndex] = promise;\n            return promise;\n          }\n\n          getPageIndex(ref) {\n            return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n              ref\n            });\n          }\n\n          getAnnotations(pageIndex, intent) {\n            return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n              pageIndex,\n              intent\n            });\n          }\n\n          saveDocument() {\n            return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n              isPureXfa: !!this._htmlForXfa,\n              numPages: this._numPages,\n              annotationStorage: this.annotationStorage.serializable,\n              filename: this._fullReader?.filename ?? null\n            }).finally(() => {\n              this.annotationStorage.resetModified();\n            });\n          }\n\n          getFieldObjects() {\n            return this._getFieldObjectsPromise ||= this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n          }\n\n          hasJSActions() {\n            return this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\"HasJSActions\", null);\n          }\n\n          getCalculationOrderIds() {\n            return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n          }\n\n          getDestinations() {\n            return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n          }\n\n          getDestination(id) {\n            if (typeof id !== \"string\") {\n              return Promise.reject(new Error(\"Invalid destination request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetDestination\", {\n              id\n            });\n          }\n\n          getPageLabels() {\n            return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n          }\n\n          getPageLayout() {\n            return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n          }\n\n          getPageMode() {\n            return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n          }\n\n          getViewerPreferences() {\n            return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n          }\n\n          getOpenAction() {\n            return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n          }\n\n          getAttachments() {\n            return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n          }\n\n          getJavaScript() {\n            return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n          }\n\n          getDocJSActions() {\n            return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n          }\n\n          getPageJSActions(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n              pageIndex\n            });\n          }\n\n          getStructTree(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n              pageIndex\n            });\n          }\n\n          getOutline() {\n            return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n          }\n\n          getOptionalContentConfig() {\n            return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n              return new _optional_content_config.OptionalContentConfig(results);\n            });\n          }\n\n          getPermissions() {\n            return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n          }\n\n          getMetadata() {\n            return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n              return {\n                info: results[0],\n                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n                contentDispositionFilename: this._fullReader?.filename ?? null,\n                contentLength: this._fullReader?.contentLength ?? null\n              };\n            });\n          }\n\n          getMarkInfo() {\n            return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n          }\n\n          getStats() {\n            return this.messageHandler.sendWithPromise(\"GetStats\", null);\n          }\n\n          async startCleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n            if (this.destroyed) {\n              return;\n            }\n\n            for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n              const page = this.pageCache[i];\n\n              if (!page) {\n                continue;\n              }\n\n              const cleanupSuccessful = page.cleanup();\n\n              if (!cleanupSuccessful) {\n                throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n              }\n            }\n\n            this.commonObjs.clear();\n\n            if (!keepLoadedFonts) {\n              this.fontLoader.clear();\n            }\n\n            this._getFieldObjectsPromise = null;\n            this._hasJSActionsPromise = null;\n          }\n\n          get loadingParams() {\n            const params = this._params;\n            return (0, _util.shadow)(this, \"loadingParams\", {\n              disableAutoFetch: params.disableAutoFetch,\n              enableXfa: params.enableXfa\n            });\n          }\n\n        }\n\n        class PDFObjects {\n          constructor() {\n            this._objs = Object.create(null);\n          }\n\n          _ensureObj(objId) {\n            if (this._objs[objId]) {\n              return this._objs[objId];\n            }\n\n            return this._objs[objId] = {\n              capability: (0, _util.createPromiseCapability)(),\n              data: null,\n              resolved: false\n            };\n          }\n\n          get(objId) {\n            let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (callback) {\n              this._ensureObj(objId).capability.promise.then(callback);\n\n              return null;\n            }\n\n            const obj = this._objs[objId];\n\n            if (!obj || !obj.resolved) {\n              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n            }\n\n            return obj.data;\n          }\n\n          has(objId) {\n            const obj = this._objs[objId];\n            return obj?.resolved || false;\n          }\n\n          resolve(objId, data) {\n            const obj = this._ensureObj(objId);\n\n            obj.resolved = true;\n            obj.data = data;\n            obj.capability.resolve(data);\n          }\n\n          clear() {\n            this._objs = Object.create(null);\n          }\n\n        }\n\n        class RenderTask {\n          constructor(internalRenderTask) {\n            this._internalRenderTask = internalRenderTask;\n            this.onContinue = null;\n          }\n\n          get promise() {\n            return this._internalRenderTask.capability.promise;\n          }\n\n          cancel() {\n            this._internalRenderTask.cancel();\n          }\n\n        }\n\n        exports.RenderTask = RenderTask;\n\n        class InternalRenderTask {\n          static get canvasInUse() {\n            return (0, _util.shadow)(this, \"canvasInUse\", new WeakSet());\n          }\n\n          constructor(_ref18) {\n            let {\n              callback,\n              params,\n              objs,\n              commonObjs,\n              operatorList,\n              pageIndex,\n              canvasFactory,\n              useRequestAnimationFrame = false,\n              pdfBug = false\n            } = _ref18;\n            this.callback = callback;\n            this.params = params;\n            this.objs = objs;\n            this.commonObjs = commonObjs;\n            this.operatorListIdx = null;\n            this.operatorList = operatorList;\n            this._pageIndex = pageIndex;\n            this.canvasFactory = canvasFactory;\n            this._pdfBug = pdfBug;\n            this.running = false;\n            this.graphicsReadyCallback = null;\n            this.graphicsReady = false;\n            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n            this.cancelled = false;\n            this.capability = (0, _util.createPromiseCapability)();\n            this.task = new RenderTask(this);\n            this._cancelBound = this.cancel.bind(this);\n            this._continueBound = this._continue.bind(this);\n            this._scheduleNextBound = this._scheduleNext.bind(this);\n            this._nextBound = this._next.bind(this);\n            this._canvas = params.canvasContext.canvas;\n          }\n\n          get completed() {\n            return this.capability.promise.catch(function () {});\n          }\n\n          initializeGraphics(_ref19) {\n            let {\n              transparency = false,\n              optionalContentConfig\n            } = _ref19;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this._canvas) {\n              if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n                throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n              }\n\n              InternalRenderTask.canvasInUse.add(this._canvas);\n            }\n\n            if (this._pdfBug && globalThis.StepperManager?.enabled) {\n              this.stepper = globalThis.StepperManager.create(this._pageIndex);\n              this.stepper.init(this.operatorList);\n              this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n            }\n\n            const {\n              canvasContext,\n              viewport,\n              transform,\n              imageLayer,\n              background\n            } = this.params;\n            this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig);\n            this.gfx.beginDrawing({\n              transform,\n              viewport,\n              transparency,\n              background\n            });\n            this.operatorListIdx = 0;\n            this.graphicsReady = true;\n\n            if (this.graphicsReadyCallback) {\n              this.graphicsReadyCallback();\n            }\n          }\n\n          cancel() {\n            let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            this.running = false;\n            this.cancelled = true;\n\n            if (this.gfx) {\n              this.gfx.endDrawing();\n            }\n\n            if (this._canvas) {\n              InternalRenderTask.canvasInUse.delete(this._canvas);\n            }\n\n            this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n          }\n\n          operatorListChanged() {\n            if (!this.graphicsReady) {\n              if (!this.graphicsReadyCallback) {\n                this.graphicsReadyCallback = this._continueBound;\n              }\n\n              return;\n            }\n\n            if (this.stepper) {\n              this.stepper.updateOperatorList(this.operatorList);\n            }\n\n            if (this.running) {\n              return;\n            }\n\n            this._continue();\n          }\n\n          _continue() {\n            this.running = true;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this.task.onContinue) {\n              this.task.onContinue(this._scheduleNextBound);\n            } else {\n              this._scheduleNext();\n            }\n          }\n\n          _scheduleNext() {\n            if (this._useRequestAnimationFrame) {\n              window.requestAnimationFrame(() => {\n                this._nextBound().catch(this._cancelBound);\n              });\n            } else {\n              Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n            }\n          }\n\n          async _next() {\n            if (this.cancelled) {\n              return;\n            }\n\n            this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n            if (this.operatorListIdx === this.operatorList.argsArray.length) {\n              this.running = false;\n\n              if (this.operatorList.lastChunk) {\n                this.gfx.endDrawing();\n\n                if (this._canvas) {\n                  InternalRenderTask.canvasInUse.delete(this._canvas);\n                }\n\n                this.callback();\n              }\n            }\n          }\n\n        }\n\n        const version = '2.11.338';\n        exports.version = version;\n        const build = 'dedff3c98';\n        exports.build = build;\n        /***/\n      },\n      /* 7 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontLoader = exports.FontFaceObject = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseFontLoader {\n          constructor(_ref20) {\n            let {\n              docId,\n              onUnsupportedFeature,\n              ownerDocument = globalThis.document,\n              styleElement = null\n            } = _ref20;\n\n            if (this.constructor === BaseFontLoader) {\n              (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n            }\n\n            this.docId = docId;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this._document = ownerDocument;\n            this.nativeFontFaces = [];\n            this.styleElement = null;\n          }\n\n          addNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.push(nativeFontFace);\n\n            this._document.fonts.add(nativeFontFace);\n          }\n\n          insertRule(rule) {\n            let styleElement = this.styleElement;\n\n            if (!styleElement) {\n              styleElement = this.styleElement = this._document.createElement(\"style\");\n              styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n              this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n            }\n\n            const styleSheet = styleElement.sheet;\n            styleSheet.insertRule(rule, styleSheet.cssRules.length);\n          }\n\n          clear() {\n            for (const nativeFontFace of this.nativeFontFaces) {\n              this._document.fonts.delete(nativeFontFace);\n            }\n\n            this.nativeFontFaces.length = 0;\n\n            if (this.styleElement) {\n              this.styleElement.remove();\n              this.styleElement = null;\n            }\n          }\n\n          async bind(font) {\n            if (font.attached || font.missingFile) {\n              return;\n            }\n\n            font.attached = true;\n\n            if (this.isFontLoadingAPISupported) {\n              const nativeFontFace = font.createNativeFontFace();\n\n              if (nativeFontFace) {\n                this.addNativeFontFace(nativeFontFace);\n\n                try {\n                  await nativeFontFace.loaded;\n                } catch (ex) {\n                  this._onUnsupportedFeature({\n                    featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                  });\n\n                  (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                  font.disableFontFace = true;\n                  throw ex;\n                }\n              }\n\n              return;\n            }\n\n            const rule = font.createFontFaceRule();\n\n            if (rule) {\n              this.insertRule(rule);\n\n              if (this.isSyncFontLoadingSupported) {\n                return;\n              }\n\n              await new Promise(resolve => {\n                const request = this._queueLoadingCallback(resolve);\n\n                this._prepareFontLoadEvent([rule], [font], request);\n              });\n            }\n          }\n\n          _queueLoadingCallback(callback) {\n            (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n          }\n\n          get isFontLoadingAPISupported() {\n            const hasFonts = !!this._document?.fonts;\n            return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\n          }\n\n          get isSyncFontLoadingSupported() {\n            (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n          }\n\n          get _loadTestFont() {\n            (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n          }\n\n          _prepareFontLoadEvent(rules, fontsToLoad, request) {\n            (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n          }\n\n        }\n\n        let FontLoader;\n        exports.FontLoader = FontLoader;\n        {\n          exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n            constructor(params) {\n              super(params);\n              this.loadingContext = {\n                requests: [],\n                nextRequestId: 0\n              };\n              this.loadTestFontId = 0;\n            }\n\n            get isSyncFontLoadingSupported() {\n              let supported = false;\n\n              if (typeof navigator === \"undefined\") {\n                supported = true;\n              } else {\n                const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n                if (m?.[1] >= 14) {\n                  supported = true;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n            }\n\n            _queueLoadingCallback(callback) {\n              function completeRequest() {\n                (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n                request.done = true;\n\n                while (context.requests.length > 0 && context.requests[0].done) {\n                  const otherRequest = context.requests.shift();\n                  setTimeout(otherRequest.callback, 0);\n                }\n              }\n\n              const context = this.loadingContext;\n              const request = {\n                id: `pdfjs-font-loading-${context.nextRequestId++}`,\n                done: false,\n                complete: completeRequest,\n                callback\n              };\n              context.requests.push(request);\n              return request;\n            }\n\n            get _loadTestFont() {\n              const getLoadTestFont = function () {\n                return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n              };\n\n              return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n            }\n\n            _prepareFontLoadEvent(rules, fonts, request) {\n              function int32(data, offset) {\n                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n              }\n\n              function spliceString(s, offset, remove, insert) {\n                const chunk1 = s.substring(0, offset);\n                const chunk2 = s.substring(offset + remove);\n                return chunk1 + insert + chunk2;\n              }\n\n              let i, ii;\n\n              const canvas = this._document.createElement(\"canvas\");\n\n              canvas.width = 1;\n              canvas.height = 1;\n              const ctx = canvas.getContext(\"2d\");\n              let called = 0;\n\n              function isFontReady(name, callback) {\n                called++;\n\n                if (called > 30) {\n                  (0, _util.warn)(\"Load test font never loaded.\");\n                  callback();\n                  return;\n                }\n\n                ctx.font = \"30px \" + name;\n                ctx.fillText(\".\", 0, 20);\n                const imageData = ctx.getImageData(0, 0, 1, 1);\n\n                if (imageData.data[3] > 0) {\n                  callback();\n                  return;\n                }\n\n                setTimeout(isFontReady.bind(null, name, callback));\n              }\n\n              const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n              let data = this._loadTestFont;\n              const COMMENT_OFFSET = 976;\n              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n              const CFF_CHECKSUM_OFFSET = 16;\n              const XXXX_VALUE = 0x58585858;\n              let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n              }\n\n              if (i < loadTestFontId.length) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n              }\n\n              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n              const url = `url(data:font/opentype;base64,${btoa(data)});`;\n              const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n              this.insertRule(rule);\n              const names = [];\n\n              for (const font of fonts) {\n                names.push(font.loadedName);\n              }\n\n              names.push(loadTestFontId);\n\n              const div = this._document.createElement(\"div\");\n\n              div.style.visibility = \"hidden\";\n              div.style.width = div.style.height = \"10px\";\n              div.style.position = \"absolute\";\n              div.style.top = div.style.left = \"0px\";\n\n              for (const name of names) {\n                const span = this._document.createElement(\"span\");\n\n                span.textContent = \"Hi\";\n                span.style.fontFamily = name;\n                div.appendChild(span);\n              }\n\n              this._document.body.appendChild(div);\n\n              isFontReady(loadTestFontId, () => {\n                this._document.body.removeChild(div);\n\n                request.complete();\n              });\n            }\n\n          };\n        }\n\n        class FontFaceObject {\n          constructor(translatedData, _ref21) {\n            let {\n              isEvalSupported = true,\n              disableFontFace = false,\n              ignoreErrors = false,\n              onUnsupportedFeature,\n              fontRegistry = null\n            } = _ref21;\n            this.compiledGlyphs = Object.create(null);\n\n            for (const i in translatedData) {\n              this[i] = translatedData[i];\n            }\n\n            this.isEvalSupported = isEvalSupported !== false;\n            this.disableFontFace = disableFontFace === true;\n            this.ignoreErrors = ignoreErrors === true;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this.fontRegistry = fontRegistry;\n          }\n\n          createNativeFontFace() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            let nativeFontFace;\n\n            if (!this.cssFontInfo) {\n              nativeFontFace = new FontFace(this.loadedName, this.data, {});\n            } else {\n              const css = {\n                weight: this.cssFontInfo.fontWeight\n              };\n\n              if (this.cssFontInfo.italicAngle) {\n                css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n              }\n\n              nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this);\n            }\n\n            return nativeFontFace;\n          }\n\n          createFontFaceRule() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const data = (0, _util.bytesToString)(this.data);\n            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n            let rule;\n\n            if (!this.cssFontInfo) {\n              rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n            } else {\n              let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n\n              if (this.cssFontInfo.italicAngle) {\n                css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n              }\n\n              rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this, url);\n            }\n\n            return rule;\n          }\n\n          getPathGenerator(objs, character) {\n            if (this.compiledGlyphs[character] !== undefined) {\n              return this.compiledGlyphs[character];\n            }\n\n            let cmds;\n\n            try {\n              cmds = objs.get(this.loadedName + \"_path_\" + character);\n            } catch (ex) {\n              if (!this.ignoreErrors) {\n                throw ex;\n              }\n\n              this._onUnsupportedFeature({\n                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n              });\n\n              (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n              return this.compiledGlyphs[character] = function (c, size) {};\n            }\n\n            if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n              const jsBuf = [];\n\n              for (const current of cmds) {\n                const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n                jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n              }\n\n              return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\n            }\n\n            return this.compiledGlyphs[character] = function (c, size) {\n              for (const current of cmds) {\n                if (current.cmd === \"scale\") {\n                  current.args = [size, -size];\n                }\n\n                c[current.cmd].apply(c, current.args);\n              }\n            };\n          }\n\n        }\n\n        exports.FontFaceObject = FontFaceObject;\n        /***/\n      },\n      /* 8 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NodeStandardFontDataFactory = exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _util = __w_pdfjs_require__(2);\n\n        let NodeCanvasFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n          }\n\n        };\n        exports.NodeCanvasFactory = NodeCanvasFactory;\n        let NodeCMapReaderFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n          }\n\n        };\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n        let NodeStandardFontDataFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeStandardFontDataFactory\");\n          }\n\n        };\n        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;\n\n        if (_is_node.isNodeJS) {\n          const fetchData = function (url) {\n            return new Promise((resolve, reject) => {\n              const fs = require(\"fs\");\n\n              fs.readFile(url, (error, data) => {\n                if (error || !data) {\n                  reject(new Error(error));\n                  return;\n                }\n\n                resolve(new Uint8Array(data));\n              });\n            });\n          };\n\n          exports.NodeCanvasFactory = NodeCanvasFactory = class extends _base_factory.BaseCanvasFactory {\n            _createCanvas(width, height) {\n              const Canvas = require(\"canvas\");\n\n              return Canvas.createCanvas(width, height);\n            }\n\n          };\n          exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _base_factory.BaseCMapReaderFactory {\n            _fetchData(url, compressionType) {\n              return fetchData(url).then(data => {\n                return {\n                  cMapData: data,\n                  compressionType\n                };\n              });\n            }\n\n          };\n          exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory = class extends _base_factory.BaseStandardFontDataFactory {\n            _fetchData(url) {\n              return fetchData(url);\n            }\n\n          };\n        }\n        /***/\n\n      },\n      /* 9 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationStorage = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class AnnotationStorage {\n          constructor() {\n            this._storage = new Map();\n            this._timeStamp = Date.now();\n            this._modified = false;\n            this.onSetModified = null;\n            this.onResetModified = null;\n          }\n\n          getValue(key, defaultValue) {\n            const value = this._storage.get(key);\n\n            if (value === undefined) {\n              return defaultValue;\n            }\n\n            return Object.assign(defaultValue, value);\n          }\n\n          setValue(key, value) {\n            const obj = this._storage.get(key);\n\n            let modified = false;\n\n            if (obj !== undefined) {\n              for (const [entry, val] of Object.entries(value)) {\n                if (obj[entry] !== val) {\n                  modified = true;\n                  obj[entry] = val;\n                }\n              }\n            } else {\n              modified = true;\n\n              this._storage.set(key, value);\n            }\n\n            if (modified) {\n              this._timeStamp = Date.now();\n\n              this._setModified();\n            }\n          }\n\n          getAll() {\n            return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;\n          }\n\n          get size() {\n            return this._storage.size;\n          }\n\n          _setModified() {\n            if (!this._modified) {\n              this._modified = true;\n\n              if (typeof this.onSetModified === \"function\") {\n                this.onSetModified();\n              }\n            }\n          }\n\n          resetModified() {\n            if (this._modified) {\n              this._modified = false;\n\n              if (typeof this.onResetModified === \"function\") {\n                this.onResetModified();\n              }\n            }\n          }\n\n          get serializable() {\n            return this._storage.size > 0 ? this._storage : null;\n          }\n\n          get lastModified() {\n            return this._timeStamp.toString();\n          }\n\n        }\n\n        exports.AnnotationStorage = AnnotationStorage;\n        /***/\n      },\n      /* 10 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CanvasGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _pattern_helper = __w_pdfjs_require__(11);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const MAX_CACHED_CANVAS_PATTERNS = 2;\n        const EXECUTION_TIME = 15;\n        const EXECUTION_STEPS = 10;\n        const COMPILE_TYPE3_GLYPHS = true;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n        const LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n        function addContextCurrentTransform(ctx) {\n          if (ctx.mozCurrentTransform) {\n            return;\n          }\n\n          ctx._originalSave = ctx.save;\n          ctx._originalRestore = ctx.restore;\n          ctx._originalRotate = ctx.rotate;\n          ctx._originalScale = ctx.scale;\n          ctx._originalTranslate = ctx.translate;\n          ctx._originalTransform = ctx.transform;\n          ctx._originalSetTransform = ctx.setTransform;\n          ctx._originalResetTransform = ctx.resetTransform;\n          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n          ctx._transformStack = [];\n\n          try {\n            const desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), \"lineWidth\");\n            ctx._setLineWidth = desc.set;\n            ctx._getLineWidth = desc.get;\n            Object.defineProperty(ctx, \"lineWidth\", {\n              set: function setLineWidth(width) {\n                this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n              },\n              get: function getLineWidth() {\n                return this._getLineWidth();\n              }\n            });\n          } catch (_) {}\n\n          Object.defineProperty(ctx, \"mozCurrentTransform\", {\n            get: function getCurrentTransform() {\n              return this._transformMatrix;\n            }\n          });\n          Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n            get: function getCurrentTransformInverse() {\n              const [a, b, c, d, e, f] = this._transformMatrix;\n              const ad_bc = a * d - b * c;\n              const bc_ad = b * c - a * d;\n              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n            }\n          });\n\n          ctx.save = function ctxSave() {\n            const old = this._transformMatrix;\n\n            this._transformStack.push(old);\n\n            this._transformMatrix = old.slice(0, 6);\n\n            this._originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            const prev = this._transformStack.pop();\n\n            if (prev) {\n              this._transformMatrix = prev;\n\n              this._originalRestore();\n            }\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            const m = this._transformMatrix;\n            m[4] = m[0] * x + m[2] * y + m[4];\n            m[5] = m[1] * x + m[3] * y + m[5];\n\n            this._originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            const m = this._transformMatrix;\n            m[0] *= x;\n            m[1] *= x;\n            m[2] *= y;\n            m[3] *= y;\n\n            this._originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n            ctx._originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            this._transformMatrix = [a, b, c, d, e, f];\n\n            ctx._originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.resetTransform = function ctxResetTransform() {\n            this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n            ctx._originalResetTransform();\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            const cosValue = Math.cos(angle);\n            const sinValue = Math.sin(angle);\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n            this._originalRotate(angle);\n          };\n        }\n\n        class CachedCanvases {\n          constructor(canvasFactory) {\n            this.canvasFactory = canvasFactory;\n            this.cache = Object.create(null);\n          }\n\n          getCanvas(id, width, height, trackTransform) {\n            let canvasEntry;\n\n            if (this.cache[id] !== undefined) {\n              canvasEntry = this.cache[id];\n              this.canvasFactory.reset(canvasEntry, width, height);\n              canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n            } else {\n              canvasEntry = this.canvasFactory.create(width, height);\n              this.cache[id] = canvasEntry;\n            }\n\n            if (trackTransform) {\n              addContextCurrentTransform(canvasEntry.context);\n            }\n\n            return canvasEntry;\n          }\n\n          clear() {\n            for (const id in this.cache) {\n              const canvasEntry = this.cache[id];\n              this.canvasFactory.destroy(canvasEntry);\n              delete this.cache[id];\n            }\n          }\n\n        }\n\n        class LRUCache {\n          constructor() {\n            let maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._cache = new Map();\n            this._maxSize = maxSize;\n          }\n\n          has(key) {\n            return this._cache.has(key);\n          }\n\n          get(key) {\n            if (this._cache.has(key)) {\n              const value = this._cache.get(key);\n\n              this._cache.delete(key);\n\n              this._cache.set(key, value);\n            }\n\n            return this._cache.get(key);\n          }\n\n          set(key, value) {\n            if (this._maxSize <= 0) {\n              return;\n            }\n\n            if (this._cache.size + 1 > this._maxSize) {\n              this._cache.delete(this._cache.keys().next().value);\n            }\n\n            this._cache.set(key, value);\n          }\n\n          clear() {\n            this._cache.clear();\n          }\n\n        }\n\n        function compileType3Glyph(imgData) {\n          const POINT_TO_PROCESS_LIMIT = 1000;\n          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n          const width = imgData.width,\n                height = imgData.height,\n                width1 = width + 1;\n          let i, ii, j, j0;\n          const points = new Uint8Array(width1 * (height + 1));\n          const lineSize = width + 7 & ~7,\n                data0 = imgData.data;\n          const data = new Uint8Array(lineSize * height);\n          let pos = 0;\n\n          for (i = 0, ii = data0.length; i < ii; i++) {\n            const elem = data0[i];\n            let mask = 128;\n\n            while (mask > 0) {\n              data[pos++] = elem & mask ? 0 : 255;\n              mask >>= 1;\n            }\n          }\n\n          let count = 0;\n          pos = 0;\n\n          if (data[pos] !== 0) {\n            points[0] = 1;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j] = data[pos] ? 2 : 1;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j] = 2;\n            ++count;\n          }\n\n          for (i = 1; i < height; i++) {\n            pos = i * lineSize;\n            j0 = i * width1;\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0] = data[pos] ? 1 : 8;\n              ++count;\n            }\n\n            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n            for (j = 1; j < width; j++) {\n              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n              if (POINT_TYPES[sum]) {\n                points[j0 + j] = POINT_TYPES[sum];\n                ++count;\n              }\n\n              pos++;\n            }\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0 + j] = data[pos] ? 2 : 4;\n              ++count;\n            }\n\n            if (count > POINT_TO_PROCESS_LIMIT) {\n              return null;\n            }\n          }\n\n          pos = lineSize * (height - 1);\n          j0 = i * width1;\n\n          if (data[pos] !== 0) {\n            points[j0] = 8;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j0 + j] = data[pos] ? 4 : 8;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j0 + j] = 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n\n          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n          const outlines = [];\n\n          for (i = 0; count && i <= height; i++) {\n            let p = i * width1;\n            const end = p + width;\n\n            while (p < end && !points[p]) {\n              p++;\n            }\n\n            if (p === end) {\n              continue;\n            }\n\n            const coords = [p % width1, i];\n            const p0 = p;\n            let type = points[p];\n\n            do {\n              const step = steps[type];\n\n              do {\n                p += step;\n              } while (!points[p]);\n\n              const pp = points[p];\n\n              if (pp !== 5 && pp !== 10) {\n                type = pp;\n                points[p] = 0;\n              } else {\n                type = pp & 0x33 * type >> 4;\n                points[p] &= type >> 2 | type << 2;\n              }\n\n              coords.push(p % width1, p / width1 | 0);\n\n              if (!points[p]) {\n                --count;\n              }\n            } while (p0 !== p);\n\n            outlines.push(coords);\n            --i;\n          }\n\n          const drawOutline = function (c) {\n            c.save();\n            c.scale(1 / width, -1 / height);\n            c.translate(0, -height);\n            c.beginPath();\n\n            for (let k = 0, kk = outlines.length; k < kk; k++) {\n              const o = outlines[k];\n              c.moveTo(o[0], o[1]);\n\n              for (let l = 2, ll = o.length; l < ll; l += 2) {\n                c.lineTo(o[l], o[l + 1]);\n              }\n            }\n\n            c.fill();\n            c.beginPath();\n            c.restore();\n          };\n\n          return drawOutline;\n        }\n\n        class CanvasExtraState {\n          constructor() {\n            this.alphaIsShape = false;\n            this.fontSize = 0;\n            this.fontSizeScale = 1;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.textMatrixScale = 1;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textRise = 0;\n            this.fillColor = \"#000000\";\n            this.strokeColor = \"#000000\";\n            this.patternFill = false;\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.activeSMask = null;\n            this.resumeSMaskCtx = null;\n            this.transferMaps = null;\n          }\n\n          clone() {\n            return Object.create(this);\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n        }\n\n        function putBinaryImageData(ctx, imgData) {\n          let transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n            ctx.putImageData(imgData, 0, 0);\n            return;\n          }\n\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0,\n              destPos;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n          let i, j, thisChunkHeight, elemsInThisChunk;\n          let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n          if (transferMaps) {\n            switch (transferMaps.length) {\n              case 1:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[0];\n                transferMapBlue = transferMaps[0];\n                transferMapGray = transferMaps[0];\n                break;\n\n              case 4:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[1];\n                transferMapBlue = transferMaps[2];\n                transferMapGray = transferMaps[3];\n                break;\n            }\n          }\n\n          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n            const srcLength = src.byteLength;\n            const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n            const dest32DataLength = dest32.length;\n            const fullSrcDiff = width + 7 >> 3;\n            let white = 0xffffffff;\n            let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n            if (transferMapGray) {\n              if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n                [white, black] = [black, white];\n              }\n            }\n\n            for (i = 0; i < totalChunks; i++) {\n              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              destPos = 0;\n\n              for (j = 0; j < thisChunkHeight; j++) {\n                const srcDiff = srcLength - srcPos;\n                let k = 0;\n                const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                const kEndUnrolled = kEnd & ~7;\n                let mask = 0;\n                let srcByte = 0;\n\n                for (; k < kEndUnrolled; k += 8) {\n                  srcByte = src[srcPos++];\n                  dest32[destPos++] = srcByte & 128 ? white : black;\n                  dest32[destPos++] = srcByte & 64 ? white : black;\n                  dest32[destPos++] = srcByte & 32 ? white : black;\n                  dest32[destPos++] = srcByte & 16 ? white : black;\n                  dest32[destPos++] = srcByte & 8 ? white : black;\n                  dest32[destPos++] = srcByte & 4 ? white : black;\n                  dest32[destPos++] = srcByte & 2 ? white : black;\n                  dest32[destPos++] = srcByte & 1 ? white : black;\n                }\n\n                for (; k < kEnd; k++) {\n                  if (mask === 0) {\n                    srcByte = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest32[destPos++] = srcByte & mask ? white : black;\n                  mask >>= 1;\n                }\n              }\n\n              while (destPos < dest32DataLength) {\n                dest32[destPos++] = 0;\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            j = 0;\n            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n            for (i = 0; i < fullChunks; i++) {\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n              srcPos += elemsInThisChunk;\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n              j += FULL_CHUNK_HEIGHT;\n            }\n\n            if (i < totalChunks) {\n              elemsInThisChunk = width * partialChunkHeight * 4;\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            thisChunkHeight = FULL_CHUNK_HEIGHT;\n            elemsInThisChunk = width * thisChunkHeight;\n\n            for (i = 0; i < totalChunks; i++) {\n              if (i >= fullChunks) {\n                thisChunkHeight = partialChunkHeight;\n                elemsInThisChunk = width * thisChunkHeight;\n              }\n\n              destPos = 0;\n\n              for (j = elemsInThisChunk; j--;) {\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = 255;\n              }\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < destPos; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else {\n            throw new Error(`bad image kind: ${imgData.kind}`);\n          }\n        }\n\n        function putBinaryImageMask(ctx, imgData) {\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n\n          for (let i = 0; i < totalChunks; i++) {\n            const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n            let destPos = 3;\n\n            for (let j = 0; j < thisChunkHeight; j++) {\n              let elem,\n                  mask = 0;\n\n              for (let k = 0; k < width; k++) {\n                if (!mask) {\n                  elem = src[srcPos++];\n                  mask = 128;\n                }\n\n                dest[destPos] = elem & mask ? 0 : 255;\n                destPos += 4;\n                mask >>= 1;\n              }\n            }\n\n            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n          }\n        }\n\n        function copyCtxState(sourceCtx, destCtx) {\n          const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n          for (let i = 0, ii = properties.length; i < ii; i++) {\n            const property = properties[i];\n\n            if (sourceCtx[property] !== undefined) {\n              destCtx[property] = sourceCtx[property];\n            }\n          }\n\n          if (sourceCtx.setLineDash !== undefined) {\n            destCtx.setLineDash(sourceCtx.getLineDash());\n            destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n          }\n        }\n\n        function resetCtxToDefault(ctx) {\n          ctx.strokeStyle = \"#000000\";\n          ctx.fillStyle = \"#000000\";\n          ctx.fillRule = \"nonzero\";\n          ctx.globalAlpha = 1;\n          ctx.lineWidth = 1;\n          ctx.lineCap = \"butt\";\n          ctx.lineJoin = \"miter\";\n          ctx.miterLimit = 10;\n          ctx.globalCompositeOperation = \"source-over\";\n          ctx.font = \"10px sans-serif\";\n\n          if (ctx.setLineDash !== undefined) {\n            ctx.setLineDash([]);\n            ctx.lineDashOffset = 0;\n          }\n        }\n\n        function composeSMaskBackdrop(bytes, r0, g0, b0) {\n          const length = bytes.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = bytes[i];\n\n            if (alpha === 0) {\n              bytes[i - 3] = r0;\n              bytes[i - 2] = g0;\n              bytes[i - 1] = b0;\n            } else if (alpha < 255) {\n              const alpha_ = 255 - alpha;\n              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n            }\n          }\n        }\n\n        function composeSMaskAlpha(maskData, layerData, transferMap) {\n          const length = maskData.length;\n          const scale = 1 / 255;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n            layerData[i] = layerData[i] * alpha * scale | 0;\n          }\n        }\n\n        function composeSMaskLuminosity(maskData, layerData, transferMap) {\n          const length = maskData.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n          }\n        }\n\n        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n          const hasBackdrop = !!backdrop;\n          const r0 = hasBackdrop ? backdrop[0] : 0;\n          const g0 = hasBackdrop ? backdrop[1] : 0;\n          const b0 = hasBackdrop ? backdrop[2] : 0;\n          let composeFn;\n\n          if (subtype === \"Luminosity\") {\n            composeFn = composeSMaskLuminosity;\n          } else {\n            composeFn = composeSMaskAlpha;\n          }\n\n          const PIXELS_TO_PROCESS = 1048576;\n          const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n          for (let row = 0; row < height; row += chunkSize) {\n            const chunkHeight = Math.min(chunkSize, height - row);\n            const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n            const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n            if (hasBackdrop) {\n              composeSMaskBackdrop(maskData.data, r0, g0, b0);\n            }\n\n            composeFn(maskData.data, layerData.data, transferMap);\n            maskCtx.putImageData(layerData, 0, row);\n          }\n        }\n\n        function composeSMask(ctx, smask, layerCtx) {\n          const mask = smask.canvas;\n          const maskCtx = smask.context;\n          ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n          genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, smask.backdrop, smask.transferMap);\n          ctx.drawImage(mask, 0, 0);\n        }\n\n        function getImageSmoothingEnabled(transform, interpolate) {\n          const scale = _util.Util.singularValueDecompose2dScale(transform);\n\n          scale[0] = Math.fround(scale[0]);\n          scale[1] = Math.fround(scale[1]);\n          const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n\n          if (interpolate !== undefined) {\n            return interpolate;\n          } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n            return true;\n          }\n\n          return false;\n        }\n\n        const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n        const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n        const NORMAL_CLIP = {};\n        const EO_CLIP = {};\n\n        class CanvasGraphics {\n          constructor(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig) {\n            this.ctx = canvasCtx;\n            this.current = new CanvasExtraState();\n            this.stateStack = [];\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.res = null;\n            this.xobjs = null;\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.canvasFactory = canvasFactory;\n            this.imageLayer = imageLayer;\n            this.groupStack = [];\n            this.processingType3 = null;\n            this.baseTransform = null;\n            this.baseTransformStack = [];\n            this.groupLevel = 0;\n            this.smaskStack = [];\n            this.smaskCounter = 0;\n            this.tempSMask = null;\n            this.contentVisible = true;\n            this.markedContentStack = [];\n            this.optionalContentConfig = optionalContentConfig;\n            this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n            this.cachedCanvasPatterns = new LRUCache(MAX_CACHED_CANVAS_PATTERNS);\n            this.cachedPatterns = new Map();\n\n            if (canvasCtx) {\n              addContextCurrentTransform(canvasCtx);\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          beginDrawing(_ref22) {\n            let {\n              transform,\n              viewport,\n              transparency = false,\n              background = null\n            } = _ref22;\n            const width = this.ctx.canvas.width;\n            const height = this.ctx.canvas.height;\n            this.ctx.save();\n            this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n            this.ctx.fillRect(0, 0, width, height);\n            this.ctx.restore();\n\n            if (transparency) {\n              const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n              this.compositeCtx = this.ctx;\n              this.transparentCanvas = transparentCanvas.canvas;\n              this.ctx = transparentCanvas.context;\n              this.ctx.save();\n              this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n            }\n\n            this.ctx.save();\n            resetCtxToDefault(this.ctx);\n\n            if (transform) {\n              this.ctx.transform.apply(this.ctx, transform);\n            }\n\n            this.ctx.transform.apply(this.ctx, viewport.transform);\n            this.baseTransform = this.ctx.mozCurrentTransform.slice();\n            this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n            if (this.imageLayer) {\n              this.imageLayer.beginLayout();\n            }\n          }\n\n          executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n            const argsArray = operatorList.argsArray;\n            const fnArray = operatorList.fnArray;\n            let i = executionStartIdx || 0;\n            const argsArrayLen = argsArray.length;\n\n            if (argsArrayLen === i) {\n              return i;\n            }\n\n            const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n            const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n            let steps = 0;\n            const commonObjs = this.commonObjs;\n            const objs = this.objs;\n            let fnId;\n\n            while (true) {\n              if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                stepper.breakIt(i, continueCallback);\n                return i;\n              }\n\n              fnId = fnArray[i];\n\n              if (fnId !== _util.OPS.dependency) {\n                this[fnId].apply(this, argsArray[i]);\n              } else {\n                for (const depObjId of argsArray[i]) {\n                  const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n                  if (!objsPool.has(depObjId)) {\n                    objsPool.get(depObjId, continueCallback);\n                    return i;\n                  }\n                }\n              }\n\n              i++;\n\n              if (i === argsArrayLen) {\n                return i;\n              }\n\n              if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                if (Date.now() > endTime) {\n                  continueCallback();\n                  return i;\n                }\n\n                steps = 0;\n              }\n            }\n          }\n\n          endDrawing() {\n            while (this.stateStack.length || this.current.activeSMask !== null) {\n              this.restore();\n            }\n\n            this.ctx.restore();\n\n            if (this.transparentCanvas) {\n              this.ctx = this.compositeCtx;\n              this.ctx.save();\n              this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n              this.ctx.drawImage(this.transparentCanvas, 0, 0);\n              this.ctx.restore();\n              this.transparentCanvas = null;\n            }\n\n            this.cachedCanvases.clear();\n            this.cachedCanvasPatterns.clear();\n            this.cachedPatterns.clear();\n\n            if (this.imageLayer) {\n              this.imageLayer.endLayout();\n            }\n          }\n\n          _scaleImage(img, inverseTransform) {\n            const width = img.width;\n            const height = img.height;\n            let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n            let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n            let paintWidth = width,\n                paintHeight = height;\n            let tmpCanvasId = \"prescale1\";\n            let tmpCanvas, tmpCtx;\n\n            while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n              let newWidth = paintWidth,\n                  newHeight = paintHeight;\n\n              if (widthScale > 2 && paintWidth > 1) {\n                newWidth = Math.ceil(paintWidth / 2);\n                widthScale /= paintWidth / newWidth;\n              }\n\n              if (heightScale > 2 && paintHeight > 1) {\n                newHeight = Math.ceil(paintHeight / 2);\n                heightScale /= paintHeight / newHeight;\n              }\n\n              tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n              tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, newWidth, newHeight);\n              tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n              img = tmpCanvas.canvas;\n              paintWidth = newWidth;\n              paintHeight = newHeight;\n              tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n            }\n\n            return {\n              img,\n              paintWidth,\n              paintHeight\n            };\n          }\n\n          _createMaskCanvas(img) {\n            const ctx = this.ctx;\n            const width = img.width,\n                  height = img.height;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n            const maskCtx = maskCanvas.context;\n            putBinaryImageMask(maskCtx, img);\n            const objToCanvas = ctx.mozCurrentTransform;\n\n            let maskToCanvas = _util.Util.transform(objToCanvas, [1 / width, 0, 0, -1 / height, 0, 0]);\n\n            maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n\n            const cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);\n\n            const cord2 = _util.Util.applyTransform([width, height], maskToCanvas);\n\n            const rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n\n            const drawnWidth = Math.ceil(rect[2] - rect[0]);\n            const drawnHeight = Math.ceil(rect[3] - rect[1]);\n            const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight, true);\n            const fillCtx = fillCanvas.context;\n            const offsetX = Math.min(cord1[0], cord2[0]);\n            const offsetY = Math.min(cord1[1], cord2[1]);\n            fillCtx.translate(-offsetX, -offsetY);\n            fillCtx.transform.apply(fillCtx, maskToCanvas);\n\n            const scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);\n\n            fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(fillCtx.mozCurrentTransform, img.interpolate);\n            fillCtx.drawImage(scaled.img, 0, 0, scaled.img.width, scaled.img.height, 0, 0, width, height);\n            fillCtx.globalCompositeOperation = \"source-in\";\n\n            const inverse = _util.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);\n\n            fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, false) : fillColor;\n            fillCtx.fillRect(0, 0, width, height);\n            return {\n              canvas: fillCanvas.canvas,\n              offsetX: Math.round(offsetX),\n              offsetY: Math.round(offsetY)\n            };\n          }\n\n          setLineWidth(width) {\n            this.current.lineWidth = width;\n            this.ctx.lineWidth = width;\n          }\n\n          setLineCap(style) {\n            this.ctx.lineCap = LINE_CAP_STYLES[style];\n          }\n\n          setLineJoin(style) {\n            this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n          }\n\n          setMiterLimit(limit) {\n            this.ctx.miterLimit = limit;\n          }\n\n          setDash(dashArray, dashPhase) {\n            const ctx = this.ctx;\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash(dashArray);\n              ctx.lineDashOffset = dashPhase;\n            }\n          }\n\n          setRenderingIntent(intent) {}\n\n          setFlatness(flatness) {}\n\n          setGState(states) {\n            for (let i = 0, ii = states.length; i < ii; i++) {\n              const state = states[i];\n              const key = state[0];\n              const value = state[1];\n\n              switch (key) {\n                case \"LW\":\n                  this.setLineWidth(value);\n                  break;\n\n                case \"LC\":\n                  this.setLineCap(value);\n                  break;\n\n                case \"LJ\":\n                  this.setLineJoin(value);\n                  break;\n\n                case \"ML\":\n                  this.setMiterLimit(value);\n                  break;\n\n                case \"D\":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case \"RI\":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case \"FL\":\n                  this.setFlatness(value);\n                  break;\n\n                case \"Font\":\n                  this.setFont(value[0], value[1]);\n                  break;\n\n                case \"CA\":\n                  this.current.strokeAlpha = state[1];\n                  break;\n\n                case \"ca\":\n                  this.current.fillAlpha = state[1];\n                  this.ctx.globalAlpha = state[1];\n                  break;\n\n                case \"BM\":\n                  this.ctx.globalCompositeOperation = value;\n                  break;\n\n                case \"SMask\":\n                  if (this.current.activeSMask) {\n                    if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                      this.suspendSMaskGroup();\n                    } else {\n                      this.endSMaskGroup();\n                    }\n                  }\n\n                  this.current.activeSMask = value ? this.tempSMask : null;\n\n                  if (this.current.activeSMask) {\n                    this.beginSMaskGroup();\n                  }\n\n                  this.tempSMask = null;\n                  break;\n\n                case \"TR\":\n                  this.current.transferMaps = value;\n              }\n            }\n          }\n\n          beginSMaskGroup() {\n            const activeSMask = this.current.activeSMask;\n            const drawnWidth = activeSMask.canvas.width;\n            const drawnHeight = activeSMask.canvas.height;\n            const cacheId = \"smaskGroupAt\" + this.groupLevel;\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            const currentCtx = this.ctx;\n            const currentTransform = currentCtx.mozCurrentTransform;\n            this.ctx.save();\n            const groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n            groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n            activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          }\n\n          suspendSMaskGroup() {\n            const groupCtx = this.ctx;\n            this.groupLevel--;\n            this.ctx = this.groupStack.pop();\n            composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n            this.ctx.restore();\n            this.ctx.save();\n            copyCtxState(groupCtx, this.ctx);\n            this.current.resumeSMaskCtx = groupCtx;\n\n            const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n            this.ctx.transform.apply(this.ctx, deltaTransform);\n            groupCtx.save();\n            groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n            groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n            groupCtx.restore();\n          }\n\n          resumeSMaskGroup() {\n            const groupCtx = this.current.resumeSMaskCtx;\n            const currentCtx = this.ctx;\n            this.ctx = groupCtx;\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          }\n\n          endSMaskGroup() {\n            const groupCtx = this.ctx;\n            this.groupLevel--;\n            this.ctx = this.groupStack.pop();\n            composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n            this.ctx.restore();\n            copyCtxState(groupCtx, this.ctx);\n\n            const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n            this.ctx.transform.apply(this.ctx, deltaTransform);\n          }\n\n          save() {\n            this.ctx.save();\n            const old = this.current;\n            this.stateStack.push(old);\n            this.current = old.clone();\n            this.current.resumeSMaskCtx = null;\n          }\n\n          restore() {\n            if (this.current.resumeSMaskCtx) {\n              this.resumeSMaskGroup();\n            }\n\n            if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n              this.endSMaskGroup();\n            }\n\n            if (this.stateStack.length !== 0) {\n              this.current = this.stateStack.pop();\n              this.ctx.restore();\n              this.pendingClip = null;\n              this._cachedGetSinglePixelWidth = null;\n            } else {\n              this.current.activeSMask = null;\n            }\n          }\n\n          transform(a, b, c, d, e, f) {\n            this.ctx.transform(a, b, c, d, e, f);\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          constructPath(ops, args) {\n            const ctx = this.ctx;\n            const current = this.current;\n            let x = current.x,\n                y = current.y;\n\n            for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n              switch (ops[i] | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  const width = args[j++];\n                  const height = args[j++];\n                  const xw = x + width;\n                  const yh = y + height;\n                  ctx.moveTo(x, y);\n\n                  if (width === 0 || height === 0) {\n                    ctx.lineTo(xw, yh);\n                  } else {\n                    ctx.lineTo(xw, y);\n                    ctx.lineTo(xw, yh);\n                    ctx.lineTo(x, yh);\n                  }\n\n                  ctx.closePath();\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.moveTo(x, y);\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.lineTo(x, y);\n                  break;\n\n                case _util.OPS.curveTo:\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  ctx.closePath();\n                  break;\n              }\n            }\n\n            current.setCurrentPoint(x, y);\n          }\n\n          closePath() {\n            this.ctx.closePath();\n          }\n\n          stroke(consumePath) {\n            consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n            const ctx = this.ctx;\n            const strokeColor = this.current.strokeColor;\n            ctx.globalAlpha = this.current.strokeAlpha;\n\n            if (this.contentVisible) {\n              if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n                const lineWidth = this.getSinglePixelWidth();\n                ctx.save();\n                ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n                ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                ctx.stroke();\n                ctx.restore();\n              } else {\n                const lineWidth = this.getSinglePixelWidth();\n\n                if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n                  ctx.save();\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  ctx.stroke();\n                  ctx.restore();\n                } else {\n                  ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            if (consumePath) {\n              this.consumePath();\n            }\n\n            ctx.globalAlpha = this.current.fillAlpha;\n          }\n\n          closeStroke() {\n            this.closePath();\n            this.stroke();\n          }\n\n          fill(consumePath) {\n            consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            let needRestore = false;\n\n            if (isPatternFill) {\n              ctx.save();\n              ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n              needRestore = true;\n            }\n\n            if (this.contentVisible) {\n              if (this.pendingEOFill) {\n                ctx.fill(\"evenodd\");\n                this.pendingEOFill = false;\n              } else {\n                ctx.fill();\n              }\n            }\n\n            if (needRestore) {\n              ctx.restore();\n            }\n\n            if (consumePath) {\n              this.consumePath();\n            }\n          }\n\n          eoFill() {\n            this.pendingEOFill = true;\n            this.fill();\n          }\n\n          fillStroke() {\n            this.fill(false);\n            this.stroke(false);\n            this.consumePath();\n          }\n\n          eoFillStroke() {\n            this.pendingEOFill = true;\n            this.fillStroke();\n          }\n\n          closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          }\n\n          closeEOFillStroke() {\n            this.pendingEOFill = true;\n            this.closePath();\n            this.fillStroke();\n          }\n\n          endPath() {\n            this.consumePath();\n          }\n\n          clip() {\n            this.pendingClip = NORMAL_CLIP;\n          }\n\n          eoClip() {\n            this.pendingClip = EO_CLIP;\n          }\n\n          beginText() {\n            this.current.textMatrix = _util.IDENTITY_MATRIX;\n            this.current.textMatrixScale = 1;\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          endText() {\n            const paths = this.pendingTextPaths;\n            const ctx = this.ctx;\n\n            if (paths === undefined) {\n              ctx.beginPath();\n              return;\n            }\n\n            ctx.save();\n            ctx.beginPath();\n\n            for (let i = 0; i < paths.length; i++) {\n              const path = paths[i];\n              ctx.setTransform.apply(ctx, path.transform);\n              ctx.translate(path.x, path.y);\n              path.addToPath(ctx, path.fontSize);\n            }\n\n            ctx.restore();\n            ctx.clip();\n            ctx.beginPath();\n            delete this.pendingTextPaths;\n          }\n\n          setCharSpacing(spacing) {\n            this.current.charSpacing = spacing;\n          }\n\n          setWordSpacing(spacing) {\n            this.current.wordSpacing = spacing;\n          }\n\n          setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          }\n\n          setLeading(leading) {\n            this.current.leading = -leading;\n          }\n\n          setFont(fontRefName, size) {\n            const fontObj = this.commonObjs.get(fontRefName);\n            const current = this.current;\n\n            if (!fontObj) {\n              throw new Error(`Can't find font for ${fontRefName}`);\n            }\n\n            current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n            if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n              (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n            }\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            this.current.font = fontObj;\n            this.current.fontSize = size;\n\n            if (fontObj.isType3Font) {\n              return;\n            }\n\n            const name = fontObj.loadedName || \"sans-serif\";\n            let bold = \"normal\";\n\n            if (fontObj.black) {\n              bold = \"900\";\n            } else if (fontObj.bold) {\n              bold = \"bold\";\n            }\n\n            const italic = fontObj.italic ? \"italic\" : \"normal\";\n            const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n            let browserFontSize = size;\n\n            if (size < MIN_FONT_SIZE) {\n              browserFontSize = MIN_FONT_SIZE;\n            } else if (size > MAX_FONT_SIZE) {\n              browserFontSize = MAX_FONT_SIZE;\n            }\n\n            this.current.fontSizeScale = size / browserFontSize;\n            this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n          }\n\n          setTextRenderingMode(mode) {\n            this.current.textRenderingMode = mode;\n          }\n\n          setTextRise(rise) {\n            this.current.textRise = rise;\n          }\n\n          moveText(x, y) {\n            this.current.x = this.current.lineX += x;\n            this.current.y = this.current.lineY += y;\n          }\n\n          setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          }\n\n          setTextMatrix(a, b, c, d, e, f) {\n            this.current.textMatrix = [a, b, c, d, e, f];\n            this.current.textMatrixScale = Math.hypot(a, b);\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          nextLine() {\n            this.moveText(0, this.current.leading);\n          }\n\n          paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const textRenderingMode = current.textRenderingMode;\n            const fontSize = current.fontSize / current.fontSizeScale;\n            const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n            const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n            const patternFill = current.patternFill && !font.missingFile;\n            let addToPath;\n\n            if (font.disableFontFace || isAddToPathSet || patternFill) {\n              addToPath = font.getPathGenerator(this.commonObjs, character);\n            }\n\n            if (font.disableFontFace || patternFill) {\n              ctx.save();\n              ctx.translate(x, y);\n              ctx.beginPath();\n              addToPath(ctx, fontSize);\n\n              if (patternTransform) {\n                ctx.setTransform.apply(ctx, patternTransform);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fill();\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (resetLineWidthToOne) {\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                }\n\n                ctx.stroke();\n              }\n\n              ctx.restore();\n            } else {\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fillText(character, x, y);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (resetLineWidthToOne) {\n                  ctx.save();\n                  ctx.moveTo(x, y);\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  ctx.strokeText(character, 0, 0);\n                  ctx.restore();\n                } else {\n                  ctx.strokeText(character, x, y);\n                }\n              }\n            }\n\n            if (isAddToPathSet) {\n              const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n              paths.push({\n                transform: ctx.mozCurrentTransform,\n                x,\n                y,\n                fontSize,\n                addToPath\n              });\n            }\n          }\n\n          get isFontSubpixelAAEnabled() {\n            const {\n              context: ctx\n            } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n            ctx.scale(1.5, 1);\n            ctx.fillText(\"I\", 0, 10);\n            const data = ctx.getImageData(0, 0, 10, 10).data;\n            let enabled = false;\n\n            for (let i = 3; i < data.length; i += 4) {\n              if (data[i] > 0 && data[i] < 255) {\n                enabled = true;\n                break;\n              }\n            }\n\n            return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n          }\n\n          showText(glyphs) {\n            const current = this.current;\n            const font = current.font;\n\n            if (font.isType3Font) {\n              return this.showType3Text(glyphs);\n            }\n\n            const fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return undefined;\n            }\n\n            const ctx = this.ctx;\n            const fontSizeScale = current.fontSizeScale;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const fontDirection = current.fontDirection;\n            const textHScale = current.textHScale * fontDirection;\n            const glyphsLength = glyphs.length;\n            const vertical = font.vertical;\n            const spacingDir = vertical ? 1 : -1;\n            const defaultVMetrics = font.defaultVMetrics;\n            const widthAdvanceScale = fontSize * current.fontMatrix[0];\n            const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n            ctx.save();\n            let patternTransform;\n\n            if (current.patternFill) {\n              ctx.save();\n              const pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n              patternTransform = ctx.mozCurrentTransform;\n              ctx.restore();\n              ctx.fillStyle = pattern;\n            }\n\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y + current.textRise);\n\n            if (fontDirection > 0) {\n              ctx.scale(textHScale, -1);\n            } else {\n              ctx.scale(textHScale, 1);\n            }\n\n            let lineWidth = current.lineWidth;\n            let resetLineWidthToOne = false;\n            const scale = current.textMatrixScale;\n\n            if (scale === 0 || lineWidth === 0) {\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                this._cachedGetSinglePixelWidth = null;\n                lineWidth = this.getSinglePixelWidth();\n                resetLineWidthToOne = lineWidth < 0;\n              }\n            } else {\n              lineWidth /= scale;\n            }\n\n            if (fontSizeScale !== 1.0) {\n              ctx.scale(fontSizeScale, fontSizeScale);\n              lineWidth /= fontSizeScale;\n            }\n\n            ctx.lineWidth = lineWidth;\n            let x = 0,\n                i;\n\n            for (i = 0; i < glyphsLength; ++i) {\n              const glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              let restoreNeeded = false;\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const character = glyph.fontChar;\n              const accent = glyph.accent;\n              let scaledX, scaledY;\n              let width = glyph.width;\n\n              if (vertical) {\n                const vmetric = glyph.vmetric || defaultVMetrics;\n                const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                const vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (font.remeasure && width > 0) {\n                const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                  const characterScaleX = width / measuredWidth;\n                  restoreNeeded = true;\n                  ctx.save();\n                  ctx.scale(characterScaleX, 1);\n                  scaledX /= characterScaleX;\n                } else if (width !== measuredWidth) {\n                  scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                }\n              }\n\n              if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                if (simpleFillText && !accent) {\n                  ctx.fillText(character, scaledX, scaledY);\n                } else {\n                  this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n                  if (accent) {\n                    const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                    const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n                  }\n                }\n              }\n\n              let charWidth;\n\n              if (vertical) {\n                charWidth = width * widthAdvanceScale - spacing * fontDirection;\n              } else {\n                charWidth = width * widthAdvanceScale + spacing * fontDirection;\n              }\n\n              x += charWidth;\n\n              if (restoreNeeded) {\n                ctx.restore();\n              }\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            ctx.restore();\n            return undefined;\n          }\n\n          showType3Text(glyphs) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const fontSize = current.fontSize;\n            const fontDirection = current.fontDirection;\n            const spacingDir = font.vertical ? 1 : -1;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const textHScale = current.textHScale * fontDirection;\n            const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n            const glyphsLength = glyphs.length;\n            const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n            let i, glyph, width, spacingLength;\n\n            if (isTextInvisible || fontSize === 0) {\n              return;\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n            ctx.save();\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y);\n            ctx.scale(textHScale, fontDirection);\n\n            for (i = 0; i < glyphsLength; ++i) {\n              glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                spacingLength = spacingDir * glyph * fontSize / 1000;\n                this.ctx.translate(spacingLength, 0);\n                current.x += spacingLength * textHScale;\n                continue;\n              }\n\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n              if (!operatorList) {\n                (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                continue;\n              }\n\n              if (this.contentVisible) {\n                this.processingType3 = glyph;\n                this.save();\n                ctx.scale(fontSize, fontSize);\n                ctx.transform.apply(ctx, fontMatrix);\n                this.executeOperatorList(operatorList);\n                this.restore();\n              }\n\n              const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n              width = transformed[0] * fontSize + spacing;\n              ctx.translate(width, 0);\n              current.x += width * textHScale;\n            }\n\n            ctx.restore();\n            this.processingType3 = null;\n          }\n\n          setCharWidth(xWidth, yWidth) {}\n\n          setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n            this.ctx.rect(llx, lly, urx - llx, ury - lly);\n            this.clip();\n            this.endPath();\n          }\n\n          getColorN_Pattern(IR) {\n            let pattern;\n\n            if (IR[0] === \"TilingPattern\") {\n              const color = IR[1];\n              const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n              const canvasGraphicsFactory = {\n                createCanvasGraphics: ctx => {\n                  return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory);\n                }\n              };\n              pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n            } else {\n              pattern = this._getPattern(IR[1], IR[2]);\n            }\n\n            return pattern;\n          }\n\n          setStrokeColorN() {\n            this.current.strokeColor = this.getColorN_Pattern(arguments);\n          }\n\n          setFillColorN() {\n            this.current.fillColor = this.getColorN_Pattern(arguments);\n            this.current.patternFill = true;\n          }\n\n          setStrokeRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.strokeStyle = color;\n            this.current.strokeColor = color;\n          }\n\n          setFillRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.fillStyle = color;\n            this.current.fillColor = color;\n            this.current.patternFill = false;\n          }\n\n          _getPattern(objId) {\n            let matrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            let pattern;\n\n            if (this.cachedPatterns.has(objId)) {\n              pattern = this.cachedPatterns.get(objId);\n            } else {\n              pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId), this.cachedCanvasPatterns);\n              this.cachedPatterns.set(objId, pattern);\n            }\n\n            if (matrix) {\n              pattern.matrix = matrix;\n            }\n\n            return pattern;\n          }\n\n          shadingFill(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            this.save();\n\n            const pattern = this._getPattern(objId);\n\n            ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, true);\n            const inv = ctx.mozCurrentTransformInverse;\n\n            if (inv) {\n              const canvas = ctx.canvas;\n              const width = canvas.width;\n              const height = canvas.height;\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n            } else {\n              this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n            }\n\n            this.restore();\n          }\n\n          beginInlineImage() {\n            (0, _util.unreachable)(\"Should not call beginInlineImage\");\n          }\n\n          beginImageData() {\n            (0, _util.unreachable)(\"Should not call beginImageData\");\n          }\n\n          paintFormXObjectBegin(matrix, bbox) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            this.baseTransformStack.push(this.baseTransform);\n\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform.apply(this, matrix);\n            }\n\n            this.baseTransform = this.ctx.mozCurrentTransform;\n\n            if (bbox) {\n              const width = bbox[2] - bbox[0];\n              const height = bbox[3] - bbox[1];\n              this.ctx.rect(bbox[0], bbox[1], width, height);\n              this.clip();\n              this.endPath();\n            }\n          }\n\n          paintFormXObjectEnd() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.restore();\n            this.baseTransform = this.baseTransformStack.pop();\n          }\n\n          beginGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            const currentCtx = this.ctx;\n\n            if (!group.isolated) {\n              (0, _util.info)(\"TODO: Support non-isolated groups.\");\n            }\n\n            if (group.knockout) {\n              (0, _util.warn)(\"Knockout groups not supported.\");\n            }\n\n            const currentTransform = currentCtx.mozCurrentTransform;\n\n            if (group.matrix) {\n              currentCtx.transform.apply(currentCtx, group.matrix);\n            }\n\n            if (!group.bbox) {\n              throw new Error(\"Bounding box is required.\");\n            }\n\n            let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n            const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n            bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n            const offsetX = Math.floor(bounds[0]);\n            const offsetY = Math.floor(bounds[1]);\n            let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n            let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n            let scaleX = 1,\n                scaleY = 1;\n\n            if (drawnWidth > MAX_GROUP_SIZE) {\n              scaleX = drawnWidth / MAX_GROUP_SIZE;\n              drawnWidth = MAX_GROUP_SIZE;\n            }\n\n            if (drawnHeight > MAX_GROUP_SIZE) {\n              scaleY = drawnHeight / MAX_GROUP_SIZE;\n              drawnHeight = MAX_GROUP_SIZE;\n            }\n\n            let cacheId = \"groupAt\" + this.groupLevel;\n\n            if (group.smask) {\n              cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n            }\n\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            const groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / scaleX, 1 / scaleY);\n            groupCtx.translate(-offsetX, -offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n\n            if (group.smask) {\n              this.smaskStack.push({\n                canvas: scratchCanvas.canvas,\n                context: groupCtx,\n                offsetX,\n                offsetY,\n                scaleX,\n                scaleY,\n                subtype: group.smask.subtype,\n                backdrop: group.smask.backdrop,\n                transferMap: group.smask.transferMap || null,\n                startTransformInverse: null\n              });\n            } else {\n              currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n              currentCtx.translate(offsetX, offsetY);\n              currentCtx.scale(scaleX, scaleY);\n            }\n\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n            this.current.activeSMask = null;\n          }\n\n          endGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.groupLevel--;\n            const groupCtx = this.ctx;\n            this.ctx = this.groupStack.pop();\n            this.ctx.imageSmoothingEnabled = false;\n\n            if (group.smask) {\n              this.tempSMask = this.smaskStack.pop();\n            } else {\n              this.ctx.drawImage(groupCtx.canvas, 0, 0);\n            }\n\n            this.restore();\n          }\n\n          beginAnnotations() {\n            this.save();\n\n            if (this.baseTransform) {\n              this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n            }\n          }\n\n          endAnnotations() {\n            this.restore();\n          }\n\n          beginAnnotation(id, rect, transform, matrix) {\n            this.save();\n            resetCtxToDefault(this.ctx);\n            this.current = new CanvasExtraState();\n\n            if (Array.isArray(rect) && rect.length === 4) {\n              const width = rect[2] - rect[0];\n              const height = rect[3] - rect[1];\n              this.ctx.rect(rect[0], rect[1], width, height);\n              this.clip();\n              this.endPath();\n            }\n\n            this.transform.apply(this, transform);\n            this.transform.apply(this, matrix);\n          }\n\n          endAnnotation() {\n            this.restore();\n          }\n\n          paintImageMaskXObject(img) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const width = img.width,\n                  height = img.height;\n            const glyph = this.processingType3;\n\n            if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n              if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n                glyph.compiled = compileType3Glyph({\n                  data: img.data,\n                  width,\n                  height\n                });\n              } else {\n                glyph.compiled = null;\n              }\n            }\n\n            if (glyph?.compiled) {\n              glyph.compiled(ctx);\n              return;\n            }\n\n            const mask = this._createMaskCanvas(img);\n\n            const maskCanvas = mask.canvas;\n            ctx.save();\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n            ctx.restore();\n          }\n\n          paintImageMaskXObjectRepeat(imgData, scaleX) {\n            let skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            let skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n            let scaleY = arguments.length > 4 ? arguments[4] : undefined;\n            let positions = arguments.length > 5 ? arguments[5] : undefined;\n\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            ctx.save();\n            const currentTransform = ctx.mozCurrentTransform;\n            ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n\n            const mask = this._createMaskCanvas(imgData);\n\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              const trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n\n              const [x, y] = _util.Util.applyTransform([0, 0], trans);\n\n              ctx.drawImage(mask.canvas, x, y);\n            }\n\n            ctx.restore();\n          }\n\n          paintImageMaskXObjectGroup(images) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n\n            for (let i = 0, ii = images.length; i < ii; i++) {\n              const image = images[i];\n              const width = image.width,\n                    height = image.height;\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              maskCtx.save();\n              putBinaryImageMask(maskCtx, image);\n              maskCtx.globalCompositeOperation = \"source-in\";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, false) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              ctx.save();\n              ctx.transform.apply(ctx, image.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n              ctx.restore();\n            }\n          }\n\n          paintImageXObject(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          }\n\n          paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const map = [];\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              map.push({\n                transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                x: 0,\n                y: 0,\n                w: width,\n                h: height\n              });\n            }\n\n            this.paintInlineImageXObjectGroup(imgData, map);\n          }\n\n          paintInlineImageXObject(imgData) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const ctx = this.ctx;\n            this.save();\n            ctx.scale(1 / width, -1 / height);\n            let imgToPaint;\n\n            if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n              imgToPaint = imgData;\n            } else {\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n              imgToPaint = tmpCanvas.canvas;\n            }\n\n            const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n\n            ctx.imageSmoothingEnabled = getImageSmoothingEnabled(ctx.mozCurrentTransform, imgData.interpolate);\n            ctx.drawImage(scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n\n            if (this.imageLayer) {\n              const position = this.getCanvasPosition(0, -height);\n              this.imageLayer.appendImage({\n                imgData,\n                left: position[0],\n                top: position[1],\n                width: width / ctx.mozCurrentTransformInverse[0],\n                height: height / ctx.mozCurrentTransformInverse[3]\n              });\n            }\n\n            this.restore();\n          }\n\n          paintInlineImageXObjectGroup(imgData, map) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const w = imgData.width;\n            const h = imgData.height;\n            const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n            const tmpCtx = tmpCanvas.context;\n            putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n            for (let i = 0, ii = map.length; i < ii; i++) {\n              const entry = map[i];\n              ctx.save();\n              ctx.transform.apply(ctx, entry.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n              if (this.imageLayer) {\n                const position = this.getCanvasPosition(entry.x, entry.y);\n                this.imageLayer.appendImage({\n                  imgData,\n                  left: position[0],\n                  top: position[1],\n                  width: w,\n                  height: h\n                });\n              }\n\n              ctx.restore();\n            }\n          }\n\n          paintSolidColorImageMask() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.ctx.fillRect(0, 0, 1, 1);\n          }\n\n          markPoint(tag) {}\n\n          markPointProps(tag, properties) {}\n\n          beginMarkedContent(tag) {\n            this.markedContentStack.push({\n              visible: true\n            });\n          }\n\n          beginMarkedContentProps(tag, properties) {\n            if (tag === \"OC\") {\n              this.markedContentStack.push({\n                visible: this.optionalContentConfig.isVisible(properties)\n              });\n            } else {\n              this.markedContentStack.push({\n                visible: true\n              });\n            }\n\n            this.contentVisible = this.isContentVisible();\n          }\n\n          endMarkedContent() {\n            this.markedContentStack.pop();\n            this.contentVisible = this.isContentVisible();\n          }\n\n          beginCompat() {}\n\n          endCompat() {}\n\n          consumePath() {\n            const ctx = this.ctx;\n\n            if (this.pendingClip) {\n              if (this.pendingClip === EO_CLIP) {\n                ctx.clip(\"evenodd\");\n              } else {\n                ctx.clip();\n              }\n\n              this.pendingClip = null;\n            }\n\n            ctx.beginPath();\n          }\n\n          getSinglePixelWidth() {\n            if (this._cachedGetSinglePixelWidth === null) {\n              const m = this.ctx.mozCurrentTransform;\n              const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n              const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n              const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n              const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n              if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n                this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n              } else if (absDet > Number.EPSILON) {\n                this._cachedGetSinglePixelWidth = pixelHeight;\n              } else {\n                this._cachedGetSinglePixelWidth = 1;\n              }\n            }\n\n            return this._cachedGetSinglePixelWidth;\n          }\n\n          getCanvasPosition(x, y) {\n            const transform = this.ctx.mozCurrentTransform;\n            return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n          }\n\n          isContentVisible() {\n            for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n              if (!this.markedContentStack[i].visible) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n\n        }\n\n        exports.CanvasGraphics = CanvasGraphics;\n\n        for (const op in _util.OPS) {\n          if (CanvasGraphics.prototype[op] !== undefined) {\n            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n          }\n        }\n        /***/\n\n      },\n      /* 11 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getShadingPattern = getShadingPattern;\n        exports.TilingPattern = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function applyBoundingBox(ctx, bbox) {\n          if (!bbox || typeof Path2D === \"undefined\") {\n            return;\n          }\n\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const region = new Path2D();\n          region.rect(bbox[0], bbox[1], width, height);\n          ctx.clip(region);\n        }\n\n        class BaseShadingPattern {\n          constructor() {\n            if (this.constructor === BaseShadingPattern) {\n              (0, _util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n            }\n          }\n\n          getPattern() {\n            (0, _util.unreachable)(\"Abstract method `getPattern` called.\");\n          }\n\n        }\n\n        class RadialAxialShadingPattern extends BaseShadingPattern {\n          constructor(IR, cachedCanvasPatterns) {\n            super();\n            this._type = IR[1];\n            this._bbox = IR[2];\n            this._colorStops = IR[3];\n            this._p0 = IR[4];\n            this._p1 = IR[5];\n            this._r0 = IR[6];\n            this._r1 = IR[7];\n            this.matrix = null;\n            this.cachedCanvasPatterns = cachedCanvasPatterns;\n          }\n\n          _createGradient(ctx) {\n            let grad;\n\n            if (this._type === \"axial\") {\n              grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n            } else if (this._type === \"radial\") {\n              grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n            }\n\n            for (const colorStop of this._colorStops) {\n              grad.addColorStop(colorStop[0], colorStop[1]);\n            }\n\n            return grad;\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let pattern;\n\n            if (!shadingFill) {\n              if (this.cachedCanvasPatterns.has(this)) {\n                pattern = this.cachedCanvasPatterns.get(this);\n              } else {\n                const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", owner.ctx.canvas.width, owner.ctx.canvas.height, true);\n                const tmpCtx = tmpCanvas.context;\n                tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.beginPath();\n                tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);\n\n                if (this.matrix) {\n                  tmpCtx.transform.apply(tmpCtx, this.matrix);\n                }\n\n                applyBoundingBox(tmpCtx, this._bbox);\n                tmpCtx.fillStyle = this._createGradient(tmpCtx);\n                tmpCtx.fill();\n                pattern = ctx.createPattern(tmpCanvas.canvas, \"repeat\");\n                this.cachedCanvasPatterns.set(this, pattern);\n              }\n            } else {\n              applyBoundingBox(ctx, this._bbox);\n              pattern = this._createGradient(ctx);\n            }\n\n            if (!shadingFill) {\n              const domMatrix = new DOMMatrix(inverse);\n\n              try {\n                pattern.setTransform(domMatrix);\n              } catch (ex) {\n                (0, _util.warn)(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n              }\n            }\n\n            return pattern;\n          }\n\n        }\n\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n          const coords = context.coords,\n                colors = context.colors;\n          const bytes = data.data,\n                rowSize = data.width * 4;\n          let tmp;\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          if (coords[p2 + 1] > coords[p3 + 1]) {\n            tmp = p2;\n            p2 = p3;\n            p3 = tmp;\n            tmp = c2;\n            c2 = c3;\n            c3 = tmp;\n          }\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n          const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n          const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n          const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n          const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n          const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n          if (y1 >= y3) {\n            return;\n          }\n\n          const c1r = colors[c1],\n                c1g = colors[c1 + 1],\n                c1b = colors[c1 + 2];\n          const c2r = colors[c2],\n                c2g = colors[c2 + 1],\n                c2b = colors[c2 + 2];\n          const c3r = colors[c3],\n                c3g = colors[c3 + 1],\n                c3b = colors[c3 + 2];\n          const minY = Math.round(y1),\n                maxY = Math.round(y3);\n          let xa, car, cag, cab;\n          let xb, cbr, cbg, cbb;\n\n          for (let y = minY; y <= maxY; y++) {\n            if (y < y2) {\n              let k;\n\n              if (y < y1) {\n                k = 0;\n              } else {\n                k = (y1 - y) / (y1 - y2);\n              }\n\n              xa = x1 - (x1 - x2) * k;\n              car = c1r - (c1r - c2r) * k;\n              cag = c1g - (c1g - c2g) * k;\n              cab = c1b - (c1b - c2b) * k;\n            } else {\n              let k;\n\n              if (y > y3) {\n                k = 1;\n              } else if (y2 === y3) {\n                k = 0;\n              } else {\n                k = (y2 - y) / (y2 - y3);\n              }\n\n              xa = x2 - (x2 - x3) * k;\n              car = c2r - (c2r - c3r) * k;\n              cag = c2g - (c2g - c3g) * k;\n              cab = c2b - (c2b - c3b) * k;\n            }\n\n            let k;\n\n            if (y < y1) {\n              k = 0;\n            } else if (y > y3) {\n              k = 1;\n            } else {\n              k = (y1 - y) / (y1 - y3);\n            }\n\n            xb = x1 - (x1 - x3) * k;\n            cbr = c1r - (c1r - c3r) * k;\n            cbg = c1g - (c1g - c3g) * k;\n            cbb = c1b - (c1b - c3b) * k;\n            const x1_ = Math.round(Math.min(xa, xb));\n            const x2_ = Math.round(Math.max(xa, xb));\n            let j = rowSize * y + x1_ * 4;\n\n            for (let x = x1_; x <= x2_; x++) {\n              k = (xa - x) / (xa - xb);\n\n              if (k < 0) {\n                k = 0;\n              } else if (k > 1) {\n                k = 1;\n              }\n\n              bytes[j++] = car - (car - cbr) * k | 0;\n              bytes[j++] = cag - (cag - cbg) * k | 0;\n              bytes[j++] = cab - (cab - cbb) * k | 0;\n              bytes[j++] = 255;\n            }\n          }\n        }\n\n        function drawFigure(data, figure, context) {\n          const ps = figure.coords;\n          const cs = figure.colors;\n          let i, ii;\n\n          switch (figure.type) {\n            case \"lattice\":\n              const verticesPerRow = figure.verticesPerRow;\n              const rows = Math.floor(ps.length / verticesPerRow) - 1;\n              const cols = verticesPerRow - 1;\n\n              for (i = 0; i < rows; i++) {\n                let q = i * verticesPerRow;\n\n                for (let j = 0; j < cols; j++, q++) {\n                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                }\n              }\n\n              break;\n\n            case \"triangles\":\n              for (i = 0, ii = ps.length; i < ii; i += 3) {\n                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n              }\n\n              break;\n\n            default:\n              throw new Error(\"illegal figure\");\n          }\n        }\n\n        class MeshShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._coords = IR[2];\n            this._colors = IR[3];\n            this._figures = IR[4];\n            this._bounds = IR[5];\n            this._bbox = IR[7];\n            this._background = IR[8];\n            this.matrix = null;\n          }\n\n          _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n            const EXPECTED_SCALE = 1.1;\n            const MAX_PATTERN_SIZE = 3000;\n            const BORDER_SIZE = 2;\n            const offsetX = Math.floor(this._bounds[0]);\n            const offsetY = Math.floor(this._bounds[1]);\n            const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n            const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const scaleX = boundsWidth / width;\n            const scaleY = boundsHeight / height;\n            const context = {\n              coords: this._coords,\n              colors: this._colors,\n              offsetX: -offsetX,\n              offsetY: -offsetY,\n              scaleX: 1 / scaleX,\n              scaleY: 1 / scaleY\n            };\n            const paddedWidth = width + BORDER_SIZE * 2;\n            const paddedHeight = height + BORDER_SIZE * 2;\n            const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n            const tmpCtx = tmpCanvas.context;\n            const data = tmpCtx.createImageData(width, height);\n\n            if (backgroundColor) {\n              const bytes = data.data;\n\n              for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n                bytes[i] = backgroundColor[0];\n                bytes[i + 1] = backgroundColor[1];\n                bytes[i + 2] = backgroundColor[2];\n                bytes[i + 3] = 255;\n              }\n            }\n\n            for (const figure of this._figures) {\n              drawFigure(data, figure, context);\n            }\n\n            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n            const canvas = tmpCanvas.canvas;\n            return {\n              canvas,\n              offsetX: offsetX - BORDER_SIZE * scaleX,\n              offsetY: offsetY - BORDER_SIZE * scaleY,\n              scaleX,\n              scaleY\n            };\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            applyBoundingBox(ctx, this._bbox);\n            let scale;\n\n            if (shadingFill) {\n              scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n            } else {\n              scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n              if (this.matrix) {\n                const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n                scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n              }\n            }\n\n            const temporaryPatternCanvas = this._createMeshCanvas(scale, shadingFill ? null : this._background, owner.cachedCanvases);\n\n            if (!shadingFill) {\n              ctx.setTransform.apply(ctx, owner.baseTransform);\n\n              if (this.matrix) {\n                ctx.transform.apply(ctx, this.matrix);\n              }\n            }\n\n            ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n            return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n          }\n\n        }\n\n        class DummyShadingPattern extends BaseShadingPattern {\n          getPattern() {\n            return \"hotpink\";\n          }\n\n        }\n\n        function getShadingPattern(IR, cachedCanvasPatterns) {\n          switch (IR[0]) {\n            case \"RadialAxial\":\n              return new RadialAxialShadingPattern(IR, cachedCanvasPatterns);\n\n            case \"Mesh\":\n              return new MeshShadingPattern(IR);\n\n            case \"Dummy\":\n              return new DummyShadingPattern();\n          }\n\n          throw new Error(`Unknown IR type: ${IR[0]}`);\n        }\n\n        const PaintType = {\n          COLORED: 1,\n          UNCOLORED: 2\n        };\n\n        class TilingPattern {\n          static get MAX_PATTERN_SIZE() {\n            return (0, _util.shadow)(this, \"MAX_PATTERN_SIZE\", 3000);\n          }\n\n          constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n            this.operatorList = IR[2];\n            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n            this.bbox = IR[4];\n            this.xstep = IR[5];\n            this.ystep = IR[6];\n            this.paintType = IR[7];\n            this.tilingType = IR[8];\n            this.color = color;\n            this.ctx = ctx;\n            this.canvasGraphicsFactory = canvasGraphicsFactory;\n            this.baseTransform = baseTransform;\n          }\n\n          createPatternCanvas(owner) {\n            const operatorList = this.operatorList;\n            const bbox = this.bbox;\n            const xstep = this.xstep;\n            const ystep = this.ystep;\n            const paintType = this.paintType;\n            const tilingType = this.tilingType;\n            const color = this.color;\n            const canvasGraphicsFactory = this.canvasGraphicsFactory;\n            (0, _util.info)(\"TilingType: \" + tilingType);\n            const x0 = bbox[0],\n                  y0 = bbox[1],\n                  x1 = bbox[2],\n                  y1 = bbox[3];\n\n            const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n            const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n            const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n            const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n            const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n            const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n            const tmpCtx = tmpCanvas.context;\n            const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n            graphics.groupLevel = owner.groupLevel;\n            this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n            let adjustedX0 = x0;\n            let adjustedY0 = y0;\n            let adjustedX1 = x1;\n            let adjustedY1 = y1;\n\n            if (x0 < 0) {\n              adjustedX0 = 0;\n              adjustedX1 += Math.abs(x0);\n            }\n\n            if (y0 < 0) {\n              adjustedY0 = 0;\n              adjustedY1 += Math.abs(y0);\n            }\n\n            tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n            this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n            graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n            graphics.executeOperatorList(operatorList);\n            graphics.endDrawing();\n            return {\n              canvas: tmpCanvas.canvas,\n              scaleX: dimx.scale,\n              scaleY: dimy.scale,\n              offsetX: adjustedX0,\n              offsetY: adjustedY0\n            };\n          }\n\n          getSizeAndScale(step, realOutputSize, scale) {\n            step = Math.abs(step);\n            const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n            let size = Math.ceil(step * scale);\n\n            if (size >= maxSize) {\n              size = maxSize;\n            } else {\n              scale = size / step;\n            }\n\n            return {\n              scale,\n              size\n            };\n          }\n\n          clipBbox(graphics, x0, y0, x1, y1) {\n            const bboxWidth = x1 - x0;\n            const bboxHeight = y1 - y0;\n            graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n            graphics.clip();\n            graphics.endPath();\n          }\n\n          setFillAndStrokeStyleToContext(graphics, paintType, color) {\n            const context = graphics.ctx,\n                  current = graphics.current;\n\n            switch (paintType) {\n              case PaintType.COLORED:\n                const ctx = this.ctx;\n                context.fillStyle = ctx.fillStyle;\n                context.strokeStyle = ctx.strokeStyle;\n                current.fillColor = ctx.fillStyle;\n                current.strokeColor = ctx.strokeStyle;\n                break;\n\n              case PaintType.UNCOLORED:\n                const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n                context.fillStyle = cssColor;\n                context.strokeStyle = cssColor;\n                current.fillColor = cssColor;\n                current.strokeColor = cssColor;\n                break;\n\n              default:\n                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n            }\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let matrix = inverse;\n\n            if (!shadingFill) {\n              matrix = _util.Util.transform(matrix, owner.baseTransform);\n\n              if (this.matrix) {\n                matrix = _util.Util.transform(matrix, this.matrix);\n              }\n            }\n\n            const temporaryPatternCanvas = this.createPatternCanvas(owner);\n            let domMatrix = new DOMMatrix(matrix);\n            domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n            const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n\n            try {\n              pattern.setTransform(domMatrix);\n            } catch (ex) {\n              (0, _util.warn)(`TilingPattern.getPattern: \"${ex?.message}\".`);\n            }\n\n            return pattern;\n          }\n\n        }\n\n        exports.TilingPattern = TilingPattern;\n        /***/\n      },\n      /* 12 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlobalWorkerOptions = void 0;\n        const GlobalWorkerOptions = Object.create(null);\n        exports.GlobalWorkerOptions = GlobalWorkerOptions;\n        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n        /***/\n      },\n      /* 13 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        const StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n\n        function wrapReason(reason) {\n          if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n            (0, _util.warn)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n            return reason;\n          }\n\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n\n            case \"PasswordException\":\n              return new _util.PasswordException(reason.message, reason.code);\n\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n\n        class MessageHandler {\n          constructor(sourceName, targetName, comObj) {\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.postMessageTransfers = true;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n\n            this._onComObjOnMessage = event => {\n              const data = event.data;\n\n              if (data.targetName !== this.sourceName) {\n                return;\n              }\n\n              if (data.stream) {\n                this._processStreamMessage(data);\n\n                return;\n              }\n\n              if (data.callback) {\n                const callbackId = data.callbackId;\n                const capability = this.callbackCapabilities[callbackId];\n\n                if (!capability) {\n                  throw new Error(`Cannot resolve callback ${callbackId}`);\n                }\n\n                delete this.callbackCapabilities[callbackId];\n\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n\n                return;\n              }\n\n              const action = this.actionHandler[data.action];\n\n              if (!action) {\n                throw new Error(`Unknown action from worker: ${data.action}`);\n              }\n\n              if (data.callbackId) {\n                const cbSourceName = this.sourceName;\n                const cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n\n              if (data.streamId) {\n                this._createStreamSink(data);\n\n                return;\n              }\n\n              action(data.data);\n            };\n\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n          on(actionName, handler) {\n            const ah = this.actionHandler;\n\n            if (ah[actionName]) {\n              throw new Error(`There is already an actionName called \"${actionName}\"`);\n            }\n\n            ah[actionName] = handler;\n          }\n\n          send(actionName, data, transfers) {\n            this._postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              data\n            }, transfers);\n          }\n\n          sendWithPromise(actionName, data, transfers) {\n            const callbackId = this.callbackId++;\n            const capability = (0, _util.createPromiseCapability)();\n            this.callbackCapabilities[callbackId] = capability;\n\n            try {\n              this._postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                callbackId,\n                data\n              }, transfers);\n            } catch (ex) {\n              capability.reject(ex);\n            }\n\n            return capability.promise;\n          }\n\n          sendWithStream(actionName, data, queueingStrategy, transfers) {\n            const streamId = this.streamId++,\n                  sourceName = this.sourceName,\n                  targetName = this.targetName,\n                  comObj = this.comObj;\n            return new ReadableStream({\n              start: controller => {\n                const startCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId] = {\n                  controller,\n                  startCall: startCapability,\n                  pullCall: null,\n                  cancelCall: null,\n                  isClosed: false\n                };\n\n                this._postMessage({\n                  sourceName,\n                  targetName,\n                  action: actionName,\n                  streamId,\n                  data,\n                  desiredSize: controller.desiredSize\n                }, transfers);\n\n                return startCapability.promise;\n              },\n              pull: controller => {\n                const pullCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].pullCall = pullCapability;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL,\n                  streamId,\n                  desiredSize: controller.desiredSize\n                });\n                return pullCapability.promise;\n              },\n              cancel: reason => {\n                (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                const cancelCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].cancelCall = cancelCapability;\n                this.streamControllers[streamId].isClosed = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n                return cancelCapability.promise;\n              }\n            }, queueingStrategy);\n          }\n\n          _createStreamSink(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const self = this,\n                  action = this.actionHandler[data.action];\n            const streamSink = {\n              enqueue(chunk) {\n                let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                let transfers = arguments.length > 2 ? arguments[2] : undefined;\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                const lastDesiredSize = this.desiredSize;\n                this.desiredSize -= size;\n\n                if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                  this.sinkCapability = (0, _util.createPromiseCapability)();\n                  this.ready = this.sinkCapability.promise;\n                }\n\n                self._postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ENQUEUE,\n                  streamId,\n                  chunk\n                }, transfers);\n              },\n\n              close() {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CLOSE,\n                  streamId\n                });\n                delete self.streamSinks[streamId];\n              },\n\n              error(reason) {\n                (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ERROR,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              },\n\n              sinkCapability: (0, _util.createPromiseCapability)(),\n              onPull: null,\n              onCancel: null,\n              isCancelled: false,\n              desiredSize: data.desiredSize,\n              ready: null\n            };\n            streamSink.sinkCapability.resolve();\n            streamSink.ready = streamSink.sinkCapability.promise;\n            this.streamSinks[streamId] = streamSink;\n            new Promise(function (resolve) {\n              resolve(action(data.data, streamSink));\n            }).then(function () {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                success: true\n              });\n            }, function (reason) {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            });\n          }\n\n          _processStreamMessage(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const streamController = this.streamControllers[streamId],\n                  streamSink = this.streamSinks[streamId];\n\n            switch (data.stream) {\n              case StreamKind.START_COMPLETE:\n                if (data.success) {\n                  streamController.startCall.resolve();\n                } else {\n                  streamController.startCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL_COMPLETE:\n                if (data.success) {\n                  streamController.pullCall.resolve();\n                } else {\n                  streamController.pullCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL:\n                if (!streamSink) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                  break;\n                }\n\n                if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n                  streamSink.sinkCapability.resolve();\n                }\n\n                streamSink.desiredSize = data.desiredSize;\n                new Promise(function (resolve) {\n                  resolve(streamSink.onPull && streamSink.onPull());\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                break;\n\n              case StreamKind.ENQUEUE:\n                (0, _util.assert)(streamController, \"enqueue should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.controller.enqueue(data.chunk);\n                break;\n\n              case StreamKind.CLOSE:\n                (0, _util.assert)(streamController, \"close should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.isClosed = true;\n                streamController.controller.close();\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.ERROR:\n                (0, _util.assert)(streamController, \"error should have stream controller\");\n                streamController.controller.error(wrapReason(data.reason));\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.CANCEL_COMPLETE:\n                if (data.success) {\n                  streamController.cancelCall.resolve();\n                } else {\n                  streamController.cancelCall.reject(wrapReason(data.reason));\n                }\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.CANCEL:\n                if (!streamSink) {\n                  break;\n                }\n\n                new Promise(function (resolve) {\n                  resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                streamSink.sinkCapability.reject(wrapReason(data.reason));\n                streamSink.isCancelled = true;\n                delete this.streamSinks[streamId];\n                break;\n\n              default:\n                throw new Error(\"Unexpected stream case\");\n            }\n          }\n\n          async _deleteStreamController(streamController, streamId) {\n            await Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);\n            delete this.streamControllers[streamId];\n          }\n\n          _postMessage(message, transfers) {\n            if (transfers && this.postMessageTransfers) {\n              this.comObj.postMessage(message, transfers);\n            } else {\n              this.comObj.postMessage(message);\n            }\n          }\n\n          destroy() {\n            this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n        }\n\n        exports.MessageHandler = MessageHandler;\n        /***/\n      },\n      /* 14 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Metadata = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class Metadata {\n          constructor(_ref23) {\n            let {\n              parsedData,\n              rawData\n            } = _ref23;\n            this._metadataMap = parsedData;\n            this._data = rawData;\n          }\n\n          getRaw() {\n            return this._data;\n          }\n\n          get(name) {\n            return this._metadataMap.get(name) ?? null;\n          }\n\n          getAll() {\n            return (0, _util.objectFromMap)(this._metadataMap);\n          }\n\n          has(name) {\n            return this._metadataMap.has(name);\n          }\n\n        }\n\n        exports.Metadata = Metadata;\n        /***/\n      },\n      /* 15 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OptionalContentConfig = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class OptionalContentGroup {\n          constructor(name, intent) {\n            this.visible = true;\n            this.name = name;\n            this.intent = intent;\n          }\n\n        }\n\n        class OptionalContentConfig {\n          constructor(data) {\n            this.name = null;\n            this.creator = null;\n            this._order = null;\n            this._groups = new Map();\n\n            if (data === null) {\n              return;\n            }\n\n            this.name = data.name;\n            this.creator = data.creator;\n            this._order = data.order;\n\n            for (const group of data.groups) {\n              this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n            }\n\n            if (data.baseState === \"OFF\") {\n              for (const group of this._groups) {\n                group.visible = false;\n              }\n            }\n\n            for (const on of data.on) {\n              this._groups.get(on).visible = true;\n            }\n\n            for (const off of data.off) {\n              this._groups.get(off).visible = false;\n            }\n          }\n\n          _evaluateVisibilityExpression(array) {\n            const length = array.length;\n\n            if (length < 2) {\n              return true;\n            }\n\n            const operator = array[0];\n\n            for (let i = 1; i < length; i++) {\n              const element = array[i];\n              let state;\n\n              if (Array.isArray(element)) {\n                state = this._evaluateVisibilityExpression(element);\n              } else if (this._groups.has(element)) {\n                state = this._groups.get(element).visible;\n              } else {\n                (0, _util.warn)(`Optional content group not found: ${element}`);\n                return true;\n              }\n\n              switch (operator) {\n                case \"And\":\n                  if (!state) {\n                    return false;\n                  }\n\n                  break;\n\n                case \"Or\":\n                  if (state) {\n                    return true;\n                  }\n\n                  break;\n\n                case \"Not\":\n                  return !state;\n\n                default:\n                  return true;\n              }\n            }\n\n            return operator === \"And\";\n          }\n\n          isVisible(group) {\n            if (this._groups.size === 0) {\n              return true;\n            }\n\n            if (!group) {\n              (0, _util.warn)(\"Optional content group not defined.\");\n              return true;\n            }\n\n            if (group.type === \"OCG\") {\n              if (!this._groups.has(group.id)) {\n                (0, _util.warn)(`Optional content group not found: ${group.id}`);\n                return true;\n              }\n\n              return this._groups.get(group.id).visible;\n            } else if (group.type === \"OCMD\") {\n              if (group.expression) {\n                return this._evaluateVisibilityExpression(group.expression);\n              }\n\n              if (!group.policy || group.policy === \"AnyOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              } else if (group.policy === \"AnyOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n\n              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown group type ${group.type}.`);\n            return true;\n          }\n\n          setVisibility(id) {\n            let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return;\n            }\n\n            this._groups.get(id).visible = !!visible;\n          }\n\n          getOrder() {\n            if (!this._groups.size) {\n              return null;\n            }\n\n            if (this._order) {\n              return this._order.slice();\n            }\n\n            return Array.from(this._groups.keys());\n          }\n\n          getGroups() {\n            return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;\n          }\n\n          getGroup(id) {\n            return this._groups.get(id) || null;\n          }\n\n        }\n\n        exports.OptionalContentConfig = OptionalContentConfig;\n        /***/\n      },\n      /* 16 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFDataTransportStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        class PDFDataTransportStream {\n          constructor(params, pdfDataRangeTransport) {\n            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n            this._queuedChunks = [];\n            this._progressiveDone = params.progressiveDone || false;\n            this._contentDispositionFilename = params.contentDispositionFilename || null;\n            const initialData = params.initialData;\n\n            if (initialData?.length > 0) {\n              const buffer = new Uint8Array(initialData).buffer;\n\n              this._queuedChunks.push(buffer);\n            }\n\n            this._pdfDataRangeTransport = pdfDataRangeTransport;\n            this._isStreamingSupported = !params.disableStream;\n            this._isRangeSupported = !params.disableRange;\n            this._contentLength = params.length;\n            this._fullRequestReader = null;\n            this._rangeReaders = [];\n\n            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n              this._onReceiveData({\n                begin,\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n              this._onProgress({\n                loaded,\n                total\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n              this._onReceiveData({\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n              this._onProgressiveDone();\n            });\n\n            this._pdfDataRangeTransport.transportReady();\n          }\n\n          _onReceiveData(args) {\n            const buffer = new Uint8Array(args.chunk).buffer;\n\n            if (args.begin === undefined) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader._enqueue(buffer);\n              } else {\n                this._queuedChunks.push(buffer);\n              }\n            } else {\n              const found = this._rangeReaders.some(function (rangeReader) {\n                if (rangeReader._begin !== args.begin) {\n                  return false;\n                }\n\n                rangeReader._enqueue(buffer);\n\n                return true;\n              });\n\n              (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n            }\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          _onProgress(evt) {\n            if (evt.total === undefined) {\n              const firstReader = this._rangeReaders[0];\n\n              if (firstReader?.onProgress) {\n                firstReader.onProgress({\n                  loaded: evt.loaded\n                });\n              }\n            } else {\n              const fullReader = this._fullRequestReader;\n\n              if (fullReader?.onProgress) {\n                fullReader.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            }\n          }\n\n          _onProgressiveDone() {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.progressiveDone();\n            }\n\n            this._progressiveDone = true;\n          }\n\n          _removeRangeReader(reader) {\n            const i = this._rangeReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n            const queuedChunks = this._queuedChunks;\n            this._queuedChunks = null;\n            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n            this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n            this._rangeReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n\n            this._pdfDataRangeTransport.abort();\n          }\n\n        }\n\n        exports.PDFDataTransportStream = PDFDataTransportStream;\n\n        class PDFDataTransportStreamReader {\n          constructor(stream, queuedChunks) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this._stream = stream;\n            this._done = progressiveDone || false;\n            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n            this._queuedChunks = queuedChunks || [];\n            this._loaded = 0;\n\n            for (const chunk of this._queuedChunks) {\n              this._loaded += chunk.byteLength;\n            }\n\n            this._requests = [];\n            this._headersReady = Promise.resolve();\n            stream._fullRequestReader = this;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunks.push(chunk);\n            }\n\n            this._loaded += chunk.byteLength;\n          }\n\n          get headersReady() {\n            return this._headersReady;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._stream._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._stream._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._stream._contentLength;\n          }\n\n          async read() {\n            if (this._queuedChunks.length > 0) {\n              const chunk = this._queuedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          progressiveDone() {\n            if (this._done) {\n              return;\n            }\n\n            this._done = true;\n          }\n\n        }\n\n        class PDFDataTransportStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._begin = begin;\n            this._end = end;\n            this._queuedChunk = null;\n            this._requests = [];\n            this._done = false;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length === 0) {\n              this._queuedChunk = chunk;\n            } else {\n              const requestsCapability = this._requests.shift();\n\n              requestsCapability.resolve({\n                value: chunk,\n                done: false\n              });\n\n              for (const requestCapability of this._requests) {\n                requestCapability.resolve({\n                  value: undefined,\n                  done: true\n                });\n              }\n\n              this._requests.length = 0;\n            }\n\n            this._done = true;\n\n            this._stream._removeRangeReader(this);\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._stream._removeRangeReader(this);\n          }\n\n        }\n        /***/\n\n      },\n      /* 17 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaText = void 0;\n\n        class XfaText {\n          static textContent(xfa) {\n            const items = [];\n            const output = {\n              items,\n              styles: Object.create(null)\n            };\n\n            function walk(node) {\n              if (!node) {\n                return;\n              }\n\n              let str = null;\n              const name = node.name;\n\n              if (name === \"#text\") {\n                str = node.value;\n              } else if (!XfaText.shouldBuildText(name)) {\n                return;\n              } else if (node?.attributes?.textContent) {\n                str = node.attributes.textContent;\n              } else if (node.value) {\n                str = node.value;\n              }\n\n              if (str !== null) {\n                items.push({\n                  str\n                });\n              }\n\n              if (!node.children) {\n                return;\n              }\n\n              for (const child of node.children) {\n                walk(child);\n              }\n            }\n\n            walk(xfa);\n            return output;\n          }\n\n          static shouldBuildText(name) {\n            return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n          }\n\n        }\n\n        exports.XfaText = XfaText;\n        /***/\n      },\n      /* 18 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _scripting_utils = __w_pdfjs_require__(19);\n\n        const DEFAULT_TAB_INDEX = 1000;\n        const GetElementsByNameSet = new WeakSet();\n\n        class AnnotationElementFactory {\n          static create(parameters) {\n            const subtype = parameters.data.annotationType;\n\n            switch (subtype) {\n              case _util.AnnotationType.LINK:\n                return new LinkAnnotationElement(parameters);\n\n              case _util.AnnotationType.TEXT:\n                return new TextAnnotationElement(parameters);\n\n              case _util.AnnotationType.WIDGET:\n                const fieldType = parameters.data.fieldType;\n\n                switch (fieldType) {\n                  case \"Tx\":\n                    return new TextWidgetAnnotationElement(parameters);\n\n                  case \"Btn\":\n                    if (parameters.data.radioButton) {\n                      return new RadioButtonWidgetAnnotationElement(parameters);\n                    } else if (parameters.data.checkBox) {\n                      return new CheckboxWidgetAnnotationElement(parameters);\n                    }\n\n                    return new PushButtonWidgetAnnotationElement(parameters);\n\n                  case \"Ch\":\n                    return new ChoiceWidgetAnnotationElement(parameters);\n                }\n\n                return new WidgetAnnotationElement(parameters);\n\n              case _util.AnnotationType.POPUP:\n                return new PopupAnnotationElement(parameters);\n\n              case _util.AnnotationType.FREETEXT:\n                return new FreeTextAnnotationElement(parameters);\n\n              case _util.AnnotationType.LINE:\n                return new LineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUARE:\n                return new SquareAnnotationElement(parameters);\n\n              case _util.AnnotationType.CIRCLE:\n                return new CircleAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYLINE:\n                return new PolylineAnnotationElement(parameters);\n\n              case _util.AnnotationType.CARET:\n                return new CaretAnnotationElement(parameters);\n\n              case _util.AnnotationType.INK:\n                return new InkAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYGON:\n                return new PolygonAnnotationElement(parameters);\n\n              case _util.AnnotationType.HIGHLIGHT:\n                return new HighlightAnnotationElement(parameters);\n\n              case _util.AnnotationType.UNDERLINE:\n                return new UnderlineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUIGGLY:\n                return new SquigglyAnnotationElement(parameters);\n\n              case _util.AnnotationType.STRIKEOUT:\n                return new StrikeOutAnnotationElement(parameters);\n\n              case _util.AnnotationType.STAMP:\n                return new StampAnnotationElement(parameters);\n\n              case _util.AnnotationType.FILEATTACHMENT:\n                return new FileAttachmentAnnotationElement(parameters);\n\n              default:\n                return new AnnotationElement(parameters);\n            }\n          }\n\n        }\n\n        class AnnotationElement {\n          constructor(parameters) {\n            let {\n              isRenderable = false,\n              ignoreBorder = false,\n              createQuadrilaterals = false\n            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.isRenderable = isRenderable;\n            this.data = parameters.data;\n            this.layer = parameters.layer;\n            this.page = parameters.page;\n            this.viewport = parameters.viewport;\n            this.linkService = parameters.linkService;\n            this.downloadManager = parameters.downloadManager;\n            this.imageResourcesPath = parameters.imageResourcesPath;\n            this.renderForms = parameters.renderForms;\n            this.svgFactory = parameters.svgFactory;\n            this.annotationStorage = parameters.annotationStorage;\n            this.enableScripting = parameters.enableScripting;\n            this.hasJSActions = parameters.hasJSActions;\n            this._fieldObjects = parameters.fieldObjects;\n            this._mouseState = parameters.mouseState;\n\n            if (isRenderable) {\n              this.container = this._createContainer(ignoreBorder);\n            }\n\n            if (createQuadrilaterals) {\n              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n            }\n          }\n\n          _createContainer() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            const data = this.data,\n                  page = this.page,\n                  viewport = this.viewport;\n            const container = document.createElement(\"section\");\n            let width = data.rect[2] - data.rect[0];\n            let height = data.rect[3] - data.rect[1];\n            container.setAttribute(\"data-annotation-id\", data.id);\n\n            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n            container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n            container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n            if (!ignoreBorder && data.borderStyle.width > 0) {\n              container.style.borderWidth = `${data.borderStyle.width}px`;\n\n              if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n                width -= 2 * data.borderStyle.width;\n                height -= 2 * data.borderStyle.width;\n              }\n\n              const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n              const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n              if (horizontalRadius > 0 || verticalRadius > 0) {\n                const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n                container.style.borderRadius = radius;\n              }\n\n              switch (data.borderStyle.style) {\n                case _util.AnnotationBorderStyleType.SOLID:\n                  container.style.borderStyle = \"solid\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.DASHED:\n                  container.style.borderStyle = \"dashed\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.BEVELED:\n                  (0, _util.warn)(\"Unimplemented border style: beveled\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.INSET:\n                  (0, _util.warn)(\"Unimplemented border style: inset\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.UNDERLINE:\n                  container.style.borderBottomStyle = \"solid\";\n                  break;\n\n                default:\n                  break;\n              }\n\n              const borderColor = data.borderColor || data.color || null;\n\n              if (borderColor) {\n                container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n              } else {\n                container.style.borderWidth = 0;\n              }\n            }\n\n            container.style.left = `${rect[0]}px`;\n            container.style.top = `${rect[1]}px`;\n            container.style.width = `${width}px`;\n            container.style.height = `${height}px`;\n            return container;\n          }\n\n          _createQuadrilaterals() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.data.quadPoints) {\n              return null;\n            }\n\n            const quadrilaterals = [];\n            const savedRect = this.data.rect;\n\n            for (const quadPoint of this.data.quadPoints) {\n              this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n              quadrilaterals.push(this._createContainer(ignoreBorder));\n            }\n\n            this.data.rect = savedRect;\n            return quadrilaterals;\n          }\n\n          _createPopup(trigger, data) {\n            let container = this.container;\n\n            if (this.quadrilaterals) {\n              trigger = trigger || this.quadrilaterals;\n              container = this.quadrilaterals[0];\n            }\n\n            if (!trigger) {\n              trigger = document.createElement(\"div\");\n              trigger.style.height = container.style.height;\n              trigger.style.width = container.style.width;\n              container.appendChild(trigger);\n            }\n\n            const popupElement = new PopupElement({\n              container,\n              trigger,\n              color: data.color,\n              titleObj: data.titleObj,\n              modificationDate: data.modificationDate,\n              contentsObj: data.contentsObj,\n              hideWrapper: true\n            });\n            const popup = popupElement.render();\n            popup.style.left = container.style.width;\n            container.appendChild(popup);\n          }\n\n          _renderQuadrilaterals(className) {\n            for (const quadrilateral of this.quadrilaterals) {\n              quadrilateral.className = className;\n            }\n\n            return this.quadrilaterals;\n          }\n\n          render() {\n            (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n          }\n\n          _getElementsByName(name) {\n            let skipId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const fields = [];\n\n            if (this._fieldObjects) {\n              const fieldObj = this._fieldObjects[name];\n\n              if (fieldObj) {\n                for (const {\n                  page,\n                  id,\n                  exportValues\n                } of fieldObj) {\n                  if (page === -1) {\n                    continue;\n                  }\n\n                  if (id === skipId) {\n                    continue;\n                  }\n\n                  const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n                  const domElement = document.getElementById(id);\n\n                  if (domElement && !GetElementsByNameSet.has(domElement)) {\n                    (0, _util.warn)(`_getElementsByName - element not allowed: ${id}`);\n                    continue;\n                  }\n\n                  fields.push({\n                    id,\n                    exportValue,\n                    domElement\n                  });\n                }\n              }\n\n              return fields;\n            }\n\n            for (const domElement of document.getElementsByName(name)) {\n              const {\n                id,\n                exportValue\n              } = domElement;\n\n              if (id === skipId) {\n                continue;\n              }\n\n              if (!GetElementsByNameSet.has(domElement)) {\n                continue;\n              }\n\n              fields.push({\n                id,\n                exportValue,\n                domElement\n              });\n            }\n\n            return fields;\n          }\n\n          static get platform() {\n            const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n            return (0, _util.shadow)(this, \"platform\", {\n              isWin: platform.includes(\"Win\"),\n              isMac: platform.includes(\"Mac\")\n            });\n          }\n\n        }\n\n        class LinkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.resetForm || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n            super(parameters, {\n              isRenderable,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            const {\n              data,\n              linkService\n            } = this;\n            const link = document.createElement(\"a\");\n\n            if (data.url) {\n              if (!linkService.addLinkAttributes) {\n                (0, _util.warn)(\"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\");\n              }\n\n              linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n            } else if (data.action) {\n              this._bindNamedAction(link, data.action);\n            } else if (data.dest) {\n              this._bindLink(link, data.dest);\n            } else {\n              let hasClickAction = false;\n\n              if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n                hasClickAction = true;\n\n                this._bindJSAction(link, data);\n              }\n\n              if (data.resetForm) {\n                this._bindResetFormAction(link, data.resetForm);\n              } else if (!hasClickAction) {\n                this._bindLink(link, \"\");\n              }\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n                const linkElement = index === 0 ? link : link.cloneNode();\n                quadrilateral.appendChild(linkElement);\n                return quadrilateral;\n              });\n            }\n\n            this.container.className = \"linkAnnotation\";\n            this.container.appendChild(link);\n            return this.container;\n          }\n\n          _bindLink(link, destination) {\n            link.href = this.linkService.getDestinationHash(destination);\n\n            link.onclick = () => {\n              if (destination) {\n                this.linkService.goToDestination(destination);\n              }\n\n              return false;\n            };\n\n            if (destination || destination === \"\") {\n              link.className = \"internalLink\";\n            }\n          }\n\n          _bindNamedAction(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeNamedAction(action);\n              return false;\n            };\n\n            link.className = \"internalLink\";\n          }\n\n          _bindJSAction(link, data) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n            const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n            for (const name of Object.keys(data.actions)) {\n              const jsName = map.get(name);\n\n              if (!jsName) {\n                continue;\n              }\n\n              link[jsName] = () => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: data.id,\n                    name\n                  }\n                });\n                return false;\n              };\n            }\n\n            if (!link.onclick) {\n              link.onclick = () => false;\n            }\n\n            link.className = \"internalLink\";\n          }\n\n          _bindResetFormAction(link, resetForm) {\n            const otherClickAction = link.onclick;\n\n            if (!otherClickAction) {\n              link.href = this.linkService.getAnchorUrl(\"\");\n            }\n\n            link.className = \"internalLink\";\n\n            if (!this._fieldObjects) {\n              (0, _util.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n\n              if (!otherClickAction) {\n                link.onclick = () => false;\n              }\n\n              return;\n            }\n\n            link.onclick = () => {\n              if (otherClickAction) {\n                otherClickAction();\n              }\n\n              const {\n                fields: resetFormFields,\n                refs: resetFormRefs,\n                include\n              } = resetForm;\n              const allFields = [];\n\n              if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n                const fieldIds = new Set(resetFormRefs);\n\n                for (const fieldName of resetFormFields) {\n                  const fields = this._fieldObjects[fieldName] || [];\n\n                  for (const {\n                    id\n                  } of fields) {\n                    fieldIds.add(id);\n                  }\n                }\n\n                for (const fields of Object.values(this._fieldObjects)) {\n                  for (const field of fields) {\n                    if (fieldIds.has(field.id) === include) {\n                      allFields.push(field);\n                    }\n                  }\n                }\n              } else {\n                for (const fields of Object.values(this._fieldObjects)) {\n                  allFields.push(...fields);\n                }\n              }\n\n              const storage = this.annotationStorage;\n              const allIds = [];\n\n              for (const field of allFields) {\n                const {\n                  id\n                } = field;\n                allIds.push(id);\n\n                switch (field.type) {\n                  case \"text\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value,\n                        valueAsString: value\n                      });\n                      break;\n                    }\n\n                  case \"checkbox\":\n                  case \"radiobutton\":\n                    {\n                      const value = field.defaultValue === field.exportValues;\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  case \"combobox\":\n                  case \"listbox\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  default:\n                    continue;\n                }\n\n                const domElement = document.getElementById(id);\n\n                if (!domElement || !GetElementsByNameSet.has(domElement)) {\n                  continue;\n                }\n\n                domElement.dispatchEvent(new Event(\"resetform\"));\n              }\n\n              if (this.enableScripting) {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: \"app\",\n                    ids: allIds,\n                    name: \"ResetForm\"\n                  }\n                });\n              }\n\n              return false;\n            };\n          }\n\n        }\n\n        class TextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            this.container.className = \"textAnnotation\";\n            const image = document.createElement(\"img\");\n            image.style.height = this.container.style.height;\n            image.style.width = this.container.style.width;\n            image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n            image.alt = \"[{{type}} Annotation]\";\n            image.dataset.l10nId = \"text_annotation_type\";\n            image.dataset.l10nArgs = JSON.stringify({\n              type: this.data.name\n            });\n\n            if (!this.data.hasPopup) {\n              this._createPopup(image, this.data);\n            }\n\n            this.container.appendChild(image);\n            return this.container;\n          }\n\n        }\n\n        class WidgetAnnotationElement extends AnnotationElement {\n          render() {\n            if (this.data.alternativeText) {\n              this.container.title = this.data.alternativeText;\n            }\n\n            return this.container;\n          }\n\n          _getKeyModifier(event) {\n            const {\n              isWin,\n              isMac\n            } = AnnotationElement.platform;\n            return isWin && event.ctrlKey || isMac && event.metaKey;\n          }\n\n          _setEventListener(element, baseName, eventName, valueGetter) {\n            if (baseName.includes(\"mouse\")) {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event),\n                    shift: event.shiftKey,\n                    modifier: this._getKeyModifier(event)\n                  }\n                });\n              });\n            } else {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: event.target.checked\n                  }\n                });\n              });\n            }\n          }\n\n          _setEventListeners(element, names, getter) {\n            for (const [baseName, eventName] of names) {\n              if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n                this._setEventListener(element, baseName, eventName, getter);\n              }\n            }\n          }\n\n          _setBackgroundColor(element) {\n            const color = this.data.backgroundColor || null;\n            element.style.backgroundColor = color === null ? \"transparent\" : _util.Util.makeHexColor(color[0], color[1], color[2]);\n          }\n\n          _dispatchEventFromSandbox(actions, jsEvent) {\n            const setColor = (jsName, styleName, event) => {\n              const color = event.detail[jsName];\n              event.target.style[styleName] = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n            };\n\n            const commonActions = {\n              display: event => {\n                const hidden = event.detail.display % 2 === 1;\n                event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden,\n                  print: event.detail.display === 0 || event.detail.display === 3\n                });\n              },\n              print: event => {\n                this.annotationStorage.setValue(this.data.id, {\n                  print: event.detail.print\n                });\n              },\n              hidden: event => {\n                event.target.style.visibility = event.detail.hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden: event.detail.hidden\n                });\n              },\n              focus: event => {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n              userName: event => {\n                event.target.title = event.detail.userName;\n              },\n              readonly: event => {\n                if (event.detail.readonly) {\n                  event.target.setAttribute(\"readonly\", \"\");\n                } else {\n                  event.target.removeAttribute(\"readonly\");\n                }\n              },\n              required: event => {\n                if (event.detail.required) {\n                  event.target.setAttribute(\"required\", \"\");\n                } else {\n                  event.target.removeAttribute(\"required\");\n                }\n              },\n              bgColor: event => {\n                setColor(\"bgColor\", \"backgroundColor\", event);\n              },\n              fillColor: event => {\n                setColor(\"fillColor\", \"backgroundColor\", event);\n              },\n              fgColor: event => {\n                setColor(\"fgColor\", \"color\", event);\n              },\n              textColor: event => {\n                setColor(\"textColor\", \"color\", event);\n              },\n              borderColor: event => {\n                setColor(\"borderColor\", \"borderColor\", event);\n              },\n              strokeColor: event => {\n                setColor(\"strokeColor\", \"borderColor\", event);\n              }\n            };\n\n            for (const name of Object.keys(jsEvent.detail)) {\n              const action = actions[name] || commonActions[name];\n\n              if (action) {\n                action(jsEvent);\n              }\n            }\n          }\n\n        }\n\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            const isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          setPropertyOnSiblings(base, key, value, keyInStorage) {\n            const storage = this.annotationStorage;\n\n            for (const element of this._getElementsByName(base.name, base.id)) {\n              if (element.domElement) {\n                element.domElement[key] = value;\n              }\n\n              storage.setValue(element.id, {\n                [keyInStorage]: value\n              });\n            }\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            this.container.className = \"textWidgetAnnotation\";\n            let element = null;\n\n            if (this.renderForms) {\n              const storedData = storage.getValue(id, {\n                value: this.data.fieldValue,\n                valueAsString: this.data.fieldValue\n              });\n              const textContent = storedData.valueAsString || storedData.value || \"\";\n              const elementData = {\n                userValue: null,\n                formattedValue: null,\n                beforeInputSelectionRange: null,\n                beforeInputValue: null\n              };\n\n              if (this.data.multiLine) {\n                element = document.createElement(\"textarea\");\n                element.textContent = textContent;\n              } else {\n                element = document.createElement(\"input\");\n                element.type = \"text\";\n                element.setAttribute(\"value\", textContent);\n              }\n\n              GetElementsByNameSet.add(element);\n              element.disabled = this.data.readOnly;\n              element.name = this.data.fieldName;\n              element.tabIndex = DEFAULT_TAB_INDEX;\n              elementData.userValue = textContent;\n              element.setAttribute(\"id\", id);\n              element.addEventListener(\"input\", event => {\n                storage.setValue(id, {\n                  value: event.target.value\n                });\n                this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n              });\n              element.addEventListener(\"resetform\", event => {\n                const defaultValue = this.data.defaultFieldValue || \"\";\n                element.value = elementData.userValue = defaultValue;\n                delete elementData.formattedValue;\n              });\n\n              let blurListener = event => {\n                if (elementData.formattedValue) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                event.target.scrollLeft = 0;\n                elementData.beforeInputSelectionRange = null;\n              };\n\n              if (this.enableScripting && this.hasJSActions) {\n                element.addEventListener(\"focus\", event => {\n                  if (elementData.userValue) {\n                    event.target.value = elementData.userValue;\n                  }\n                });\n                element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                  const actions = {\n                    value(event) {\n                      elementData.userValue = event.detail.value || \"\";\n                      storage.setValue(id, {\n                        value: elementData.userValue.toString()\n                      });\n\n                      if (!elementData.formattedValue) {\n                        event.target.value = elementData.userValue;\n                      }\n                    },\n\n                    valueAsString(event) {\n                      elementData.formattedValue = event.detail.valueAsString || \"\";\n\n                      if (event.target !== document.activeElement) {\n                        event.target.value = elementData.formattedValue;\n                      }\n\n                      storage.setValue(id, {\n                        formattedValue: elementData.formattedValue\n                      });\n                    },\n\n                    selRange(event) {\n                      const [selStart, selEnd] = event.detail.selRange;\n\n                      if (selStart >= 0 && selEnd < event.target.value.length) {\n                        event.target.setSelectionRange(selStart, selEnd);\n                      }\n                    }\n\n                  };\n\n                  this._dispatchEventFromSandbox(actions, jsEvent);\n                });\n                element.addEventListener(\"keydown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  let commitKey = -1;\n\n                  if (event.key === \"Escape\") {\n                    commitKey = 0;\n                  } else if (event.key === \"Enter\") {\n                    commitKey = 2;\n                  } else if (event.key === \"Tab\") {\n                    commitKey = 3;\n                  }\n\n                  if (commitKey === -1) {\n                    return;\n                  }\n\n                  elementData.userValue = event.target.value;\n                  this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                    source: this,\n                    detail: {\n                      id,\n                      name: \"Keystroke\",\n                      value: event.target.value,\n                      willCommit: true,\n                      commitKey,\n                      selStart: event.target.selectionStart,\n                      selEnd: event.target.selectionEnd\n                    }\n                  });\n                });\n                const _blurListener = blurListener;\n                blurListener = null;\n                element.addEventListener(\"blur\", event => {\n                  if (this._mouseState.isDown) {\n                    elementData.userValue = event.target.value;\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: event.target.value,\n                        willCommit: true,\n                        commitKey: 1,\n                        selStart: event.target.selectionStart,\n                        selEnd: event.target.selectionEnd\n                      }\n                    });\n                  }\n\n                  _blurListener(event);\n                });\n                element.addEventListener(\"mousedown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  elementData.beforeInputSelectionRange = null;\n                });\n                element.addEventListener(\"keyup\", event => {\n                  if (event.target.selectionStart === event.target.selectionEnd) {\n                    elementData.beforeInputSelectionRange = null;\n                  }\n                });\n                element.addEventListener(\"select\", event => {\n                  elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n                });\n\n                if (this.data.actions?.Keystroke) {\n                  element.addEventListener(\"input\", event => {\n                    let selStart = -1;\n                    let selEnd = -1;\n\n                    if (elementData.beforeInputSelectionRange) {\n                      [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                    }\n\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: elementData.beforeInputValue,\n                        change: event.data,\n                        willCommit: false,\n                        selStart,\n                        selEnd\n                      }\n                    });\n                  });\n                }\n\n                this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n              }\n\n              if (blurListener) {\n                element.addEventListener(\"blur\", blurListener);\n              }\n\n              if (this.data.maxLen !== null) {\n                element.maxLength = this.data.maxLen;\n              }\n\n              if (this.data.comb) {\n                const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                const combWidth = fieldWidth / this.data.maxLen;\n                element.classList.add(\"comb\");\n                element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n              }\n            } else {\n              element = document.createElement(\"div\");\n              element.textContent = this.data.fieldValue;\n              element.style.verticalAlign = \"middle\";\n              element.style.display = \"table-cell\";\n            }\n\n            this._setTextStyle(element);\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n          _setTextStyle(element) {\n            const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n            const {\n              fontSize,\n              fontColor\n            } = this.data.defaultAppearanceData;\n            const style = element.style;\n\n            if (fontSize) {\n              style.fontSize = `${fontSize}px`;\n            }\n\n            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n            if (this.data.textAlignment !== null) {\n              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n            }\n          }\n\n        }\n\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.exportValue === data.fieldValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== \"Off\";\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            this.container.className = \"buttonWidgetAnnotation checkBox\";\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.disabled = data.readOnly;\n            element.type = \"checkbox\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.setAttribute(\"exportValue\", data.exportValue);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const checkbox of this._getElementsByName(name, id)) {\n                const curChecked = checked && checkbox.exportValue === data.exportValue;\n\n                if (checkbox.domElement) {\n                  checkbox.domElement.checked = curChecked;\n                }\n\n                storage.setValue(checkbox.id, {\n                  value: curChecked\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue || \"Off\";\n              event.target.checked = defaultValue === data.exportValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    event.target.checked = event.detail.value !== \"Off\";\n                    storage.setValue(id, {\n                      value: event.target.checked\n                    });\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.className = \"buttonWidgetAnnotation radioButton\";\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.fieldValue === data.buttonValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== data.buttonValue;\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.disabled = data.readOnly;\n            element.type = \"radio\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const radio of this._getElementsByName(name, id)) {\n                storage.setValue(radio.id, {\n                  value: false\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue;\n              event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              const pdfButtonValue = data.buttonValue;\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value: event => {\n                    const checked = pdfButtonValue === event.detail.value;\n\n                    for (const radio of this._getElementsByName(event.target.name)) {\n                      const curChecked = checked && radio.id === id;\n\n                      if (radio.domElement) {\n                        radio.domElement.checked = curChecked;\n                      }\n\n                      storage.setValue(radio.id, {\n                        value: curChecked\n                      });\n                    }\n                  }\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n          render() {\n            const container = super.render();\n            container.className = \"buttonWidgetAnnotation pushButton\";\n\n            if (this.data.alternativeText) {\n              container.title = this.data.alternativeText;\n            }\n\n            return container;\n          }\n\n        }\n\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.className = \"choiceWidgetAnnotation\";\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            storage.getValue(id, {\n              value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n            });\n            let {\n              fontSize\n            } = this.data.defaultAppearanceData;\n\n            if (!fontSize) {\n              fontSize = 9;\n            }\n\n            const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n            const selectElement = document.createElement(\"select\");\n            GetElementsByNameSet.add(selectElement);\n            selectElement.disabled = this.data.readOnly;\n            selectElement.name = this.data.fieldName;\n            selectElement.setAttribute(\"id\", id);\n            selectElement.tabIndex = DEFAULT_TAB_INDEX;\n            selectElement.style.fontSize = `${fontSize}px`;\n\n            if (!this.data.combo) {\n              selectElement.size = this.data.options.length;\n\n              if (this.data.multiSelect) {\n                selectElement.multiple = true;\n              }\n            }\n\n            selectElement.addEventListener(\"resetform\", event => {\n              const defaultValue = this.data.defaultFieldValue;\n\n              for (const option of selectElement.options) {\n                option.selected = option.value === defaultValue;\n              }\n            });\n\n            for (const option of this.data.options) {\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = option.displayValue;\n              optionElement.value = option.exportValue;\n\n              if (this.data.combo) {\n                optionElement.style.fontSize = fontSizeStyle;\n              }\n\n              if (this.data.fieldValue.includes(option.exportValue)) {\n                optionElement.setAttribute(\"selected\", true);\n              }\n\n              selectElement.appendChild(optionElement);\n            }\n\n            const getValue = (event, isExport) => {\n              const name = isExport ? \"value\" : \"textContent\";\n              const options = event.target.options;\n\n              if (!event.target.multiple) {\n                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n              }\n\n              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n            };\n\n            const getItems = event => {\n              const options = event.target.options;\n              return Array.prototype.map.call(options, option => {\n                return {\n                  displayValue: option.textContent,\n                  exportValue: option.value\n                };\n              });\n            };\n\n            if (this.enableScripting && this.hasJSActions) {\n              selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    const value = event.detail.value;\n                    const values = new Set(Array.isArray(value) ? value : [value]);\n\n                    for (const option of selectElement.options) {\n                      option.selected = values.has(option.value);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  multipleSelection(event) {\n                    selectElement.multiple = true;\n                  },\n\n                  remove(event) {\n                    const options = selectElement.options;\n                    const index = event.detail.remove;\n                    options[index].selected = false;\n                    selectElement.remove(index);\n\n                    if (options.length > 0) {\n                      const i = Array.prototype.findIndex.call(options, option => option.selected);\n\n                      if (i === -1) {\n                        options[0].selected = true;\n                      }\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  clear(event) {\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    storage.setValue(id, {\n                      value: null,\n                      items: []\n                    });\n                  },\n\n                  insert(event) {\n                    const {\n                      index,\n                      displayValue,\n                      exportValue\n                    } = event.detail.insert;\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = displayValue;\n                    optionElement.value = exportValue;\n                    selectElement.insertBefore(optionElement, selectElement.children[index]);\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  items(event) {\n                    const {\n                      items\n                    } = event.detail;\n\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    for (const item of items) {\n                      const {\n                        displayValue,\n                        exportValue\n                      } = item;\n                      const optionElement = document.createElement(\"option\");\n                      optionElement.textContent = displayValue;\n                      optionElement.value = exportValue;\n                      selectElement.appendChild(optionElement);\n                    }\n\n                    if (selectElement.options.length > 0) {\n                      selectElement.options[0].selected = true;\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  indices(event) {\n                    const indices = new Set(event.detail.indices);\n\n                    for (const option of event.target.options) {\n                      option.selected = indices.has(option.index);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  editable(event) {\n                    event.target.disabled = !event.detail.editable;\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n              selectElement.addEventListener(\"input\", event => {\n                const exportValue = getValue(event, true);\n                const value = getValue(event, false);\n                storage.setValue(id, {\n                  value: exportValue\n                });\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value,\n                    changeEx: exportValue,\n                    willCommit: true,\n                    commitKey: 1,\n                    keyDown: false\n                  }\n                });\n              });\n\n              this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"]], event => event.target.checked);\n            } else {\n              selectElement.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: getValue(event)\n                });\n              });\n            }\n\n            this._setBackgroundColor(selectElement);\n\n            this.container.appendChild(selectElement);\n            return this.container;\n          }\n\n        }\n\n        class PopupAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n            this.container.className = \"popupAnnotation\";\n\n            if (IGNORE_TYPES.includes(this.data.parentType)) {\n              return this.container;\n            }\n\n            const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n            const parentElements = this.layer.querySelectorAll(selector);\n\n            if (parentElements.length === 0) {\n              return this.container;\n            }\n\n            const popup = new PopupElement({\n              container: this.container,\n              trigger: Array.from(parentElements),\n              color: this.data.color,\n              titleObj: this.data.titleObj,\n              modificationDate: this.data.modificationDate,\n              contentsObj: this.data.contentsObj\n            });\n            const page = this.page;\n\n            const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n            const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n            const popupTop = rect[1];\n            this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n            this.container.style.left = `${popupLeft}px`;\n            this.container.style.top = `${popupTop}px`;\n            this.container.appendChild(popup.render());\n            return this.container;\n          }\n\n        }\n\n        class PopupElement {\n          constructor(parameters) {\n            this.container = parameters.container;\n            this.trigger = parameters.trigger;\n            this.color = parameters.color;\n            this.titleObj = parameters.titleObj;\n            this.modificationDate = parameters.modificationDate;\n            this.contentsObj = parameters.contentsObj;\n            this.hideWrapper = parameters.hideWrapper || false;\n            this.pinned = false;\n          }\n\n          render() {\n            const BACKGROUND_ENLIGHT = 0.7;\n            const wrapper = document.createElement(\"div\");\n            wrapper.className = \"popupWrapper\";\n            this.hideElement = this.hideWrapper ? wrapper : this.container;\n            this.hideElement.hidden = true;\n            const popup = document.createElement(\"div\");\n            popup.className = \"popup\";\n            const color = this.color;\n\n            if (color) {\n              const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n              const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n              const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n              popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n            }\n\n            const title = document.createElement(\"h1\");\n            title.dir = this.titleObj.dir;\n            title.textContent = this.titleObj.str;\n            popup.appendChild(title);\n\n            const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n            if (dateObject) {\n              const modificationDate = document.createElement(\"span\");\n              modificationDate.textContent = \"{{date}}, {{time}}\";\n              modificationDate.dataset.l10nId = \"annotation_date_string\";\n              modificationDate.dataset.l10nArgs = JSON.stringify({\n                date: dateObject.toLocaleDateString(),\n                time: dateObject.toLocaleTimeString()\n              });\n              popup.appendChild(modificationDate);\n            }\n\n            const contents = this._formatContents(this.contentsObj);\n\n            popup.appendChild(contents);\n\n            if (!Array.isArray(this.trigger)) {\n              this.trigger = [this.trigger];\n            }\n\n            for (const element of this.trigger) {\n              element.addEventListener(\"click\", this._toggle.bind(this));\n              element.addEventListener(\"mouseover\", this._show.bind(this, false));\n              element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n            }\n\n            popup.addEventListener(\"click\", this._hide.bind(this, true));\n            wrapper.appendChild(popup);\n            return wrapper;\n          }\n\n          _formatContents(_ref24) {\n            let {\n              str,\n              dir\n            } = _ref24;\n            const p = document.createElement(\"p\");\n            p.dir = dir;\n            const lines = str.split(/(?:\\r\\n?|\\n)/);\n\n            for (let i = 0, ii = lines.length; i < ii; ++i) {\n              const line = lines[i];\n              p.appendChild(document.createTextNode(line));\n\n              if (i < ii - 1) {\n                p.appendChild(document.createElement(\"br\"));\n              }\n            }\n\n            return p;\n          }\n\n          _toggle() {\n            if (this.pinned) {\n              this._hide(true);\n            } else {\n              this._show(true);\n            }\n          }\n\n          _show() {\n            let pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (pin) {\n              this.pinned = true;\n            }\n\n            if (this.hideElement.hidden) {\n              this.hideElement.hidden = false;\n              this.container.style.zIndex += 1;\n            }\n          }\n\n          _hide() {\n            let unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            if (unpin) {\n              this.pinned = false;\n            }\n\n            if (!this.hideElement.hidden && !this.pinned) {\n              this.hideElement.hidden = true;\n              this.container.style.zIndex -= 1;\n            }\n          }\n\n        }\n\n        class FreeTextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"freeTextAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class LineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"lineAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const line = this.svgFactory.createElement(\"svg:line\");\n            line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n            line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n            line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n            line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n            line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            line.setAttribute(\"stroke\", \"transparent\");\n            svg.appendChild(line);\n            this.container.append(svg);\n\n            this._createPopup(line, data);\n\n            return this.container;\n          }\n\n        }\n\n        class SquareAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"squareAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const square = this.svgFactory.createElement(\"svg:rect\");\n            square.setAttribute(\"x\", borderWidth / 2);\n            square.setAttribute(\"y\", borderWidth / 2);\n            square.setAttribute(\"width\", width - borderWidth);\n            square.setAttribute(\"height\", height - borderWidth);\n            square.setAttribute(\"stroke-width\", borderWidth || 1);\n            square.setAttribute(\"stroke\", \"transparent\");\n            square.setAttribute(\"fill\", \"none\");\n            svg.appendChild(square);\n            this.container.append(svg);\n\n            this._createPopup(square, data);\n\n            return this.container;\n          }\n\n        }\n\n        class CircleAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"circleAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const circle = this.svgFactory.createElement(\"svg:ellipse\");\n            circle.setAttribute(\"cx\", width / 2);\n            circle.setAttribute(\"cy\", height / 2);\n            circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n            circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n            circle.setAttribute(\"stroke-width\", borderWidth || 1);\n            circle.setAttribute(\"stroke\", \"transparent\");\n            circle.setAttribute(\"fill\", \"none\");\n            svg.appendChild(circle);\n            this.container.append(svg);\n\n            this._createPopup(circle, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolylineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"polylineAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            let points = [];\n\n            for (const coordinate of data.vertices) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(x + \",\" + y);\n            }\n\n            points = points.join(\" \");\n            const polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute(\"points\", points);\n            polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            polyline.setAttribute(\"stroke\", \"transparent\");\n            polyline.setAttribute(\"fill\", \"none\");\n            svg.appendChild(polyline);\n            this.container.append(svg);\n\n            this._createPopup(polyline, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n          constructor(parameters) {\n            super(parameters);\n            this.containerClassName = \"polygonAnnotation\";\n            this.svgElementName = \"svg:polygon\";\n          }\n\n        }\n\n        class CaretAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"caretAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class InkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"inkAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n\n            for (const inkList of data.inkLists) {\n              let points = [];\n\n              for (const coordinate of inkList) {\n                const x = coordinate.x - data.rect[0];\n                const y = data.rect[3] - coordinate.y;\n                points.push(`${x},${y}`);\n              }\n\n              points = points.join(\" \");\n              const polyline = this.svgFactory.createElement(this.svgElementName);\n              polyline.setAttribute(\"points\", points);\n              polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n              polyline.setAttribute(\"stroke\", \"transparent\");\n              polyline.setAttribute(\"fill\", \"none\");\n\n              this._createPopup(polyline, data);\n\n              svg.appendChild(polyline);\n            }\n\n            this.container.append(svg);\n            return this.container;\n          }\n\n        }\n\n        class HighlightAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"highlightAnnotation\");\n            }\n\n            this.container.className = \"highlightAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class UnderlineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"underlineAnnotation\");\n            }\n\n            this.container.className = \"underlineAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class SquigglyAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"squigglyAnnotation\");\n            }\n\n            this.container.className = \"squigglyAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StrikeOutAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n            }\n\n            this.container.className = \"strikeoutAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StampAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"stampAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true\n            });\n            const {\n              filename,\n              content\n            } = this.data.file;\n            this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n            this.content = content;\n            this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n              source: this,\n              id: (0, _util.stringToPDFString)(filename),\n              filename,\n              content\n            });\n          }\n\n          render() {\n            this.container.className = \"fileAttachmentAnnotation\";\n            const trigger = document.createElement(\"div\");\n            trigger.style.height = this.container.style.height;\n            trigger.style.width = this.container.style.width;\n            trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n            if (!this.data.hasPopup && (this.data.titleObj?.str || this.data.contentsObj?.str)) {\n              this._createPopup(trigger, this.data);\n            }\n\n            this.container.appendChild(trigger);\n            return this.container;\n          }\n\n          _download() {\n            this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);\n          }\n\n        }\n\n        class AnnotationLayer {\n          static render(parameters) {\n            const sortedAnnotations = [],\n                  popupAnnotations = [];\n\n            for (const data of parameters.annotations) {\n              if (!data) {\n                continue;\n              }\n\n              if (data.annotationType === _util.AnnotationType.POPUP) {\n                popupAnnotations.push(data);\n                continue;\n              }\n\n              sortedAnnotations.push(data);\n            }\n\n            if (popupAnnotations.length) {\n              sortedAnnotations.push(...popupAnnotations);\n            }\n\n            for (const data of sortedAnnotations) {\n              const element = AnnotationElementFactory.create({\n                data,\n                layer: parameters.div,\n                page: parameters.page,\n                viewport: parameters.viewport,\n                linkService: parameters.linkService,\n                downloadManager: parameters.downloadManager,\n                imageResourcesPath: parameters.imageResourcesPath || \"\",\n                renderForms: parameters.renderForms !== false,\n                svgFactory: new _display_utils.DOMSVGFactory(),\n                annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n                enableScripting: parameters.enableScripting,\n                hasJSActions: parameters.hasJSActions,\n                fieldObjects: parameters.fieldObjects,\n                mouseState: parameters.mouseState || {\n                  isDown: false\n                }\n              });\n\n              if (element.isRenderable) {\n                const rendered = element.render();\n\n                if (data.hidden) {\n                  rendered.style.visibility = \"hidden\";\n                }\n\n                if (Array.isArray(rendered)) {\n                  for (const renderedElement of rendered) {\n                    parameters.div.appendChild(renderedElement);\n                  }\n                } else {\n                  if (element instanceof PopupAnnotationElement) {\n                    parameters.div.prepend(rendered);\n                  } else {\n                    parameters.div.appendChild(rendered);\n                  }\n                }\n              }\n            }\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n\n            for (const data of parameters.annotations) {\n              const elements = parameters.div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n              if (elements) {\n                for (const element of elements) {\n                  element.style.transform = transform;\n                }\n              }\n            }\n\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.AnnotationLayer = AnnotationLayer;\n        /***/\n      },\n      /* 19 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorConverters = void 0;\n\n        function makeColorComp(n) {\n          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n\n        class ColorConverters {\n          static CMYK_G(_ref25) {\n            let [c, y, m, k] = _ref25;\n            return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n          }\n\n          static G_CMYK(_ref26) {\n            let [g] = _ref26;\n            return [\"CMYK\", 0, 0, 0, 1 - g];\n          }\n\n          static G_RGB(_ref27) {\n            let [g] = _ref27;\n            return [\"RGB\", g, g, g];\n          }\n\n          static G_HTML(_ref28) {\n            let [g] = _ref28;\n            const G = makeColorComp(g);\n            return `#${G}${G}${G}`;\n          }\n\n          static RGB_G(_ref29) {\n            let [r, g, b] = _ref29;\n            return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n          }\n\n          static RGB_HTML(_ref30) {\n            let [r, g, b] = _ref30;\n            const R = makeColorComp(r);\n            const G = makeColorComp(g);\n            const B = makeColorComp(b);\n            return `#${R}${G}${B}`;\n          }\n\n          static T_HTML() {\n            return \"#00000000\";\n          }\n\n          static CMYK_RGB(_ref31) {\n            let [c, y, m, k] = _ref31;\n            return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n          }\n\n          static CMYK_HTML(components) {\n            return this.RGB_HTML(this.CMYK_RGB(components));\n          }\n\n          static RGB_CMYK(_ref32) {\n            let [r, g, b] = _ref32;\n            const c = 1 - r;\n            const m = 1 - g;\n            const y = 1 - b;\n            const k = Math.min(c, m, y);\n            return [\"CMYK\", c, m, y, k];\n          }\n\n        }\n\n        exports.ColorConverters = ColorConverters;\n        /***/\n      },\n      /* 20 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.renderTextLayer = renderTextLayer;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const MAX_TEXT_DIVS_TO_RENDER = 100000;\n        const DEFAULT_FONT_SIZE = 30;\n        const DEFAULT_FONT_ASCENT = 0.8;\n        const ascentCache = new Map();\n        const AllWhitespaceRegexp = /^\\s+$/g;\n\n        function getAscent(fontFamily, ctx) {\n          const cachedAscent = ascentCache.get(fontFamily);\n\n          if (cachedAscent) {\n            return cachedAscent;\n          }\n\n          ctx.save();\n          ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n          const metrics = ctx.measureText(\"\");\n          let ascent = metrics.fontBoundingBoxAscent;\n          let descent = Math.abs(metrics.fontBoundingBoxDescent);\n\n          if (ascent) {\n            ctx.restore();\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ctx.strokeStyle = \"red\";\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"g\", 0, 0);\n          let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          descent = 0;\n\n          for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n            if (pixels[i] > 0) {\n              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          ascent = 0;\n\n          for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n            if (pixels[i] > 0) {\n              ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.restore();\n\n          if (ascent) {\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n          return DEFAULT_FONT_ASCENT;\n        }\n\n        function appendText(task, geom, styles, ctx) {\n          const textDiv = document.createElement(\"span\");\n          const textDivProperties = task._enhanceTextSelection ? {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL,\n            originalTransform: null,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n            scale: 1\n          } : {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL\n          };\n\n          task._textDivs.push(textDiv);\n\n          const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n          let angle = Math.atan2(tx[1], tx[0]);\n          const style = styles[geom.fontName];\n\n          if (style.vertical) {\n            angle += Math.PI / 2;\n          }\n\n          const fontHeight = Math.hypot(tx[2], tx[3]);\n          const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n          let left, top;\n\n          if (angle === 0) {\n            left = tx[4];\n            top = tx[5] - fontAscent;\n          } else {\n            left = tx[4] + fontAscent * Math.sin(angle);\n            top = tx[5] - fontAscent * Math.cos(angle);\n          }\n\n          textDiv.style.left = `${left}px`;\n          textDiv.style.top = `${top}px`;\n          textDiv.style.fontSize = `${fontHeight}px`;\n          textDiv.style.fontFamily = style.fontFamily;\n          textDiv.setAttribute(\"role\", \"presentation\");\n          textDiv.textContent = geom.str;\n          textDiv.dir = geom.dir;\n\n          if (task._fontInspectorEnabled) {\n            textDiv.dataset.fontName = geom.fontName;\n          }\n\n          if (angle !== 0) {\n            textDivProperties.angle = angle * (180 / Math.PI);\n          }\n\n          let shouldScaleText = false;\n\n          if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {\n            shouldScaleText = true;\n          } else if (geom.transform[0] !== geom.transform[3]) {\n            const absScaleX = Math.abs(geom.transform[0]),\n                  absScaleY = Math.abs(geom.transform[3]);\n\n            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n              shouldScaleText = true;\n            }\n          }\n\n          if (shouldScaleText) {\n            if (style.vertical) {\n              textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n            } else {\n              textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n            }\n          }\n\n          task._textDivProperties.set(textDiv, textDivProperties);\n\n          if (task._textContentStream) {\n            task._layoutText(textDiv);\n          }\n\n          if (task._enhanceTextSelection && textDivProperties.hasText) {\n            let angleCos = 1,\n                angleSin = 0;\n\n            if (angle !== 0) {\n              angleCos = Math.cos(angle);\n              angleSin = Math.sin(angle);\n            }\n\n            const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n            const divHeight = fontHeight;\n            let m, b;\n\n            if (angle !== 0) {\n              m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n            } else {\n              b = [left, top, left + divWidth, top + divHeight];\n            }\n\n            task._bounds.push({\n              left: b[0],\n              top: b[1],\n              right: b[2],\n              bottom: b[3],\n              div: textDiv,\n              size: [divWidth, divHeight],\n              m\n            });\n          }\n        }\n\n        function render(task) {\n          if (task._canceled) {\n            return;\n          }\n\n          const textDivs = task._textDivs;\n          const capability = task._capability;\n          const textDivsLength = textDivs.length;\n\n          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n            task._renderingDone = true;\n            capability.resolve();\n            return;\n          }\n\n          if (!task._textContentStream) {\n            for (let i = 0; i < textDivsLength; i++) {\n              task._layoutText(textDivs[i]);\n            }\n          }\n\n          task._renderingDone = true;\n          capability.resolve();\n        }\n\n        function findPositiveMin(ts, offset, count) {\n          let result = 0;\n\n          for (let i = 0; i < count; i++) {\n            const t = ts[offset++];\n\n            if (t > 0) {\n              result = result ? Math.min(t, result) : t;\n            }\n          }\n\n          return result;\n        }\n\n        function expand(task) {\n          const bounds = task._bounds;\n          const viewport = task._viewport;\n          const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n          for (let i = 0; i < expanded.length; i++) {\n            const div = bounds[i].div;\n\n            const divProperties = task._textDivProperties.get(div);\n\n            if (divProperties.angle === 0) {\n              divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n              divProperties.paddingTop = bounds[i].top - expanded[i].top;\n              divProperties.paddingRight = expanded[i].right - bounds[i].right;\n              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n              task._textDivProperties.set(div, divProperties);\n\n              continue;\n            }\n\n            const e = expanded[i],\n                  b = bounds[i];\n            const m = b.m,\n                  c = m[0],\n                  s = m[1];\n            const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n            const ts = new Float64Array(64);\n\n            for (let j = 0, jj = points.length; j < jj; j++) {\n              const t = _util.Util.applyTransform(points[j], m);\n\n              ts[j + 0] = c && (e.left - t[0]) / c;\n              ts[j + 4] = s && (e.top - t[1]) / s;\n              ts[j + 8] = c && (e.right - t[0]) / c;\n              ts[j + 12] = s && (e.bottom - t[1]) / s;\n              ts[j + 16] = s && (e.left - t[0]) / -s;\n              ts[j + 20] = c && (e.top - t[1]) / c;\n              ts[j + 24] = s && (e.right - t[0]) / -s;\n              ts[j + 28] = c && (e.bottom - t[1]) / c;\n              ts[j + 32] = c && (e.left - t[0]) / -c;\n              ts[j + 36] = s && (e.top - t[1]) / -s;\n              ts[j + 40] = c && (e.right - t[0]) / -c;\n              ts[j + 44] = s && (e.bottom - t[1]) / -s;\n              ts[j + 48] = s && (e.left - t[0]) / s;\n              ts[j + 52] = c && (e.top - t[1]) / -c;\n              ts[j + 56] = s && (e.right - t[0]) / s;\n              ts[j + 60] = c && (e.bottom - t[1]) / -c;\n            }\n\n            const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n            task._textDivProperties.set(div, divProperties);\n          }\n        }\n\n        function expandBounds(width, height, boxes) {\n          const bounds = boxes.map(function (box, i) {\n            return {\n              x1: box.left,\n              y1: box.top,\n              x2: box.right,\n              y2: box.bottom,\n              index: i,\n              x1New: undefined,\n              x2New: undefined\n            };\n          });\n          expandBoundsLTR(width, bounds);\n          const expanded = new Array(boxes.length);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i] = {\n              left: b.x1New,\n              top: 0,\n              right: b.x2New,\n              bottom: 0\n            };\n          }\n\n          boxes.map(function (box, i) {\n            const e = expanded[i],\n                  b = bounds[i];\n            b.x1 = box.top;\n            b.y1 = width - e.right;\n            b.x2 = box.bottom;\n            b.y2 = width - e.left;\n            b.index = i;\n            b.x1New = undefined;\n            b.x2New = undefined;\n          });\n          expandBoundsLTR(height, bounds);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i].top = b.x1New;\n            expanded[i].bottom = b.x2New;\n          }\n\n          return expanded;\n        }\n\n        function expandBoundsLTR(width, bounds) {\n          bounds.sort(function (a, b) {\n            return a.x1 - b.x1 || a.index - b.index;\n          });\n          const fakeBoundary = {\n            x1: -Infinity,\n            y1: -Infinity,\n            x2: 0,\n            y2: Infinity,\n            index: -1,\n            x1New: 0,\n            x2New: 0\n          };\n          const horizon = [{\n            start: -Infinity,\n            end: Infinity,\n            boundary: fakeBoundary\n          }];\n\n          for (const boundary of bounds) {\n            let i = 0;\n\n            while (i < horizon.length && horizon[i].end <= boundary.y1) {\n              i++;\n            }\n\n            let j = horizon.length - 1;\n\n            while (j >= 0 && horizon[j].start >= boundary.y2) {\n              j--;\n            }\n\n            let horizonPart, affectedBoundary;\n            let q,\n                k,\n                maxXNew = -Infinity;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              let xNew;\n\n              if (affectedBoundary.x2 > boundary.x1) {\n                xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n              } else if (affectedBoundary.x2New === undefined) {\n                xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n              } else {\n                xNew = affectedBoundary.x2New;\n              }\n\n              if (xNew > maxXNew) {\n                maxXNew = xNew;\n              }\n            }\n\n            boundary.x1New = maxXNew;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New === undefined) {\n                if (affectedBoundary.x2 > boundary.x1) {\n                  if (affectedBoundary.index > boundary.index) {\n                    affectedBoundary.x2New = affectedBoundary.x2;\n                  }\n                } else {\n                  affectedBoundary.x2New = maxXNew;\n                }\n              } else if (affectedBoundary.x2New > maxXNew) {\n                affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n              }\n            }\n\n            const changedHorizon = [];\n            let lastBoundary = null;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n              if (lastBoundary === useBoundary) {\n                changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n              } else {\n                changedHorizon.push({\n                  start: horizonPart.start,\n                  end: horizonPart.end,\n                  boundary: useBoundary\n                });\n                lastBoundary = useBoundary;\n              }\n            }\n\n            if (horizon[i].start < boundary.y1) {\n              changedHorizon[0].start = boundary.y1;\n              changedHorizon.unshift({\n                start: horizon[i].start,\n                end: boundary.y1,\n                boundary: horizon[i].boundary\n              });\n            }\n\n            if (boundary.y2 < horizon[j].end) {\n              changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n              changedHorizon.push({\n                start: boundary.y2,\n                end: horizon[j].end,\n                boundary: horizon[j].boundary\n              });\n            }\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New !== undefined) {\n                continue;\n              }\n\n              let used = false;\n\n              for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = 0; !used && k < changedHorizon.length; k++) {\n                used = changedHorizon[k].boundary === affectedBoundary;\n              }\n\n              if (!used) {\n                affectedBoundary.x2New = maxXNew;\n              }\n            }\n\n            Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n          }\n\n          for (const horizonPart of horizon) {\n            const affectedBoundary = horizonPart.boundary;\n\n            if (affectedBoundary.x2New === undefined) {\n              affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n            }\n          }\n        }\n\n        class TextLayerRenderTask {\n          constructor(_ref33) {\n            let {\n              textContent,\n              textContentStream,\n              container,\n              viewport,\n              textDivs,\n              textContentItemsStr,\n              enhanceTextSelection\n            } = _ref33;\n            this._textContent = textContent;\n            this._textContentStream = textContentStream;\n            this._container = container;\n            this._document = container.ownerDocument;\n            this._viewport = viewport;\n            this._textDivs = textDivs || [];\n            this._textContentItemsStr = textContentItemsStr || [];\n            this._enhanceTextSelection = !!enhanceTextSelection;\n            this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n            this._reader = null;\n            this._layoutTextLastFontSize = null;\n            this._layoutTextLastFontFamily = null;\n            this._layoutTextCtx = null;\n            this._textDivProperties = new WeakMap();\n            this._renderingDone = false;\n            this._canceled = false;\n            this._capability = (0, _util.createPromiseCapability)();\n            this._renderTimer = null;\n            this._bounds = [];\n\n            this._capability.promise.finally(() => {\n              if (!this._enhanceTextSelection) {\n                this._textDivProperties = null;\n              }\n\n              if (this._layoutTextCtx) {\n                this._layoutTextCtx.canvas.width = 0;\n                this._layoutTextCtx.canvas.height = 0;\n                this._layoutTextCtx = null;\n              }\n            }).catch(() => {});\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          cancel() {\n            this._canceled = true;\n\n            if (this._reader) {\n              this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\")).catch(() => {});\n\n              this._reader = null;\n            }\n\n            if (this._renderTimer !== null) {\n              clearTimeout(this._renderTimer);\n              this._renderTimer = null;\n            }\n\n            this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n          }\n\n          _processItems(items, styleCache) {\n            for (let i = 0, len = items.length; i < len; i++) {\n              if (items[i].str === undefined) {\n                if (items[i].type === \"beginMarkedContentProps\" || items[i].type === \"beginMarkedContent\") {\n                  const parent = this._container;\n                  this._container = document.createElement(\"span\");\n\n                  this._container.classList.add(\"markedContent\");\n\n                  if (items[i].id !== null) {\n                    this._container.setAttribute(\"id\", `${items[i].id}`);\n                  }\n\n                  parent.appendChild(this._container);\n                } else if (items[i].type === \"endMarkedContent\") {\n                  this._container = this._container.parentNode;\n                }\n\n                continue;\n              }\n\n              this._textContentItemsStr.push(items[i].str);\n\n              appendText(this, items[i], styleCache, this._layoutTextCtx);\n            }\n          }\n\n          _layoutText(textDiv) {\n            const textDivProperties = this._textDivProperties.get(textDiv);\n\n            let transform = \"\";\n\n            if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n              const {\n                fontSize,\n                fontFamily\n              } = textDiv.style;\n\n              if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n                this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n                this._layoutTextLastFontSize = fontSize;\n                this._layoutTextLastFontFamily = fontFamily;\n              }\n\n              const {\n                width\n              } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n              if (width > 0) {\n                const scale = textDivProperties.canvasWidth / width;\n\n                if (this._enhanceTextSelection) {\n                  textDivProperties.scale = scale;\n                }\n\n                transform = `scaleX(${scale})`;\n              }\n            }\n\n            if (textDivProperties.angle !== 0) {\n              transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n            }\n\n            if (transform.length > 0) {\n              if (this._enhanceTextSelection) {\n                textDivProperties.originalTransform = transform;\n              }\n\n              textDiv.style.transform = transform;\n            }\n\n            if (textDivProperties.hasText) {\n              this._container.appendChild(textDiv);\n            }\n\n            if (textDivProperties.hasEOL) {\n              const br = document.createElement(\"br\");\n              br.setAttribute(\"role\", \"presentation\");\n\n              this._container.appendChild(br);\n            }\n          }\n\n          _render() {\n            let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            const capability = (0, _util.createPromiseCapability)();\n            let styleCache = Object.create(null);\n\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n            canvas.mozOpaque = true;\n            this._layoutTextCtx = canvas.getContext(\"2d\", {\n              alpha: false\n            });\n\n            if (this._textContent) {\n              const textItems = this._textContent.items;\n              const textStyles = this._textContent.styles;\n\n              this._processItems(textItems, textStyles);\n\n              capability.resolve();\n            } else if (this._textContentStream) {\n              const pump = () => {\n                this._reader.read().then(_ref34 => {\n                  let {\n                    value,\n                    done\n                  } = _ref34;\n\n                  if (done) {\n                    capability.resolve();\n                    return;\n                  }\n\n                  Object.assign(styleCache, value.styles);\n\n                  this._processItems(value.items, styleCache);\n\n                  pump();\n                }, capability.reject);\n              };\n\n              this._reader = this._textContentStream.getReader();\n              pump();\n            } else {\n              throw new Error('Neither \"textContent\" nor \"textContentStream\" parameters specified.');\n            }\n\n            capability.promise.then(() => {\n              styleCache = null;\n\n              if (!timeout) {\n                render(this);\n              } else {\n                this._renderTimer = setTimeout(() => {\n                  render(this);\n                  this._renderTimer = null;\n                }, timeout);\n              }\n            }, this._capability.reject);\n          }\n\n          expandTextDivs() {\n            let expandDivs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this._enhanceTextSelection || !this._renderingDone) {\n              return;\n            }\n\n            if (this._bounds !== null) {\n              expand(this);\n              this._bounds = null;\n            }\n\n            const transformBuf = [],\n                  paddingBuf = [];\n\n            for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n              const div = this._textDivs[i];\n\n              const divProps = this._textDivProperties.get(div);\n\n              if (!divProps.hasText) {\n                continue;\n              }\n\n              if (expandDivs) {\n                transformBuf.length = 0;\n                paddingBuf.length = 0;\n\n                if (divProps.originalTransform) {\n                  transformBuf.push(divProps.originalTransform);\n                }\n\n                if (divProps.paddingTop > 0) {\n                  paddingBuf.push(`${divProps.paddingTop}px`);\n                  transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingRight > 0) {\n                  paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingBottom > 0) {\n                  paddingBuf.push(`${divProps.paddingBottom}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingLeft > 0) {\n                  paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n                  transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                div.style.padding = paddingBuf.join(\" \");\n\n                if (transformBuf.length) {\n                  div.style.transform = transformBuf.join(\" \");\n                }\n              } else {\n                div.style.padding = null;\n                div.style.transform = divProps.originalTransform;\n              }\n            }\n          }\n\n        }\n\n        function renderTextLayer(renderParameters) {\n          const task = new TextLayerRenderTask({\n            textContent: renderParameters.textContent,\n            textContentStream: renderParameters.textContentStream,\n            container: renderParameters.container,\n            viewport: renderParameters.viewport,\n            textDivs: renderParameters.textDivs,\n            textContentItemsStr: renderParameters.textContentItemsStr,\n            enhanceTextSelection: renderParameters.enhanceTextSelection\n          });\n\n          task._render(renderParameters.timeout);\n\n          return task;\n        }\n        /***/\n\n      },\n      /* 21 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SVGGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        let SVGGraphics = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: SVGGraphics\");\n          }\n\n        };\n        exports.SVGGraphics = SVGGraphics;\n        {\n          const SVG_DEFAULTS = {\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            fillColor: \"#000000\"\n          };\n          const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n          const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n          const convertImgDataToPng = function () {\n            const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n            const CHUNK_WRAPPER_SIZE = 12;\n            const crcTable = new Int32Array(256);\n\n            for (let i = 0; i < 256; i++) {\n              let c = i;\n\n              for (let h = 0; h < 8; h++) {\n                if (c & 1) {\n                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n                } else {\n                  c = c >> 1 & 0x7fffffff;\n                }\n              }\n\n              crcTable[i] = c;\n            }\n\n            function crc32(data, start, end) {\n              let crc = -1;\n\n              for (let i = start; i < end; i++) {\n                const a = (crc ^ data[i]) & 0xff;\n                const b = crcTable[a];\n                crc = crc >>> 8 ^ b;\n              }\n\n              return crc ^ -1;\n            }\n\n            function writePngChunk(type, body, data, offset) {\n              let p = offset;\n              const len = body.length;\n              data[p] = len >> 24 & 0xff;\n              data[p + 1] = len >> 16 & 0xff;\n              data[p + 2] = len >> 8 & 0xff;\n              data[p + 3] = len & 0xff;\n              p += 4;\n              data[p] = type.charCodeAt(0) & 0xff;\n              data[p + 1] = type.charCodeAt(1) & 0xff;\n              data[p + 2] = type.charCodeAt(2) & 0xff;\n              data[p + 3] = type.charCodeAt(3) & 0xff;\n              p += 4;\n              data.set(body, p);\n              p += body.length;\n              const crc = crc32(data, offset + 4, p);\n              data[p] = crc >> 24 & 0xff;\n              data[p + 1] = crc >> 16 & 0xff;\n              data[p + 2] = crc >> 8 & 0xff;\n              data[p + 3] = crc & 0xff;\n            }\n\n            function adler32(data, start, end) {\n              let a = 1;\n              let b = 0;\n\n              for (let i = start; i < end; ++i) {\n                a = (a + (data[i] & 0xff)) % 65521;\n                b = (b + a) % 65521;\n              }\n\n              return b << 16 | a;\n            }\n\n            function deflateSync(literals) {\n              if (!_is_node.isNodeJS) {\n                return deflateSyncUncompressed(literals);\n              }\n\n              try {\n                let input;\n\n                if (parseInt(process.versions.node) >= 8) {\n                  input = literals;\n                } else {\n                  input = Buffer.from(literals);\n                }\n\n                const output = require(\"zlib\").deflateSync(input, {\n                  level: 9\n                });\n\n                return output instanceof Uint8Array ? output : new Uint8Array(output);\n              } catch (e) {\n                (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n              }\n\n              return deflateSyncUncompressed(literals);\n            }\n\n            function deflateSyncUncompressed(literals) {\n              let len = literals.length;\n              const maxBlockLength = 0xffff;\n              const deflateBlocks = Math.ceil(len / maxBlockLength);\n              const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n              let pi = 0;\n              idat[pi++] = 0x78;\n              idat[pi++] = 0x9c;\n              let pos = 0;\n\n              while (len > maxBlockLength) {\n                idat[pi++] = 0x00;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0x00;\n                idat[pi++] = 0x00;\n                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n                pi += maxBlockLength;\n                pos += maxBlockLength;\n                len -= maxBlockLength;\n              }\n\n              idat[pi++] = 0x01;\n              idat[pi++] = len & 0xff;\n              idat[pi++] = len >> 8 & 0xff;\n              idat[pi++] = ~len & 0xffff & 0xff;\n              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n              idat.set(literals.subarray(pos), pi);\n              pi += literals.length - pos;\n              const adler = adler32(literals, 0, literals.length);\n              idat[pi++] = adler >> 24 & 0xff;\n              idat[pi++] = adler >> 16 & 0xff;\n              idat[pi++] = adler >> 8 & 0xff;\n              idat[pi++] = adler & 0xff;\n              return idat;\n            }\n\n            function encode(imgData, kind, forceDataSchema, isMask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              let bitDepth, colorType, lineSize;\n              const bytes = imgData.data;\n\n              switch (kind) {\n                case _util.ImageKind.GRAYSCALE_1BPP:\n                  colorType = 0;\n                  bitDepth = 1;\n                  lineSize = width + 7 >> 3;\n                  break;\n\n                case _util.ImageKind.RGB_24BPP:\n                  colorType = 2;\n                  bitDepth = 8;\n                  lineSize = width * 3;\n                  break;\n\n                case _util.ImageKind.RGBA_32BPP:\n                  colorType = 6;\n                  bitDepth = 8;\n                  lineSize = width * 4;\n                  break;\n\n                default:\n                  throw new Error(\"invalid format\");\n              }\n\n              const literals = new Uint8Array((1 + lineSize) * height);\n              let offsetLiterals = 0,\n                  offsetBytes = 0;\n\n              for (let y = 0; y < height; ++y) {\n                literals[offsetLiterals++] = 0;\n                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n                offsetBytes += lineSize;\n                offsetLiterals += lineSize;\n              }\n\n              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n                offsetLiterals = 0;\n\n                for (let y = 0; y < height; y++) {\n                  offsetLiterals++;\n\n                  for (let i = 0; i < lineSize; i++) {\n                    literals[offsetLiterals++] ^= 0xff;\n                  }\n                }\n              }\n\n              const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n              const idat = deflateSync(literals);\n              const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n              const data = new Uint8Array(pngLength);\n              let offset = 0;\n              data.set(PNG_HEADER, offset);\n              offset += PNG_HEADER.length;\n              writePngChunk(\"IHDR\", ihdr, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n              writePngChunk(\"IDATA\", idat, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + idat.length;\n              writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n              return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n            }\n\n            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n              const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n              return encode(imgData, kind, forceDataSchema, isMask);\n            };\n          }();\n\n          class SVGExtraState {\n            constructor() {\n              this.fontSizeScale = 1;\n              this.fontWeight = SVG_DEFAULTS.fontWeight;\n              this.fontSize = 0;\n              this.textMatrix = _util.IDENTITY_MATRIX;\n              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n              this.leading = 0;\n              this.textRenderingMode = _util.TextRenderingMode.FILL;\n              this.textMatrixScale = 1;\n              this.x = 0;\n              this.y = 0;\n              this.lineX = 0;\n              this.lineY = 0;\n              this.charSpacing = 0;\n              this.wordSpacing = 0;\n              this.textHScale = 1;\n              this.textRise = 0;\n              this.fillColor = SVG_DEFAULTS.fillColor;\n              this.strokeColor = \"#000000\";\n              this.fillAlpha = 1;\n              this.strokeAlpha = 1;\n              this.lineWidth = 1;\n              this.lineJoin = \"\";\n              this.lineCap = \"\";\n              this.miterLimit = 0;\n              this.dashArray = [];\n              this.dashPhase = 0;\n              this.dependencies = [];\n              this.activeClipUrl = null;\n              this.clipGroup = null;\n              this.maskId = \"\";\n            }\n\n            clone() {\n              return Object.create(this);\n            }\n\n            setCurrentPoint(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n\n          }\n\n          function opListToTree(opList) {\n            let opTree = [];\n            const tmp = [];\n\n            for (const opListElement of opList) {\n              if (opListElement.fn === \"save\") {\n                opTree.push({\n                  fnId: 92,\n                  fn: \"group\",\n                  items: []\n                });\n                tmp.push(opTree);\n                opTree = opTree[opTree.length - 1].items;\n                continue;\n              }\n\n              if (opListElement.fn === \"restore\") {\n                opTree = tmp.pop();\n              } else {\n                opTree.push(opListElement);\n              }\n            }\n\n            return opTree;\n          }\n\n          function pf(value) {\n            if (Number.isInteger(value)) {\n              return value.toString();\n            }\n\n            const s = value.toFixed(10);\n            let i = s.length - 1;\n\n            if (s[i] !== \"0\") {\n              return s;\n            }\n\n            do {\n              i--;\n            } while (s[i] === \"0\");\n\n            return s.substring(0, s[i] === \".\" ? i : i + 1);\n          }\n\n          function pm(m) {\n            if (m[4] === 0 && m[5] === 0) {\n              if (m[1] === 0 && m[2] === 0) {\n                if (m[0] === 1 && m[3] === 1) {\n                  return \"\";\n                }\n\n                return `scale(${pf(m[0])} ${pf(m[3])})`;\n              }\n\n              if (m[0] === m[3] && m[1] === -m[2]) {\n                const a = Math.acos(m[0]) * 180 / Math.PI;\n                return `rotate(${pf(a)})`;\n              }\n            } else {\n              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n                return `translate(${pf(m[4])} ${pf(m[5])})`;\n              }\n            }\n\n            return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n          }\n\n          let clipCount = 0;\n          let maskCount = 0;\n          let shadingCount = 0;\n          exports.SVGGraphics = SVGGraphics = class {\n            constructor(commonObjs, objs) {\n              let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              this.svgFactory = new _display_utils.DOMSVGFactory();\n              this.current = new SVGExtraState();\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.transformStack = [];\n              this.extraStack = [];\n              this.commonObjs = commonObjs;\n              this.objs = objs;\n              this.pendingClip = null;\n              this.pendingEOFill = false;\n              this.embedFonts = false;\n              this.embeddedFonts = Object.create(null);\n              this.cssStyle = null;\n              this.forceDataSchema = !!forceDataSchema;\n              this._operatorIdMapping = [];\n\n              for (const op in _util.OPS) {\n                this._operatorIdMapping[_util.OPS[op]] = op;\n              }\n            }\n\n            save() {\n              this.transformStack.push(this.transformMatrix);\n              const old = this.current;\n              this.extraStack.push(old);\n              this.current = old.clone();\n            }\n\n            restore() {\n              this.transformMatrix = this.transformStack.pop();\n              this.current = this.extraStack.pop();\n              this.pendingClip = null;\n              this.tgrp = null;\n            }\n\n            group(items) {\n              this.save();\n              this.executeOpTree(items);\n              this.restore();\n            }\n\n            loadDependencies(operatorList) {\n              const fnArray = operatorList.fnArray;\n              const argsArray = operatorList.argsArray;\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                if (fnArray[i] !== _util.OPS.dependency) {\n                  continue;\n                }\n\n                for (const obj of argsArray[i]) {\n                  const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                  const promise = new Promise(resolve => {\n                    objsPool.get(obj, resolve);\n                  });\n                  this.current.dependencies.push(promise);\n                }\n              }\n\n              return Promise.all(this.current.dependencies);\n            }\n\n            transform(a, b, c, d, e, f) {\n              const transformMatrix = [a, b, c, d, e, f];\n              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n              this.tgrp = null;\n            }\n\n            getSVG(operatorList, viewport) {\n              this.viewport = viewport;\n\n              const svgElement = this._initialize(viewport);\n\n              return this.loadDependencies(operatorList).then(() => {\n                this.transformMatrix = _util.IDENTITY_MATRIX;\n                this.executeOpTree(this.convertOpList(operatorList));\n                return svgElement;\n              });\n            }\n\n            convertOpList(operatorList) {\n              const operatorIdMapping = this._operatorIdMapping;\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              const opList = [];\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                const fnId = fnArray[i];\n                opList.push({\n                  fnId,\n                  fn: operatorIdMapping[fnId],\n                  args: argsArray[i]\n                });\n              }\n\n              return opListToTree(opList);\n            }\n\n            executeOpTree(opTree) {\n              for (const opTreeElement of opTree) {\n                const fn = opTreeElement.fn;\n                const fnId = opTreeElement.fnId;\n                const args = opTreeElement.args;\n\n                switch (fnId | 0) {\n                  case _util.OPS.beginText:\n                    this.beginText();\n                    break;\n\n                  case _util.OPS.dependency:\n                    break;\n\n                  case _util.OPS.setLeading:\n                    this.setLeading(args);\n                    break;\n\n                  case _util.OPS.setLeadingMoveText:\n                    this.setLeadingMoveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setFont:\n                    this.setFont(args);\n                    break;\n\n                  case _util.OPS.showText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.showSpacedText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.endText:\n                    this.endText();\n                    break;\n\n                  case _util.OPS.moveText:\n                    this.moveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setCharSpacing:\n                    this.setCharSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setWordSpacing:\n                    this.setWordSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setHScale:\n                    this.setHScale(args[0]);\n                    break;\n\n                  case _util.OPS.setTextMatrix:\n                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.setTextRise:\n                    this.setTextRise(args[0]);\n                    break;\n\n                  case _util.OPS.setTextRenderingMode:\n                    this.setTextRenderingMode(args[0]);\n                    break;\n\n                  case _util.OPS.setLineWidth:\n                    this.setLineWidth(args[0]);\n                    break;\n\n                  case _util.OPS.setLineJoin:\n                    this.setLineJoin(args[0]);\n                    break;\n\n                  case _util.OPS.setLineCap:\n                    this.setLineCap(args[0]);\n                    break;\n\n                  case _util.OPS.setMiterLimit:\n                    this.setMiterLimit(args[0]);\n                    break;\n\n                  case _util.OPS.setFillRGBColor:\n                    this.setFillRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeRGBColor:\n                    this.setStrokeRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeColorN:\n                    this.setStrokeColorN(args);\n                    break;\n\n                  case _util.OPS.setFillColorN:\n                    this.setFillColorN(args);\n                    break;\n\n                  case _util.OPS.shadingFill:\n                    this.shadingFill(args[0]);\n                    break;\n\n                  case _util.OPS.setDash:\n                    this.setDash(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setRenderingIntent:\n                    this.setRenderingIntent(args[0]);\n                    break;\n\n                  case _util.OPS.setFlatness:\n                    this.setFlatness(args[0]);\n                    break;\n\n                  case _util.OPS.setGState:\n                    this.setGState(args[0]);\n                    break;\n\n                  case _util.OPS.fill:\n                    this.fill();\n                    break;\n\n                  case _util.OPS.eoFill:\n                    this.eoFill();\n                    break;\n\n                  case _util.OPS.stroke:\n                    this.stroke();\n                    break;\n\n                  case _util.OPS.fillStroke:\n                    this.fillStroke();\n                    break;\n\n                  case _util.OPS.eoFillStroke:\n                    this.eoFillStroke();\n                    break;\n\n                  case _util.OPS.clip:\n                    this.clip(\"nonzero\");\n                    break;\n\n                  case _util.OPS.eoClip:\n                    this.clip(\"evenodd\");\n                    break;\n\n                  case _util.OPS.paintSolidColorImageMask:\n                    this.paintSolidColorImageMask();\n                    break;\n\n                  case _util.OPS.paintImageXObject:\n                    this.paintImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintInlineImageXObject:\n                    this.paintInlineImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintImageMaskXObject:\n                    this.paintImageMaskXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectBegin:\n                    this.paintFormXObjectBegin(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectEnd:\n                    this.paintFormXObjectEnd();\n                    break;\n\n                  case _util.OPS.closePath:\n                    this.closePath();\n                    break;\n\n                  case _util.OPS.closeStroke:\n                    this.closeStroke();\n                    break;\n\n                  case _util.OPS.closeFillStroke:\n                    this.closeFillStroke();\n                    break;\n\n                  case _util.OPS.closeEOFillStroke:\n                    this.closeEOFillStroke();\n                    break;\n\n                  case _util.OPS.nextLine:\n                    this.nextLine();\n                    break;\n\n                  case _util.OPS.transform:\n                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.constructPath:\n                    this.constructPath(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.endPath:\n                    this.endPath();\n                    break;\n\n                  case 92:\n                    this.group(opTreeElement.items);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented operator ${fn}`);\n                    break;\n                }\n              }\n            }\n\n            setWordSpacing(wordSpacing) {\n              this.current.wordSpacing = wordSpacing;\n            }\n\n            setCharSpacing(charSpacing) {\n              this.current.charSpacing = charSpacing;\n            }\n\n            nextLine() {\n              this.moveText(0, this.current.leading);\n            }\n\n            setTextMatrix(a, b, c, d, e, f) {\n              const current = this.current;\n              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n              current.textMatrixScale = Math.hypot(a, b);\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtElement.appendChild(current.tspan);\n            }\n\n            beginText() {\n              const current = this.current;\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.textMatrix = _util.IDENTITY_MATRIX;\n              current.lineMatrix = _util.IDENTITY_MATRIX;\n              current.textMatrixScale = 1;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            moveText(x, y) {\n              const current = this.current;\n              current.x = current.lineX += x;\n              current.y = current.lineY += y;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            }\n\n            showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return;\n              }\n\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              let x = 0;\n\n              for (const glyph of glyphs) {\n                if (glyph === null) {\n                  x += fontDirection * wordSpacing;\n                  continue;\n                } else if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  let vx;\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                  vx = -vx * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (glyph.isInFont || font.missingFile) {\n                  current.xcoords.push(current.x + scaledX);\n\n                  if (vertical) {\n                    current.ycoords.push(-current.y + scaledY);\n                  }\n\n                  current.tspan.textContent += character;\n                } else {}\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n              }\n\n              current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n              if (vertical) {\n                current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n              } else {\n                current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n                current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n              }\n\n              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n                current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n              }\n\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                  current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n                }\n\n                if (current.fillAlpha < 1) {\n                  current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                }\n              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n                current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n              } else {\n                current.tspan.setAttributeNS(null, \"fill\", \"none\");\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n                this._setStrokeAttributes(current.tspan, lineWidthScale);\n              }\n\n              let textMatrix = current.textMatrix;\n\n              if (current.textRise !== 0) {\n                textMatrix = textMatrix.slice();\n                textMatrix[5] += current.textRise;\n              }\n\n              current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n              current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n              current.txtElement.appendChild(current.tspan);\n              current.txtgrp.appendChild(current.txtElement);\n\n              this._ensureTransformGroup().appendChild(current.txtElement);\n            }\n\n            setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            }\n\n            addFontStyle(fontObj) {\n              if (!fontObj.data) {\n                throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n              }\n\n              if (!this.cssStyle) {\n                this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n                this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n                this.defs.appendChild(this.cssStyle);\n              }\n\n              const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n              this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n            }\n\n            setFont(details) {\n              const current = this.current;\n              const fontObj = this.commonObjs.get(details[0]);\n              let size = details[1];\n              current.font = fontObj;\n\n              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n                this.addFontStyle(fontObj);\n                this.embeddedFonts[fontObj.loadedName] = fontObj;\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              current.fontSize = size;\n              current.fontFamily = fontObj.loadedName;\n              current.fontWeight = bold;\n              current.fontStyle = italic;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            endText() {\n              const current = this.current;\n\n              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {\n                current.element = current.txtElement;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            setLineWidth(width) {\n              if (width > 0) {\n                this.current.lineWidth = width;\n              }\n            }\n\n            setLineCap(style) {\n              this.current.lineCap = LINE_CAP_STYLES[style];\n            }\n\n            setLineJoin(style) {\n              this.current.lineJoin = LINE_JOIN_STYLES[style];\n            }\n\n            setMiterLimit(limit) {\n              this.current.miterLimit = limit;\n            }\n\n            setStrokeAlpha(strokeAlpha) {\n              this.current.strokeAlpha = strokeAlpha;\n            }\n\n            setStrokeRGBColor(r, g, b) {\n              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n            }\n\n            setFillAlpha(fillAlpha) {\n              this.current.fillAlpha = fillAlpha;\n            }\n\n            setFillRGBColor(r, g, b) {\n              this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n              this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              this.current.xcoords = [];\n              this.current.ycoords = [];\n            }\n\n            setStrokeColorN(args) {\n              this.current.strokeColor = this._makeColorN_Pattern(args);\n            }\n\n            setFillColorN(args) {\n              this.current.fillColor = this._makeColorN_Pattern(args);\n            }\n\n            shadingFill(args) {\n              const width = this.viewport.width;\n              const height = this.viewport.height;\n\n              const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", x0);\n              rect.setAttributeNS(null, \"y\", y0);\n              rect.setAttributeNS(null, \"width\", x1 - x0);\n              rect.setAttributeNS(null, \"height\", y1 - y0);\n              rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n              if (this.current.fillAlpha < 1) {\n                rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n              }\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            _makeColorN_Pattern(args) {\n              if (args[0] === \"TilingPattern\") {\n                return this._makeTilingPattern(args);\n              }\n\n              return this._makeShadingPattern(args);\n            }\n\n            _makeTilingPattern(args) {\n              const color = args[1];\n              const operatorList = args[2];\n              const matrix = args[3] || _util.IDENTITY_MATRIX;\n              const [x0, y0, x1, y1] = args[4];\n              const xstep = args[5];\n              const ystep = args[6];\n              const paintType = args[7];\n              const tilingId = `shading${shadingCount++}`;\n\n              const [tx0, ty0, tx1, ty1] = _util.Util.normalizeRect([..._util.Util.applyTransform([x0, y0], matrix), ..._util.Util.applyTransform([x1, y1], matrix)]);\n\n              const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n              const txstep = xstep * xscale;\n              const tystep = ystep * yscale;\n              const tiling = this.svgFactory.createElement(\"svg:pattern\");\n              tiling.setAttributeNS(null, \"id\", tilingId);\n              tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n              tiling.setAttributeNS(null, \"width\", txstep);\n              tiling.setAttributeNS(null, \"height\", tystep);\n              tiling.setAttributeNS(null, \"x\", `${tx0}`);\n              tiling.setAttributeNS(null, \"y\", `${ty0}`);\n              const svg = this.svg;\n              const transformMatrix = this.transformMatrix;\n              const fillColor = this.current.fillColor;\n              const strokeColor = this.current.strokeColor;\n              const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n              this.svg = bbox;\n              this.transformMatrix = matrix;\n\n              if (paintType === 2) {\n                const cssColor = _util.Util.makeHexColor(...color);\n\n                this.current.fillColor = cssColor;\n                this.current.strokeColor = cssColor;\n              }\n\n              this.executeOpTree(this.convertOpList(operatorList));\n              this.svg = svg;\n              this.transformMatrix = transformMatrix;\n              this.current.fillColor = fillColor;\n              this.current.strokeColor = strokeColor;\n              tiling.appendChild(bbox.childNodes[0]);\n              this.defs.appendChild(tiling);\n              return `url(#${tilingId})`;\n            }\n\n            _makeShadingPattern(args) {\n              switch (args[0]) {\n                case \"RadialAxial\":\n                  const shadingId = `shading${shadingCount++}`;\n                  const colorStops = args[3];\n                  let gradient;\n\n                  switch (args[1]) {\n                    case \"axial\":\n                      const point0 = args[4];\n                      const point1 = args[5];\n                      gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"x1\", point0[0]);\n                      gradient.setAttributeNS(null, \"y1\", point0[1]);\n                      gradient.setAttributeNS(null, \"x2\", point1[0]);\n                      gradient.setAttributeNS(null, \"y2\", point1[1]);\n                      break;\n\n                    case \"radial\":\n                      const focalPoint = args[4];\n                      const circlePoint = args[5];\n                      const focalRadius = args[6];\n                      const circleRadius = args[7];\n                      gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                      gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                      gradient.setAttributeNS(null, \"r\", circleRadius);\n                      gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                      gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                      gradient.setAttributeNS(null, \"fr\", focalRadius);\n                      break;\n\n                    default:\n                      throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                  }\n\n                  for (const colorStop of colorStops) {\n                    const stop = this.svgFactory.createElement(\"svg:stop\");\n                    stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                    stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                    gradient.appendChild(stop);\n                  }\n\n                  this.defs.appendChild(gradient);\n                  return `url(#${shadingId})`;\n\n                case \"Mesh\":\n                  (0, _util.warn)(\"Unimplemented pattern Mesh\");\n                  return null;\n\n                case \"Dummy\":\n                  return \"hotpink\";\n\n                default:\n                  throw new Error(`Unknown IR type: ${args[0]}`);\n              }\n            }\n\n            setDash(dashArray, dashPhase) {\n              this.current.dashArray = dashArray;\n              this.current.dashPhase = dashPhase;\n            }\n\n            constructPath(ops, args) {\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n              let d = [];\n              let j = 0;\n\n              for (const op of ops) {\n                switch (op | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"M\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"L\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    d.push(\"Z\");\n                    break;\n                }\n              }\n\n              d = d.join(\" \");\n\n              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n                d = current.path.getAttributeNS(null, \"d\") + d;\n              } else {\n                current.path = this.svgFactory.createElement(\"svg:path\");\n\n                this._ensureTransformGroup().appendChild(current.path);\n              }\n\n              current.path.setAttributeNS(null, \"d\", d);\n              current.path.setAttributeNS(null, \"fill\", \"none\");\n              current.element = current.path;\n              current.setCurrentPoint(x, y);\n            }\n\n            endPath() {\n              const current = this.current;\n              current.path = null;\n\n              if (!this.pendingClip) {\n                return;\n              }\n\n              if (!current.element) {\n                this.pendingClip = null;\n                return;\n              }\n\n              const clipId = `clippath${clipCount++}`;\n              const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n              clipPath.setAttributeNS(null, \"id\", clipId);\n              clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n              const clipElement = current.element.cloneNode(true);\n\n              if (this.pendingClip === \"evenodd\") {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n              } else {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n              }\n\n              this.pendingClip = null;\n              clipPath.appendChild(clipElement);\n              this.defs.appendChild(clipPath);\n\n              if (current.activeClipUrl) {\n                current.clipGroup = null;\n\n                for (const prev of this.extraStack) {\n                  prev.clipGroup = null;\n                }\n\n                clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n              }\n\n              current.activeClipUrl = `url(#${clipId})`;\n              this.tgrp = null;\n            }\n\n            clip(type) {\n              this.pendingClip = type;\n            }\n\n            closePath() {\n              const current = this.current;\n\n              if (current.path) {\n                const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n                current.path.setAttributeNS(null, \"d\", d);\n              }\n            }\n\n            setLeading(leading) {\n              this.current.leading = -leading;\n            }\n\n            setTextRise(textRise) {\n              this.current.textRise = textRise;\n            }\n\n            setTextRenderingMode(textRenderingMode) {\n              this.current.textRenderingMode = textRenderingMode;\n            }\n\n            setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            }\n\n            setRenderingIntent(intent) {}\n\n            setFlatness(flatness) {}\n\n            setGState(states) {\n              for (const [key, value] of states) {\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value);\n                    break;\n\n                  case \"CA\":\n                    this.setStrokeAlpha(value);\n                    break;\n\n                  case \"ca\":\n                    this.setFillAlpha(value);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                    break;\n                }\n              }\n            }\n\n            fill() {\n              const current = this.current;\n\n              if (current.element) {\n                current.element.setAttributeNS(null, \"fill\", current.fillColor);\n                current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                this.endPath();\n              }\n            }\n\n            stroke() {\n              const current = this.current;\n\n              if (current.element) {\n                this._setStrokeAttributes(current.element);\n\n                current.element.setAttributeNS(null, \"fill\", \"none\");\n                this.endPath();\n              }\n            }\n\n            _setStrokeAttributes(element) {\n              let lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n              const current = this.current;\n              let dashArray = current.dashArray;\n\n              if (lineWidthScale !== 1 && dashArray.length > 0) {\n                dashArray = dashArray.map(function (value) {\n                  return lineWidthScale * value;\n                });\n              }\n\n              element.setAttributeNS(null, \"stroke\", current.strokeColor);\n              element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n              element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n              element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n              element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n              element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n              element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n              element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n            }\n\n            eoFill() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fill();\n            }\n\n            fillStroke() {\n              this.stroke();\n              this.fill();\n            }\n\n            eoFillStroke() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fillStroke();\n            }\n\n            closeStroke() {\n              this.closePath();\n              this.stroke();\n            }\n\n            closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            }\n\n            closeEOFillStroke() {\n              this.closePath();\n              this.eoFillStroke();\n            }\n\n            paintSolidColorImageMask() {\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", \"1px\");\n              rect.setAttributeNS(null, \"height\", \"1px\");\n              rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            paintImageXObject(objId) {\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            }\n\n            paintInlineImageXObject(imgData, mask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n              const cliprect = this.svgFactory.createElement(\"svg:rect\");\n              cliprect.setAttributeNS(null, \"x\", \"0\");\n              cliprect.setAttributeNS(null, \"y\", \"0\");\n              cliprect.setAttributeNS(null, \"width\", pf(width));\n              cliprect.setAttributeNS(null, \"height\", pf(height));\n              this.current.element = cliprect;\n              this.clip(\"nonzero\");\n              const imgEl = this.svgFactory.createElement(\"svg:image\");\n              imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n              imgEl.setAttributeNS(null, \"x\", \"0\");\n              imgEl.setAttributeNS(null, \"y\", pf(-height));\n              imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n              imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n              imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n              if (mask) {\n                mask.appendChild(imgEl);\n              } else {\n                this._ensureTransformGroup().appendChild(imgEl);\n              }\n            }\n\n            paintImageMaskXObject(imgData) {\n              const current = this.current;\n              const width = imgData.width;\n              const height = imgData.height;\n              const fillColor = current.fillColor;\n              current.maskId = `mask${maskCount++}`;\n              const mask = this.svgFactory.createElement(\"svg:mask\");\n              mask.setAttributeNS(null, \"id\", current.maskId);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", pf(width));\n              rect.setAttributeNS(null, \"height\", pf(height));\n              rect.setAttributeNS(null, \"fill\", fillColor);\n              rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n              this.defs.appendChild(mask);\n\n              this._ensureTransformGroup().appendChild(rect);\n\n              this.paintInlineImageXObject(imgData, mask);\n            }\n\n            paintFormXObjectBegin(matrix, bbox) {\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n              }\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                const cliprect = this.svgFactory.createElement(\"svg:rect\");\n                cliprect.setAttributeNS(null, \"x\", bbox[0]);\n                cliprect.setAttributeNS(null, \"y\", bbox[1]);\n                cliprect.setAttributeNS(null, \"width\", pf(width));\n                cliprect.setAttributeNS(null, \"height\", pf(height));\n                this.current.element = cliprect;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            paintFormXObjectEnd() {}\n\n            _initialize(viewport) {\n              const svg = this.svgFactory.create(viewport.width, viewport.height);\n              const definitions = this.svgFactory.createElement(\"svg:defs\");\n              svg.appendChild(definitions);\n              this.defs = definitions;\n              const rootGroup = this.svgFactory.createElement(\"svg:g\");\n              rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n              svg.appendChild(rootGroup);\n              this.svg = rootGroup;\n              return svg;\n            }\n\n            _ensureClipGroup() {\n              if (!this.current.clipGroup) {\n                const clipGroup = this.svgFactory.createElement(\"svg:g\");\n                clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n                this.svg.appendChild(clipGroup);\n                this.current.clipGroup = clipGroup;\n              }\n\n              return this.current.clipGroup;\n            }\n\n            _ensureTransformGroup() {\n              if (!this.tgrp) {\n                this.tgrp = this.svgFactory.createElement(\"svg:g\");\n                this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n                if (this.current.activeClipUrl) {\n                  this._ensureClipGroup().appendChild(this.tgrp);\n                } else {\n                  this.svg.appendChild(this.tgrp);\n                }\n              }\n\n              return this.tgrp;\n            }\n\n          };\n        }\n        /***/\n      },\n      /* 22 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _xfa_text = __w_pdfjs_require__(17);\n\n        class XfaLayer {\n          static setupStorage(html, id, element, storage, intent) {\n            const storedData = storage.getValue(id, {\n              value: null\n            });\n\n            switch (element.name) {\n              case \"textarea\":\n                if (storedData.value !== null) {\n                  html.textContent = storedData.value;\n                }\n\n                if (intent === \"print\") {\n                  break;\n                }\n\n                html.addEventListener(\"input\", event => {\n                  storage.setValue(id, {\n                    value: event.target.value\n                  });\n                });\n                break;\n\n              case \"input\":\n                if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n                  if (storedData.value === element.attributes.xfaOn) {\n                    html.setAttribute(\"checked\", true);\n                  } else if (storedData.value === element.attributes.xfaOff) {\n                    html.removeAttribute(\"checked\");\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"change\", event => {\n                    storage.setValue(id, {\n                      value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n                    });\n                  });\n                } else {\n                  if (storedData.value !== null) {\n                    html.setAttribute(\"value\", storedData.value);\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"input\", event => {\n                    storage.setValue(id, {\n                      value: event.target.value\n                    });\n                  });\n                }\n\n                break;\n\n              case \"select\":\n                if (storedData.value !== null) {\n                  for (const option of element.children) {\n                    if (option.attributes.value === storedData.value) {\n                      option.attributes.selected = true;\n                    }\n                  }\n                }\n\n                html.addEventListener(\"input\", event => {\n                  const options = event.target.options;\n                  const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n                  storage.setValue(id, {\n                    value\n                  });\n                });\n                break;\n            }\n          }\n\n          static setAttributes(_ref35) {\n            let {\n              html,\n              element,\n              storage = null,\n              intent,\n              linkService\n            } = _ref35;\n            const {\n              attributes\n            } = element;\n            const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n            if (attributes.type === \"radio\") {\n              attributes.name = `${attributes.name}-${intent}`;\n            }\n\n            for (const [key, value] of Object.entries(attributes)) {\n              if (value === null || value === undefined || key === \"dataId\") {\n                continue;\n              }\n\n              if (key !== \"style\") {\n                if (key === \"textContent\") {\n                  html.textContent = value;\n                } else if (key === \"class\") {\n                  html.setAttribute(key, value.join(\" \"));\n                } else {\n                  if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n                    continue;\n                  }\n\n                  html.setAttribute(key, value);\n                }\n              } else {\n                Object.assign(html.style, value);\n              }\n            }\n\n            if (isHTMLAnchorElement) {\n              if (!linkService.addLinkAttributes) {\n                (0, _util.warn)(\"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\");\n              }\n\n              linkService.addLinkAttributes?.(html, attributes.href, attributes.newWindow);\n            }\n\n            if (storage && attributes.dataId) {\n              this.setupStorage(html, attributes.dataId, element, storage);\n            }\n          }\n\n          static render(parameters) {\n            const storage = parameters.annotationStorage;\n            const linkService = parameters.linkService;\n            const root = parameters.xfa;\n            const intent = parameters.intent || \"display\";\n            const rootHtml = document.createElement(root.name);\n\n            if (root.attributes) {\n              this.setAttributes({\n                html: rootHtml,\n                element: root,\n                intent,\n                linkService\n              });\n            }\n\n            const stack = [[root, -1, rootHtml]];\n            const rootDiv = parameters.div;\n            rootDiv.appendChild(rootHtml);\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            rootDiv.style.transform = transform;\n            rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n            const textDivs = [];\n\n            while (stack.length > 0) {\n              const [parent, i, html] = stack[stack.length - 1];\n\n              if (i + 1 === parent.children.length) {\n                stack.pop();\n                continue;\n              }\n\n              const child = parent.children[++stack[stack.length - 1][1]];\n\n              if (child === null) {\n                continue;\n              }\n\n              const {\n                name\n              } = child;\n\n              if (name === \"#text\") {\n                const node = document.createTextNode(child.value);\n                textDivs.push(node);\n                html.appendChild(node);\n                continue;\n              }\n\n              let childHtml;\n\n              if (child?.attributes?.xmlns) {\n                childHtml = document.createElementNS(child.attributes.xmlns, name);\n              } else {\n                childHtml = document.createElement(name);\n              }\n\n              html.appendChild(childHtml);\n\n              if (child.attributes) {\n                this.setAttributes({\n                  html: childHtml,\n                  element: child,\n                  storage,\n                  intent,\n                  linkService\n                });\n              }\n\n              if (child.children && child.children.length > 0) {\n                stack.push([child, -1, childHtml]);\n              } else if (child.value) {\n                const node = document.createTextNode(child.value);\n\n                if (_xfa_text.XfaText.shouldBuildText(name)) {\n                  textDivs.push(node);\n                }\n\n                childHtml.appendChild(node);\n              }\n            }\n\n            for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n              el.setAttribute(\"readOnly\", true);\n            }\n\n            return {\n              textDivs\n            };\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            parameters.div.style.transform = transform;\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.XfaLayer = XfaLayer;\n        /***/\n      },\n      /* 23 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNodeStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        const fs = require(\"fs\");\n\n        const http = require(\"http\");\n\n        const https = require(\"https\");\n\n        const url = require(\"url\");\n\n        const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n        function parseUrl(sourceUrl) {\n          const parsedUrl = url.parse(sourceUrl);\n\n          if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n            return parsedUrl;\n          }\n\n          if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n            return url.parse(`file:///${sourceUrl}`);\n          }\n\n          if (!parsedUrl.host) {\n            parsedUrl.protocol = \"file:\";\n          }\n\n          return parsedUrl;\n        }\n\n        class PDFNodeStream {\n          constructor(source) {\n            this.source = source;\n            this.url = parseUrl(source.url);\n            this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n            this.isFsUrl = this.url.protocol === \"file:\";\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(start, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n            this._rangeRequestReaders.push(rangeReader);\n\n            return rangeReader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNodeStream = PDFNodeStream;\n\n        class BaseFullReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            const source = stream.source;\n            this._contentLength = source.length;\n            this._loaded = 0;\n            this._filename = null;\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._headersCapability = (0, _util.createPromiseCapability)();\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this._error(new _util.AbortException(\"streaming is disabled\"));\n            }\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        class BaseRangeReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            this._loaded = 0;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            const source = stream.source;\n            this._isStreamingSupported = !source.disableStream;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        function createRequestOptions(parsedUrl, headers) {\n          return {\n            protocol: parsedUrl.protocol,\n            auth: parsedUrl.auth,\n            host: parsedUrl.hostname,\n            port: parsedUrl.port,\n            path: parsedUrl.path,\n            method: \"GET\",\n            headers\n          };\n        }\n\n        class PDFNodeStreamFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._headersCapability.resolve();\n\n              this._setReadableStream(response);\n\n              const getResponseHeader = name => {\n                return this._readableStream.headers[name.toLowerCase()];\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n\n              this._headersCapability.reject(reason);\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            this._httpHeaders = {};\n\n            for (const property in stream.httpHeaders) {\n              const value = stream.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              this._httpHeaders[property] = value;\n            }\n\n            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n                return;\n              }\n\n              this._setReadableStream(response);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamFsFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            fs.lstat(path, (error, stat) => {\n              if (error) {\n                if (error.code === \"ENOENT\") {\n                  error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n                }\n\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._contentLength = stat.size;\n\n              this._setReadableStream(fs.createReadStream(path));\n\n              this._headersCapability.resolve();\n            });\n          }\n\n        }\n\n        class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            this._setReadableStream(fs.createReadStream(path, {\n              start,\n              end: end - 1\n            }));\n          }\n\n        }\n        /***/\n\n      },\n      /* 24 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createResponseStatusError = createResponseStatusError;\n        exports.extractFilenameFromHeader = extractFilenameFromHeader;\n        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n        exports.validateResponseStatus = validateResponseStatus;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _content_disposition = __w_pdfjs_require__(25);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        function validateRangeRequestCapabilities(_ref36) {\n          let {\n            getResponseHeader,\n            isHttp,\n            rangeChunkSize,\n            disableRange\n          } = _ref36;\n          (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n          const returnValues = {\n            allowRangeRequests: false,\n            suggestedLength: undefined\n          };\n          const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n          if (!Number.isInteger(length)) {\n            return returnValues;\n          }\n\n          returnValues.suggestedLength = length;\n\n          if (length <= 2 * rangeChunkSize) {\n            return returnValues;\n          }\n\n          if (disableRange || !isHttp) {\n            return returnValues;\n          }\n\n          if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n            return returnValues;\n          }\n\n          const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n          if (contentEncoding !== \"identity\") {\n            return returnValues;\n          }\n\n          returnValues.allowRangeRequests = true;\n          return returnValues;\n        }\n\n        function extractFilenameFromHeader(getResponseHeader) {\n          const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n          if (contentDisposition) {\n            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n            if (filename.includes(\"%\")) {\n              try {\n                filename = decodeURIComponent(filename);\n              } catch (ex) {}\n            }\n\n            if ((0, _display_utils.isPdfFile)(filename)) {\n              return filename;\n            }\n          }\n\n          return null;\n        }\n\n        function createResponseStatusError(status, url) {\n          if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n            return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n          }\n\n          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n\n        function validateResponseStatus(status) {\n          return status === 200 || status === 206;\n        }\n        /***/\n\n      },\n      /* 25 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n          let needsEncodingFixup = true;\n          let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = unescape(filename);\n            filename = rfc5987decode(filename);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          tmp = rfc2231getparam(contentDisposition);\n\n          if (tmp) {\n            const filename = rfc2047decode(tmp);\n            return fixupEncoding(filename);\n          }\n\n          tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          function toParamRegExp(attributePattern, flags) {\n            return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n          }\n\n          function textdecode(encoding, value) {\n            if (encoding) {\n              if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                return value;\n              }\n\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const buffer = (0, _util.stringToBytes)(value);\n                value = decoder.decode(buffer);\n                needsEncodingFixup = false;\n              } catch (e) {\n                if (/^utf-?8$/i.test(encoding)) {\n                  try {\n                    value = decodeURIComponent(escape(value));\n                    needsEncodingFixup = false;\n                  } catch (err) {}\n                }\n              }\n            }\n\n            return value;\n          }\n\n          function fixupEncoding(value) {\n            if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n              value = textdecode(\"utf-8\", value);\n\n              if (needsEncodingFixup) {\n                value = textdecode(\"iso-8859-1\", value);\n              }\n            }\n\n            return value;\n          }\n\n          function rfc2231getparam(contentDispositionStr) {\n            const matches = [];\n            let match;\n            const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n            while ((match = iter.exec(contentDispositionStr)) !== null) {\n              let [, n, quot, part] = match;\n              n = parseInt(n, 10);\n\n              if (n in matches) {\n                if (n === 0) {\n                  break;\n                }\n\n                continue;\n              }\n\n              matches[n] = [quot, part];\n            }\n\n            const parts = [];\n\n            for (let n = 0; n < matches.length; ++n) {\n              if (!(n in matches)) {\n                break;\n              }\n\n              let [quot, part] = matches[n];\n              part = rfc2616unquote(part);\n\n              if (quot) {\n                part = unescape(part);\n\n                if (n === 0) {\n                  part = rfc5987decode(part);\n                }\n              }\n\n              parts.push(part);\n            }\n\n            return parts.join(\"\");\n          }\n\n          function rfc2616unquote(value) {\n            if (value.startsWith('\"')) {\n              const parts = value.slice(1).split('\\\\\"');\n\n              for (let i = 0; i < parts.length; ++i) {\n                const quotindex = parts[i].indexOf('\"');\n\n                if (quotindex !== -1) {\n                  parts[i] = parts[i].slice(0, quotindex);\n                  parts.length = i + 1;\n                }\n\n                parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n              }\n\n              value = parts.join('\"');\n            }\n\n            return value;\n          }\n\n          function rfc5987decode(extvalue) {\n            const encodingend = extvalue.indexOf(\"'\");\n\n            if (encodingend === -1) {\n              return extvalue;\n            }\n\n            const encoding = extvalue.slice(0, encodingend);\n            const langvalue = extvalue.slice(encodingend + 1);\n            const value = langvalue.replace(/^[^']*'/, \"\");\n            return textdecode(encoding, value);\n          }\n\n          function rfc2047decode(value) {\n            if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n              return value;\n            }\n\n            return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n              if (encoding === \"q\" || encoding === \"Q\") {\n                text = text.replace(/_/g, \" \");\n                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                  return String.fromCharCode(parseInt(hex, 16));\n                });\n                return textdecode(charset, text);\n              }\n\n              try {\n                text = atob(text);\n              } catch (e) {}\n\n              return textdecode(charset, text);\n            });\n          }\n\n          return \"\";\n        }\n        /***/\n\n      },\n      /* 26 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNetworkStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n\n        function getArrayBuffer(xhr) {\n          const data = xhr.response;\n\n          if (typeof data !== \"string\") {\n            return data;\n          }\n\n          const array = (0, _util.stringToBytes)(data);\n          return array.buffer;\n        }\n\n        class NetworkManager {\n          constructor(url) {\n            let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.url = url;\n            this.isHttp = /^https?:/i.test(url);\n            this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);\n            this.withCredentials = args.withCredentials || false;\n\n            this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n              return new XMLHttpRequest();\n            };\n\n            this.currXhrId = 0;\n            this.pendingRequests = Object.create(null);\n          }\n\n          requestRange(begin, end, listeners) {\n            const args = {\n              begin,\n              end\n            };\n\n            for (const prop in listeners) {\n              args[prop] = listeners[prop];\n            }\n\n            return this.request(args);\n          }\n\n          requestFull(listeners) {\n            return this.request(listeners);\n          }\n\n          request(args) {\n            const xhr = this.getXhr();\n            const xhrId = this.currXhrId++;\n            const pendingRequest = this.pendingRequests[xhrId] = {\n              xhr\n            };\n            xhr.open(\"GET\", this.url);\n            xhr.withCredentials = this.withCredentials;\n\n            for (const property in this.httpHeaders) {\n              const value = this.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              xhr.setRequestHeader(property, value);\n            }\n\n            if (this.isHttp && \"begin\" in args && \"end\" in args) {\n              xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n            } else {\n              pendingRequest.expectedStatus = OK_RESPONSE;\n            }\n\n            xhr.responseType = \"arraybuffer\";\n\n            if (args.onError) {\n              xhr.onerror = function (evt) {\n                args.onError(xhr.status);\n              };\n            }\n\n            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n            xhr.onprogress = this.onProgress.bind(this, xhrId);\n            pendingRequest.onHeadersReceived = args.onHeadersReceived;\n            pendingRequest.onDone = args.onDone;\n            pendingRequest.onError = args.onError;\n            pendingRequest.onProgress = args.onProgress;\n            xhr.send(null);\n            return xhrId;\n          }\n\n          onProgress(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            pendingRequest.onProgress?.(evt);\n          }\n\n          onStateChange(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            const xhr = pendingRequest.xhr;\n\n            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n              pendingRequest.onHeadersReceived();\n              delete pendingRequest.onHeadersReceived;\n            }\n\n            if (xhr.readyState !== 4) {\n              return;\n            }\n\n            if (!(xhrId in this.pendingRequests)) {\n              return;\n            }\n\n            delete this.pendingRequests[xhrId];\n\n            if (xhr.status === 0 && this.isHttp) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const xhrStatus = xhr.status || OK_RESPONSE;\n            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const chunk = getArrayBuffer(xhr);\n\n            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n              const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n              const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n              pendingRequest.onDone({\n                begin: parseInt(matches[1], 10),\n                chunk\n              });\n            } else if (chunk) {\n              pendingRequest.onDone({\n                begin: 0,\n                chunk\n              });\n            } else {\n              pendingRequest.onError?.(xhr.status);\n            }\n          }\n\n          getRequestXhr(xhrId) {\n            return this.pendingRequests[xhrId].xhr;\n          }\n\n          isPendingRequest(xhrId) {\n            return xhrId in this.pendingRequests;\n          }\n\n          abortRequest(xhrId) {\n            const xhr = this.pendingRequests[xhrId].xhr;\n            delete this.pendingRequests[xhrId];\n            xhr.abort();\n          }\n\n        }\n\n        class PDFNetworkStream {\n          constructor(source) {\n            this._source = source;\n            this._manager = new NetworkManager(source.url, {\n              httpHeaders: source.httpHeaders,\n              withCredentials: source.withCredentials\n            });\n            this._rangeChunkSize = source.rangeChunkSize;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          _onRangeRequestReaderClosed(reader) {\n            const i = this._rangeRequestReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeRequestReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNetworkStream = PDFNetworkStream;\n\n        class PDFNetworkStreamFullRequestReader {\n          constructor(manager, source) {\n            this._manager = manager;\n            const args = {\n              onHeadersReceived: this._onHeadersReceived.bind(this),\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = source.url;\n            this._fullRequestId = manager.requestFull(args);\n            this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._contentLength = source.length;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = false;\n            this._isRangeSupported = false;\n            this._cachedChunks = [];\n            this._requests = [];\n            this._done = false;\n            this._storedError = undefined;\n            this._filename = null;\n            this.onProgress = null;\n          }\n\n          _onHeadersReceived() {\n            const fullRequestXhrId = this._fullRequestId;\n\n            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n            const getResponseHeader = name => {\n              return fullRequestXhr.getResponseHeader(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._manager.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n\n            if (allowRangeRequests) {\n              this._isRangeSupported = true;\n            }\n\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (this._isRangeSupported) {\n              this._manager.abortRequest(fullRequestXhrId);\n            }\n\n            this._headersReceivedCapability.resolve();\n          }\n\n          _onDone(data) {\n            if (data) {\n              if (this._requests.length > 0) {\n                const requestCapability = this._requests.shift();\n\n                requestCapability.resolve({\n                  value: data.chunk,\n                  done: false\n                });\n              } else {\n                this._cachedChunks.push(data.chunk);\n              }\n            }\n\n            this._done = true;\n\n            if (this._cachedChunks.length > 0) {\n              return;\n            }\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            this._headersReceivedCapability.reject(this._storedError);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._cachedChunks.length = 0;\n          }\n\n          _onProgress(evt) {\n            this.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.lengthComputable ? evt.total : this._contentLength\n            });\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get headersReady() {\n            return this._headersReceivedCapability.promise;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._cachedChunks.length > 0) {\n              const chunk = this._cachedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._headersReceivedCapability.reject(reason);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._fullRequestId)) {\n              this._manager.abortRequest(this._fullRequestId);\n            }\n\n            this._fullRequestReader = null;\n          }\n\n        }\n\n        class PDFNetworkStreamRangeRequestReader {\n          constructor(manager, begin, end) {\n            this._manager = manager;\n            const args = {\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = manager.url;\n            this._requestId = manager.requestRange(begin, end, args);\n            this._requests = [];\n            this._queuedChunk = null;\n            this._done = false;\n            this._storedError = undefined;\n            this.onProgress = null;\n            this.onClosed = null;\n          }\n\n          _close() {\n            this.onClosed?.(this);\n          }\n\n          _onDone(data) {\n            const chunk = data.chunk;\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunk = chunk;\n            }\n\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._close();\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._queuedChunk = null;\n          }\n\n          _onProgress(evt) {\n            if (!this.isStreamingSupported) {\n              this.onProgress?.({\n                loaded: evt.loaded\n              });\n            }\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._queuedChunk !== null) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._requestId)) {\n              this._manager.abortRequest(this._requestId);\n            }\n\n            this._close();\n          }\n\n        }\n        /***/\n\n      },\n      /* 27 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFFetchStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        function createFetchOptions(headers, withCredentials, abortController) {\n          return {\n            method: \"GET\",\n            headers,\n            signal: abortController?.signal,\n            mode: \"cors\",\n            credentials: withCredentials ? \"include\" : \"same-origin\",\n            redirect: \"follow\"\n          };\n        }\n\n        function createHeaders(httpHeaders) {\n          const headers = new Headers();\n\n          for (const property in httpHeaders) {\n            const value = httpHeaders[property];\n\n            if (typeof value === \"undefined\") {\n              continue;\n            }\n\n            headers.append(property, value);\n          }\n\n          return headers;\n        }\n\n        class PDFFetchStream {\n          constructor(source) {\n            this.source = source;\n            this.isHttp = /^https?:/i.test(source.url);\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFFetchStreamReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFFetchStream = PDFFetchStream;\n\n        class PDFFetchStreamReader {\n          constructor(stream) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            this._filename = null;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._contentLength = source.length;\n            this._headersCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._headers = createHeaders(this._stream.httpHeaders);\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._reader = response.body.getReader();\n\n              this._headersCapability.resolve();\n\n              const getResponseHeader = name => {\n                return response.headers.get(name);\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: this._stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n              if (!this._isStreamingSupported && this._isRangeSupported) {\n                this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n              }\n            }).catch(this._headersCapability.reject);\n            this.onProgress = null;\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._headersCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n\n        class PDFFetchStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._isStreamingSupported = !source.disableStream;\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._headers = createHeaders(this._stream.httpHeaders);\n\n            this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._readCapability.resolve();\n\n              this._reader = response.body.getReader();\n            }).catch(this._readCapability.reject);\n            this.onProgress = null;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n        /***/\n\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"addLinkAttributes\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.addLinkAttributes;\n          }\n        });\n        Object.defineProperty(exports, \"getFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getPdfFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getPdfFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getXfaPageViewport\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getXfaPageViewport;\n          }\n        });\n        Object.defineProperty(exports, \"isPdfFile\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isPdfFile;\n          }\n        });\n        Object.defineProperty(exports, \"LinkTarget\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.LinkTarget;\n          }\n        });\n        Object.defineProperty(exports, \"loadScript\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.loadScript;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDateString\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PDFDateString;\n          }\n        });\n        Object.defineProperty(exports, \"PixelsPerInch\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PixelsPerInch;\n          }\n        });\n        Object.defineProperty(exports, \"RenderingCancelledException\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.RenderingCancelledException;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationMode\", {\n          enumerable: true,\n          get: function () {\n            return _util.AnnotationMode;\n          }\n        });\n        Object.defineProperty(exports, \"CMapCompressionType\", {\n          enumerable: true,\n          get: function () {\n            return _util.CMapCompressionType;\n          }\n        });\n        Object.defineProperty(exports, \"createObjectURL\", {\n          enumerable: true,\n          get: function () {\n            return _util.createObjectURL;\n          }\n        });\n        Object.defineProperty(exports, \"createPromiseCapability\", {\n          enumerable: true,\n          get: function () {\n            return _util.createPromiseCapability;\n          }\n        });\n        Object.defineProperty(exports, \"createValidAbsoluteUrl\", {\n          enumerable: true,\n          get: function () {\n            return _util.createValidAbsoluteUrl;\n          }\n        });\n        Object.defineProperty(exports, \"InvalidPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.InvalidPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"MissingPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.MissingPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"OPS\", {\n          enumerable: true,\n          get: function () {\n            return _util.OPS;\n          }\n        });\n        Object.defineProperty(exports, \"PasswordResponses\", {\n          enumerable: true,\n          get: function () {\n            return _util.PasswordResponses;\n          }\n        });\n        Object.defineProperty(exports, \"PermissionFlag\", {\n          enumerable: true,\n          get: function () {\n            return _util.PermissionFlag;\n          }\n        });\n        Object.defineProperty(exports, \"removeNullCharacters\", {\n          enumerable: true,\n          get: function () {\n            return _util.removeNullCharacters;\n          }\n        });\n        Object.defineProperty(exports, \"shadow\", {\n          enumerable: true,\n          get: function () {\n            return _util.shadow;\n          }\n        });\n        Object.defineProperty(exports, \"UnexpectedResponseException\", {\n          enumerable: true,\n          get: function () {\n            return _util.UnexpectedResponseException;\n          }\n        });\n        Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", {\n          enumerable: true,\n          get: function () {\n            return _util.UNSUPPORTED_FEATURES;\n          }\n        });\n        Object.defineProperty(exports, \"Util\", {\n          enumerable: true,\n          get: function () {\n            return _util.Util;\n          }\n        });\n        Object.defineProperty(exports, \"VerbosityLevel\", {\n          enumerable: true,\n          get: function () {\n            return _util.VerbosityLevel;\n          }\n        });\n        Object.defineProperty(exports, \"build\", {\n          enumerable: true,\n          get: function () {\n            return _api.build;\n          }\n        });\n        Object.defineProperty(exports, \"getDocument\", {\n          enumerable: true,\n          get: function () {\n            return _api.getDocument;\n          }\n        });\n        Object.defineProperty(exports, \"LoopbackPort\", {\n          enumerable: true,\n          get: function () {\n            return _api.LoopbackPort;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDataRangeTransport\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFDataRangeTransport;\n          }\n        });\n        Object.defineProperty(exports, \"PDFWorker\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFWorker;\n          }\n        });\n        Object.defineProperty(exports, \"version\", {\n          enumerable: true,\n          get: function () {\n            return _api.version;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_layer.AnnotationLayer;\n          }\n        });\n        Object.defineProperty(exports, \"GlobalWorkerOptions\", {\n          enumerable: true,\n          get: function () {\n            return _worker_options.GlobalWorkerOptions;\n          }\n        });\n        Object.defineProperty(exports, \"renderTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.renderTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _svg.SVGGraphics;\n          }\n        });\n        Object.defineProperty(exports, \"XfaLayer\", {\n          enumerable: true,\n          get: function () {\n            return _xfa_layer.XfaLayer;\n          }\n        });\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _api = __w_pdfjs_require__(6);\n\n        var _annotation_layer = __w_pdfjs_require__(18);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _text_layer = __w_pdfjs_require__(20);\n\n        var _svg = __w_pdfjs_require__(21);\n\n        var _xfa_layer = __w_pdfjs_require__(22);\n\n        const pdfjsVersion = '2.11.338';\n        const pdfjsBuild = 'dedff3c98';\n        {\n          if (_is_node.isNodeJS) {\n            const {\n              PDFNodeStream\n            } = __w_pdfjs_require__(23);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              return new PDFNodeStream(params);\n            });\n          } else {\n            const {\n              PDFNetworkStream\n            } = __w_pdfjs_require__(26);\n\n            const {\n              PDFFetchStream\n            } = __w_pdfjs_require__(27);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              if ((0, _display_utils.isValidFetchUrl)(params.url)) {\n                return new PDFFetchStream(params);\n              }\n\n              return new PDFNetworkStream(params);\n            });\n          }\n        }\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"sources":["webpack://pdfjs-dist/build/pdf/webpack/universalModuleDefinition","webpack://pdfjs-dist/build/pdf/src/display/display_utils.js","webpack://pdfjs-dist/build/pdf/src/shared/util.js","webpack://pdfjs-dist/build/pdf/src/shared/compatibility.js","webpack://pdfjs-dist/build/pdf/src/shared/is_node.js","webpack://pdfjs-dist/build/pdf/src/display/base_factory.js","webpack://pdfjs-dist/build/pdf/src/display/api.js","webpack://pdfjs-dist/build/pdf/src/display/font_loader.js","webpack://pdfjs-dist/build/pdf/src/display/node_utils.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_storage.js","webpack://pdfjs-dist/build/pdf/src/display/canvas.js","webpack://pdfjs-dist/build/pdf/src/display/pattern_helper.js","webpack://pdfjs-dist/build/pdf/src/display/worker_options.js","webpack://pdfjs-dist/build/pdf/src/shared/message_handler.js","webpack://pdfjs-dist/build/pdf/src/display/metadata.js","webpack://pdfjs-dist/build/pdf/src/display/optional_content_config.js","webpack://pdfjs-dist/build/pdf/src/display/transport_stream.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_text.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_layer.js","webpack://pdfjs-dist/build/pdf/src/shared/scripting_utils.js","webpack://pdfjs-dist/build/pdf/src/display/text_layer.js","webpack://pdfjs-dist/build/pdf/src/display/svg.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_layer.js","webpack://pdfjs-dist/build/pdf/src/display/node_stream.js","webpack://pdfjs-dist/build/pdf/src/display/network_utils.js","webpack://pdfjs-dist/build/pdf/src/display/content_disposition.js","webpack://pdfjs-dist/build/pdf/src/display/network.js","webpack://pdfjs-dist/build/pdf/src/display/fetch_stream.js","webpack://pdfjs-dist/build/pdf/webpack/bootstrap","webpack://pdfjs-dist/build/pdf/src/pdf.js"],"names":["DEFAULT_LINK_REL","SVG_NS","PixelsPerInch","CSS","PDF","shadow","constructor","ownerDocument","globalThis","_createCanvas","canvas","asTypedArray","isValidFetchUrl","document","response","fetch","stringToBytes","request","XMLHttpRequest","data","resolve","reject","_fetchData","cMapData","fetchData","_createSVG","offsetX","offsetY","dontFlip","centerX","viewBox","centerY","rotation","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","Math","offsetCanvasY","width","height","clone","scale","convertToViewportPoint","convertToViewportRectangle","topLeft","rect","bottomRight","convertToPdfPoint","LinkTarget","NONE","SELF","BLANK","PARENT","TOP","enabled","assert","url","urlNullRemoved","removeNullCharacters","link","targetStr","ii","i","anchor","query","end","defaultFilename","isDataScheme","warn","reURI","reFilename","splitURI","suggestedFilename","decodeURIComponent","Object","time","name","Date","timeEnd","start","toString","outBuf","longest","duration","baseUrl","protocol","removeScriptElement","script","console","toDateObject","isString","pdfDateStringRegex","matches","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","xfaPage","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","RenderingIntentFlag","ANY","DISPLAY","PRINT","ANNOTATIONS_FORMS","ANNOTATIONS_STORAGE","ANNOTATIONS_DISABLE","OPLIST","AnnotationMode","DISABLE","ENABLE","ENABLE_FORMS","ENABLE_STORAGE","PermissionFlag","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationStateModelType","MARKED","REVIEW","AnnotationMarkedState","UNMARKED","AnnotationReviewState","ACCEPTED","REJECTED","CANCELLED","COMPLETED","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","StreamType","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","FontType","TYPE1","TYPE1STANDARD","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","VerbosityLevel","ERRORS","WARNINGS","INFOS","CMapCompressionType","BINARY","STREAM","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","UNSUPPORTED_FEATURES","unknown","forms","javaScript","signatures","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontBuildPath","errorFontGetPath","errorMarkedContent","errorContentSubStream","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","unreachable","base","other","options","dots","stringToUTF8String","absoluteUrl","_isValidProtocol","enumerable","configurable","writable","BaseException","NullCharactersRegExp","str","bytes","length","MAX_ARGUMENT_COUNT","String","strBuf","chunkEnd","chunk","arr","resultLength","arrayByteLength","pos","item","itemLength","value","obj","buffer8","view32","IsLittleEndianCached","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","Array","n","makeHexColor","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","Util","p2","r","p3","p4","inverseTransform","apply3dTransform","v","singularValueDecompose2dScale","transpose","a","b","c","first","sx","sy","normalizeRect","intersect","orderedX","rect1","rect2","orderedY","result","PDFStringTranslateTable","code","match","buf","char","escape","unescape","encodeURIComponent","arr1","arr2","date","buffer","capability","isSettled","get","contentType","forceDataSchema","URL","type","digits","b1","b2","b3","d1","d2","d3","d4","isNodeJS","process","create","context","reset","canvasAndContext","destroy","isCompressed","compressionType","reason","svg","createElement","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DefaultCanvasFactory","DefaultCMapReaderFactory","DefaultStandardFontDataFactory","createPDFNetworkStream","task","src","source","isArrayBuffer","range","params","rangeTransport","worker","window","isNaN","setVerbosityLevel","workerParams","port","GlobalWorkerOptions","PDFWorker","docId","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","initialData","progressiveDone","contentDispositionFilename","disableRange","disableStream","httpHeaders","withCredentials","rangeChunkSize","messageHandler","transport","pdfDataRangeTransport","workerId","apiVersion","password","disableAutoFetch","maxImageSize","disableFontFace","postMessageTransfers","docBaseUrl","ignoreErrors","fontExtraProperties","enableXfa","useSystemFonts","cMapUrl","standardFontDataUrl","idCounters","doc","PDFDocumentLoadingTask","promise","addRangeListener","addProgressListener","addProgressiveReadListener","addProgressiveDoneListener","onDataRange","listener","onDataProgress","onDataProgressiveRead","onDataProgressiveDone","transportReady","requestDataRange","abort","deprecated","annotationStorage","numPages","fingerprints","isPureXfa","allXfaHtml","getPage","getPageIndex","getDestinations","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","getDownloadInfo","getStats","cleanup","keepLoadedFonts","loadingParams","loadingTask","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pdfBug","pageNumber","rotate","ref","userUnit","view","getViewport","getAnnotations","intent","intentArgs","annotations","annotation","getXfa","render","annotationMode","imageLayer","canvasFactory","background","optionalContentConfigPromise","arguments","intentState","clearTimeout","canvasFactoryInstance","intentPrint","fnArray","argsArray","lastChunk","complete","error","internalRenderTask","callback","objs","commonObjs","operatorList","pageIndex","useRequestAnimationFrame","renderTask","Promise","getOperatorList","opListTask","streamTextContent","normalizeWhitespace","disableCombineTextItems","includeMarkedContent","TEXT_CONTENT_CHUNK_SIZE","combineTextItems","highWaterMark","size","textContent","getTextContent","xfa","XfaText","readableStream","reader","pump","items","styles","getStructTree","_destroy","waitOn","force","resetStats","_tryCleanup","renderTasks","_startRenderPage","_renderPageChunk","operatorListChunk","_pumpOperatorList","renderingIntent","_abortOperatorList","curIntentState","stats","postMessage","cloned","transfers","cloneValue","desc","event","addEventListener","removeEventListener","terminate","PDFWorkerUtil","isWorkerDisabled","fallbackWorkerSrc","fakeWorkerId","pdfjsFilePath","wrapper","_workerPorts","_initializeFromPort","_initialize","workerSrc","isSameOrigin","terminateEarly","onWorkerError","sendTest","testObj","info","_setupFakeWorker","WorkerMessageHandler","id","workerHandler","fromPort","_mainThreadWorkerMessageHandler","_setupFakeWorkerGlobal","loader","mainWorkerMessageHandler","eval","loadScript","onUnsupportedFeature","styleElement","getRenderingIntent","isOpList","lastModified","cacheKey","page","terminated","setupMessageHandler","evt","loaded","total","sink","readyReason","headersCapability","fullReader","isStreamingSupported","isRangeSupported","contentLength","rangeReader","pdfInfo","ex","exception","updatePassword","exportedError","exportedData","fontRegistry","registerFont","pageProxy","MAX_IMAGE_SIZE_TO_STORE","imageData","_onUnsupportedFeature","pageInfo","filename","getDocJSActions","getPageJSActions","results","metadata","startCleanup","cleanupSuccessful","_ensureObj","resolved","has","clear","cancel","canvasInUse","completed","initializeGraphics","transparency","InternalRenderTask","operatorListChanged","_continue","_scheduleNext","_next","version","build","addNativeFontFace","insertRule","styleSheet","bind","nativeFontFace","featureId","rule","_queueLoadingCallback","isFontLoadingAPISupported","hasFonts","isSyncFontLoadingSupported","_loadTestFont","_prepareFontLoadEvent","FontLoader","requests","nextRequestId","supported","navigator","otherRequest","setTimeout","done","getLoadTestFont","atob","offset","chunk1","s","chunk2","ctx","called","isFontReady","loadTestFontId","COMMENT_OFFSET","spliceString","CFF_CHECKSUM_OFFSET","XXXX_VALUE","checksum","int32","string32","btoa","names","div","span","translatedData","createNativeFontFace","css","weight","createFontFaceRule","bytesToString","getPathGenerator","cmds","jsBuf","args","current","NodeCanvasFactory","NodeCMapReaderFactory","NodeStandardFontDataFactory","fs","__non_webpack_require__","Canvas","getValue","setValue","modified","getAll","objectFromMap","_setModified","resetModified","serializable","MIN_FONT_SIZE","MAX_FONT_SIZE","MAX_GROUP_SIZE","MAX_CACHED_CANVAS_PATTERNS","EXECUTION_TIME","EXECUTION_STEPS","COMPILE_TYPE3_GLYPHS","MAX_SIZE_TO_COMPILE","FULL_CHUNK_HEIGHT","LINEWIDTH_SCALE_FACTOR","set","ad_bc","bc_ad","old","prev","cosValue","sinValue","getCanvas","canvasEntry","addContextCurrentTransform","maxSize","POINT_TO_PROCESS_LIMIT","POINT_TYPES","imgData","width1","points","lineSize","data0","elem","mask","count","j","j0","sum","steps","outlines","coords","p0","step","pp","drawOutline","k","kk","o","l","ll","setCurrentPoint","transferMaps","partialChunkHeight","fullChunks","totalChunks","chunkImgData","srcPos","dest","transferMapRed","transferMapGreen","transferMapBlue","transferMapGray","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","thisChunkHeight","destPos","srcDiff","kEnd","kEndUnrolled","srcByte","hasTransferMaps","elemsInThisChunk","properties","property","sourceCtx","destCtx","alpha","alpha_","r0","g0","b0","maskData","transferMap","layerData","y","hasBackdrop","backdrop","subtype","composeFn","PIXELS_TO_PROCESS","chunkSize","row","chunkHeight","maskCtx","layerCtx","composeSMaskBackdrop","genericComposeSMask","actualScale","interpolate","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","beginDrawing","transparentCanvas","resetCtxToDefault","viewport","executeOperatorList","executionStartIdx","argsArrayLen","chunkOperations","endTime","stepper","fnId","objsPool","depObjId","continueCallback","endDrawing","_scaleImage","img","widthScale","heightScale","paintWidth","paintHeight","tmpCanvasId","newWidth","newHeight","tmpCanvas","tmpCtx","_createMaskCanvas","fillColor","isPatternFill","maskCanvas","putBinaryImageMask","objToCanvas","maskToCanvas","cord1","cord2","drawnWidth","drawnHeight","fillCanvas","fillCtx","scaled","getImageSmoothingEnabled","inverse","states","state","key","beginSMaskGroup","activeSMask","cacheId","scratchCanvas","currentCtx","currentTransform","groupCtx","copyCtxState","suspendSMaskGroup","composeSMask","deltaTransform","resumeSMaskGroup","endSMaskGroup","x","ops","xw","yh","consumePath","strokeColor","lineWidth","needRestore","paths","path","fontObj","bold","italic","typeface","browserFontSize","paintChar","textRenderingMode","fontSize","fillStrokeMode","isAddToPathSet","patternFill","addToPath","isFontSubpixelAAEnabled","fontSizeScale","charSpacing","wordSpacing","fontDirection","textHScale","glyphsLength","glyphs","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","patternTransform","resetLineWidthToOne","glyph","isNum","restoreNeeded","spacing","character","accent","vmetric","vx","vy","scaledX","scaledY","measuredWidth","characterScaleX","scaledAccentX","scaledAccentY","charWidth","showType3Text","fontMatrix","isTextInvisible","spacingLength","transformed","urx","ury","getColorN_Pattern","IR","color","baseTransform","canvasGraphicsFactory","createCanvasGraphics","_getPattern","matrix","getShadingPattern","inv","bl","br","ul","ur","x0","y0","x1","y1","bbox","group","bounds","canvasBounds","scaleX","scaleY","startTransformInverse","skewX","skewY","positions","trans","images","image","objId","map","w","h","imgToPaint","putBinaryImageData","position","left","top","entry","visible","tag","getSinglePixelWidth","absDet","sqNorm1","sqNorm2","pixelHeight","getCanvasPosition","isContentVisible","CanvasGraphics","region","getPattern","_createGradient","grad","colorStop","owner","applyBoundingBox","domMatrix","colors","rowSize","tmp","c1","c2","c3","x2","y2","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","xa","car","cag","cab","xb","cbr","cbg","cbb","x1_","x2_","ps","figure","cs","verticesPerRow","rows","cols","q","drawTriangle","_createMeshCanvas","EXPECTED_SCALE","MAX_PATTERN_SIZE","BORDER_SIZE","boundsWidth","boundsHeight","combinedScale","paddedWidth","paddedHeight","cachedCanvases","backgroundColor","drawFigure","matrixScale","temporaryPatternCanvas","PaintType","COLORED","UNCOLORED","createPatternCanvas","xstep","ystep","paintType","tilingType","curMatrixScale","dimx","dimy","graphics","adjustedX0","adjustedY0","adjustedX1","adjustedY1","getSizeAndScale","TilingPattern","clipBbox","bboxWidth","bboxHeight","setFillAndStrokeStyleToContext","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","callbackId","wrapReason","action","cbSourceName","cbTargetName","comObj","sourceName","targetName","on","ah","send","sendWithPromise","sendWithStream","streamId","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","stream","cancelCapability","_createStreamSink","self","streamSink","enqueue","lastDesiredSize","close","sinkCapability","onPull","onCancel","isCancelled","ready","success","_processStreamMessage","streamController","_deleteStreamController","_postMessage","getRaw","_evaluateVisibilityExpression","array","operator","element","isVisible","setVisibility","getOrder","getGroups","getGroup","_onReceiveData","found","_progressiveDataLength","_onProgress","firstReader","_onProgressiveDone","_removeRangeReader","getFullReader","queuedChunks","getRangeReader","cancelAllRequests","isPdfFile","_enqueue","requestCapability","headersReady","read","requestsCapability","output","node","walk","shouldBuildText","DEFAULT_TAB_INDEX","GetElementsByNameSet","parameters","fieldType","isRenderable","ignoreBorder","createQuadrilaterals","_createContainer","container","horizontalRadius","verticalRadius","radius","borderColor","_createQuadrilaterals","quadrilaterals","savedRect","quadPoint","_createPopup","trigger","popupElement","titleObj","modificationDate","contentsObj","hideWrapper","popup","_renderQuadrilaterals","quadrilateral","_getElementsByName","skipId","fields","fieldObj","exportValue","domElement","platform","isWin","isMac","linkService","hasClickAction","linkElement","index","_bindLink","destination","_bindNamedAction","_bindJSAction","jsName","detail","_bindResetFormAction","otherClickAction","refs","allFields","resetFormFields","resetFormRefs","fieldIds","field","storage","allIds","valueAsString","ids","JSON","_getKeyModifier","AnnotationElement","_setEventListener","baseName","valueGetter","shift","modifier","_setEventListeners","eventName","_setBackgroundColor","_dispatchEventFromSandbox","setColor","ColorConverters","commonActions","display","hidden","print","focus","preventScroll","userName","readonly","required","bgColor","fgColor","textColor","jsEvent","actions","setPropertyOnSiblings","storedData","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","defaultValue","blurListener","selRange","selStart","selEnd","commitKey","willCommit","_blurListener","change","fieldWidth","combWidth","_setTextStyle","TEXT_ALIGNMENT","style","fontColor","curChecked","checked","checkbox","radio","pdfButtonValue","fontSizeStyle","selectElement","option","optionElement","isExport","getItems","displayValue","values","multipleSelection","remove","insert","indices","editable","changeEx","keyDown","IGNORE_TYPES","selector","parentElements","popupLeft","popupTop","BACKGROUND_ENLIGHT","g","title","dateObject","PDFDateString","contents","_formatContents","lines","line","_toggle","_show","pin","_hide","unpin","borderWidth","square","circle","coordinate","polyline","getFilenameFromUrl","stringToPDFString","_download","sortedAnnotations","popupAnnotations","layer","downloadManager","imageResourcesPath","renderForms","svgFactory","enableScripting","fieldObjects","mouseState","isDown","rendered","update","elements","CMYK_G","G_CMYK","G_RGB","G_HTML","G","makeColorComp","RGB_G","RGB_HTML","R","B","T_HTML","CMYK_RGB","CMYK_HTML","RGB_CMYK","MAX_TEXT_DIVS_TO_RENDER","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","AllWhitespaceRegexp","cachedAscent","metrics","ascent","descent","ratio","pixels","textDiv","textDivProperties","angle","canvasWidth","hasText","geom","hasEOL","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","tx","fontHeight","fontAscent","getAscent","shouldScaleText","absScaleX","absScaleY","angleCos","angleSin","divWidth","divHeight","right","bottom","textDivs","textDivsLength","t","ts","expanded","expandBounds","divProperties","e","jj","boxScale","findPositiveMin","box","x1New","x2New","expandBoundsLTR","boxes","fakeBoundary","horizon","boundary","maxXNew","horizonPart","affectedBoundary","xNew","changedHorizon","lastBoundary","useBoundary","used","textContentItemsStr","_processItems","len","parent","appendText","_layoutText","fontFamily","_render","timeout","styleCache","textItems","textStyles","expandTextDivs","expandDivs","expand","transformBuf","paddingBuf","divProps","renderParameters","textContentStream","enhanceTextSelection","SVGGraphics","SVG_DEFAULTS","fontStyle","fontWeight","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","crc","body","crc32","deflateSyncUncompressed","input","Buffer","level","literals","maxBlockLength","deflateBlocks","idat","pi","adler","adler32","colorType","bitDepth","offsetLiterals","offsetBytes","kind","ihdr","deflateSync","pngLength","writePngChunk","createObjectURL","encode","opTree","opListElement","fn","pf","clipCount","maskCount","shadingCount","loadDependencies","transformMatrix","getSVG","svgElement","convertOpList","operatorIdMapping","opList","opListToTree","executeOpTree","opTreeElement","lineWidthScale","textMatrix","pm","addFontStyle","details","setStrokeAlpha","setFillAlpha","_makeColorN_Pattern","_makeTilingPattern","tilingId","txstep","tystep","tiling","tx1","ty1","_makeShadingPattern","shadingId","colorStops","point0","point1","gradient","focalPoint","circlePoint","focalRadius","circleRadius","stop","op","clipId","clipPath","clipElement","_setStrokeAttributes","dashArray","imgSrc","cliprect","imgEl","definitions","rootGroup","_ensureClipGroup","clipGroup","_ensureTransformGroup","setupStorage","html","setAttributes","isHTMLAnchorElement","attributes","root","rootHtml","stack","rootDiv","child","childHtml","el","http","https","fileUriRegex","parsedUrl","parseUrl","_error","_setReadableStream","auth","host","method","handleResponse","getResponseHeader","isHttp","suggestedLength","extractFilenameFromHeader","createRequestOptions","stat","returnValues","allowRangeRequests","contentEncoding","contentDisposition","getFilenameFromContentDispositionHeader","status","needsEncodingFixup","toParamRegExp","rfc2616unquote","rfc5987decode","rfc2047decode","fixupEncoding","rfc2231getparam","decoder","fatal","textdecode","iter","parts","part","quotindex","encodingend","extvalue","encoding","langvalue","text","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","xhr","requestRange","listeners","requestFull","xhrId","pendingRequest","onProgress","onStateChange","xhrStatus","ok_response_on_range_request","getArrayBuffer","rangeHeader","begin","getRequestXhr","isPendingRequest","abortRequest","_onRangeRequestReaderClosed","onHeadersReceived","onDone","onError","manager","_onHeadersReceived","fullRequestXhrId","fullRequestXhr","_onDone","_onError","createResponseStatusError","_close","signal","abortController","mode","credentials","redirect","headers","createHeaders","createFetchOptions","validateResponseStatus","pdfjsVersion","pdfjsBuild","require","setPDFNetworkStreamFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,CAAA,SAAA,gCAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AACA,MAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,MAAA,KAAA,QAAA,EACA,MAAA,CAAA,OAAA,GAAA,OAAA,EAAA,CADA,KAEA,IAAA,OAAA,MAAA,KAAA,UAAA,IAAA,MAAA,CAAA,GAAA,EACA,MAAA,CAAA,sBAAA,EAAA,EAAA,EAAA,OAAA,CAAA,CADA,KAEA,IAAA,OAAA,OAAA,KAAA,QAAA,EACA,OAAA,CAAA,sBAAA,CAAA,GAAA,OAAA,EAAA,CADA,KAGA,IAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,CAAA,QAAA,GAAA,OAAA,EAAA;AACC,CATD,EASC,IATD,EASC,YAAA;AACD;AAAA;AAAA,KAAA,MAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAUA,YAAA,aAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAOA,cAAMA,gBAAAA,GAhCN,8BAgCA;AACA,cAAMC,MAAAA,GAjCN,4BAiCA;AAEA,cAAMC,aAAAA,GAAgB;AACpBC,UAAAA,GAAAA,EADoB,IAAA;AAEpBC,UAAAA,GAAAA,EAFoB,IAAA;;AAKpB,cAAA,gBAAA,GAAuB;AACrB,mBAAOC,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,kBAAAA,EAAiC,KAAA,GAAA,GAAW,KAD9B,GACdA,CAAP;AANkB;;AAAA,SAAtB;;;AAUA,cAAA,gBAAA,SAAA,aAAA,CAAA,iBAAA,CAAiD;AAC/CC,UAAAA,WAAAA,GAA0D;AAAA,gBAA9C;AAAEC,cAAAA,aAAAA,GAAgBC,UAAAA,CAAlB;AAAA,aAA8C,uEAA1DF,EAA0D;AAAA;AAExD,iBAAA,SAAA,GAFwD,aAExD;AAH6C;;AAM/CG,UAAAA,aAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAA6B;AAC3B,kBAAMC,MAAAA,GAAS,KAAA,SAAA,CAAA,aAAA,CADY,QACZ,CAAf;;AACAA,YAAAA,MAAAA,CAAAA,KAAAA,GAF2B,KAE3BA;AACAA,YAAAA,MAAAA,CAAAA,MAAAA,GAH2B,MAG3BA;AACA,mBAJ2B,MAI3B;AAV6C;;AAAA;;;;AAcjD,uBAAA,SAAA,CAAA,GAAA,EAAoD;AAAA,cAAtBC,YAAsB,uEAApD,KAAoD;;AAClD,cAEEC,eAAAA,CAAAA,GAAAA,EAAqBC,QAAAA,CAFvB,OAEED,CAFF,EAGE;AACA,kBAAME,QAAAA,GAAW,MAAMC,KAAAA,CADvB,GACuBA,CAAvB;;AACA,gBAAI,CAACD,QAAAA,CAAL,EAAA,EAAkB;AAChB,oBAAM,IAAA,KAAA,CAAUA,QAAAA,CADA,UACV,CAAN;AAHF;;AAKA,mBAAOH,YAAAA,GACH,IAAA,UAAA,CAAe,MAAMG,QAAAA,CADlBH,WACkBG,EAArB,CADGH,GAEHK,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,MAAMF,QAAAA,CAPxB,IAOwBA,EAApBE,CAFJ;AATgD;;AAelD,iBAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,kBAAMC,OAAAA,GAAU,IADsB,cACtB,EAAhB;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAFsC,IAEtCA;;AAEA,gBAAA,YAAA,EAAkB;AAChBA,cAAAA,OAAAA,CAAAA,YAAAA,GADgB,aAChBA;AALoC;;AAOtCA,YAAAA,OAAAA,CAAAA,kBAAAA,GAA6B,MAAM;AACjC,kBAAIA,OAAAA,CAAAA,UAAAA,KAAuBC,cAAAA,CAA3B,IAAA,EAAgD;AAAA;AADf;;AAIjC,kBAAID,OAAAA,CAAAA,MAAAA,KAAAA,GAAAA,IAA0BA,OAAAA,CAAAA,MAAAA,KAA9B,CAAA,EAAoD;AAClD,oBADkD,IAClD;;AACA,oBAAIN,YAAAA,IAAgBM,OAAAA,CAApB,QAAA,EAAsC;AACpCE,kBAAAA,IAAAA,GAAO,IAAA,UAAA,CAAeF,OAAAA,CADc,QAC7B,CAAPE;AADF,iBAAA,MAEO,IAAI,CAAA,YAAA,IAAiBF,OAAAA,CAArB,YAAA,EAA2C;AAChDE,kBAAAA,IAAAA,GAAOH,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAcC,OAAAA,CAD2B,YACzCD,CAAPG;AALgD;;AAOlD,oBAAA,IAAA,EAAU;AACRC,kBAAAA,OAAAA,CADQ,IACRA,CAAAA;AADQ;AAPwC;AAJnB;;AAgBjCC,cAAAA,MAAAA,CAAO,IAAA,KAAA,CAAUJ,OAAAA,CAhBgB,UAgB1B,CAAPI,CAAAA;AAhBFJ,aAAAA;;AAmBAA,YAAAA,OAAAA,CAAAA,IAAAA,CA1BsC,IA0BtCA;AA1BF,WAAO,CAAP;AA1EF;;AAwGA,cAAA,oBAAA,SAAA,aAAA,CAAA,qBAAA,CAAyD;AACvDK,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,eAAAA,EAAiC;AAC/B,mBAAO,SAAA,CAAA,GAAA,EAAoC,KAApC,YAAA,CAAA,CAAA,IAAA,CAA4DH,IAAAA,IAAQ;AACzE,qBAAO;AAAEI,gBAAAA,QAAAA,EAAF,IAAA;AAAA,gBAAA;AAAA,eAAP;AADF,aAAO,CAAP;AAFqD;;AAAA;;;;AAQzD,cAAA,0BAAA,SAAA,aAAA,CAAA,2BAAA,CAAqE;AACnED,UAAAA,UAAAA,CAAAA,GAAAA,EAAgB;AACd,mBAAOE,SAAAA,CAAAA,GAAAA,EADO,IACPA,CAAP;AAFiE;;AAAA;;;;AAMrE,cAAA,aAAA,SAAA,aAAA,CAAA,cAAA,CAA2C;AACzCC,UAAAA,UAAAA,CAAAA,IAAAA,EAAiB;AACf,mBAAOZ,QAAAA,CAAAA,eAAAA,CAAAA,MAAAA,EADQ,IACRA,CAAP;AAFuC;;AAAA;;;;AAqC3C,cAAA,YAAA,CAAmB;AAIjBP,UAAAA,WAAAA,OAOG;AAAA,gBAPS;AAAA,cAAA,OAAA;AAAA,cAAA,KAAA;AAAA,cAAA,QAAA;AAIVoB,cAAAA,OAAAA,GAJU,CAAA;AAKVC,cAAAA,OAAAA,GALU,CAAA;AAMVC,cAAAA,QAAAA,GANFtB;AAAY,aAOT;AACD,iBAAA,OAAA,GADC,OACD;AACA,iBAAA,KAAA,GAFC,KAED;AACA,iBAAA,QAAA,GAHC,QAGD;AACA,iBAAA,OAAA,GAJC,OAID;AACA,iBAAA,OAAA,GALC,OAKD;AAIA,kBAAMuB,OAAAA,GAAW,CAAA,OAAA,CAAA,CAAA,CAAA,GAAaC,OAAAA,CAAd,CAAcA,CAAb,IAThB,CASD;AACA,kBAAMC,OAAAA,GAAW,CAAA,OAAA,CAAA,CAAA,CAAA,GAAaD,OAAAA,CAAd,CAAcA,CAAb,IAVhB,CAUD;AACA,gBAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAXC,OAWD;AAEAE,YAAAA,QAAAA,IAbC,GAaDA;;AACA,gBAAIA,QAAAA,GAAJ,CAAA,EAAkB;AAChBA,cAAAA,QAAAA,IADgB,GAChBA;AAfD;;AAiBD,oBAAA,QAAA;AACE,mBAAA,GAAA;AACEC,gBAAAA,OAAAA,GAAU,CADZ,CACEA;AACAC,gBAAAA,OAAAA,GAFF,CAEEA;AACAC,gBAAAA,OAAAA,GAHF,CAGEA;AACAC,gBAAAA,OAAAA,GAJF,CAIEA;AALJ;;AAOE,mBAAA,EAAA;AACEH,gBAAAA,OAAAA,GADF,CACEA;AACAC,gBAAAA,OAAAA,GAFF,CAEEA;AACAC,gBAAAA,OAAAA,GAHF,CAGEA;AACAC,gBAAAA,OAAAA,GAJF,CAIEA;AAXJ;;AAaE,mBAAA,GAAA;AACEH,gBAAAA,OAAAA,GADF,CACEA;AACAC,gBAAAA,OAAAA,GAAU,CAFZ,CAEEA;AACAC,gBAAAA,OAAAA,GAAU,CAHZ,CAGEA;AACAC,gBAAAA,OAAAA,GAJF,CAIEA;AAjBJ;;AAmBE,mBAAA,CAAA;AACEH,gBAAAA,OAAAA,GADF,CACEA;AACAC,gBAAAA,OAAAA,GAFF,CAEEA;AACAC,gBAAAA,OAAAA,GAHF,CAGEA;AACAC,gBAAAA,OAAAA,GAAU,CAJZ,CAIEA;AAvBJ;;AAyBE;AACE,sBAAM,IAAA,KAAA,CA1BV,mEA0BU,CAAN;AA1BJ;;AA+BA,gBAAA,QAAA,EAAc;AACZD,cAAAA,OAAAA,GAAU,CADE,OACZA;AACAC,cAAAA,OAAAA,GAAU,CAFE,OAEZA;AAlDD;;AAqDD,gBAAA,aAAA,EArDC,aAqDD;AACA,gBAAA,KAAA,EAtDC,MAsDD;;AACA,gBAAIH,OAAAA,KAAJ,CAAA,EAAmB;AACjBI,cAAAA,aAAAA,GAAgBC,IAAAA,CAAAA,GAAAA,CAASP,OAAAA,GAAUD,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GADC,OACjBD;AACAE,cAAAA,aAAAA,GAAgBD,IAAAA,CAAAA,GAAAA,CAAST,OAAAA,GAAUC,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GAFC,OAEjBC;AACAC,cAAAA,KAAAA,GAAQF,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAHS,KAGjBE;AACAC,cAAAA,MAAAA,GAASH,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAJQ,KAIjBG;AAJF,aAAA,MAKO;AACLJ,cAAAA,aAAAA,GAAgBC,IAAAA,CAAAA,GAAAA,CAAST,OAAAA,GAAUC,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GADX,OACLD;AACAE,cAAAA,aAAAA,GAAgBD,IAAAA,CAAAA,GAAAA,CAASP,OAAAA,GAAUD,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GAFX,OAELC;AACAC,cAAAA,KAAAA,GAAQF,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAHH,KAGLE;AACAC,cAAAA,MAAAA,GAASH,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAJJ,KAILG;AAhED;;AAqED,iBAAA,SAAA,GAAiB,CACfR,OAAAA,GADe,KAAA,EAEfC,OAAAA,GAFe,KAAA,EAGfC,OAAAA,GAHe,KAAA,EAIfC,OAAAA,GAJe,KAAA,EAKfC,aAAAA,GAAgBJ,OAAAA,GAAAA,KAAAA,GAAhBI,OAAAA,GAA4CF,OAAAA,GAAAA,KAAAA,GAL7B,OAAA,EAMfI,aAAAA,GAAgBL,OAAAA,GAAAA,KAAAA,GAAhBK,OAAAA,GAA4CH,OAAAA,GAAAA,KAAAA,GAN9C,OAAiB,CAAjB;AASA,iBAAA,KAAA,GA9EC,KA8ED;AACA,iBAAA,MAAA,GA/EC,MA+ED;AA1Fe;;AAkGjBM,UAAAA,KAAAA,GAMQ;AAAA,gBANF;AACJC,cAAAA,KAAAA,GAAQ,KADJ,KAAA;AAEJX,cAAAA,QAAAA,GAAW,KAFP,QAAA;AAGJN,cAAAA,OAAAA,GAAU,KAHN,OAAA;AAIJC,cAAAA,OAAAA,GAAU,KAJN,OAAA;AAKJC,cAAAA,QAAAA,GALI;AAAA,aAME,uEANRc,EAMQ;AACN,mBAAO,IAAA,YAAA,CAAiB;AACtBZ,cAAAA,OAAAA,EAAS,KAAA,OAAA,CADa,KACb,EADa;AAAA,cAAA,KAAA;AAAA,cAAA,QAAA;AAAA,cAAA,OAAA;AAAA,cAAA,OAAA;AAAA,cAAA;AAAA,aAAjB,CAAP;AAzGe;;AA6HjBc,UAAAA,sBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAA6B;AAC3B,mBAAO,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EAA4B,KADR,SACpB,CAAP;AA9He;;AAwIjBC,UAAAA,0BAAAA,CAAAA,IAAAA,EAAiC;AAC/B,kBAAMC,OAAAA,GAAU,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAACC,IAAAA,CAAD,CAACA,CAAD,EAAUA,IAAAA,CAA9B,CAA8BA,CAAV,CAApB,EAAwC,KADzB,SACf,CAAhB;;AACA,kBAAMC,WAAAA,GAAc,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAACD,IAAAA,CAAD,CAACA,CAAD,EAAUA,IAAAA,CAA9B,CAA8BA,CAAV,CAApB,EAAwC,KAF7B,SAEX,CAApB;;AACA,mBAAO,CAACD,OAAAA,CAAD,CAACA,CAAD,EAAaA,OAAAA,CAAb,CAAaA,CAAb,EAAyBE,WAAAA,CAAzB,CAAyBA,CAAzB,EAAyCA,WAAAA,CAAhD,CAAgDA,CAAzC,CAAP;AA3Ie;;AAuJjBC,UAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAwB;AACtB,mBAAO,KAAA,CAAA,IAAA,CAAA,qBAAA,CAA2B,CAAA,CAAA,EAA3B,CAA2B,CAA3B,EAAmC,KADpB,SACf,CAAP;AAxJe;;AAAA;;;;AA4JnB,cAAA,2BAAA,SAAA,KAAA,CAAA,aAAA,CAAwD;AACtD3C,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAuB;AACrB,kBAAA,GAAA,EADqB,6BACrB;AACA,iBAAA,IAAA,GAFqB,IAErB;AAHoD;;AAAA;;;AAOxD,cAAM4C,UAAAA,GAAa;AACjBC,UAAAA,IAAAA,EADiB,CAAA;AAEjBC,UAAAA,IAAAA,EAFiB,CAAA;AAGjBC,UAAAA,KAAAA,EAHiB,CAAA;AAIjBC,UAAAA,MAAAA,EAJiB,CAAA;AAKjBC,UAAAA,GAAAA,EALiB;AAAA,SAAnB;;;AAyBA,iBAAA,iBAAA,CAAA,IAAA,EAA4E;AAAA,cAA3C;AAAA,YAAA,GAAA;AAAA,YAAA,MAAA;AAAA,YAAA,GAAA;AAAoBC,YAAAA,OAAAA,GAApB;AAAA,WAA2C,uEAA5E,EAA4E;AAC1EC,WAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEC,GAAAA,IAAO,OAAA,GAAA,KADTD,QAAAA,EAD0E,2DAC1EA;AAKA,gBAAME,cAAAA,GAAiBC,CAAAA,GAAAA,KAAAA,CAAAA,oBAAAA,EANmD,GAMnDA,CAAvB;;AACA,cAAA,OAAA,EAAa;AACXC,YAAAA,IAAAA,CAAAA,IAAAA,GAAYA,IAAAA,CAAAA,KAAAA,GADD,cACXA;AADF,WAAA,MAEO;AACLA,YAAAA,IAAAA,CAAAA,IAAAA,GADK,EACLA;AACAA,YAAAA,IAAAA,CAAAA,KAAAA,GAAa,aAFR,cAAA,EAELA;;AACAA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,qBADmB,KACnB;AADFA,aAAAA;AAZwE;;AAiB1E,cAAIC,SAAAA,GAjBsE,EAiB1E;;AACA,kBAAA,MAAA;AACE,iBAAKZ,UAAAA,CAAL,IAAA;AADF;;AAGE,iBAAKA,UAAAA,CAAL,IAAA;AACEY,cAAAA,SAAAA,GADF,OACEA;AAJJ;;AAME,iBAAKZ,UAAAA,CAAL,KAAA;AACEY,cAAAA,SAAAA,GADF,QACEA;AAPJ;;AASE,iBAAKZ,UAAAA,CAAL,MAAA;AACEY,cAAAA,SAAAA,GADF,SACEA;AAVJ;;AAYE,iBAAKZ,UAAAA,CAAL,GAAA;AACEY,cAAAA,SAAAA,GADF,MACEA;AAbJ;AAAA;;AAgBAD,UAAAA,IAAAA,CAAAA,MAAAA,GAlC0E,SAkC1EA;AAEAA,UAAAA,IAAAA,CAAAA,GAAAA,GAAW,OAAA,GAAA,KAAA,QAAA,GAAA,GAAA,GApC+D,gBAoC1EA;AA3XF;;AA8XA,iBAAA,YAAA,CAAA,GAAA,EAA2B;AACzB,gBAAME,EAAAA,GAAKL,GAAAA,CADc,MACzB;AACA,cAAIM,CAAAA,GAFqB,CAEzB;;AACA,iBAAOA,CAAAA,GAAAA,EAAAA,IAAUN,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,OAAjB,EAAA,EAAuC;AACrCM,YAAAA,CADqC;AAHd;;AAMzB,iBAAON,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAiBM,CAAAA,GAAjBN,CAAAA,EAAAA,WAAAA,OANkB,OAMzB;AApYF;;AAuYA,iBAAA,SAAA,CAAA,QAAA,EAA6B;AAC3B,iBAAO,OAAA,QAAA,KAAA,QAAA,IAAgC,UAAA,IAAA,CADZ,QACY,CAAvC;AAxYF;;AAgZA,iBAAA,kBAAA,CAAA,GAAA,EAAiC;AAC/B,gBAAMO,MAAAA,GAASP,GAAAA,CAAAA,OAAAA,CADgB,GAChBA,CAAf;AACA,gBAAMQ,KAAAA,GAAQR,GAAAA,CAAAA,OAAAA,CAFiB,GAEjBA,CAAd;AACA,gBAAMS,GAAAA,GAAM7B,IAAAA,CAAAA,GAAAA,CACV2B,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,GAAsBP,GAAAA,CADZpB,MAAAA,EAEV4B,KAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GAAoBR,GAAAA,CALS,MAGnBpB,CAAZ;AAIA,iBAAOoB,GAAAA,CAAAA,SAAAA,CAAcA,GAAAA,CAAAA,WAAAA,CAAAA,GAAAA,EAAAA,GAAAA,IAAdA,CAAAA,EAPwB,GAOxBA,CAAP;AAvZF;;AAiaA,iBAAA,qBAAA,CAAA,GAAA,EAAsE;AAAA,cAAlCU,eAAkC,uEAAtE,cAAsE;;AACpE,cAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,mBAD2B,eAC3B;AAFkE;;AAIpE,cAAIC,YAAAA,CAAJ,GAAIA,CAAJ,EAAuB;AACrBC,aAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADqB,oEACrBA;AACA,mBAFqB,eAErB;AANkE;;AAQpE,gBAAMC,KAAAA,GAR8D,qDAQpE;AAGA,gBAAMC,UAAAA,GAX8D,+BAWpE;AACA,gBAAMC,QAAAA,GAAWF,KAAAA,CAAAA,IAAAA,CAZmD,GAYnDA,CAAjB;AACA,cAAIG,iBAAAA,GACFF,UAAAA,CAAAA,IAAAA,CAAgBC,QAAAA,CAAhBD,CAAgBC,CAAhBD,KACAA,UAAAA,CAAAA,IAAAA,CAAgBC,QAAAA,CADhBD,CACgBC,CAAhBD,CADAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAgBC,QAAAA,CAhBkD,CAgBlDA,CAAhBD,CAHF;;AAIA,cAAA,iBAAA,EAAuB;AACrBE,YAAAA,iBAAAA,GAAoBA,iBAAAA,CADC,CACDA,CAApBA;;AACA,gBAAIA,iBAAAA,CAAAA,QAAAA,CAAJ,GAAIA,CAAJ,EAAqC;AAEnC,kBAAI;AACFA,gBAAAA,iBAAAA,GAAoBF,UAAAA,CAAAA,IAAAA,CAClBG,kBAAAA,CADkBH,iBAClBG,CADkBH,EADlB,CACkBA,CAApBE;AADF,eAAA,CAIE,OAAA,EAAA,EANiC,CAAA;AAFhB;AAjB6C;;AAgCpE,iBAAOA,iBAAAA,IAhC6D,eAgCpE;AAjcF;;AAocA,cAAA,SAAA,CAAgB;AACdpE,UAAAA,WAAAA,GAAc;AACZ,iBAAA,OAAA,GAAesE,MAAAA,CAAAA,MAAAA,CADH,IACGA,CAAf;AACA,iBAAA,KAAA,GAFY,EAEZ;AAHY;;AAMdC,UAAAA,IAAAA,CAAAA,IAAAA,EAAW;AACT,gBAAIC,IAAAA,IAAQ,KAAZ,OAAA,EAA0B;AACxBR,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,gCADmB,IAAA,EACxBA;AAFO;;AAIT,iBAAA,OAAA,CAAA,IAAA,IAAqBS,IAAAA,CAJZ,GAIYA,EAArB;AAVY;;AAadC,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,gBAAI,EAAE,IAAA,IAAQ,KAAd,OAAI,CAAJ,EAA6B;AAC3BV,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,kCADsB,IAAA,EAC3BA;AAFU;;AAIZ,iBAAA,KAAA,CAAA,IAAA,CAAgB;AAAA,cAAA,IAAA;AAEdW,cAAAA,KAAAA,EAAO,KAAA,OAAA,CAFO,IAEP,CAFO;AAGdd,cAAAA,GAAAA,EAAKY,IAAAA,CAHS,GAGTA;AAHS,aAAhB;AAMA,mBAAO,KAAA,OAAA,CAVK,IAUL,CAAP;AAvBY;;AA0BdG,UAAAA,QAAAA,GAAW;AAET,kBAAMC,MAAAA,GAFG,EAET;AACA,gBAAIC,OAAAA,GAHK,CAGT;;AACA,iBAAA,MAAA,IAAA,IAAmB,KAAnB,KAAA,EAA+B;AAC7B,oBAAMN,IAAAA,GAAOD,IAAAA,CADgB,IAC7B;;AACA,kBAAIC,IAAAA,CAAAA,MAAAA,GAAJ,OAAA,EAA2B;AACzBM,gBAAAA,OAAAA,GAAUN,IAAAA,CADe,MACzBM;AAH2B;AAJtB;;AAUT,iBAAA,MAAA,IAAA,IAAmB,KAAnB,KAAA,EAA+B;AAC7B,oBAAMC,QAAAA,GAAWR,IAAAA,CAAAA,GAAAA,GAAWA,IAAAA,CADC,KAC7B;AACAM,cAAAA,MAAAA,CAAAA,IAAAA,CAAY,GAAGN,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAH,OAAGA,CAAH,IAFiB,QAAA,MAE7BM;AAZO;;AAcT,mBAAOA,MAAAA,CAAAA,IAAAA,CAdE,EAcFA,CAAP;AAxCY;;AAAA;;;;AA4ChB,iBAAA,eAAA,CAAA,GAAA,EAAA,OAAA,EAAuC;AACrC,cAAI;AACF,kBAAM;AAAA,cAAA;AAAA,gBAAeG,OAAAA,GAAU,IAAA,GAAA,CAAA,GAAA,EAAVA,OAAU,CAAVA,GAAkC,IAAA,GAAA,CADrD,GACqD,CAAvD;AAEA,mBAAOC,QAAAA,KAAAA,OAAAA,IAAwBA,QAAAA,KAH7B,QAGF;AAHF,WAAA,CAIE,OAAA,EAAA,EAAW;AACX,mBADW,KACX;AANmC;AAhfvC;;AA+fA,iBAAA,UAAA,CAAA,GAAA,EAAsD;AAAA,cAA7BC,mBAA6B,uEAAtD,KAAsD;AACpD,iBAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,kBAAMC,MAAAA,GAAS5E,QAAAA,CAAAA,aAAAA,CADuB,QACvBA,CAAf;AACA4E,YAAAA,MAAAA,CAAAA,GAAAA,GAFsC,GAEtCA;;AAEAA,YAAAA,MAAAA,CAAAA,MAAAA,GAAgB,UAAA,GAAA,EAAe;AAC7B,kBAAA,mBAAA,EAAyB;AACvBA,gBAAAA,MAAAA,CADuB,MACvBA;AAF2B;;AAI7BrE,cAAAA,OAAAA,CAJ6B,GAI7BA,CAAAA;AAJFqE,aAAAA;;AAMAA,YAAAA,MAAAA,CAAAA,OAAAA,GAAiB,YAAY;AAC3BpE,cAAAA,MAAAA,CAAO,IAAA,KAAA,CAAU,0BAA0BoE,MAAAA,CADhB,GAAA,EACpB,CAAPpE,CAAAA;AADFoE,aAAAA;;AAGC,aAAA,QAAA,CAAA,IAAA,IAAiB5E,QAAAA,CAAlB,eAAC,EAAD,WAAC,CAbqC,MAarC;AAbH,WAAO,CAAP;AAhgBF;;AAkhBA,iBAAA,UAAA,CAAA,OAAA,EAA6B;AAC3B6E,UAAAA,OAAAA,CAAAA,GAAAA,CAAY,2BADe,OAC3BA;AAnhBF;;AAshBA,YAthBA,kBAshBA;;AAEA,cAAA,aAAA,CAAoB;AAiBlB,iBAAOC,YAAP,CAAA,KAAA,EAA2B;AACzB,gBAAI,CAAA,KAAA,IAAU,CAACC,CAAAA,GAAAA,KAAAA,CAAAA,QAAAA,EAAf,KAAeA,CAAf,EAAgC;AAC9B,qBAD8B,IAC9B;AAFuB;;AAMzB,gBAAI,CAAJ,kBAAA,EAAyB;AACvBC,cAAAA,kBAAAA,GAAqB,IAAA,MAAA,CACnB,QAAA,UAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA,GAAA,YAAA,GAAA,WAAA,GAAA,IAAA,GAAA,WAAA,GAFqB,IACF,CAArBA;AAPuB;;AA0BzB,kBAAMC,OAAAA,GAAUD,kBAAAA,CAAAA,IAAAA,CA1BS,KA0BTA,CAAhB;;AACA,gBAAI,CAAJ,OAAA,EAAc;AACZ,qBADY,IACZ;AA5BuB;;AAiCzB,kBAAME,IAAAA,GAAOC,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAjCY,EAiCZA,CAAb;AACA,gBAAIC,KAAAA,GAAQD,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAlCa,EAkCbA,CAAZ;AACAC,YAAAA,KAAAA,GAAQA,KAAAA,IAAAA,CAAAA,IAAcA,KAAAA,IAAdA,EAAAA,GAA4BA,KAAAA,GAA5BA,CAAAA,GAnCiB,CAmCzBA;AACA,gBAAIC,GAAAA,GAAMF,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EApCe,EAoCfA,CAAV;AACAE,YAAAA,GAAAA,GAAMA,GAAAA,IAAAA,CAAAA,IAAYA,GAAAA,IAAZA,EAAAA,GAAAA,GAAAA,GArCmB,CAqCzBA;AACA,gBAAIC,IAAAA,GAAOH,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAtCc,EAsCdA,CAAX;AACAG,YAAAA,IAAAA,GAAOA,IAAAA,IAAAA,CAAAA,IAAaA,IAAAA,IAAbA,EAAAA,GAAAA,IAAAA,GAvCkB,CAuCzBA;AACA,gBAAIC,MAAAA,GAASJ,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAxCY,EAwCZA,CAAb;AACAI,YAAAA,MAAAA,GAASA,MAAAA,IAAAA,CAAAA,IAAeA,MAAAA,IAAfA,EAAAA,GAAAA,MAAAA,GAzCgB,CAyCzBA;AACA,gBAAIC,MAAAA,GAASL,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EA1CY,EA0CZA,CAAb;AACAK,YAAAA,MAAAA,GAASA,MAAAA,IAAAA,CAAAA,IAAeA,MAAAA,IAAfA,EAAAA,GAAAA,MAAAA,GA3CgB,CA2CzBA;AACA,kBAAMC,qBAAAA,GAAwBR,OAAAA,CAAAA,CAAAA,CAAAA,IA5CL,GA4CzB;AACA,gBAAIS,UAAAA,GAAaP,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EA7CQ,EA6CRA,CAAjB;AACAO,YAAAA,UAAAA,GAAaA,UAAAA,IAAAA,CAAAA,IAAmBA,UAAAA,IAAnBA,EAAAA,GAAAA,UAAAA,GA9CY,CA8CzBA;AACA,gBAAIC,YAAAA,GAAeR,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAAAA,EAAAA,CAAAA,IA/CM,CA+CzB;AACAQ,YAAAA,YAAAA,GAAeA,YAAAA,IAAAA,CAAAA,IAAqBA,YAAAA,IAArBA,EAAAA,GAAAA,YAAAA,GAhDU,CAgDzBA;;AAMA,gBAAIF,qBAAAA,KAAJ,GAAA,EAAmC;AACjCH,cAAAA,IAAAA,IADiC,UACjCA;AACAC,cAAAA,MAAAA,IAFiC,YAEjCA;AAFF,aAAA,MAGO,IAAIE,qBAAAA,KAAJ,GAAA,EAAmC;AACxCH,cAAAA,IAAAA,IADwC,UACxCA;AACAC,cAAAA,MAAAA,IAFwC,YAExCA;AA3DuB;;AA8DzB,mBAAO,IAAA,IAAA,CAASrB,IAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,MAAAA,EA9DS,MA8DTA,CAAT,CAAP;AA/EgB;;AAAA;;;;AAsFpB,iBAAA,kBAAA,CAAA,OAAA,SAAkE;AAAA,cAA7B;AAAEpC,YAAAA,KAAAA,GAAF,CAAA;AAAaX,YAAAA,QAAAA,GAAlD;AAAqC,WAA6B;AAChE,gBAAM;AAAA,YAAA,KAAA;AAAA,YAAA;AAAA,cAAoByE,OAAAA,CAAAA,UAAAA,CADsC,KAChE;AACA,gBAAM3E,OAAAA,GAAU,CAAA,CAAA,EAAA,CAAA,EAAOkE,QAAAA,CAAP,KAAOA,CAAP,EAAwBA,QAAAA,CAAxC,MAAwCA,CAAxB,CAAhB;AAEA,iBAAO,IAAA,YAAA,CAAiB;AAAA,YAAA,OAAA;AAAA,YAAA,KAAA;AAAA,YAAA;AAAA,WAAjB,CAAP;AAlnBF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,QAAA,mBAAA,CAAA,CAAA,CAAA;;AAiBA,cAAMU,eAAAA,GAAkB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;;AACA,cAAMC,oBAAAA,GAAuB,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAA7B,CAA6B,CAA7B;;AAcA,cAAMC,mBAAAA,GAAsB;AAC1BC,UAAAA,GAAAA,EAD0B,IAAA;AAE1BC,UAAAA,OAAAA,EAF0B,IAAA;AAG1BC,UAAAA,KAAAA,EAH0B,IAAA;AAI1BC,UAAAA,iBAAAA,EAJ0B,IAAA;AAK1BC,UAAAA,mBAAAA,EAL0B,IAAA;AAM1BC,UAAAA,mBAAAA,EAN0B,IAAA;AAO1BC,UAAAA,MAAAA,EAP0B;AAAA,SAA5B;;AAUA,cAAMC,cAAAA,GAAiB;AACrBC,UAAAA,OAAAA,EADqB,CAAA;AAErBC,UAAAA,MAAAA,EAFqB,CAAA;AAGrBC,UAAAA,YAAAA,EAHqB,CAAA;AAIrBC,UAAAA,cAAAA,EAJqB;AAAA,SAAvB;;AAQA,cAAMC,cAAAA,GAAiB;AACrBV,UAAAA,KAAAA,EADqB,IAAA;AAErBW,UAAAA,eAAAA,EAFqB,IAAA;AAGrBC,UAAAA,IAAAA,EAHqB,IAAA;AAIrBC,UAAAA,kBAAAA,EAJqB,IAAA;AAKrBC,UAAAA,sBAAAA,EALqB,KAAA;AAMrBC,UAAAA,sBAAAA,EANqB,KAAA;AAOrBC,UAAAA,QAAAA,EAPqB,KAAA;AAQrBC,UAAAA,kBAAAA,EARqB;AAAA,SAAvB;;AAWA,cAAMC,iBAAAA,GAAoB;AACxBC,UAAAA,IAAAA,EADwB,CAAA;AAExBC,UAAAA,MAAAA,EAFwB,CAAA;AAGxBC,UAAAA,WAAAA,EAHwB,CAAA;AAIxBC,UAAAA,SAAAA,EAJwB,CAAA;AAKxBC,UAAAA,gBAAAA,EALwB,CAAA;AAMxBC,UAAAA,kBAAAA,EANwB,CAAA;AAOxBC,UAAAA,uBAAAA,EAPwB,CAAA;AAQxBC,UAAAA,WAAAA,EARwB,CAAA;AASxBC,UAAAA,gBAAAA,EATwB,CAAA;AAUxBC,UAAAA,gBAAAA,EAVwB;AAAA,SAA1B;;AAaA,cAAMC,SAAAA,GAAY;AAChBC,UAAAA,cAAAA,EADgB,CAAA;AAEhBC,UAAAA,SAAAA,EAFgB,CAAA;AAGhBC,UAAAA,UAAAA,EAHgB;AAAA,SAAlB;;AAMA,cAAMC,cAAAA,GAAiB;AACrBC,UAAAA,IAAAA,EADqB,CAAA;AAErBC,UAAAA,IAAAA,EAFqB,CAAA;AAGrBC,UAAAA,QAAAA,EAHqB,CAAA;AAIrBC,UAAAA,IAAAA,EAJqB,CAAA;AAKrBC,UAAAA,MAAAA,EALqB,CAAA;AAMrBC,UAAAA,MAAAA,EANqB,CAAA;AAOrBC,UAAAA,OAAAA,EAPqB,CAAA;AAQrBC,UAAAA,QAAAA,EARqB,CAAA;AASrBC,UAAAA,SAAAA,EATqB,CAAA;AAUrBC,UAAAA,SAAAA,EAVqB,EAAA;AAWrBC,UAAAA,QAAAA,EAXqB,EAAA;AAYrBC,UAAAA,SAAAA,EAZqB,EAAA;AAarBC,UAAAA,KAAAA,EAbqB,EAAA;AAcrBC,UAAAA,KAAAA,EAdqB,EAAA;AAerBC,UAAAA,GAAAA,EAfqB,EAAA;AAgBrBC,UAAAA,KAAAA,EAhBqB,EAAA;AAiBrBC,UAAAA,cAAAA,EAjBqB,EAAA;AAkBrBC,UAAAA,KAAAA,EAlBqB,EAAA;AAmBrBC,UAAAA,KAAAA,EAnBqB,EAAA;AAoBrBC,UAAAA,MAAAA,EApBqB,EAAA;AAqBrBC,UAAAA,MAAAA,EArBqB,EAAA;AAsBrBC,UAAAA,WAAAA,EAtBqB,EAAA;AAuBrBC,UAAAA,OAAAA,EAvBqB,EAAA;AAwBrBC,UAAAA,SAAAA,EAxBqB,EAAA;AAyBrBC,UAAAA,MAAAA,EAzBqB,EAAA;AA0BrBC,UAAAA,MAAAA,EA1BqB;AAAA,SAAvB;;AA6BA,cAAMC,wBAAAA,GAA2B;AAC/BC,UAAAA,MAAAA,EAD+B,QAAA;AAE/BC,UAAAA,MAAAA,EAF+B;AAAA,SAAjC;;AAKA,cAAMC,qBAAAA,GAAwB;AAC5BF,UAAAA,MAAAA,EAD4B,QAAA;AAE5BG,UAAAA,QAAAA,EAF4B;AAAA,SAA9B;;AAKA,cAAMC,qBAAAA,GAAwB;AAC5BC,UAAAA,QAAAA,EAD4B,UAAA;AAE5BC,UAAAA,QAAAA,EAF4B,UAAA;AAG5BC,UAAAA,SAAAA,EAH4B,WAAA;AAI5BC,UAAAA,SAAAA,EAJ4B,WAAA;AAK5BjI,UAAAA,IAAAA,EAL4B;AAAA,SAA9B;;AAQA,cAAMkI,mBAAAA,GAAsB;AAC1BC,UAAAA,KAAAA,EAD0B,OAAA;AAE1BC,UAAAA,KAAAA,EAF0B;AAAA,SAA5B;;AAKA,cAAMC,cAAAA,GAAiB;AACrBnD,UAAAA,SAAAA,EADqB,IAAA;AAErBoD,UAAAA,MAAAA,EAFqB,IAAA;AAGrB1E,UAAAA,KAAAA,EAHqB,IAAA;AAIrB2E,UAAAA,MAAAA,EAJqB,IAAA;AAKrBC,UAAAA,QAAAA,EALqB,IAAA;AAMrBC,UAAAA,MAAAA,EANqB,IAAA;AAOrBC,UAAAA,QAAAA,EAPqB,IAAA;AAQrBC,UAAAA,MAAAA,EARqB,IAAA;AASrBC,UAAAA,YAAAA,EATqB,KAAA;AAUrBC,UAAAA,cAAAA,EAVqB;AAAA,SAAvB;;AAaA,cAAMC,mBAAAA,GAAsB;AAC1BJ,UAAAA,QAAAA,EAD0B,SAAA;AAE1BK,UAAAA,QAAAA,EAF0B,SAAA;AAG1BC,UAAAA,QAAAA,EAH0B,SAAA;AAI1BC,UAAAA,SAAAA,EAJ0B,SAAA;AAK1BC,UAAAA,QAAAA,EAL0B,SAAA;AAM1BC,UAAAA,aAAAA,EAN0B,SAAA;AAO1BC,UAAAA,KAAAA,EAP0B,SAAA;AAQ1BC,UAAAA,UAAAA,EAR0B,SAAA;AAS1BC,UAAAA,KAAAA,EAT0B,SAAA;AAU1BC,UAAAA,IAAAA,EAV0B,SAAA;AAW1BC,UAAAA,IAAAA,EAX0B,SAAA;AAY1BC,UAAAA,UAAAA,EAZ0B,SAAA;AAa1BC,UAAAA,WAAAA,EAb0B,SAAA;AAc1BC,UAAAA,eAAAA,EAd0B,SAAA;AAe1BC,UAAAA,WAAAA,EAf0B,SAAA;AAgB1BC,UAAAA,IAAAA,EAhB0B,SAAA;AAiB1BC,UAAAA,QAAAA,EAjB0B,SAAA;AAkB1BC,UAAAA,cAAAA,EAlB0B,SAAA;AAmB1BC,UAAAA,iBAAAA,EAnB0B;AAAA,SAA5B;;AAsBA,cAAMC,yBAAAA,GAA4B;AAChCC,UAAAA,KAAAA,EADgC,CAAA;AAEhCC,UAAAA,MAAAA,EAFgC,CAAA;AAGhCC,UAAAA,OAAAA,EAHgC,CAAA;AAIhCC,UAAAA,KAAAA,EAJgC,CAAA;AAKhC9D,UAAAA,SAAAA,EALgC;AAAA,SAAlC;;AAQA,cAAM+D,yBAAAA,GAA4B;AAChCC,UAAAA,CAAAA,EADgC,aAAA;AAEhCC,UAAAA,CAAAA,EAFgC,YAAA;AAGhCC,UAAAA,CAAAA,EAHgC,YAAA;AAIhCC,UAAAA,CAAAA,EAJgC,UAAA;AAKhCC,UAAAA,EAAAA,EALgC,OAAA;AAMhCC,UAAAA,EAAAA,EANgC,MAAA;AAOhCC,UAAAA,EAAAA,EAPgC,UAAA;AAQhCC,UAAAA,EAAAA,EARgC,WAAA;AAShCC,UAAAA,EAAAA,EATgC,aAAA;AAUhCC,UAAAA,EAAAA,EAVgC,eAAA;AAWhCC,UAAAA,CAAAA,EAXgC,WAAA;AAYhCC,UAAAA,CAAAA,EAZgC,QAAA;AAahCC,UAAAA,CAAAA,EAbgC,UAAA;AAchCC,UAAAA,CAAAA,EAdgC;AAAA,SAAlC;;AAiBA,cAAMC,uBAAAA,GAA0B;AAC9BC,UAAAA,EAAAA,EAD8B,WAAA;AAE9BC,UAAAA,EAAAA,EAF8B,UAAA;AAG9BC,UAAAA,EAAAA,EAH8B,SAAA;AAI9BC,UAAAA,EAAAA,EAJ8B,WAAA;AAK9BC,UAAAA,EAAAA,EAL8B;AAAA,SAAhC;;AAQA,cAAMC,mBAAAA,GAAsB;AAC1BC,UAAAA,CAAAA,EAD0B,UAAA;AAE1BR,UAAAA,CAAAA,EAF0B;AAAA,SAA5B;;AAKA,cAAMS,UAAAA,GAAa;AACjBC,UAAAA,OAAAA,EADiB,SAAA;AAEjBC,UAAAA,KAAAA,EAFiB,OAAA;AAGjBC,UAAAA,GAAAA,EAHiB,KAAA;AAIjBC,UAAAA,GAAAA,EAJiB,KAAA;AAKjBC,UAAAA,GAAAA,EALiB,KAAA;AAMjBC,UAAAA,IAAAA,EANiB,MAAA;AAOjBC,UAAAA,GAAAA,EAPiB,KAAA;AAQjBC,UAAAA,GAAAA,EARiB,KAAA;AASjBC,UAAAA,GAAAA,EATiB,KAAA;AAUjBC,UAAAA,GAAAA,EAViB;AAAA,SAAnB;;AAaA,cAAMC,QAAAA,GAAW;AACfV,UAAAA,OAAAA,EADe,SAAA;AAEfW,UAAAA,KAAAA,EAFe,OAAA;AAGfC,UAAAA,aAAAA,EAHe,eAAA;AAIfC,UAAAA,MAAAA,EAJe,QAAA;AAKfC,UAAAA,YAAAA,EALe,cAAA;AAMfC,UAAAA,aAAAA,EANe,eAAA;AAOfC,UAAAA,QAAAA,EAPe,UAAA;AAQfC,UAAAA,YAAAA,EARe,cAAA;AASfC,UAAAA,KAAAA,EATe,OAAA;AAUfC,UAAAA,QAAAA,EAVe,UAAA;AAWfC,UAAAA,KAAAA,EAXe,OAAA;AAYfC,UAAAA,OAAAA,EAZe;AAAA,SAAjB;;AAeA,cAAMC,cAAAA,GAAiB;AACrBC,UAAAA,MAAAA,EADqB,CAAA;AAErBC,UAAAA,QAAAA,EAFqB,CAAA;AAGrBC,UAAAA,KAAAA,EAHqB;AAAA,SAAvB;;AAMA,cAAMC,mBAAAA,GAAsB;AAC1BxN,UAAAA,IAAAA,EAD0B,CAAA;AAE1ByN,UAAAA,MAAAA,EAF0B,CAAA;AAG1BC,UAAAA,MAAAA,EAH0B;AAAA,SAA5B;;AAOA,cAAMC,GAAAA,GAAM;AAGVC,UAAAA,UAAAA,EAHU,CAAA;AAIVC,UAAAA,YAAAA,EAJU,CAAA;AAKVC,UAAAA,UAAAA,EALU,CAAA;AAMVC,UAAAA,WAAAA,EANU,CAAA;AAOVC,UAAAA,aAAAA,EAPU,CAAA;AAQVC,UAAAA,OAAAA,EARU,CAAA;AASVC,UAAAA,kBAAAA,EATU,CAAA;AAUVC,UAAAA,WAAAA,EAVU,CAAA;AAWVC,UAAAA,SAAAA,EAXU,CAAA;AAYVC,UAAAA,IAAAA,EAZU,EAAA;AAaVC,UAAAA,OAAAA,EAbU,EAAA;AAcVC,UAAAA,SAAAA,EAdU,EAAA;AAeVC,UAAAA,MAAAA,EAfU,EAAA;AAgBVC,UAAAA,MAAAA,EAhBU,EAAA;AAiBVC,UAAAA,OAAAA,EAjBU,EAAA;AAkBVC,UAAAA,QAAAA,EAlBU,EAAA;AAmBVC,UAAAA,QAAAA,EAnBU,EAAA;AAoBVC,UAAAA,SAAAA,EApBU,EAAA;AAqBVC,UAAAA,SAAAA,EArBU,EAAA;AAsBVC,UAAAA,MAAAA,EAtBU,EAAA;AAuBVC,UAAAA,WAAAA,EAvBU,EAAA;AAwBVC,UAAAA,IAAAA,EAxBU,EAAA;AAyBVC,UAAAA,MAAAA,EAzBU,EAAA;AA0BVC,UAAAA,UAAAA,EA1BU,EAAA;AA2BVC,UAAAA,YAAAA,EA3BU,EAAA;AA4BVC,UAAAA,eAAAA,EA5BU,EAAA;AA6BVC,UAAAA,iBAAAA,EA7BU,EAAA;AA8BVC,UAAAA,OAAAA,EA9BU,EAAA;AA+BVC,UAAAA,IAAAA,EA/BU,EAAA;AAgCVC,UAAAA,MAAAA,EAhCU,EAAA;AAiCVC,UAAAA,SAAAA,EAjCU,EAAA;AAkCVC,UAAAA,OAAAA,EAlCU,EAAA;AAmCVC,UAAAA,cAAAA,EAnCU,EAAA;AAoCVC,UAAAA,cAAAA,EApCU,EAAA;AAqCVC,UAAAA,SAAAA,EArCU,EAAA;AAsCVC,UAAAA,UAAAA,EAtCU,EAAA;AAuCVC,UAAAA,OAAAA,EAvCU,EAAA;AAwCVC,UAAAA,oBAAAA,EAxCU,EAAA;AAyCVC,UAAAA,WAAAA,EAzCU,EAAA;AA0CVC,UAAAA,QAAAA,EA1CU,EAAA;AA2CVC,UAAAA,kBAAAA,EA3CU,EAAA;AA4CVC,UAAAA,aAAAA,EA5CU,EAAA;AA6CVC,UAAAA,QAAAA,EA7CU,EAAA;AA8CVC,UAAAA,QAAAA,EA9CU,EAAA;AA+CVC,UAAAA,cAAAA,EA/CU,EAAA;AAgDVC,UAAAA,gBAAAA,EAhDU,EAAA;AAiDVC,UAAAA,0BAAAA,EAjDU,EAAA;AAkDVC,UAAAA,YAAAA,EAlDU,EAAA;AAmDVC,UAAAA,qBAAAA,EAnDU,EAAA;AAoDVC,UAAAA,mBAAAA,EApDU,EAAA;AAqDVC,UAAAA,iBAAAA,EArDU,EAAA;AAsDVC,UAAAA,cAAAA,EAtDU,EAAA;AAuDVC,UAAAA,eAAAA,EAvDU,EAAA;AAwDVC,UAAAA,YAAAA,EAxDU,EAAA;AAyDVC,UAAAA,aAAAA,EAzDU,EAAA;AA0DVC,UAAAA,aAAAA,EA1DU,EAAA;AA2DVC,UAAAA,WAAAA,EA3DU,EAAA;AA4DVC,UAAAA,iBAAAA,EA5DU,EAAA;AA6DVC,UAAAA,eAAAA,EA7DU,EAAA;AA8DVC,UAAAA,kBAAAA,EA9DU,EAAA;AA+DVC,UAAAA,gBAAAA,EA/DU,EAAA;AAgEVC,UAAAA,WAAAA,EAhEU,EAAA;AAiEVC,UAAAA,gBAAAA,EAjEU,EAAA;AAkEVC,UAAAA,cAAAA,EAlEU,EAAA;AAmEVC,UAAAA,cAAAA,EAnEU,EAAA;AAoEVC,UAAAA,YAAAA,EApEU,EAAA;AAqEVC,UAAAA,SAAAA,EArEU,EAAA;AAsEVC,UAAAA,cAAAA,EAtEU,EAAA;AAuEVC,UAAAA,kBAAAA,EAvEU,EAAA;AAwEVC,UAAAA,uBAAAA,EAxEU,EAAA;AAyEVC,UAAAA,gBAAAA,EAzEU,EAAA;AA0EVC,UAAAA,WAAAA,EA1EU,EAAA;AA2EVC,UAAAA,SAAAA,EA3EU,EAAA;AA4EVC,UAAAA,qBAAAA,EA5EU,EAAA;AA6EVC,UAAAA,mBAAAA,EA7EU,EAAA;AA8EVC,UAAAA,UAAAA,EA9EU,EAAA;AA+EVC,UAAAA,QAAAA,EA/EU,EAAA;AAgFVC,UAAAA,gBAAAA,EAhFU,EAAA;AAiFVC,UAAAA,cAAAA,EAjFU,EAAA;AAkFVC,UAAAA,eAAAA,EAlFU,EAAA;AAmFVC,UAAAA,aAAAA,EAnFU,EAAA;AAqFVC,UAAAA,gBAAAA,EArFU,EAAA;AAsFVC,UAAAA,qBAAAA,EAtFU,EAAA;AAuFVC,UAAAA,0BAAAA,EAvFU,EAAA;AAwFVC,UAAAA,iBAAAA,EAxFU,EAAA;AAyFVC,UAAAA,uBAAAA,EAzFU,EAAA;AA0FVC,UAAAA,4BAAAA,EA1FU,EAAA;AA2FVC,UAAAA,uBAAAA,EA3FU,EAAA;AA4FVC,UAAAA,2BAAAA,EA5FU,EAAA;AA6FVC,UAAAA,wBAAAA,EA7FU,EAAA;AA8FVC,UAAAA,aAAAA,EA9FU;AAAA,SAAZ;;AAiGA,cAAMC,oBAAAA,GAAuB;AAE3BC,UAAAA,OAAAA,EAF2B,SAAA;AAG3BC,UAAAA,KAAAA,EAH2B,OAAA;AAI3BC,UAAAA,UAAAA,EAJ2B,YAAA;AAK3BC,UAAAA,UAAAA,EAL2B,YAAA;AAM3BC,UAAAA,KAAAA,EAN2B,OAAA;AAO3BC,UAAAA,cAAAA,EAP2B,gBAAA;AAS3BC,UAAAA,IAAAA,EAT2B,MAAA;AAU3BC,UAAAA,kBAAAA,EAV2B,oBAAA;AAW3BC,UAAAA,cAAAA,EAX2B,gBAAA;AAY3BC,UAAAA,YAAAA,EAZ2B,cAAA;AAa3BC,UAAAA,kBAAAA,EAb2B,oBAAA;AAc3BC,UAAAA,cAAAA,EAd2B,gBAAA;AAe3BC,UAAAA,gBAAAA,EAf2B,kBAAA;AAgB3BC,UAAAA,kBAAAA,EAhB2B,oBAAA;AAiB3BC,UAAAA,eAAAA,EAjB2B,iBAAA;AAkB3BC,UAAAA,iBAAAA,EAlB2B,mBAAA;AAmB3BC,UAAAA,kBAAAA,EAnB2B,oBAAA;AAoB3BC,UAAAA,mBAAAA,EApB2B,qBAAA;AAqB3BC,UAAAA,kBAAAA,EArB2B,oBAAA;AAsB3BC,UAAAA,gBAAAA,EAtB2B,kBAAA;AAuB3BC,UAAAA,kBAAAA,EAvB2B,oBAAA;AAwB3BC,UAAAA,qBAAAA,EAxB2B;AAAA,SAA7B;;AA2BA,cAAMC,iBAAAA,GAAoB;AACxBC,UAAAA,aAAAA,EADwB,CAAA;AAExBC,UAAAA,kBAAAA,EAFwB;AAAA,SAA1B;;AAKA,YAAIC,SAAAA,GAAY7H,cAAAA,CAvXhB,QAuXA;;AAEA,iBAAA,iBAAA,CAAA,KAAA,EAAkC;AAChC,cAAI8H,MAAAA,CAAAA,SAAAA,CAAJ,KAAIA,CAAJ,EAA6B;AAC3BD,YAAAA,SAAAA,GAD2B,KAC3BA;AAF8B;AAzXlC;;AA+XA,iBAAA,iBAAA,GAA6B;AAC3B,iBAD2B,SAC3B;AAhYF;;AAsYA,iBAAA,IAAA,CAAA,GAAA,EAAmB;AACjB,cAAIA,SAAAA,IAAa7H,cAAAA,CAAjB,KAAA,EAAuC;AACrC7K,YAAAA,OAAAA,CAAAA,GAAAA,CAAY,SADyB,GAAA,EACrCA;AAFe;AAtYnB;;AA6YA,iBAAA,IAAA,CAAA,GAAA,EAAmB;AACjB,cAAI0S,SAAAA,IAAa7H,cAAAA,CAAjB,QAAA,EAA0C;AACxC7K,YAAAA,OAAAA,CAAAA,GAAAA,CAAY,YAD4B,GAAA,EACxCA;AAFe;AA7YnB;;AAmZA,iBAAA,WAAA,CAAA,GAAA,EAA0B;AACxB,gBAAM,IAAA,KAAA,CADkB,GAClB,CAAN;AApZF;;AAuZA,iBAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAA2B;AACzB,cAAI,CAAJ,IAAA,EAAW;AACT4S,YAAAA,WAAAA,CADS,GACTA,CAAAA;AAFuB;AAvZ3B;;AA8ZA,iBAAA,YAAA,CAAA,OAAA,EAAA,QAAA,EAAyC;AACvC,cADuC,IACvC;;AACA,cAAI;AACFC,YAAAA,IAAAA,GAAO,IAAA,GAAA,CADL,OACK,CAAPA;;AACA,gBAAI,CAACA,IAAAA,CAAD,MAAA,IAAgBA,IAAAA,CAAAA,MAAAA,KAApB,MAAA,EAA4C;AAC1C,qBAD0C,KAC1C;AAHA;AAAJ,WAAA,CAKE,OAAA,CAAA,EAAU;AACV,mBADU,KACV;AARqC;;AAWvC,gBAAMC,KAAAA,GAAQ,IAAA,GAAA,CAAA,QAAA,EAXyB,IAWzB,CAAd;AACA,iBAAOD,IAAAA,CAAAA,MAAAA,KAAgBC,KAAAA,CAZgB,MAYvC;AA1aF;;AA8aA,iBAAA,gBAAA,CAAA,GAAA,EAA+B;AAC7B,cAAI,CAAJ,GAAA,EAAU;AACR,mBADQ,KACR;AAF2B;;AAI7B,kBAAQ9U,GAAAA,CAAR,QAAA;AACE,iBADF,OACE;AACA,iBAFF,QAEE;AACA,iBAHF,MAGE;AACA,iBAJF,SAIE;AACA,iBAAA,MAAA;AACE,qBANJ,IAMI;;AACF;AACE,qBARJ,KAQI;AARJ;AAlbF;;AAscA,iBAAA,sBAAA,CAAA,GAAA,EAAqE;AAAA,cAAhC4B,OAAgC,uEAArE,IAAqE;AAAA,cAAhBmT,OAAgB,uEAArE,IAAqE;;AACnE,cAAI,CAAJ,GAAA,EAAU;AACR,mBADQ,IACR;AAFiE;;AAInE,cAAI;AACF,gBAAIA,OAAAA,IAAW,OAAA,GAAA,KAAf,QAAA,EAAwC;AAEtC,kBAAIA,OAAAA,CAAAA,kBAAAA,IAA8B/U,GAAAA,CAAAA,UAAAA,CAAlC,MAAkCA,CAAlC,EAA0D;AACxD,sBAAMgV,IAAAA,GAAOhV,GAAAA,CAAAA,KAAAA,CAD2C,KAC3CA,CAAb;;AAGA,oBAAIgV,IAAAA,IAAQA,IAAAA,CAAAA,MAAAA,IAAZ,CAAA,EAA8B;AAC5BhV,kBAAAA,GAAAA,GAAM,UADsB,GAAA,EAC5BA;AALsD;AAFpB;;AAatC,kBAAI+U,OAAAA,CAAJ,kBAAA,EAAgC;AAC9B,oBAAI;AACF/U,kBAAAA,GAAAA,GAAMiV,kBAAAA,CADJ,GACIA,CAANjV;AADF,iBAAA,CAEE,OAAA,EAAA,EAH4B,CAAA;AAbM;AADtC;;AAqBF,kBAAMkV,WAAAA,GAActT,OAAAA,GAAU,IAAA,GAAA,CAAA,GAAA,EAAVA,OAAU,CAAVA,GAAkC,IAAA,GAAA,CArBpD,GAqBoD,CAAtD;;AACA,gBAAIuT,gBAAAA,CAAJ,WAAIA,CAAJ,EAAmC;AACjC,qBADiC,WACjC;AAvBA;AAAJ,WAAA,CAyBE,OAAA,EAAA,EA7BiE,CAAA;;AAgCnE,iBAhCmE,IAgCnE;AAteF;;AAyeA,iBAAA,MAAA,CAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAkC;AAChCjU,UAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAiC;AAAA,YAAA,KAAA;AAE/BkU,YAAAA,UAAAA,EAF+B,IAAA;AAG/BC,YAAAA,YAAAA,EAH+B,IAAA;AAI/BC,YAAAA,QAAAA,EAJ+B;AAAA,WAAjCpU;AAMA,iBAPgC,KAOhC;AAhfF;;AAsfA,cAAMqU,aAAAA,GAAiB,SAAA,oBAAA,GAAgC;AAErD,mBAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EAAsC;AACpC,gBAAI,KAAA,WAAA,KAAJ,aAAA,EAAwC;AACtCX,cAAAA,WAAAA,CADsC,kCACtCA,CAAAA;AAFkC;;AAIpC,iBAAA,OAAA,GAJoC,OAIpC;AACA,iBAAA,IAAA,GALoC,IAKpC;AAPmD;;AASrDW,UAAAA,aAAAA,CAAAA,SAAAA,GAA0B,IAT2B,KAS3B,EAA1BA;AACAA,UAAAA,aAAAA,CAAAA,WAAAA,GAVqD,aAUrDA;AAEA,iBAZqD,aAYrD;AAZF,SAAuB,EAAvB;;;;AAeA,cAAA,iBAAA,SAAA,aAAA,CAA8C;AAC5C3Y,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAuB;AACrB,kBAAA,GAAA,EADqB,mBACrB;AACA,iBAAA,IAAA,GAFqB,IAErB;AAH0C;;AAAA;;;;AAO9C,cAAA,qBAAA,SAAA,aAAA,CAAkD;AAChDA,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,OAAAA,EAA0B;AACxB,kBAAA,GAAA,EADwB,uBACxB;AACA,iBAAA,OAAA,GAFwB,OAExB;AAH8C;;AAAA;;;;AAOlD,cAAA,mBAAA,SAAA,aAAA,CAAgD;AAC9CA,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,kBAAA,GAAA,EADe,qBACf;AAF4C;;AAAA;;;;AAMhD,cAAA,mBAAA,SAAA,aAAA,CAAgD;AAC9CA,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,kBAAA,GAAA,EADe,qBACf;AAF4C;;AAAA;;;;AAMhD,cAAA,2BAAA,SAAA,aAAA,CAAwD;AACtDA,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAAyB;AACvB,kBAAA,GAAA,EADuB,6BACvB;AACA,iBAAA,MAAA,GAFuB,MAEvB;AAHoD;;AAAA;;;;AAUxD,cAAA,WAAA,SAAA,aAAA,CAAwC;AACtCA,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,kBAAA,GAAA,EADe,aACf;AAFoC;;AAAA;;;;AASxC,cAAA,cAAA,SAAA,aAAA,CAA2C;AACzCA,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,kBAAA,GAAA,EADe,gBACf;AAFuC;;AAAA;;;AAM3C,cAAM4Y,oBAAAA,GAxjBN,OAwjBA;;AAKA,iBAAA,oBAAA,CAAA,GAAA,EAAmC;AACjC,cAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B5U,YAAAA,IAAAA,CAD2B,yDAC3BA,CAAAA;AACA,mBAF2B,GAE3B;AAH+B;;AAKjC,iBAAO6U,GAAAA,CAAAA,OAAAA,CAAAA,oBAAAA,EAL0B,EAK1BA,CAAP;AAlkBF;;AAqkBA,iBAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B1V,UAAAA,MAAAA,CACE2V,KAAAA,KAAAA,IAAAA,IAAkB,OAAA,KAAA,KAAlBA,QAAAA,IAA+CA,KAAAA,CAAAA,MAAAA,KADjD3V,SAAAA,EAD4B,oCAC5BA,CAAAA;AAIA,gBAAM4V,MAAAA,GAASD,KAAAA,CALa,MAK5B;AACA,gBAAME,kBAAAA,GANsB,IAM5B;;AACA,cAAID,MAAAA,GAAJ,kBAAA,EAAiC;AAC/B,mBAAOE,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EADwB,KACxBA,CAAP;AAR0B;;AAU5B,gBAAMC,MAAAA,GAVsB,EAU5B;;AACA,eAAK,IAAIxV,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,kBAAA,EAAqD;AACnD,kBAAMyV,QAAAA,GAAWnX,IAAAA,CAAAA,GAAAA,CAAS0B,CAAAA,GAAT1B,kBAAAA,EADkC,MAClCA,CAAjB;AACA,kBAAMoX,KAAAA,GAAQN,KAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAFqC,QAErCA,CAAd;AACAI,YAAAA,MAAAA,CAAAA,IAAAA,CAAYD,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAHuC,KAGvCA,CAAZC;AAd0B;;AAgB5B,iBAAOA,MAAAA,CAAAA,IAAAA,CAhBqB,EAgBrBA,CAAP;AArlBF;;AAwlBA,iBAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B/V,UAAAA,MAAAA,CAAO,OAAA,GAAA,KAAPA,QAAAA,EAD0B,oCAC1BA,CAAAA;AACA,gBAAM4V,MAAAA,GAASF,GAAAA,CAFW,MAE1B;AACA,gBAAMC,KAAAA,GAAQ,IAAA,UAAA,CAHY,MAGZ,CAAd;;AACA,eAAK,IAAIpV,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/BoV,YAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWD,GAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IADoB,IAC/BC;AALwB;;AAO1B,iBAP0B,KAO1B;AA/lBF;;AAumBA,iBAAA,eAAA,CAAA,GAAA,EAA8B;AAC5B,cAAIO,GAAAA,CAAAA,MAAAA,KAAJ,SAAA,EAA8B;AAC5B,mBAAOA,GAAAA,CADqB,MAC5B;AAF0B;;AAI5BlW,UAAAA,MAAAA,CAAOkW,GAAAA,CAAAA,UAAAA,KAAPlW,SAAAA,EAJ4B,qCAI5BA,CAAAA;AACA,iBAAOkW,GAAAA,CALqB,UAK5B;AA5mBF;;AAqnBA,iBAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,gBAAMN,MAAAA,GAASM,GAAAA,CADW,MAC1B;;AAEA,cAAIN,MAAAA,KAAAA,CAAAA,IAAgBM,GAAAA,CAAAA,CAAAA,CAAAA,YAApB,UAAA,EAAkD;AAChD,mBAAOA,GAAAA,CADyC,CACzCA,CAAP;AAJwB;;AAM1B,cAAIC,YAAAA,GANsB,CAM1B;;AACA,eAAK,IAAI5V,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/B4V,YAAAA,YAAAA,IAAgBC,eAAAA,CAAgBF,GAAAA,CADD,CACCA,CAAhBE,CAAhBD;AARwB;;AAU1B,cAAIE,GAAAA,GAVsB,CAU1B;AACA,gBAAM3Y,IAAAA,GAAO,IAAA,UAAA,CAXa,YAWb,CAAb;;AACA,eAAK,IAAI6C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/B,gBAAI+V,IAAAA,GAAOJ,GAAAA,CADoB,CACpBA,CAAX;;AACA,gBAAI,EAAE,IAAA,YAAN,UAAI,CAAJ,EAAmC;AACjC,kBAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5BI,gBAAAA,IAAAA,GAAO/Y,aAAAA,CADqB,IACrBA,CAAP+Y;AADF,eAAA,MAEO;AACLA,gBAAAA,IAAAA,GAAO,IAAA,UAAA,CADF,IACE,CAAPA;AAJ+B;AAFJ;;AAS/B,kBAAMC,UAAAA,GAAaD,IAAAA,CATY,UAS/B;AACA5Y,YAAAA,IAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAV+B,GAU/BA;AACA2Y,YAAAA,GAAAA,IAX+B,UAW/BA;AAvBwB;;AAyB1B,iBAzB0B,IAyB1B;AA9oBF;;AAipBA,iBAAA,QAAA,CAAA,KAAA,EAAyB;AAUvB,iBAAOP,MAAAA,CAAAA,YAAAA,CACJU,KAAAA,IAAD,EAACA,GADIV,IAAAA,EAEJU,KAAAA,IAAD,EAACA,GAFIV,IAAAA,EAGJU,KAAAA,IAAD,CAACA,GAHIV,IAAAA,EAILU,KAAAA,GAdqB,IAUhBV,CAAP;AA3pBF;;AAmqBA,iBAAA,UAAA,CAAA,GAAA,EAAyB;AACvB,iBAAO3U,MAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EADgB,MACvB;AApqBF;;AAyqBA,iBAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,gBAAMsV,GAAAA,GAAMtV,MAAAA,CAAAA,MAAAA,CADc,IACdA,CAAZ;;AACA,eAAA,MAAW,CAAA,GAAA,EAAX,KAAW,CAAX,IAAA,GAAA,EAAgC;AAC9BsV,YAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAD8B,KAC9BA;AAHwB;;AAK1B,iBAL0B,GAK1B;AA9qBF;;AAkrBA,iBAAA,cAAA,GAA0B;AACxB,gBAAMC,OAAAA,GAAU,IAAA,UAAA,CADQ,CACR,CAAhB;AACAA,UAAAA,OAAAA,CAAAA,CAAAA,CAAAA,GAFwB,CAExBA;AACA,gBAAMC,MAAAA,GAAS,IAAA,WAAA,CAAgBD,OAAAA,CAAhB,MAAA,EAAA,CAAA,EAHS,CAGT,CAAf;AACA,iBAAOC,MAAAA,CAAAA,CAAAA,CAAAA,KAJiB,CAIxB;AAtrBF;;AAwrBA,cAAMC,oBAAAA,GAAuB;AAC3B,cAAA,KAAA,GAAY;AACV,mBAAOha,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAsBia,cADnB,EACHja,CAAP;AAFyB;;AAAA,SAA7B;;;AAOA,iBAAA,eAAA,GAA2B;AACzB,cAAI;AACF,gBAAA,QAAA,CADE,EACF;AACA,mBAFE,IAEF;AAFF,WAAA,CAGE,OAAA,CAAA,EAAU;AACV,mBADU,KACV;AALuB;AA/rB3B;;AAusBA,cAAMka,qBAAAA,GAAwB;AAC5B,cAAA,KAAA,GAAY;AACV,mBAAOla,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAsBma,eADnB,EACHna,CAAP;AAF0B;;AAAA,SAA9B;;AAMA,cAAMoa,UAAAA,GAAa,CAAC,GAAGC,KAAAA,CAAAA,GAAAA,CAAAA,CAAJ,IAAIA,EAAJ,EAAA,GAAA,CAA2BC,CAAAA,IAC5CA,CAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EA9sBF,GA8sBEA,CADiB,CAAnB;;AAIA,cAAA,IAAA,CAAW;AACT,iBAAOC,YAAP,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA6B;AAC3B,mBAAO,IAAIH,UAAAA,CAAJ,CAAIA,CAAJ,GAAoBA,UAAAA,CAApB,CAAoBA,CAApB,GAAoCA,UAAAA,CADhB,CACgBA,CADhB,EAC3B;AAFO;;AAMT,iBAAO/I,SAAP,CAAA,EAAA,EAAA,EAAA,EAAyB;AACvB,mBAAO,CACLmJ,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CADnB,CACmBA,CADnB,EAELD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAFnB,CAEmBA,CAFnB,EAGLD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAHnB,CAGmBA,CAHnB,EAILD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAJnB,CAImBA,CAJnB,EAKLD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAAxBD,CAAwBC,CAAxBD,GAAgCA,EAAAA,CAL3B,CAK2BA,CAL3B,EAMLA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAAxBD,CAAwBC,CAAxBD,GAAgCA,EAAAA,CANlC,CAMkCA,CAN3B,CAAP;AAPO;;AAkBT,iBAAOE,cAAP,CAAA,CAAA,EAAA,CAAA,EAA4B;AAC1B,kBAAMC,EAAAA,GAAKC,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAAPD,CAAOC,CAAPD,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAArBD,CAAqBC,CAArBD,GAA4BC,CAAAA,CADb,CACaA,CAAvC;AACA,kBAAMC,EAAAA,GAAKF,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAAPD,CAAOC,CAAPD,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAArBD,CAAqBC,CAArBD,GAA4BC,CAAAA,CAFb,CAEaA,CAAvC;AACA,mBAAO,CAAA,EAAA,EAAP,EAAO,CAAP;AArBO;;AAwBT,iBAAOE,qBAAP,CAAA,CAAA,EAAA,CAAA,EAAmC;AACjC,kBAAMC,CAAAA,GAAIH,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAPA,CAAOA,CAAPA,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CADE,CACFA,CAA/B;AACA,kBAAMF,EAAAA,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA,GAAOE,CAAAA,CAAP,CAAOA,CAAP,GAAcD,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAArB,CAAqBA,CAArB,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAnC,CAAmCA,CAAnC,GAA0CA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAlD,CAAkDA,CAAjD,IAFqB,CAEjC;AACA,kBAAMC,EAAAA,GAAM,CAAA,CAACF,CAAAA,CAAD,CAACA,CAAD,GAAQC,CAAAA,CAAR,CAAQA,CAAR,GAAeD,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAAtB,CAAsBA,CAAtB,GAA6BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAApC,CAAoCA,CAApC,GAA2CA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAnD,CAAmDA,CAAlD,IAHqB,CAGjC;AACA,mBAAO,CAAA,EAAA,EAAP,EAAO,CAAP;AA5BO;;AAiCT,iBAAOI,0BAAP,CAAA,CAAA,EAAA,CAAA,EAAwC;AACtC,kBAAMC,EAAAA,GAAKC,IAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAD2B,CAC3BA,CAAX;AACA,kBAAMC,EAAAA,GAAKD,IAAAA,CAAAA,cAAAA,CAAoBE,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAApBF,CAAoBE,CAApBF,EAF2B,CAE3BA,CAAX;AACA,kBAAMG,EAAAA,GAAK,IAAA,CAAA,cAAA,CAAoB,CAACD,CAAAA,CAAD,CAACA,CAAD,EAAOA,CAAAA,CAA3B,CAA2BA,CAAP,CAApB,EAH2B,CAG3B,CAAX;AACA,kBAAME,EAAAA,GAAK,IAAA,CAAA,cAAA,CAAoB,CAACF,CAAAA,CAAD,CAACA,CAAD,EAAOA,CAAAA,CAA3B,CAA2BA,CAAP,CAApB,EAJ2B,CAI3B,CAAX;AACA,mBAAO,CACLpZ,IAAAA,CAAAA,GAAAA,CAASiZ,EAAAA,CAATjZ,CAASiZ,CAATjZ,EAAgBmZ,EAAAA,CAAhBnZ,CAAgBmZ,CAAhBnZ,EAAuBqZ,EAAAA,CAAvBrZ,CAAuBqZ,CAAvBrZ,EAA8BsZ,EAAAA,CADzB,CACyBA,CAA9BtZ,CADK,EAELA,IAAAA,CAAAA,GAAAA,CAASiZ,EAAAA,CAATjZ,CAASiZ,CAATjZ,EAAgBmZ,EAAAA,CAAhBnZ,CAAgBmZ,CAAhBnZ,EAAuBqZ,EAAAA,CAAvBrZ,CAAuBqZ,CAAvBrZ,EAA8BsZ,EAAAA,CAFzB,CAEyBA,CAA9BtZ,CAFK,EAGLA,IAAAA,CAAAA,GAAAA,CAASiZ,EAAAA,CAATjZ,CAASiZ,CAATjZ,EAAgBmZ,EAAAA,CAAhBnZ,CAAgBmZ,CAAhBnZ,EAAuBqZ,EAAAA,CAAvBrZ,CAAuBqZ,CAAvBrZ,EAA8BsZ,EAAAA,CAHzB,CAGyBA,CAA9BtZ,CAHK,EAILA,IAAAA,CAAAA,GAAAA,CAASiZ,EAAAA,CAATjZ,CAASiZ,CAATjZ,EAAgBmZ,EAAAA,CAAhBnZ,CAAgBmZ,CAAhBnZ,EAAuBqZ,EAAAA,CAAvBrZ,CAAuBqZ,CAAvBrZ,EAA8BsZ,EAAAA,CAJhC,CAIgCA,CAA9BtZ,CAJK,CAAP;AAtCO;;AA8CT,iBAAOuZ,gBAAP,CAAA,CAAA,EAA2B;AACzB,kBAAMR,CAAAA,GAAIH,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAPA,CAAOA,CAAPA,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CADN,CACMA,CAA/B;AACA,mBAAO,CACLA,CAAAA,CAAAA,CAAAA,CAAAA,GADK,CAAA,EAEL,CAACA,CAAAA,CAAD,CAACA,CAAD,GAFK,CAAA,EAGL,CAACA,CAAAA,CAAD,CAACA,CAAD,GAHK,CAAA,EAILA,CAAAA,CAAAA,CAAAA,CAAAA,GAJK,CAAA,EAKJ,CAAA,CAAA,CAAA,CAAA,CAAA,GAAOA,CAAAA,CAAP,CAAOA,CAAP,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAtB,CAAsBA,CAArB,IALI,CAAA,EAMJ,CAAA,CAAA,CAAA,CAAA,CAAA,GAAOA,CAAAA,CAAP,CAAOA,CAAP,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAtB,CAAsBA,CAArB,IANH,CAAO,CAAP;AAhDO;;AAgET,iBAAOY,gBAAP,CAAA,CAAA,EAAA,CAAA,EAA8B;AAC5B,mBAAO,CACLZ,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAAPb,CAAOa,CAAPb,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAArBb,CAAqBa,CAArBb,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAD9B,CAC8BA,CAD9B,EAELb,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAAPb,CAAOa,CAAPb,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAArBb,CAAqBa,CAArBb,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAF9B,CAE8BA,CAF9B,EAGLb,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAAPb,CAAOa,CAAPb,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAArBb,CAAqBa,CAArBb,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAHrC,CAGqCA,CAH9B,CAAP;AAjEO;;AA2ET,iBAAOC,6BAAP,CAAA,CAAA,EAAwC;AACtC,kBAAMC,SAAAA,GAAY,CAACf,CAAAA,CAAD,CAACA,CAAD,EAAOA,CAAAA,CAAP,CAAOA,CAAP,EAAaA,CAAAA,CAAb,CAAaA,CAAb,EAAmBA,CAAAA,CAArC,CAAqCA,CAAnB,CAAlB;AAGA,kBAAMgB,CAAAA,GAAIhB,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAJD,CAICA,CAAvC;AACA,kBAAME,CAAAA,GAAIjB,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CALD,CAKCA,CAAvC;AACA,kBAAMG,CAAAA,GAAIlB,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAND,CAMCA,CAAvC;AACA,kBAAMZ,CAAAA,GAAIH,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAPD,CAOCA,CAAvC;AAGA,kBAAMI,KAAAA,GAAS,CAAA,CAAA,GAAD,CAAC,IAVuB,CAUtC;AACA,kBAAMhW,MAAAA,GAAS/D,IAAAA,CAAAA,IAAAA,CAAW,CAAA,CAAA,GAAD,CAAC,KAAD,CAAC,GAAc,KAAK,CAAA,GAAA,CAAA,GAAQ8Z,CAAAA,GAAtC9Z,CAAyB,CAAzBA,IAXuB,CAWtC;AACA,kBAAMga,EAAAA,GAAKD,KAAAA,GAAAA,MAAAA,IAZ2B,CAYtC;AACA,kBAAME,EAAAA,GAAKF,KAAAA,GAAAA,MAAAA,IAb2B,CAatC;AAGA,mBAAO,CAAC/Z,IAAAA,CAAAA,IAAAA,CAAD,EAACA,CAAD,EAAgBA,IAAAA,CAAAA,IAAAA,CAAvB,EAAuBA,CAAhB,CAAP;AA3FO;;AAkGT,iBAAOka,aAAP,CAAA,IAAA,EAA2B;AACzB,kBAAMd,CAAAA,GAAI3Y,IAAAA,CAAAA,KAAAA,CADe,CACfA,CAAV;;AACA,gBAAIA,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAAd,CAAcA,CAAd,EAAuB;AACrB2Y,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO3Y,IAAAA,CADc,CACdA,CAAP2Y;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO3Y,IAAAA,CAFc,CAEdA,CAAP2Y;AAJuB;;AAMzB,gBAAI3Y,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAAd,CAAcA,CAAd,EAAuB;AACrB2Y,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO3Y,IAAAA,CADc,CACdA,CAAP2Y;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO3Y,IAAAA,CAFc,CAEdA,CAAP2Y;AARuB;;AAUzB,mBAVyB,CAUzB;AA5GO;;AAkHT,iBAAOe,SAAP,CAAA,KAAA,EAAA,KAAA,EAA+B;AAC7B,qBAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAuB;AACrB,qBAAOP,CAAAA,GADc,CACrB;AAF2B;;AAM7B,kBAAMQ,QAAAA,GAAW,CAACC,KAAAA,CAAD,CAACA,CAAD,EAAWA,KAAAA,CAAX,CAAWA,CAAX,EAAqBC,KAAAA,CAArB,CAAqBA,CAArB,EAA+BA,KAAAA,CAA/B,CAA+BA,CAA/B,EAAA,IAAA,CANY,OAMZ,CAAjB;AACA,kBAAMC,QAAAA,GAAW,CAACF,KAAAA,CAAD,CAACA,CAAD,EAAWA,KAAAA,CAAX,CAAWA,CAAX,EAAqBC,KAAAA,CAArB,CAAqBA,CAArB,EAA+BA,KAAAA,CAA/B,CAA+BA,CAA/B,EAAA,IAAA,CAPY,OAOZ,CAAjB;AACA,kBAAME,MAAAA,GARuB,EAQ7B;AAEAH,YAAAA,KAAAA,GAAQnB,IAAAA,CAAAA,aAAAA,CAVqB,KAUrBA,CAARmB;AACAC,YAAAA,KAAAA,GAAQpB,IAAAA,CAAAA,aAAAA,CAXqB,KAWrBA,CAARoB;;AAGA,gBACGF,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBC,KAAAA,CAAhBD,CAAgBC,CAAhBD,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBE,KAAAA,CAA7C,CAA6CA,CAA5CF,IACAA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBE,KAAAA,CAAhBF,CAAgBE,CAAhBF,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBC,KAAAA,CAF/C,CAE+CA,CAF/C,EAGE;AAEAG,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYJ,QAAAA,CAFZ,CAEYA,CAAZI;AACAA,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYJ,QAAAA,CAHZ,CAGYA,CAAZI;AANF,aAAA,MAOO;AACL,qBADK,IACL;AAtB2B;;AA0B7B,gBACGD,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBF,KAAAA,CAAhBE,CAAgBF,CAAhBE,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBD,KAAAA,CAA7C,CAA6CA,CAA5CC,IACAA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBD,KAAAA,CAAhBC,CAAgBD,CAAhBC,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBF,KAAAA,CAF/C,CAE+CA,CAF/C,EAGE;AAEAG,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYD,QAAAA,CAFZ,CAEYA,CAAZC;AACAA,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYD,QAAAA,CAHZ,CAGYA,CAAZC;AANF,aAAA,MAOO;AACL,qBADK,IACL;AAlC2B;;AAqC7B,mBArC6B,MAqC7B;AAvJO;;AAAA;;;AA2JX,cAAMC,uhC,MAAgC,CAAhC;;AAYA,iBAAA,iBAAA,CAAA,GAAA,EAAgC;AAC9B,gBAAM1D,MAAAA,GAASF,GAAAA,CAAf,MAAA;AAAA,gBACEK,MAAAA,GAF4B,EAC9B;;AAEA,cAAIL,GAAAA,CAAAA,CAAAA,CAAAA,KAAAA,MAAAA,IAAqBA,GAAAA,CAAAA,CAAAA,CAAAA,KAAzB,MAAA,EAA4C;AAE1C,iBAAK,IAAInV,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClCwV,cAAAA,MAAAA,CAAAA,IAAAA,CACED,MAAAA,CAAAA,YAAAA,CAAqBJ,GAAAA,CAAAA,UAAAA,CAAAA,CAAAA,KAAD,CAACA,GAA0BA,GAAAA,CAAAA,UAAAA,CAAenV,CAAAA,GAF9B,CAEemV,CAA/CI,CADFC;AAHwC;AAA5C,WAAA,MAOO,IAAIL,GAAAA,CAAAA,CAAAA,CAAAA,KAAAA,MAAAA,IAAqBA,GAAAA,CAAAA,CAAAA,CAAAA,KAAzB,MAAA,EAA4C;AAEjD,iBAAK,IAAInV,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClCwV,cAAAA,MAAAA,CAAAA,IAAAA,CACED,MAAAA,CAAAA,YAAAA,CAAqBJ,GAAAA,CAAAA,UAAAA,CAAenV,CAAAA,GAAfmV,CAAAA,KAAD,CAACA,GAA8BA,GAAAA,CAAAA,UAAAA,CAFnB,CAEmBA,CAAnDI,CADFC;AAH+C;AAA5C,WAAA,MAOA;AACL,iBAAK,IAAIxV,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/B,oBAAMgZ,IAAAA,GAAOD,uBAAAA,CAAwB5D,GAAAA,CAAAA,UAAAA,CADN,CACMA,CAAxB4D,CAAb;AACAvD,cAAAA,MAAAA,CAAAA,IAAAA,CAAYwD,IAAAA,GAAOzD,MAAAA,CAAAA,YAAAA,CAAPyD,IAAOzD,CAAPyD,GAAmC7D,GAAAA,CAAAA,MAAAA,CAFhB,CAEgBA,CAA/CK;AAHG;AAjBuB;;AAuB9B,iBAAOA,MAAAA,CAAAA,IAAAA,CAvBuB,EAuBvBA,CAAP;AA/4BF;;AAk5BA,iBAAA,YAAA,CAAA,GAAA,EAA2B;AAIzB,iBAAO,GAAA,CAAA,OAAA,CAAA,eAAA,EAA6ByD,KAAAA,IAAS;AAC3C,gBAAIA,KAAAA,KAAJ,IAAA,EAAoB;AAClB,qBADkB,KAClB;AADF,aAAA,MAEO,IAAIA,KAAAA,KAAJ,IAAA,EAAoB;AACzB,qBADyB,KACzB;AAJyC;;AAM3C,mBAAO,KANoC,KAAA,EAM3C;AANF,WAAO,CAAP;AAt5BF;;AAg6BA,iBAAA,OAAA,CAAA,GAAA,EAAsB;AACpB,iBAAO,iBAAA,IAAA,CADa,GACb,CAAP;AAj6BF;;AAo6BA,iBAAA,qBAAA,CAAA,GAAA,EAAoC;AAClC,gBAAMC,GAAAA,GAAM,CADsB,UACtB,CAAZ;;AACA,eAAK,IAAIlZ,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKoV,GAAAA,CAArB,MAAA,EAAiCnV,CAAAA,GAAjC,EAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,kBAAMmZ,IAAAA,GAAOhE,GAAAA,CAAAA,UAAAA,CAD+B,CAC/BA,CAAb;AACA+D,YAAAA,GAAAA,CAAAA,IAAAA,CACE3D,MAAAA,CAAAA,YAAAA,CAAqB4D,IAAAA,IAAD,CAACA,GADvBD,IACE3D,CADF2D,EAEE3D,MAAAA,CAAAA,YAAAA,CAAoB4D,IAAAA,GAJsB,IAI1C5D,CAFF2D;AAJgC;;AASlC,iBAAOA,GAAAA,CAAAA,IAAAA,CAT2B,EAS3BA,CAAP;AA76BF;;AAg7BA,iBAAA,kBAAA,CAAA,GAAA,EAAiC;AAC/B,iBAAOvY,kBAAAA,CAAmByY,MAAAA,CADK,GACLA,CAAnBzY,CAAP;AAj7BF;;AAo7BA,iBAAA,kBAAA,CAAA,GAAA,EAAiC;AAC/B,iBAAO0Y,QAAAA,CAASC,kBAAAA,CADe,GACfA,CAATD,CAAP;AAr7BF;;AAw7BA,iBAAA,MAAA,CAAA,CAAA,EAAmB;AACjB,iBAAO,OAAA,CAAA,KADU,SACjB;AAz7BF;;AA47BA,iBAAA,KAAA,CAAA,CAAA,EAAkB;AAChB,iBAAO,OAAA,CAAA,KADS,QAChB;AA77BF;;AAg8BA,iBAAA,QAAA,CAAA,CAAA,EAAqB;AACnB,iBAAO,OAAA,CAAA,KADY,QACnB;AAj8BF;;AAo8BA,iBAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,iBAAO,OAAA,CAAA,KAAA,QAAA,IAAyBtB,CAAAA,KAAzB,IAAA,IAAuCA,CAAAA,CAAAA,UAAAA,KADtB,SACxB;AAr8BF;;AAw8BA,iBAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAkC;AAChC,cAAIwB,IAAAA,CAAAA,MAAAA,KAAgBC,IAAAA,CAApB,MAAA,EAAiC;AAC/B,mBAD+B,KAC/B;AAF8B;;AAIhC,eAAK,IAAIxZ,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKwZ,IAAAA,CAArB,MAAA,EAAkCvZ,CAAAA,GAAlC,EAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7C,gBAAIuZ,IAAAA,CAAAA,CAAAA,CAAAA,KAAYC,IAAAA,CAAhB,CAAgBA,CAAhB,EAAyB;AACvB,qBADuB,KACvB;AAF2C;AAJf;;AAShC,iBATgC,IAShC;AAj9BF;;AAo9BA,iBAAA,mBAAA,GAAgD;AAAA,cAAnBC,IAAmB,uEAAZ,IAApC,IAAoC,EAAY;AAC9C,gBAAMC,MAAAA,GAAS,CACbD,IAAAA,CAAAA,cAAAA,GADa,QACbA,EADa,EAEZ,CAAA,IAAA,CAAA,WAAA,KAAD,CAAC,EAAD,QAAC,GAAD,QAAC,CAAD,CAAC,EAFY,GAEZ,CAFY,EAGbA,IAAAA,CAAAA,UAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EAHa,GAGbA,CAHa,EAIbA,IAAAA,CAAAA,WAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EAJa,GAIbA,CAJa,EAKbA,IAAAA,CAAAA,aAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EALa,GAKbA,CALa,EAMbA,IAAAA,CAAAA,aAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EANF,GAMEA,CANa,CAAf;AASA,iBAAOC,MAAAA,CAAAA,IAAAA,CAVuC,EAUvCA,CAAP;AA99BF;;AAi/BA,iBAAA,uBAAA,GAAmC;AACjC,gBAAMC,UAAAA,GAAa/Y,MAAAA,CAAAA,MAAAA,CADc,IACdA,CAAnB;AACA,cAAIgZ,SAAAA,GAF6B,KAEjC;AAEAhZ,UAAAA,MAAAA,CAAAA,cAAAA,CAAAA,UAAAA,EAAAA,SAAAA,EAA6C;AAC3CiZ,YAAAA,GAAAA,GAAM;AACJ,qBADI,SACJ;AAFyC;;AAAA,WAA7CjZ;AAKA+Y,UAAAA,UAAAA,CAAAA,OAAAA,GAAqB,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC1DA,YAAAA,UAAAA,CAAAA,OAAAA,GAAqB,UAAA,IAAA,EAAgB;AACnCC,cAAAA,SAAAA,GADmC,IACnCA;AACAxc,cAAAA,OAAAA,CAFmC,IAEnCA,CAAAA;AAFFuc,aAAAA;;AAIAA,YAAAA,UAAAA,CAAAA,MAAAA,GAAoB,UAAA,MAAA,EAAkB;AACpCC,cAAAA,SAAAA,GADoC,IACpCA;AACAvc,cAAAA,MAAAA,CAFoC,MAEpCA,CAAAA;AAFFsc,aAAAA;AALFA,WAAqB,CAArBA;AAUA,iBAnBiC,UAmBjC;AApgCF;;AAugCA,iBAAA,eAAA,CAAA,IAAA,EAA0E;AAAA,cAA3CG,WAA2C,uEAA1E,EAA0E;AAAA,cAAzBC,eAAyB,uEAA1E,KAA0E;;AACxE,cAAIC,GAAAA,CAAAA,eAAAA,IAAuB,CAA3B,eAAA,EAA6C;AAC3C,mBAAOA,GAAAA,CAAAA,eAAAA,CAAoB,IAAA,IAAA,CAAS,CAAT,IAAS,CAAT,EAAiB;AAAEC,cAAAA,IAAAA,EADH;AACC,aAAjB,CAApBD,CAAP;AAFsE;;AAKxE,gBAAME,MAAAA,GALkE,mEAKxE;AAGA,cAAIR,MAAAA,GAAS,QAR2D,WAAA,UAQxE;;AACA,eAAK,IAAI1Z,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK5C,IAAAA,CAArB,MAAA,EAAkC6C,CAAAA,GAAlC,EAAA,EAA0CA,CAAAA,IAA1C,CAAA,EAAkD;AAChD,kBAAMma,EAAAA,GAAKhd,IAAAA,CAAAA,CAAAA,CAAAA,GADqC,IAChD;AACA,kBAAMid,EAAAA,GAAKjd,IAAAA,CAAK6C,CAAAA,GAAL7C,CAAAA,CAAAA,GAFqC,IAEhD;AACA,kBAAMkd,EAAAA,GAAKld,IAAAA,CAAK6C,CAAAA,GAAL7C,CAAAA,CAAAA,GAHqC,IAGhD;AACA,kBAAMmd,EAAAA,GAAKH,EAAAA,IAAX,CAAA;AAAA,kBACEI,EAAAA,GAAO,CAAA,EAAA,GAAD,CAAC,KAAF,CAAE,GAAiBH,EAAAA,IALsB,CAIhD;AAEA,kBAAMI,EAAAA,GAAKxa,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,GAAe,CAAA,EAAA,GAAD,GAAC,KAAF,CAAE,GAAmBqa,EAAAA,IAAlCra,CAAAA,GANqC,EAMhD;AACA,kBAAMya,EAAAA,GAAKza,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,GAAaqa,EAAAA,GAAbra,IAAAA,GAPqC,EAOhD;AACA0Z,YAAAA,MAAAA,IAAUQ,MAAAA,CAAAA,EAAAA,CAAAA,GAAaA,MAAAA,CAAbA,EAAaA,CAAbA,GAA0BA,MAAAA,CAA1BA,EAA0BA,CAA1BA,GAAuCA,MAAAA,CARD,EAQCA,CAAjDR;AAjBsE;;AAmBxE,iBAnBwE,MAmBxE;AA1hCF;;;;;;;;ACAA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAkBA;;;;;;;;;;;ACEA,cAAMgB,QAAAA,GACJ,OAAA,OAAA,KAAA,QAAA,IACAC,OAAAA,GAAAA,EAAAA,KADA,kBAAA,IAEA,CAACA,OAAAA,CAAAA,QAAAA,CAFD,EAAA,IAGA,EAAE,OAAA,CAAA,QAAA,CAAA,QAAA,IAA6BA,OAAAA,CAA7B,IAAA,IAA6CA,OAAAA,CAAAA,IAAAA,KAxBjD,SAwBE,CAJF;;;;;;;;;;;;;ACLA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAEA,cAAA,iBAAA,CAAwB;AACtBre,UAAAA,WAAAA,GAAc;AACZ,gBAAI,KAAA,WAAA,KAAJ,iBAAA,EAA4C;AAC1CgY,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD0C,sCAC1CA;AAFU;AADQ;;AAOtBsG,UAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAsB;AACpB,gBAAIpc,KAAAA,IAAAA,CAAAA,IAAcC,MAAAA,IAAlB,CAAA,EAA+B;AAC7B,oBAAM,IAAA,KAAA,CADuB,qBACvB,CAAN;AAFkB;;AAIpB,kBAAM/B,MAAAA,GAAS,KAAA,aAAA,CAAA,KAAA,EAJK,MAIL,CAAf;;AACA,mBAAO;AAAA,cAAA,MAAA;AAELme,cAAAA,OAAAA,EAASne,MAAAA,CAAAA,UAAAA,CAFJ,IAEIA;AAFJ,aAAP;AAZoB;;AAkBtBoe,UAAAA,KAAAA,CAAAA,gBAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAuC;AACrC,gBAAI,CAACC,gBAAAA,CAAL,MAAA,EAA8B;AAC5B,oBAAM,IAAA,KAAA,CADsB,yBACtB,CAAN;AAFmC;;AAIrC,gBAAIvc,KAAAA,IAAAA,CAAAA,IAAcC,MAAAA,IAAlB,CAAA,EAA+B;AAC7B,oBAAM,IAAA,KAAA,CADuB,qBACvB,CAAN;AALmC;;AAOrCsc,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAPqC,KAOrCA;AACAA,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GARqC,MAQrCA;AA1BoB;;AA6BtBC,UAAAA,OAAAA,CAAAA,gBAAAA,EAA0B;AACxB,gBAAI,CAACD,gBAAAA,CAAL,MAAA,EAA8B;AAC5B,oBAAM,IAAA,KAAA,CADsB,yBACtB,CAAN;AAFsB;;AAMxBA,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GANwB,CAMxBA;AACAA,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAPwB,CAOxBA;AACAA,YAAAA,gBAAAA,CAAAA,MAAAA,GARwB,IAQxBA;AACAA,YAAAA,gBAAAA,CAAAA,OAAAA,GATwB,IASxBA;AAtCoB;;AA4CtBte,UAAAA,aAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAA6B;AAC3B6X,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD2B,yCAC3BA;AA7CoB;;AAAA;;;;AAiDxB,cAAA,qBAAA,CAA4B;AAC1BhY,UAAAA,WAAAA,QAAsD;AAAA,gBAA1C;AAAEgF,cAAAA,OAAAA,GAAF,IAAA;AAAkB2Z,cAAAA,YAAAA,GAA9B3e;AAAY,aAA0C;;AACpD,gBAAI,KAAA,WAAA,KAAJ,qBAAA,EAAgD;AAC9CgY,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD8C,0CAC9CA;AAFkD;;AAIpD,iBAAA,OAAA,GAJoD,OAIpD;AACA,iBAAA,YAAA,GALoD,YAKpD;AANwB;;AAS1B,gBAAMvX,KAAN,QAAsB;AAAA,gBAAV;AAAZ,cAAA;AAAY,aAAU;;AACpB,gBAAI,CAAC,KAAL,OAAA,EAAmB;AACjB,oBAAM,IAAA,KAAA,CACJ,iEAFe,6DACX,CAAN;AAFkB;;AAOpB,gBAAI,CAAJ,IAAA,EAAW;AACT,oBAAM,IAAA,KAAA,CADG,8BACH,CAAN;AARkB;;AAUpB,kBAAM2C,GAAAA,GAAM,KAAA,OAAA,GAAA,IAAA,IAAuB,KAAA,YAAA,GAAA,QAAA,GAVf,EAUR,CAAZ;AACA,kBAAMwb,eAAAA,GAAkB,KAAA,YAAA,GACpBvO,KAAAA,CAAAA,mBAAAA,CADoB,MAAA,GAEpBA,KAAAA,CAAAA,mBAAAA,CAbgB,IAWpB;AAIA,mBAAO,KAAA,UAAA,CAAA,GAAA,EAAA,eAAA,EAAA,KAAA,CAA4CwO,MAAAA,IAAU;AAC3D,oBAAM,IAAA,KAAA,CACJ,kBAAkB,KAAA,YAAA,GAAA,SAAA,GAAlB,EAAA,YAFyD,GAAA,EACrD,CAAN;AADF,aAAO,CAAP;AAxBwB;;AAkC1B7d,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,eAAAA,EAAiC;AAC/BgX,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD+B,sCAC/BA;AAnCwB;;AAAA;;;;AAuC5B,cAAA,2BAAA,CAAkC;AAChChY,UAAAA,WAAAA,QAAgC;AAAA,gBAApB;AAAEgF,cAAAA,OAAAA,GAAF;AAAA,aAAoB;;AAC9B,gBAAI,KAAA,WAAA,KAAJ,2BAAA,EAAsD;AACpDgT,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADoD,gDACpDA;AAF4B;;AAI9B,iBAAA,OAAA,GAJ8B,OAI9B;AAL8B;;AAQhC,gBAAMvX,KAAN,QAA0B;AAAA,gBAAd;AAAZ,cAAA;AAAY,aAAc;;AACxB,gBAAI,CAAC,KAAL,OAAA,EAAmB;AACjB,oBAAM,IAAA,KAAA,CACJ,0EAFe,sDACX,CAAN;AAFsB;;AAOxB,gBAAI,CAAJ,QAAA,EAAe;AACb,oBAAM,IAAA,KAAA,CADO,kCACP,CAAN;AARsB;;AAUxB,kBAAM2C,GAAAA,GAAM,GAAG,KAAH,OAAA,GAVY,QAAA,EAUxB;AAEA,mBAAO,KAAA,UAAA,CAAA,GAAA,EAAA,KAAA,CAA2Byb,MAAAA,IAAU;AAC1C,oBAAM,IAAA,KAAA,CAAU,gCAD0B,GAAA,EACpC,CAAN;AADF,aAAO,CAAP;AApB8B;;AA4BhC7d,UAAAA,UAAAA,CAAAA,GAAAA,EAAgB;AACdgX,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADc,sCACdA;AA7B8B;;AAAA;;;;AAiClC,cAAA,cAAA,CAAqB;AACnBhY,UAAAA,WAAAA,GAAc;AACZ,gBAAI,KAAA,WAAA,KAAJ,cAAA,EAAyC;AACvCgY,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADuC,mCACvCA;AAFU;AADK;;AAOnBsG,UAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAsB;AACpB,gBAAIpc,KAAAA,IAAAA,CAAAA,IAAcC,MAAAA,IAAlB,CAAA,EAA+B;AAC7B,oBAAM,IAAA,KAAA,CADuB,wBACvB,CAAN;AAFkB;;AAIpB,kBAAM2c,GAAAA,GAAM,KAAA,UAAA,CAJQ,SAIR,CAAZ;;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EALoB,KAKpBA;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAA0B,GANN,KAAA,IAMpBA;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAA2B,GAPP,MAAA,IAOpBA;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,qBAAAA,EARoB,MAQpBA;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EAA4B,OAAA,KAAA,IATR,MAAA,EASpBA;AAEA,mBAXoB,GAWpB;AAlBiB;;AAqBnBC,UAAAA,aAAAA,CAAAA,IAAAA,EAAoB;AAClB,gBAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,oBAAM,IAAA,KAAA,CADsB,0BACtB,CAAN;AAFgB;;AAIlB,mBAAO,KAAA,UAAA,CAJW,IAIX,CAAP;AAzBiB;;AA+BnB5d,UAAAA,UAAAA,CAAAA,IAAAA,EAAiB;AACf6W,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADe,sCACfA;AAhCiB;;AAAA;;;;;;;;;;;;;;;;ACvHrB,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAqBA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAWA,YAAA,YAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AACA,YAAA,WAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AApDA,YAAA,mBAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,OAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,eAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,gBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,SAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,wBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,iBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,SAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAmEA,cAAMgH,wBAAAA,GAnEN,KAmEA;AACA,cAAMC,2BAAAA,GApEN,GAoEA;AAEA,cAAMC,oBAAAA,GACJ,QAAA,CAAA,QAAA,GAAA,WAAA,CAAA,iBAAA,GAvEF,cAAA,CAAA,gBAsEA;;AAIA,cAAMC,wBAAAA,GACJ,QAAA,CAAA,QAAA,GAAA,WAAA,CAAA,qBAAA,GA3EF,cAAA,CAAA,oBA0EA;;AAIA,cAAMC,8BAAAA,GACJ,QAAA,CAAA,QAAA,GAAA,WAAA,CAAA,2BAAA,GA/EF,cAAA,CAAA,0BA8EA;;AAkBA,YAhGA,sBAgGA;;AAWA,iBAAA,0BAAA,CAAA,uBAAA,EAA6D;AAC3DC,UAAAA,sBAAAA,GAD2D,uBAC3DA;AA5GF;;AAuOA,iBAAA,WAAA,CAAA,GAAA,EAA0B;AACxB,gBAAMC,IAAAA,GAAO,IADW,sBACX,EAAb;AAEA,cAHwB,MAGxB;;AACA,cAAI,OAAA,GAAA,KAAA,QAAA,IAA2BC,GAAAA,YAA/B,GAAA,EAAmD;AACjDC,YAAAA,MAAAA,GAAS;AAAEpc,cAAAA,GAAAA,EADsC;AACxC,aAAToc;AADF,WAAA,MAEO,IAAIC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAJ,GAAIA,CAAJ,EAAwB;AAC7BD,YAAAA,MAAAA,GAAS;AAAE3e,cAAAA,IAAAA,EADkB;AACpB,aAAT2e;AADK,WAAA,MAEA,IAAID,GAAAA,YAAJ,qBAAA,EAA0C;AAC/CC,YAAAA,MAAAA,GAAS;AAAEE,cAAAA,KAAAA,EADoC;AACtC,aAATF;AADK,WAAA,MAEA;AACL,gBAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,oBAAM,IAAA,KAAA,CACJ,uCAFyB,2DACrB,CAAN;AAFG;;AAOL,gBAAI,CAACD,GAAAA,CAAD,GAAA,IAAY,CAACA,GAAAA,CAAb,IAAA,IAAyB,CAACA,GAAAA,CAA9B,KAAA,EAAyC;AACvC,oBAAM,IAAA,KAAA,CADiC,6DACjC,CAAN;AARG;;AAYLC,YAAAA,MAAAA,GAZK,GAYLA;AAtBsB;;AAwBxB,gBAAMG,MAAAA,GAASrb,MAAAA,CAAAA,MAAAA,CAxBS,IAwBTA,CAAf;AACA,cAAIsb,cAAAA,GAAJ,IAAA;AAAA,cACEC,MAAAA,GA1BsB,IAyBxB;;AAGA,eAAA,MAAA,GAAA,IAAA,MAAA,EAA0B;AACxB,kBAAMlG,KAAAA,GAAQ6F,MAAAA,CADU,GACVA,CAAd;;AAEA,oBAAA,GAAA;AACE,mBAAA,KAAA;AACE,oBAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjC,sBAAI;AAEFG,oBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,GAAA,CAAA,KAAA,EAAeG,MAAAA,CAAf,QAAA,EAFZ,IAEFH;AAFE;AAAJ,mBAAA,CAIE,OAAA,EAAA,EAAW;AACX3b,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,6BADM,EAAA,IACXA;AAN+B;AAAnC,iBAAA,MAQO,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6B2V,KAAAA,YAAjC,GAAA,EAAuD;AAC5DgG,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAchG,KAAAA,CAD8C,QAC9CA,EAAdgG;AAD4D;AAThE;;AAaE,sBAAM,IAAA,KAAA,CACJ,2BAfN,8DAcU,CAAN;;AAIF,mBAAA,OAAA;AACEC,gBAAAA,cAAAA,GADF,KACEA;AAnBJ;;AAqBE,mBAAA,QAAA;AACEC,gBAAAA,MAAAA,GADF,KACEA;AAtBJ;;AAwBE,mBAAA,MAAA;AAEE,oBACE,QAAA,CAAA,QAAA,IAGA,OAAA,MAAA,KAHA,WAAA,IAIAlG,KAAAA,YALF,MAAA,EAME;AACAgG,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,UAAA,CADd,KACc,CAAdA;AAPF,iBAAA,MAQO,IAAIhG,KAAAA,YAAJ,UAAA,EAAiC;AAAA;AAAjC,iBAAA,MAEA,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpCgG,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAcjf,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EADsB,KACtBA,CAAdif;AADK,iBAAA,MAEA,IACL,OAAA,KAAA,KAAA,QAAA,IACAhG,KAAAA,KADA,IAAA,IAEA,CAACoG,KAAAA,CAAMpG,KAAAA,CAHF,MAGJoG,CAHI,EAIL;AACAJ,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,UAAA,CADd,KACc,CAAdA;AALK,iBAAA,MAMA,IAAIF,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAJ,KAAIA,CAAJ,EAA0B;AAC/BE,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,UAAA,CADiB,KACjB,CAAdA;AADK,iBAAA,MAEA;AACL,wBAAM,IAAA,KAAA,CACJ,kDAFG,gEACC,CAAN;AAvBJ;;AAxBF;AAAA;;AAsDAA,YAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAzDwB,KAyDxBA;AArFsB;;AAwFxBA,UAAAA,MAAAA,CAAAA,cAAAA,GAAwBA,MAAAA,CAAAA,cAAAA,IAxFA,wBAwFxBA;AACAA,UAAAA,MAAAA,CAAAA,iBAAAA,GACEA,MAAAA,CAAAA,iBAAAA,IA1FsB,wBAyFxBA;AAEAA,UAAAA,MAAAA,CAAAA,uBAAAA,GACEA,MAAAA,CAAAA,uBAAAA,IA5FsB,8BA2FxBA;AAEAA,UAAAA,MAAAA,CAAAA,YAAAA,GAAsBA,MAAAA,CAAAA,YAAAA,KA7FE,IA6FxBA;AACAA,UAAAA,MAAAA,CAAAA,mBAAAA,GAA6BA,MAAAA,CAAAA,mBAAAA,KA9FL,IA8FxBA;AACAA,UAAAA,MAAAA,CAAAA,MAAAA,GAAgBA,MAAAA,CAAAA,MAAAA,KA/FQ,IA+FxBA;AACAA,UAAAA,MAAAA,CAAAA,SAAAA,GAAmBA,MAAAA,CAAAA,SAAAA,KAhGK,IAgGxBA;;AAEA,cACE,OAAOA,MAAAA,CAAP,UAAA,KAAA,QAAA,IACA5b,CAAAA,GAAAA,cAAAA,CAAAA,YAAAA,EAAa4b,MAAAA,CAFf,UAEE5b,CAFF,EAGE;AAIA4b,YAAAA,MAAAA,CAAAA,UAAAA,GAJA,IAIAA;AAzGsB;;AA2GxB,cAAI,CAAC5H,MAAAA,CAAAA,SAAAA,CAAiB4H,MAAAA,CAAtB,YAAK5H,CAAL,EAA4C;AAC1C4H,YAAAA,MAAAA,CAAAA,YAAAA,GAAsB,CADoB,CAC1CA;AA5GsB;;AA8GxB,cAAI,OAAOA,MAAAA,CAAP,cAAA,KAAJ,SAAA,EAAgD;AAC9CA,YAAAA,MAAAA,CAAAA,cAAAA,GACEA,MAAAA,CAAAA,iBAAAA,KAAAA,cAAAA,CAAAA,oBAAAA,IACAA,MAAAA,CAAAA,uBAAAA,KAH4C,cAAA,CAAA,0BAC9CA;AA/GsB;;AAmHxB,cAAI,OAAOA,MAAAA,CAAP,eAAA,KAAJ,SAAA,EAAiD;AAC/CA,YAAAA,MAAAA,CAAAA,eAAAA,GAD+C,IAC/CA;AApHsB;;AAsHxB,cAAI,OAAOA,MAAAA,CAAP,eAAA,KAAJ,SAAA,EAAiD;AAC/CA,YAAAA,MAAAA,CAAAA,eAAAA,GAD+C,QAAA,CAAA,QAC/CA;AAvHsB;;AA0HxB,cAAI,OAAOA,MAAAA,CAAP,cAAA,KAAJ,SAAA,EAAgD;AAC9CA,YAAAA,MAAAA,CAAAA,cAAAA,GACE,CAAA,QAAA,CAAA,QAAA,IAGK,CAACA,MAAAA,CALsC,eAC9CA;AA3HsB;;AAiIxB,cAAI,OAAOA,MAAAA,CAAP,aAAA,KAAJ,WAAA,EAAiD;AAC/CA,YAAAA,MAAAA,CAAAA,aAAAA,GAAuBzf,UAAAA,CADwB,QAC/Cyf;AAlIsB;;AAqIxB,cAAI,OAAOA,MAAAA,CAAP,YAAA,KAAJ,SAAA,EAA8C;AAC5CA,YAAAA,MAAAA,CAAAA,YAAAA,GAD4C,KAC5CA;AAtIsB;;AAwIxB,cAAI,OAAOA,MAAAA,CAAP,aAAA,KAAJ,SAAA,EAA+C;AAC7CA,YAAAA,MAAAA,CAAAA,aAAAA,GAD6C,KAC7CA;AAzIsB;;AA2IxB,cAAI,OAAOA,MAAAA,CAAP,gBAAA,KAAJ,SAAA,EAAkD;AAChDA,YAAAA,MAAAA,CAAAA,gBAAAA,GADgD,KAChDA;AA5IsB;;AAgJxBK,WAAAA,GAAAA,KAAAA,CAAAA,iBAAAA,EAAkBL,MAAAA,CAhJM,SAgJxBK;;AAEA,cAAI,CAAJ,MAAA,EAAa;AACX,kBAAMC,YAAAA,GAAe;AACnBnI,cAAAA,SAAAA,EAAW6H,MAAAA,CADQ,SAAA;AAEnBO,cAAAA,IAAAA,EAAMC,eAAAA,CAAAA,mBAAAA,CAFa;AAAA,aAArB;AAMAN,YAAAA,MAAAA,GAASI,YAAAA,CAAAA,IAAAA,GACLG,SAAAA,CAAAA,QAAAA,CADKH,YACLG,CADKH,GAEL,IAAA,SAAA,CATO,YASP,CAFJJ;AAGAP,YAAAA,IAAAA,CAAAA,OAAAA,GAVW,MAUXA;AA5JsB;;AA8JxB,gBAAMe,KAAAA,GAAQf,IAAAA,CA9JU,KA8JxB;AACAO,UAAAA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CACQ,YAAY;AAChB,gBAAIP,IAAAA,CAAJ,SAAA,EAAoB;AAClB,oBAAM,IAAA,KAAA,CADY,iBACZ,CAAN;AAFc;;AAKhB,kBAAMgB,eAAAA,GAAkBC,cAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,cAAAA,EALR,KAKQA,CAAxB;;AAMA,kBAAMC,oBAAAA,GAAuB,IAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC1D,kBAD0D,aAC1D;;AACA,kBAAA,cAAA,EAAoB;AAClBC,gBAAAA,aAAAA,GAAgB,IAAA,iBAAA,CAAA,sBAAA,CACd;AACE1H,kBAAAA,MAAAA,EAAQ4G,MAAAA,CADV,MAAA;AAEEe,kBAAAA,WAAAA,EAAaf,MAAAA,CAFf,WAAA;AAGEgB,kBAAAA,eAAAA,EAAiBhB,MAAAA,CAHnB,eAAA;AAIEiB,kBAAAA,0BAAAA,EAA4BjB,MAAAA,CAJ9B,0BAAA;AAKEkB,kBAAAA,YAAAA,EAAclB,MAAAA,CALhB,YAAA;AAMEmB,kBAAAA,aAAAA,EAAenB,MAAAA,CANjB;AAAA,iBADc,EADE,cACF,CAAhBc;AADF,eAAA,MAYO,IAAI,CAACd,MAAAA,CAAL,IAAA,EAAkB;AACvBc,gBAAAA,aAAAA,GAAgB,sBAAA,CAAuB;AACrCrd,kBAAAA,GAAAA,EAAKuc,MAAAA,CADgC,GAAA;AAErC5G,kBAAAA,MAAAA,EAAQ4G,MAAAA,CAF6B,MAAA;AAGrCoB,kBAAAA,WAAAA,EAAapB,MAAAA,CAHwB,WAAA;AAIrCqB,kBAAAA,eAAAA,EAAiBrB,MAAAA,CAJoB,eAAA;AAKrCsB,kBAAAA,cAAAA,EAAgBtB,MAAAA,CALqB,cAAA;AAMrCkB,kBAAAA,YAAAA,EAAclB,MAAAA,CANuB,YAAA;AAOrCmB,kBAAAA,aAAAA,EAAenB,MAAAA,CAPsB;AAAA,iBAAvB,CAAhBc;AAfwD;;AAyB1D3f,cAAAA,OAAAA,CAzB0D,aAyB1DA,CAAAA;AAzBF,aAA6B,CAA7B;AA4BA,mBAAO,OAAA,CAAA,GAAA,CAAY,CAAA,eAAA,EAAZ,oBAAY,CAAZ,EAAA,IAAA,CACL,iBAAqC;AAAA,kBAA3B,CAAA,QAAA,EAAV,aAAU,CAA2B;;AACnC,kBAAIwe,IAAAA,CAAJ,SAAA,EAAoB;AAClB,sBAAM,IAAA,KAAA,CADY,iBACZ,CAAN;AAFiC;;AAKnC,oBAAM4B,cAAAA,GAAiB,IAAA,gBAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAGrBrB,MAAAA,CARiC,IAKZ,CAAvB;AAKAqB,cAAAA,cAAAA,CAAAA,oBAAAA,GAAsCrB,MAAAA,CAVH,oBAUnCqB;AACA,oBAAMC,SAAAA,GAAY,IAAA,eAAA,CAAA,cAAA,EAAA,IAAA,EAAA,aAAA,EAXiB,MAWjB,CAAlB;AAMA7B,cAAAA,IAAAA,CAAAA,UAAAA,GAjBmC,SAiBnCA;AACA4B,cAAAA,cAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAlBmC,IAkBnCA;AAnBJ,aAAO,CAAP;AAxCJrB,WAAAA,EAAAA,KAAAA,CA+DSP,IAAAA,CAAAA,WAAAA,CA9Ne,MA+JxBO;AAiEA,iBAhOwB,IAgOxB;AAvcF;;AAqdA,uBAAA,cAAA,CAAA,MAAA,EAAA,MAAA,EAAA,qBAAA,EAAA,KAAA,EAA4E;AAC1E,cAAIA,MAAAA,CAAJ,SAAA,EAAsB;AACpB,kBAAM,IAAA,KAAA,CADc,sBACd,CAAN;AAFwE;;AAK1E,cAAA,qBAAA,EAA2B;AACzBL,YAAAA,MAAAA,CAAAA,MAAAA,GAAgB4B,qBAAAA,CADS,MACzB5B;AACAA,YAAAA,MAAAA,CAAAA,WAAAA,GAAqB4B,qBAAAA,CAFI,WAEzB5B;AACAA,YAAAA,MAAAA,CAAAA,eAAAA,GAAyB4B,qBAAAA,CAHA,eAGzB5B;AACAA,YAAAA,MAAAA,CAAAA,0BAAAA,GACE4B,qBAAAA,CALuB,0BAIzB5B;AATwE;;AAY1E,gBAAM6B,QAAAA,GAAW,MAAM,MAAA,CAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EAErB;AAAA,YAAA,KAAA;AAEEC,YAAAA,UAAAA,EAFF,UAAA;AAOE9B,YAAAA,MAAAA,EAAQ;AACN3e,cAAAA,IAAAA,EAAM2e,MAAAA,CADA,IAAA;AAENpc,cAAAA,GAAAA,EAAKoc,MAAAA,CAFC,GAAA;AAGN+B,cAAAA,QAAAA,EAAU/B,MAAAA,CAHJ,QAAA;AAINgC,cAAAA,gBAAAA,EAAkBhC,MAAAA,CAJZ,gBAAA;AAKNyB,cAAAA,cAAAA,EAAgBzB,MAAAA,CALV,cAAA;AAMNzG,cAAAA,MAAAA,EAAQyG,MAAAA,CANF;AAAA,aAPV;AAeEiC,YAAAA,YAAAA,EAAcjC,MAAAA,CAfhB,YAAA;AAgBEkC,YAAAA,eAAAA,EAAiBlC,MAAAA,CAhBnB,eAAA;AAiBEmC,YAAAA,oBAAAA,EAAsB9B,MAAAA,CAjBxB,oBAAA;AAkBE+B,YAAAA,UAAAA,EAAYpC,MAAAA,CAlBd,UAAA;AAmBEqC,YAAAA,YAAAA,EAAcrC,MAAAA,CAnBhB,YAAA;AAoBEtF,YAAAA,eAAAA,EAAiBsF,MAAAA,CApBnB,eAAA;AAqBEsC,YAAAA,mBAAAA,EAAqBtC,MAAAA,CArBvB,mBAAA;AAsBEuC,YAAAA,SAAAA,EAAWvC,MAAAA,CAtBb,SAAA;AAuBEwC,YAAAA,cAAAA,EAAgBxC,MAAAA,CAvBlB,cAAA;AAwBEyC,YAAAA,OAAAA,EAASzC,MAAAA,CAAAA,cAAAA,GAAwBA,MAAAA,CAAxBA,OAAAA,GAxBX,IAAA;AAyBE0C,YAAAA,mBAAAA,EAAqB1C,MAAAA,CAAAA,cAAAA,GACjBA,MAAAA,CADiBA,mBAAAA,GAzBvB;AAAA,WAFqB,CAAvB;;AAiCA,cAAIK,MAAAA,CAAJ,SAAA,EAAsB;AACpB,kBAAM,IAAA,KAAA,CADc,sBACd,CAAN;AA9CwE;;AAgD1E,iBAhD0E,QAgD1E;AArgBF;;AAmhBA,cAAA,sBAAA,CAA6B;AAC3B,qBAAWsC,UAAX,GAAwB;AACtB,mBAAOpiB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,YAAAA,EAA2B;AAAEqiB,cAAAA,GAAAA,EADd;AACY,aAA3BriB,CAAP;AAFyB;;AAK3BC,UAAAA,WAAAA,GAAc;AACZ,iBAAA,WAAA,GADY,CAAA,GAAA,KAAA,CAAA,uBAAA,GACZ;AACA,iBAAA,UAAA,GAFY,IAEZ;AACA,iBAAA,OAAA,GAHY,IAGZ;AAMA,iBAAA,KAAA,GAAa,IAAIqiB,sBAAAA,CAAAA,UAAAA,CATL,GASKA,EATL,EASZ;AAMA,iBAAA,SAAA,GAfY,KAeZ;AAQA,iBAAA,UAAA,GAvBY,IAuBZ;AAQA,iBAAA,UAAA,GA/BY,IA+BZ;AAOA,iBAAA,oBAAA,GAtCY,IAsCZ;AA3CyB;;AAkD3B,cAAIC,OAAJ,GAAc;AACZ,mBAAO,KAAA,WAAA,CADK,OACZ;AAnDyB;;AA2D3B,gBAAM5D,OAAN,GAAgB;AACd,iBAAA,SAAA,GADc,IACd;AACA,kBAAM,KAAA,UAAA,EAFQ,OAER,EAAN;AAEA,iBAAA,UAAA,GAJc,IAId;;AACA,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CADgB,OAChB;;AACA,mBAAA,OAAA,GAFgB,IAEhB;AAPY;AA3DW;;AAAA;;;;AA0E7B,cAAA,qBAAA,CAA4B;AAO1B1e,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAKE;AAAA,gBAFA2gB,eAEA,uEALF3gB,KAKE;AAAA,gBADA4gB,0BACA,uEALF5gB,IAKE;AACA,iBAAA,MAAA,GADA,MACA;AACA,iBAAA,WAAA,GAFA,WAEA;AACA,iBAAA,eAAA,GAHA,eAGA;AACA,iBAAA,0BAAA,GAJA,0BAIA;AAEA,iBAAA,eAAA,GANA,EAMA;AACA,iBAAA,kBAAA,GAPA,EAOA;AACA,iBAAA,yBAAA,GARA,EAQA;AACA,iBAAA,yBAAA,GATA,EASA;AACA,iBAAA,gBAAA,GAVA,CAAA,GAAA,KAAA,CAAA,uBAAA,GAUA;AAtBwB;;AAyB1BuiB,UAAAA,gBAAAA,CAAAA,QAAAA,EAA2B;AACzB,iBAAA,eAAA,CAAA,IAAA,CADyB,QACzB;AA1BwB;;AA6B1BC,UAAAA,mBAAAA,CAAAA,QAAAA,EAA8B;AAC5B,iBAAA,kBAAA,CAAA,IAAA,CAD4B,QAC5B;AA9BwB;;AAiC1BC,UAAAA,0BAAAA,CAAAA,QAAAA,EAAqC;AACnC,iBAAA,yBAAA,CAAA,IAAA,CADmC,QACnC;AAlCwB;;AAqC1BC,UAAAA,0BAAAA,CAAAA,QAAAA,EAAqC;AACnC,iBAAA,yBAAA,CAAA,IAAA,CADmC,QACnC;AAtCwB;;AAyC1BC,UAAAA,WAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAA0B;AACxB,iBAAA,MAAA,QAAA,IAAuB,KAAvB,eAAA,EAA6C;AAC3CC,cAAAA,QAAAA,CAAAA,KAAAA,EAD2C,KAC3CA,CAAAA;AAFsB;AAzCA;;AA+C1BC,UAAAA,cAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAA8B;AAC5B,iBAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAmC,MAAM;AACvC,mBAAA,MAAA,QAAA,IAAuB,KAAvB,kBAAA,EAAgD;AAC9CD,gBAAAA,QAAAA,CAAAA,MAAAA,EAD8C,KAC9CA,CAAAA;AAFqC;AAAzC,aAAA;AAhDwB;;AAuD1BE,UAAAA,qBAAAA,CAAAA,KAAAA,EAA6B;AAC3B,iBAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAmC,MAAM;AACvC,mBAAA,MAAA,QAAA,IAAuB,KAAvB,yBAAA,EAAuD;AACrDF,gBAAAA,QAAAA,CADqD,KACrDA,CAAAA;AAFqC;AAAzC,aAAA;AAxDwB;;AA+D1BG,UAAAA,qBAAAA,GAAwB;AACtB,iBAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAmC,MAAM;AACvC,mBAAA,MAAA,QAAA,IAAuB,KAAvB,yBAAA,EAAuD;AACrDH,gBAAAA,QADqD;AADhB;AAAzC,aAAA;AAhEwB;;AAuE1BI,UAAAA,cAAAA,GAAiB;AACf,iBAAA,gBAAA,CADe,OACf;AAxEwB;;AA2E1BC,UAAAA,gBAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA6B;AAC3BjL,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD2B,wDAC3BA;AA5EwB;;AA+E1BkL,UAAAA,KAAAA,GA/E0B,CAAA;;AAAA;;;;AAqF5B,cAAA,gBAAA,CAAuB;AACrBljB,UAAAA,WAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAgC;AAC9B,iBAAA,QAAA,GAD8B,OAC9B;AACA,iBAAA,UAAA,GAF8B,SAE9B;AAGEsE,YAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAA2C;AACzCiZ,cAAAA,GAAAA,GAAM;AACJ4F,iBAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EACE,qCAFE,qDACJA;AAIA,uBAAO,KAAA,YAAA,CALH,CAKG,CAAP;AANuC;;AAAA,aAA3C7e;AANiB;;AAqBrB,cAAI8e,iBAAJ,GAAwB;AACtB,mBAAO,KAAA,UAAA,CADe,iBACtB;AAtBmB;;AA4BrB,cAAIC,QAAJ,GAAe;AACb,mBAAO,KAAA,QAAA,CADM,QACb;AA7BmB;;AAsCrB,cAAIC,YAAJ,GAAmB;AACjB,mBAAO,KAAA,QAAA,CADU,YACjB;AAvCmB;;AA6CrB,cAAIC,SAAJ,GAAgB;AACd,mBAAO,CAAC,CAAC,KAAA,UAAA,CADK,WACd;AA9CmB;;AAuDrB,cAAIC,UAAJ,GAAiB;AACf,mBAAO,KAAA,UAAA,CADQ,WACf;AAxDmB;;AAgErBC,UAAAA,OAAAA,CAAAA,UAAAA,EAAoB;AAClB,mBAAO,KAAA,UAAA,CAAA,OAAA,CADW,UACX,CAAP;AAjEmB;;AAyErBC,UAAAA,YAAAA,CAAAA,GAAAA,EAAkB;AAChB,mBAAO,KAAA,UAAA,CAAA,YAAA,CADS,GACT,CAAP;AA1EmB;;AAmFrBC,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,UAAA,CADS,eACT,EAAP;AApFmB;;AA6FrBC,UAAAA,cAAAA,CAAAA,EAAAA,EAAmB;AACjB,mBAAO,KAAA,UAAA,CAAA,cAAA,CADU,EACV,CAAP;AA9FmB;;AAsGrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AAvGmB;;AA8GrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AA/GmB;;AAsHrBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,UAAA,CADK,WACL,EAAP;AAvHmB;;AA+HrBC,UAAAA,oBAAAA,GAAuB;AACrB,mBAAO,KAAA,UAAA,CADc,oBACd,EAAP;AAhImB;;AAwIrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AAzImB;;AAgJrBC,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,UAAA,CADQ,cACR,EAAP;AAjJmB;;AAyJrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AA1JmB;;AAoKrBC,UAAAA,YAAAA,GAAe;AACb,mBAAO,KAAA,UAAA,CADM,eACN,EAAP;AArKmB;;AA2LrBC,UAAAA,UAAAA,GAAa;AACX,mBAAO,KAAA,UAAA,CADI,UACJ,EAAP;AA5LmB;;AAoMrBC,UAAAA,wBAAAA,GAA2B;AACzB,mBAAO,KAAA,UAAA,CADkB,wBAClB,EAAP;AArMmB;;AA6MrBC,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,UAAA,CADQ,cACR,EAAP;AA9MmB;;AAwNrBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,UAAA,CADK,WACL,EAAP;AAzNmB;;AAyOrBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,UAAA,CADK,WACL,EAAP;AA1OmB;;AAiPrBC,UAAAA,OAAAA,GAAU;AACR,mBAAO,KAAA,UAAA,CADC,OACD,EAAP;AAlPmB;;AA0PrBC,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,UAAA,CAAA,sBAAA,CADS,OAChB;AA3PmB;;AA6QrBC,UAAAA,QAAAA,GAAW;AACT,mBAAO,KAAA,UAAA,CADE,QACF,EAAP;AA9QmB;;AA6RrBC,UAAAA,OAAAA,GAAiC;AAAA,gBAAzBC,eAAyB,uEAAjCD,KAAiC;AAC/B,mBAAO,KAAA,UAAA,CAAA,YAAA,CAA6BC,eAAAA,IAAmB,KADxB,SACxB,CAAP;AA9RmB;;AAoSrBpG,UAAAA,OAAAA,GAAU;AACR,mBAAO,KAAA,WAAA,CADC,OACD,EAAP;AArSmB;;AA4SrB,cAAIqG,aAAJ,GAAoB;AAClB,mBAAO,KAAA,UAAA,CADW,aAClB;AA7SmB;;AAmTrB,cAAIC,WAAJ,GAAkB;AAChB,mBAAO,KAAA,UAAA,CADS,WAChB;AApTmB;;AA2TrBC,UAAAA,YAAAA,GAAe;AACb,gBAEE,KAAA,UAAA,CAAA,iBAAA,CAAA,IAAA,IAFF,CAAA,EAGE;AACA9B,eAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EACE,6DAFF,wCACAA;AALW;;AAUb,mBAAO,KAAA,UAAA,CAVM,YAUN,EAAP;AArUmB;;AA6UrB+B,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,UAAA,CADS,eACT,EAAP;AA9UmB;;AAqVrBC,UAAAA,YAAAA,GAAe;AACb,mBAAO,KAAA,UAAA,CADM,YACN,EAAP;AAtVmB;;AA8VrBC,UAAAA,sBAAAA,GAAyB;AACvB,mBAAO,KAAA,UAAA,CADgB,sBAChB,EAAP;AA/VmB;;AAAA;;;;AA8gBvB,cAAA,YAAA,CAAmB;AACjBplB,UAAAA,WAAAA,CAAAA,SAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,aAAAA,EAA2E;AAAA,gBAAhBqlB,MAAgB,uEAA3ErlB,KAA2E;AACzE,iBAAA,UAAA,GADyE,SACzE;AACA,iBAAA,SAAA,GAFyE,QAEzE;AACA,iBAAA,cAAA,GAHyE,aAGzE;AACA,iBAAA,UAAA,GAJyE,SAIzE;AACA,iBAAA,MAAA,GAAcqlB,MAAAA,GAAS,IAATA,cAAAA,CAAAA,SAAS,EAATA,GAL2D,IAKzE;AACA,iBAAA,OAAA,GANyE,MAMzE;AACA,iBAAA,UAAA,GAAkBlE,SAAAA,CAPuD,UAOzE;AACA,iBAAA,IAAA,GAAY,IAR6D,UAQ7D,EAAZ;AAEA,iBAAA,kBAAA,GAVyE,KAUzE;AACA,iBAAA,cAAA,GAXyE,KAWzE;AACA,iBAAA,aAAA,GAAqB,IAZoD,GAYpD,EAArB;AACA,iBAAA,mBAAA,GAA2B,IAb8C,GAa9C,EAA3B;AACA,iBAAA,SAAA,GAdyE,KAczE;AAfe;;AAqBjB,cAAImE,UAAJ,GAAiB;AACf,mBAAO,KAAA,UAAA,GADQ,CACf;AAtBe;;AA4BjB,cAAIC,MAAJ,GAAa;AACX,mBAAO,KAAA,SAAA,CADI,MACX;AA7Be;;AAmCjB,cAAIC,GAAJ,GAAU;AACR,mBAAO,KAAA,SAAA,CADC,GACR;AApCe;;AA0CjB,cAAIC,QAAJ,GAAe;AACb,mBAAO,KAAA,SAAA,CADM,QACb;AA3Ce;;AAkDjB,cAAIC,IAAJ,GAAW;AACT,mBAAO,KAAA,SAAA,CADE,IACT;AAnDe;;AA2DjBC,UAAAA,WAAAA,GAMQ;AAAA,gBANI;AAAA,cAAA,KAAA;AAEVjkB,cAAAA,QAAAA,GAAW,KAFD,MAAA;AAGVN,cAAAA,OAAAA,GAHU,CAAA;AAIVC,cAAAA,OAAAA,GAJU,CAAA;AAKVC,cAAAA,QAAAA,GALU;AAAA,aAMJ,uEANRqkB,EAMQ;AACN,mBAAO,IAAA,cAAA,CAAA,YAAA,CAAiB;AACtBnkB,cAAAA,OAAAA,EAAS,KADa,IAAA;AAAA,cAAA,KAAA;AAAA,cAAA,QAAA;AAAA,cAAA,OAAA;AAAA,cAAA,OAAA;AAAA,cAAA;AAAA,aAAjB,CAAP;AAlEe;;AAiFjBokB,UAAAA,cAAAA,GAA4C;AAAA,gBAA7B;AAAEC,cAAAA,MAAAA,GAAF;AAAA,aAA6B,uEAA5CD,EAA4C;;AAC1C,kBAAME,UAAAA,GAAa,KAAA,UAAA,CAAA,kBAAA,CADuB,MACvB,CAAnB;;AAEA,gBAAIxD,OAAAA,GAAU,KAAA,mBAAA,CAAA,GAAA,CAA6BwD,UAAAA,CAHD,QAG5B,CAAd;;AACA,gBAAI,CAAJ,OAAA,EAAc;AACZxD,cAAAA,OAAAA,GAAU,KAAA,UAAA,CAAA,cAAA,CACR,KADQ,UAAA,EAERwD,UAAAA,CAHU,eACF,CAAVxD;;AAIA,mBAAA,mBAAA,CAAA,GAAA,CAA6BwD,UAAAA,CAA7B,QAAA,EALY,OAKZ;;AAGExD,cAAAA,OAAAA,GAAU,OAAA,CAAA,IAAA,CAAayD,WAAAA,IAAe;AACpC,qBAAA,MAAA,UAAA,IAAA,WAAA,EAAsC;AACpC,sBAAIC,UAAAA,CAAAA,QAAAA,KAAJ,SAAA,EAAuC;AACrC1hB,oBAAAA,MAAAA,CAAAA,cAAAA,CAAAA,UAAAA,EAAAA,OAAAA,EAA2C;AACzCiZ,sBAAAA,GAAAA,GAAM;AACJ4F,yBAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EADI,gEACJA;AAGA,+BAAO6C,UAAAA,CAAAA,QAAAA,CAJH,GAIJ;AALuC;;AAAA,qBAA3C1hB;AAFkC;;AAWpC,sBAAI0hB,UAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAA0C;AACxC1hB,oBAAAA,MAAAA,CAAAA,cAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAA8C;AAC5CiZ,sBAAAA,GAAAA,GAAM;AACJ4F,yBAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EADI,sEACJA;AAGA,+BAAO6C,UAAAA,CAAAA,WAAAA,CAJH,GAIJ;AAL0C;;AAAA,qBAA9C1hB;AAZkC;AADF;;AAuBpC,uBAvBoC,WAuBpC;AAvBFge,eAAU,CAAVA;AAZsC;;AAuC1C,mBAvC0C,OAuC1C;AAxHe;;AA+HjB8B,UAAAA,YAAAA,GAAe;AACb,mBAAQ,KAAA,iBAAA,KAA2B,KAAA,UAAA,CAAA,gBAAA,CACjC,KAFW,UACsB,CAAnC;AAhIe;;AA2IjB,gBAAM6B,MAAN,GAAe;AACb,mBAAO,KAAA,UAAA,CAAA,WAAA,EAAA,QAAA,CAAsC,KAAtC,UAAA,KADM,IACb;AA5Ie;;AAsJjBC,UAAAA,MAAAA,QAUG;AAAA,gBAVI;AAAA,cAAA,aAAA;AAAA,cAAA,QAAA;AAGLL,cAAAA,MAAAA,GAHK,SAAA;AAILM,cAAAA,cAAAA,GAAiBrf,KAAAA,CAAAA,cAAAA,CAJZ,MAAA;AAKLsK,cAAAA,SAAAA,GALK,IAAA;AAMLgV,cAAAA,UAAAA,GANK,IAAA;AAOLC,cAAAA,aAAAA,GAPK,IAAA;AAQLC,cAAAA,UAAAA,GARK,IAAA;AASLC,cAAAA,4BAAAA,GATFL;AAAO,aAUJ;;AAEC,gBAAIM,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,sBAAAA,KAAJ,SAAA,EAAwD;AACtDrD,eAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EACE,mEAFoD,iDACtDA;;AAIA,kBACEqD,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,sBAAAA,KAAAA,IAAAA,IACAL,cAAAA,KAAmBrf,KAAAA,CAAAA,cAAAA,CAFrB,MAAA,EAGE;AACAqf,gBAAAA,cAAAA,GAAiBrf,KAAAA,CAAAA,cAAAA,CADjB,YACAqf;AAToD;AAFzD;;AAcC,gBAAIK,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,wBAAAA,KAAJ,SAAA,EAA0D;AACxDrD,eAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EACE,qEAFsD,iDACxDA;;AAIA,kBACEqD,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,wBAAAA,KAAAA,IAAAA,IACAL,cAAAA,KAAmBrf,KAAAA,CAAAA,cAAAA,CAFrB,MAAA,EAGE;AACAqf,gBAAAA,cAAAA,GAAiBrf,KAAAA,CAAAA,cAAAA,CADjB,cACAqf;AATsD;AAd3D;;AA4BD,gBAAI,KAAJ,MAAA,EAAiB;AACf,mBAAA,MAAA,CAAA,IAAA,CADe,SACf;AA7BD;;AAgCD,kBAAML,UAAAA,GAAa,KAAA,UAAA,CAAA,kBAAA,CAAA,MAAA,EAhClB,cAgCkB,CAAnB;;AAMA,iBAAA,cAAA,GAtCC,KAsCD;;AAEA,gBAAI,CAAJ,4BAAA,EAAmC;AACjCS,cAAAA,4BAAAA,GAA+B,KAAA,UAAA,CADE,wBACF,EAA/BA;AAzCD;;AA4CD,gBAAIE,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CAAuBX,UAAAA,CA5CxC,QA4CiB,CAAlB;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAChBW,cAAAA,WAAAA,GAAcniB,MAAAA,CAAAA,MAAAA,CADE,IACFA,CAAdmiB;;AACA,mBAAA,aAAA,CAAA,GAAA,CAAuBX,UAAAA,CAAvB,QAAA,EAFgB,WAEhB;AA/CD;;AAmDD,gBAAIW,WAAAA,CAAJ,yBAAA,EAA2C;AACzCC,cAAAA,YAAAA,CAAaD,WAAAA,CAD4B,yBACzCC,CAAAA;AACAD,cAAAA,WAAAA,CAAAA,yBAAAA,GAFyC,IAEzCA;AArDD;;AAwDD,kBAAME,qBAAAA,GACJN,aAAAA,IACA,IAAA,oBAAA,CAAyB;AAAEpmB,cAAAA,aAAAA,EAAe,KA1D3C;AA0D0B,aAAzB,CAFF;AAGA,kBAAM2mB,WAAAA,GAAc,CAAC,EACnB,UAAA,CAAA,eAAA,GAA6BtgB,KAAAA,CAAAA,mBAAAA,CA5D9B,KA2DoB,CAArB;;AAMA,gBAAI,CAACmgB,WAAAA,CAAL,sBAAA,EAAyC;AACvCA,cAAAA,WAAAA,CAAAA,sBAAAA,GADuC,CAAA,GAAA,KAAA,CAAA,uBAAA,GACvCA;AACAA,cAAAA,WAAAA,CAAAA,YAAAA,GAA2B;AACzBI,gBAAAA,OAAAA,EADyB,EAAA;AAEzBC,gBAAAA,SAAAA,EAFyB,EAAA;AAGzBC,gBAAAA,SAAAA,EAHyB;AAAA,eAA3BN;;AAMA,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,IAAA,CADe,cACf;AATqC;;AAWvC,mBAAA,iBAAA,CAXuC,UAWvC;AA5ED;;AA+ED,kBAAMO,QAAAA,GAAWC,KAAAA,IAAS;AACxBR,cAAAA,WAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CADwB,kBACxBA;;AAIA,kBAAI,KAAA,kBAAA,IAAJ,WAAA,EAA4C;AAC1C,qBAAA,cAAA,GAD0C,IAC1C;AANsB;;AAQxB,mBARwB,WAQxB;;AAEA,kBAAA,KAAA,EAAW;AACTS,gBAAAA,kBAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CADS,KACTA;;AAEA,qBAAA,kBAAA,CAAwB;AAAA,kBAAA,WAAA;AAEtBrI,kBAAAA,MAAAA,EAAQoI,KAAAA,YAAAA,KAAAA,GAAAA,KAAAA,GAAiC,IAAA,KAAA,CAFnB,KAEmB;AAFnB,iBAAxB;AAHF,eAAA,MAOO;AACLC,gBAAAA,kBAAAA,CAAAA,UAAAA,CADK,OACLA;AAlBsB;;AAoBxB,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,OAAA,CADe,WACf;;AACA,qBAAA,MAAA,CAAA,OAAA,CAFe,SAEf;AAtBsB;AAA1B,aAAA;;AA0BA,kBAAMA,kBAAAA,GAAqB,IAAA,kBAAA,CAAuB;AAChDC,cAAAA,QAAAA,EADgD,QAAA;AAGhDxH,cAAAA,MAAAA,EAAQ;AAAA,gBAAA,aAAA;AAAA,gBAAA,QAAA;AAAA,gBAAA,SAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA;AAAA,eAHwC;AAUhDyH,cAAAA,IAAAA,EAAM,KAV0C,IAAA;AAWhDC,cAAAA,UAAAA,EAAY,KAXoC,UAAA;AAYhDC,cAAAA,YAAAA,EAAcb,WAAAA,CAZkC,YAAA;AAahDc,cAAAA,SAAAA,EAAW,KAbqC,UAAA;AAchDlB,cAAAA,aAAAA,EAdgD,qBAAA;AAehDmB,cAAAA,wBAAAA,EAA0B,CAfsB,WAAA;AAgBhDnC,cAAAA,MAAAA,EAAQ,KAhBwC;AAAA,aAAvB,CAA3B;AAmBC,aAAA,WAAA,CAAA,WAAA,KAA4B,IAA7B,GAA6B,EAA5B,EAAD,GAAC,CA5HA,kBA4HA;AACD,kBAAMoC,UAAAA,GAAaP,kBAAAA,CA7HlB,IA6HD;AAEAQ,YAAAA,OAAAA,CAAAA,GAAAA,CAAY,CACVjB,WAAAA,CAAAA,sBAAAA,CADU,OAAA,EAAZiB,4BAAY,CAAZA,EAAAA,IAAAA,CAIQ,SAA2C;AAAA,kBAA1C,CAAA,YAAA,EAAD,qBAAC,CAA0C;;AAC/C,kBAAI,KAAJ,cAAA,EAAyB;AACvBV,gBAAAA,QADuB;AAAA;AADsB;;AAK/C,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,IAAA,CADe,WACf;AAN6C;;AAQ/CE,cAAAA,kBAAAA,CAAAA,kBAAAA,CAAsC;AAAA,gBAAA,YAAA;AAAA,gBAAA;AAAA,eAAtCA;AAIAA,cAAAA,kBAAAA,CAZ+C,mBAY/CA;AAhBJQ,aAAAA,EAAAA,KAAAA,CA/HC,QA+HDA;AAoBA,mBAnJC,UAmJD;AAnTe;;AA4TjBC,UAAAA,eAAAA,GAGQ;AAAA,gBAHQ;AACd9B,cAAAA,MAAAA,GADc,SAAA;AAEdM,cAAAA,cAAAA,GAAiBrf,KAAAA,CAAAA,cAAAA,CAFH;AAAA,aAGR,uEAHR6gB,EAGQ;;AACN,qBAAA,mBAAA,GAA+B;AAC7B,kBAAIlB,WAAAA,CAAAA,YAAAA,CAAJ,SAAA,EAAwC;AACtCA,gBAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,OAAAA,CAAyCA,WAAAA,CADH,YACtCA;AAEAA,gBAAAA,WAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAHsC,UAGtCA;AAJ2B;AADzB;;AASN,kBAAMX,UAAAA,GAAa,KAAA,UAAA,CAAA,kBAAA,CAAA,MAAA,EAAA,cAAA,EATb,IASa,CAAnB;;AAKA,gBAAIW,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CAAuBX,UAAAA,CAdnC,QAcY,CAAlB;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAChBW,cAAAA,WAAAA,GAAcniB,MAAAA,CAAAA,MAAAA,CADE,IACFA,CAAdmiB;;AACA,mBAAA,aAAA,CAAA,GAAA,CAAuBX,UAAAA,CAAvB,QAAA,EAFgB,WAEhB;AAjBI;;AAmBN,gBAnBM,UAmBN;;AAEA,gBAAI,CAACW,WAAAA,CAAL,oBAAA,EAAuC;AACrCmB,cAAAA,UAAAA,GAAatjB,MAAAA,CAAAA,MAAAA,CADwB,IACxBA,CAAbsjB;AACAA,cAAAA,UAAAA,CAAAA,mBAAAA,GAFqC,mBAErCA;AACAnB,cAAAA,WAAAA,CAAAA,oBAAAA,GAHqC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAGrCA;AACC,eAAA,WAAA,CAAA,WAAA,KAA4B,IAA7B,GAA6B,EAA5B,EAAD,GAAC,CAJoC,UAIpC;AACDA,cAAAA,WAAAA,CAAAA,YAAAA,GAA2B;AACzBI,gBAAAA,OAAAA,EADyB,EAAA;AAEzBC,gBAAAA,SAAAA,EAFyB,EAAA;AAGzBC,gBAAAA,SAAAA,EAHyB;AAAA,eAA3BN;;AAMA,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,IAAA,CADe,cACf;AAZmC;;AAcrC,mBAAA,iBAAA,CAdqC,UAcrC;AAnCI;;AAqCN,mBAAOA,WAAAA,CAAAA,oBAAAA,CArCD,OAqCN;AApWe;;AA2WjBoB,UAAAA,iBAAAA,GAIQ;AAAA,gBAJU;AAChBC,cAAAA,mBAAAA,GADgB,KAAA;AAEhBC,cAAAA,uBAAAA,GAFgB,KAAA;AAGhBC,cAAAA,oBAAAA,GAHgB;AAAA,aAIV,uEAJRH,EAIQ;AACN,kBAAMI,uBAAAA,GADA,GACN;AAEA,mBAAO,KAAA,UAAA,CAAA,cAAA,CAAA,cAAA,CAAA,gBAAA,EAEL;AACEV,cAAAA,SAAAA,EAAW,KADb,UAAA;AAEEO,cAAAA,mBAAAA,EAAqBA,mBAAAA,KAFvB,IAAA;AAGEI,cAAAA,gBAAAA,EAAkBH,uBAAAA,KAHpB,IAAA;AAIEC,cAAAA,oBAAAA,EAAsBA,oBAAAA,KAJxB;AAAA,aAFK,EAQL;AACEG,cAAAA,aAAAA,EADF,uBAAA;;AAEEC,cAAAA,IAAAA,CAAAA,WAAAA,EAAkB;AAChB,uBAAOC,WAAAA,CAAAA,KAAAA,CADS,MAChB;AAHJ;;AAAA,aARK,CAAP;AAlXe;;AAwYjBC,UAAAA,cAAAA,GAA4B;AAAA,gBAAb3I,MAAa,uEAA5B2I,EAA4B;;AAC1B,gBAAI,KAAA,UAAA,CAAJ,WAAA,EAAiC;AAG/B,qBAAO,KAAA,MAAA,GAAA,IAAA,CAAmBC,GAAAA,IAAO;AAC/B,uBAAOC,SAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CADwB,GACxBA,CAAP;AADF,eAAO,CAAP;AAJwB;;AAQ1B,kBAAMC,cAAAA,GAAiB,KAAA,iBAAA,CARG,MAQH,CAAvB;AAEA,mBAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC5C,uBAAA,IAAA,GAAgB;AACdC,gBAAAA,MAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CAAmB,kBAA2B;AAAA,sBAAjB;AAAA,oBAAA,KAAA;AAAV,oBAAA;AAAU,mBAAiB;;AAC5C,sBAAA,IAAA,EAAU;AACR5nB,oBAAAA,OAAAA,CADQ,WACRA,CAAAA;AADQ;AADkC;;AAK5CwD,kBAAAA,MAAAA,CAAAA,MAAAA,CAAc+jB,WAAAA,CAAd/jB,MAAAA,EAAkCqV,KAAAA,CALU,MAK5CrV;AACA+jB,kBAAAA,WAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAuB,GAAG1O,KAAAA,CANkB,KAM5C0O;AACAM,kBAAAA,IAP4C;AAA9CD,iBAAAA,EADc,MACdA;AAF0C;;AAa5C,oBAAMA,MAAAA,GAASD,cAAAA,CAb6B,SAa7BA,EAAf;AACA,oBAAMJ,WAAAA,GAAc;AAClBO,gBAAAA,KAAAA,EADkB,EAAA;AAElBC,gBAAAA,MAAAA,EAAQvkB,MAAAA,CAAAA,MAAAA,CAFU,IAEVA;AAFU,eAApB;AAIAqkB,cAAAA,IAlB4C;AAA9C,aAAO,CAAP;AAlZe;;AA6ajBG,UAAAA,aAAAA,GAAgB;AACd,mBAAQ,KAAA,kBAAA,KAA4B,KAAA,UAAA,CAAA,aAAA,CAClC,KAFY,UACsB,CAApC;AA9ae;;AAubjBC,UAAAA,QAAAA,GAAW;AACT,iBAAA,SAAA,GADS,IACT;AACA,iBAAA,UAAA,CAAA,SAAA,CAA0B,KAA1B,UAAA,IAFS,IAET;AAEA,kBAAMC,MAAAA,GAJG,EAIT;;AACA,iBAAA,MAAA,WAAA,IAA0B,KAAA,aAAA,CAA1B,MAA0B,EAA1B,EAAuD;AACrD,mBAAA,kBAAA,CAAwB;AAAA,gBAAA,WAAA;AAEtBnK,gBAAAA,MAAAA,EAAQ,IAAA,KAAA,CAFc,qBAEd,CAFc;AAGtBoK,gBAAAA,KAAAA,EAHsB;AAAA,eAAxB;;AAMA,kBAAIxC,WAAAA,CAAJ,oBAAA,EAAsC;AAAA;AAPe;;AAWrD,mBAAA,MAAA,kBAAA,IAAiCA,WAAAA,CAAjC,WAAA,EAA0D;AACxDuC,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY9B,kBAAAA,CAD4C,SACxD8B;AACA9B,gBAAAA,kBAAAA,CAFwD,MAExDA;AAbmD;AAL9C;;AAqBT,iBAAA,IAAA,CArBS,KAqBT;;AACA,iBAAA,mBAAA,CAtBS,KAsBT;;AACA,iBAAA,iBAAA,GAvBS,IAuBT;AACA,iBAAA,kBAAA,GAxBS,IAwBT;AACA,iBAAA,cAAA,GAzBS,KAyBT;AACA,mBAAOQ,OAAAA,CAAAA,GAAAA,CA1BE,MA0BFA,CAAP;AAjde;;AA2djB7C,UAAAA,OAAAA,GAA4B;AAAA,gBAApBqE,UAAoB,uEAA5BrE,KAA4B;AAC1B,iBAAA,cAAA,GAD0B,IAC1B;AACA,mBAAO,KAAA,WAAA,CAFmB,UAEnB,CAAP;AA7de;;AAoejBsE,UAAAA,WAAAA,GAAgC;AAAA,gBAApBD,UAAoB,uEAAhCC,KAAgC;;AAC9B,gBAAI,CAAC,KAAL,cAAA,EAA0B;AACxB,qBADwB,KACxB;AAF4B;;AAI9B,iBAAA,MAAW;AAAA,cAAA,WAAA;AAAX,cAAA;AAAW,aAAX,IAA4C,KAAA,aAAA,CAA5C,MAA4C,EAA5C,EAAyE;AACvE,kBAAIC,WAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAwB,CAAC9B,YAAAA,CAA7B,SAAA,EAAqD;AACnD,uBADmD,KACnD;AAFqE;AAJ3C;;AAU9B,iBAAA,aAAA,CAV8B,KAU9B;;AACA,iBAAA,IAAA,CAX8B,KAW9B;;AACA,iBAAA,mBAAA,CAZ8B,KAY9B;;AACA,iBAAA,iBAAA,GAb8B,IAa9B;AACA,iBAAA,kBAAA,GAd8B,IAc9B;;AACA,gBAAI4B,UAAAA,IAAc,KAAlB,MAAA,EAA+B;AAC7B,mBAAA,MAAA,GAAc,IADe,cAAA,CAAA,SACf,EAAd;AAhB4B;;AAkB9B,iBAAA,cAAA,GAlB8B,KAkB9B;AACA,mBAnB8B,IAmB9B;AAvfe;;AA6fjBG,UAAAA,gBAAAA,CAAAA,YAAAA,EAAAA,QAAAA,EAAyC;AACvC,kBAAM5C,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CADmB,QACnB,CAApB;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAAA;AAFqB;;AAKvC,gBAAI,KAAJ,MAAA,EAAiB;AACf,mBAAA,MAAA,CAAA,OAAA,CADe,cACf;AANqC;;AAUvC,gBAAIA,WAAAA,CAAJ,sBAAA,EAAwC;AACtCA,cAAAA,WAAAA,CAAAA,sBAAAA,CAAAA,OAAAA,CADsC,YACtCA;AAXqC;AA7fxB;;AA+gBjB6C,UAAAA,gBAAAA,CAAAA,iBAAAA,EAAAA,WAAAA,EAAiD;AAE/C,iBAAK,IAAI5lB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK8lB,iBAAAA,CAArB,MAAA,EAA+C7lB,CAAAA,GAA/C,EAAA,EAAuDA,CAAvD,EAAA,EAA4D;AAC1D+iB,cAAAA,WAAAA,CAAAA,YAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAsC8C,iBAAAA,CAAAA,OAAAA,CADoB,CACpBA,CAAtC9C;AACAA,cAAAA,WAAAA,CAAAA,YAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAwC8C,iBAAAA,CAAAA,SAAAA,CAFkB,CAElBA,CAAxC9C;AAJ6C;;AAM/CA,YAAAA,WAAAA,CAAAA,YAAAA,CAAAA,SAAAA,GAAqC8C,iBAAAA,CANU,SAM/C9C;;AAGA,iBAAA,MAAA,kBAAA,IAAiCA,WAAAA,CAAjC,WAAA,EAA0D;AACxDS,cAAAA,kBAAAA,CADwD,mBACxDA;AAV6C;;AAa/C,gBAAIqC,iBAAAA,CAAJ,SAAA,EAAiC;AAC/B,mBAD+B,WAC/B;AAd6C;AA/gBhC;;AAoiBjBC,UAAAA,iBAAAA,SAAiD;AAAA,gBAA/B;AAAA,cAAA,eAAA;AAAlBA,cAAAA;AAAkB,aAA+B;;AAW/C,kBAAMf,cAAAA,GAAiB,KAAA,UAAA,CAAA,cAAA,CAAA,cAAA,CAAA,iBAAA,EAErB;AACElB,cAAAA,SAAAA,EAAW,KADb,UAAA;AAEE1B,cAAAA,MAAAA,EAFF,eAAA;AAAA,cAAA,QAAA;AAIEzC,cAAAA,iBAAAA,EACEqG,eAAAA,GAAkBnjB,KAAAA,CAAAA,mBAAAA,CAAlBmjB,mBAAAA,GACI,KAAA,UAAA,CAAA,iBAAA,CADJA,YAAAA,GALJ;AAAA,aAFqB,CAAvB;;AAYA,kBAAMf,MAAAA,GAASD,cAAAA,CAvBgC,SAuBhCA,EAAf;;AAEA,kBAAMhC,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CAzB2B,QAyB3B,CAApB;;AACAA,YAAAA,WAAAA,CAAAA,YAAAA,GA1B+C,MA0B/CA;;AAEA,kBAAMkC,IAAAA,GAAO,MAAM;AACjBD,cAAAA,MAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CACE,UAAqB;AAAA,oBAApB;AAAA,kBAAA,KAAA;AAAD,kBAAA;AAAC,iBAAoB;;AACnB,oBAAA,IAAA,EAAU;AACRjC,kBAAAA,WAAAA,CAAAA,YAAAA,GADQ,IACRA;AADQ;AADS;;AAKnB,oBAAI,KAAA,UAAA,CAAJ,SAAA,EAA+B;AAAA;AALZ;;AAQnB,qBAAA,gBAAA,CAAA,KAAA,EARmB,WAQnB;;AACAkC,gBAAAA,IATmB;AADvBD,eAAAA,EAYE7J,MAAAA,IAAU;AACR4H,gBAAAA,WAAAA,CAAAA,YAAAA,GADQ,IACRA;;AAEA,oBAAI,KAAA,UAAA,CAAJ,SAAA,EAA+B;AAAA;AAHvB;;AAMR,oBAAIA,WAAAA,CAAJ,YAAA,EAA8B;AAE5BA,kBAAAA,WAAAA,CAAAA,YAAAA,CAAAA,SAAAA,GAF4B,IAE5BA;;AAEA,uBAAA,MAAA,kBAAA,IAAiCA,WAAAA,CAAjC,WAAA,EAA0D;AACxDS,oBAAAA,kBAAAA,CADwD,mBACxDA;AAL0B;;AAO5B,uBAP4B,WAO5B;AAbM;;AAgBR,oBAAIT,WAAAA,CAAJ,sBAAA,EAAwC;AACtCA,kBAAAA,WAAAA,CAAAA,sBAAAA,CAAAA,MAAAA,CADsC,MACtCA;AADF,iBAAA,MAEO,IAAIA,WAAAA,CAAJ,oBAAA,EAAsC;AAC3CA,kBAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,MAAAA,CAD2C,MAC3CA;AADK,iBAAA,MAEA;AACL,wBADK,MACL;AArBM;AAZZiC,eAAAA;AADF,aAAA;;AAuCAC,YAAAA,IAnE+C;AApiBhC;;AA6mBjBe,UAAAA,kBAAAA,SAA2D;AAAA,gBAAxC;AAAA,cAAA,WAAA;AAAA,cAAA,MAAA;AAAuBT,cAAAA,KAAAA,GAA1CS;AAAmB,aAAwC;;AAWzD,gBAAI,CAACjD,WAAAA,CAAL,YAAA,EAA+B;AAAA;AAX0B;;AAczD,gBAAI,CAAJ,KAAA,EAAY;AAGV,kBAAIA,WAAAA,CAAAA,WAAAA,CAAAA,IAAAA,GAAJ,CAAA,EAAsC;AAAA;AAH5B;;AASV,kBAAI5H,MAAAA,YAAJ,cAAA,CAAA,2BAAA,EAAmD;AACjD4H,gBAAAA,WAAAA,CAAAA,yBAAAA,GAAwC,UAAA,CAAW,MAAM;AACvD,uBAAA,kBAAA,CAAwB;AAAA,oBAAA,WAAA;AAAA,oBAAA,MAAA;AAAuBwC,oBAAAA,KAAAA,EAAvB;AAAA,mBAAxB;;AACAxC,kBAAAA,WAAAA,CAAAA,yBAAAA,GAFuD,IAEvDA;AAFsC,iBAAA,EADS,2BACT,CAAxCA;AADiD;AATzC;AAd6C;;AA+BzDA,YAAAA,WAAAA,CAAAA,YAAAA,CAAAA,MAAAA,CACU,IAAA,KAAA,CAAA,cAAA,CAAmB5H,MAAAA,CAD7B4H,OACU,CADVA,EAAAA,KAAAA,CAES,MAjCgD,CA+BzDA,CAAAA;AAKAA,YAAAA,WAAAA,CAAAA,YAAAA,GApCyD,IAoCzDA;;AAEA,gBAAI,KAAA,UAAA,CAAJ,SAAA,EAA+B;AAAA;AAtC0B;;AA2CzD,iBAAA,MAAW,CAAA,WAAA,EAAX,cAAW,CAAX,IAA4C,KAA5C,aAAA,EAAgE;AAC9D,kBAAIkD,cAAAA,KAAJ,WAAA,EAAoC;AAClC,qBAAA,aAAA,CAAA,MAAA,CADkC,WAClC;;AADkC;AAD0B;AA3CP;;AAkDzD,iBAlDyD,OAkDzD;AA/pBe;;AAqqBjB,cAAIC,KAAJ,GAAY;AACV,mBAAO,KADG,MACV;AAtqBe;;AAAA;;;;AA0qBnB,cAAA,YAAA,CAAmB;AACjB5pB,UAAAA,WAAAA,GAAc;AACZ,iBAAA,UAAA,GADY,EACZ;AACA,iBAAA,SAAA,GAAiB0nB,OAAAA,CAAAA,OAAAA,CAFL,SAEKA,CAAjB;AAHe;;AAMjBmC,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,SAAAA,EAA4B;AAC1B,qBAAA,UAAA,CAAA,KAAA,EAA2B;AAGzB,kBACE,OAAA,KAAA,KAAA,UAAA,IACA,OAAA,KAAA,KADA,QAAA,IAEAlQ,KAAAA,YAHF,GAAA,EAIE;AACA,sBAAM,IAAA,KAAA,CACJ,4CAA4CA,KAAAA,EAF9C,QAE8CA,EAF9C,EACM,CAAN;AARuB;;AAazB,kBAAI,OAAA,KAAA,KAAA,QAAA,IAA6BA,KAAAA,KAAjC,IAAA,EAAiD;AAC/C,uBAD+C,KAC/C;AAduB;;AAgBzB,kBAAImQ,MAAAA,CAAAA,GAAAA,CAAJ,KAAIA,CAAJ,EAAuB;AAErB,uBAAOA,MAAAA,CAAAA,GAAAA,CAFc,KAEdA,CAAP;AAlBuB;;AAoBzB,kBAAA,MAAA,EApByB,MAoBzB;;AACA,kBAAK,CAAA,MAAA,GAASnQ,KAAAA,CAAV,MAAC,KAA0B8F,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAA/B,MAA+BA,CAA/B,EAAsD;AAEpD,oBAAIsK,SAAAA,EAAAA,QAAAA,CAAJ,MAAIA,CAAJ,EAAiC;AAC/BvN,kBAAAA,MAAAA,GAAS,IAAI7C,KAAAA,CAAJ,WAAA,CAAA,MAAA,EAEPA,KAAAA,CAFO,UAAA,EAGPA,KAAAA,CAJ6B,UACtB,CAAT6C;AADF,iBAAA,MAMO;AACLA,kBAAAA,MAAAA,GAAS,IAAI7C,KAAAA,CAAJ,WAAA,CADJ,KACI,CAAT6C;AATkD;;AAWpDsN,gBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAXoD,MAWpDA;AACA,uBAZoD,MAYpD;AAjCuB;;AAmCzB,kBAAInQ,KAAAA,YAAJ,GAAA,EAA0B;AACxB6C,gBAAAA,MAAAA,GAAS,IADe,GACf,EAATA;AACAsN,gBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAFwB,MAExBA;;AACA,qBAAA,MAAW,CAAA,GAAA,EAAX,GAAW,CAAX,IAAA,KAAA,EAAgC;AAC9BtN,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAgBwN,UAAAA,CADc,GACdA,CAAhBxN;AAJsB;;AAMxB,uBANwB,MAMxB;AAzCuB;;AA2CzB,kBAAI7C,KAAAA,YAAJ,GAAA,EAA0B;AACxB6C,gBAAAA,MAAAA,GAAS,IADe,GACf,EAATA;AACAsN,gBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAFwB,MAExBA;;AACA,qBAAA,MAAA,GAAA,IAAA,KAAA,EAAyB;AACvBtN,kBAAAA,MAAAA,CAAAA,GAAAA,CAAWwN,UAAAA,CADY,GACZA,CAAXxN;AAJsB;;AAMxB,uBANwB,MAMxB;AAjDuB;;AAmDzBA,cAAAA,MAAAA,GAASpC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,IAAAA,EAAAA,GAA4B9V,MAAAA,CAAAA,MAAAA,CAnDZ,IAmDYA,CAArCkY;AACAsN,cAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EApDyB,MAoDzBA;;AAGA,mBAAA,MAAA,CAAA,IAAA,KAAA,EAAuB;AACrB,oBAAA,IAAA;AAAA,oBACEnP,CAAAA,GAFmB,KACrB;;AAEA,uBAAO,EAAE,IAAA,GAAOrW,MAAAA,CAAAA,wBAAAA,CAAAA,CAAAA,EAAhB,CAAgBA,CAAT,CAAP,EAAwD;AACtDqW,kBAAAA,CAAAA,GAAIrW,MAAAA,CAAAA,cAAAA,CADkD,CAClDA,CAAJqW;AAJmB;;AAMrB,oBAAI,OAAOsP,IAAAA,CAAP,KAAA,KAAJ,WAAA,EAAuC;AAAA;AANlB;;AASrB,oBAAI,OAAOA,IAAAA,CAAP,KAAA,KAAA,UAAA,IAAoC,CAACtQ,KAAAA,CAAAA,cAAAA,GAAzC,CAAyCA,CAAzC,EAAoE;AAAA;AAT/C;;AAYrB6C,gBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYwN,UAAAA,CAAWC,IAAAA,CAZF,KAYTD,CAAZxN;AAnEuB;;AAqEzB,qBArEyB,MAqEzB;AAtEwB;;AAyE1B,kBAAMsN,MAAAA,GAAS,IAzEW,OAyEX,EAAf;AACA,kBAAMI,KAAAA,GAAQ;AAAErpB,cAAAA,IAAAA,EAAMmpB,UAAAA,CA1EI,GA0EJA;AAAR,aAAd;;AAEA,iBAAA,SAAA,CAAA,IAAA,CAAoB,MAAM;AACxB,mBAAA,MAAA,QAAA,IAAuB,KAAvB,UAAA,EAAwC;AACtCpH,gBAAAA,QAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EADsC,KACtCA;AAFsB;AAA1B,aAAA;AAlFe;;AAyFjBuH,UAAAA,gBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAiC;AAC/B,iBAAA,UAAA,CAAA,IAAA,CAD+B,QAC/B;AA1Fe;;AA6FjBC,UAAAA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoC;AAClC,kBAAM1mB,CAAAA,GAAI,KAAA,UAAA,CAAA,OAAA,CADwB,QACxB,CAAV;;AACA,iBAAA,UAAA,CAAA,MAAA,CAAA,CAAA,EAFkC,CAElC;AA/Fe;;AAkGjB2mB,UAAAA,SAAAA,GAAY;AACV,iBAAA,UAAA,CAAA,MAAA,GADU,CACV;AAnGe;;AAAA;;;AA+GnB,cAAMC,aAAAA,GAAgB;AACpBC,UAAAA,gBAAAA,EADoB,KAAA;AAEpBC,UAAAA,iBAAAA,EAFoB,IAAA;AAGpBC,UAAAA,YAAAA,EAHoB;AAAA,SAAtB;AAKiE;AAE/D,cAAIrM,QAAAA,CAAAA,QAAAA,IAAY,OAAA,OAAA,KAAhB,UAAA,EAA+D;AAE7DkM,YAAAA,aAAAA,CAAAA,gBAAAA,GAF6D,IAE7DA;AAEAA,YAAAA,aAAAA,CAAAA,iBAAAA,GAJ6D,iBAI7DA;AAJF,WAAA,MAOO,IAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AACvC,kBAAMI,aAAAA,GAAgBnqB,QAAAA,EAAAA,aAAAA,EADiB,GACvC;;AACA,gBAAA,aAAA,EAAmB;AACjB+pB,cAAAA,aAAAA,CAAAA,iBAAAA,GAAkCI,aAAAA,CAAAA,OAAAA,CAAAA,2BAAAA,EADjB,aACiBA,CAAlCJ;AAHqC;AATsB;;AAmB/DA,UAAAA,aAAAA,CAAAA,gBAAAA,GAAiC,UAAA,GAAA,EAAe;AAI9C,kBAAMK,OAAAA,GAAU,kBAJ8B,GAAA,KAI9C;AACA,mBAAOjN,GAAAA,CAAAA,eAAAA,CAAoB,IAAA,IAAA,CAAS,CALU,OAKV,CAAT,CAApBA,CAAP;AALF4M,WAAAA;AAj/DF;;AAkgEA,cAAA,SAAA,CAAgB;AACd,qBAAWM,YAAX,GAA0B;AACxB,mBAAO7qB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,cAAAA,EAA6B,IADZ,OACY,EAA7BA,CAAP;AAFY;;AAKdC,UAAAA,WAAAA,GAIQ;AAAA,gBAJI;AACVwE,cAAAA,IAAAA,GADU,IAAA;AAEV0b,cAAAA,IAAAA,GAFU,IAAA;AAGVpI,cAAAA,SAAAA,GAHU,CAAA,GAAA,KAAA,CAAA,iBAAA;AAAA,aAIJ,uEAJR9X,EAIQ;;AACN,gBAAIkgB,IAAAA,IAAQE,SAAAA,CAAAA,YAAAA,CAAAA,GAAAA,CAAZ,IAAYA,CAAZ,EAA8C;AAC5C,oBAAM,IAAA,KAAA,CADsC,8CACtC,CAAN;AAFI;;AAKN,iBAAA,IAAA,GALM,IAKN;AACA,iBAAA,SAAA,GANM,KAMN;AACA,iBAAA,oBAAA,GAPM,IAON;AACA,iBAAA,SAAA,GARM,SAQN;AAEA,iBAAA,gBAAA,GAVM,CAAA,GAAA,KAAA,CAAA,uBAAA,GAUN;AACA,iBAAA,KAAA,GAXM,IAWN;AACA,iBAAA,UAAA,GAZM,IAYN;AACA,iBAAA,eAAA,GAbM,IAaN;;AAEA,gBAAA,IAAA,EAAU;AACRA,cAAAA,SAAAA,CAAAA,YAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EADQ,IACRA;;AACA,mBAAA,mBAAA,CAFQ,IAER;;AAFQ;AAfJ;;AAoBN,iBApBM,WAoBN;AA7BY;;AAoCd,cAAIkC,OAAJ,GAAc;AACZ,mBAAO,KAAA,gBAAA,CADK,OACZ;AArCY;;AA4Cd,cAAIpC,IAAJ,GAAW;AACT,mBAAO,KADE,KACT;AA7CY;;AAoDd,cAAIgB,cAAJ,GAAqB;AACnB,mBAAO,KADY,eACnB;AArDY;;AAwDd2J,UAAAA,mBAAAA,CAAAA,IAAAA,EAA0B;AACxB,iBAAA,KAAA,GADwB,IACxB;AACA,iBAAA,eAAA,GAAuB,IAAA,gBAAA,CAAA,cAAA,CAAA,MAAA,EAAA,QAAA,EAFC,IAED,CAAvB;;AACA,iBAAA,eAAA,CAAA,EAAA,CAAA,OAAA,EAAiC,YAHT,CAGxB,CAAA;;AAIA,iBAAA,gBAAA,CAPwB,OAOxB;AA/DY;;AAkEdC,UAAAA,WAAAA,GAAc;AAMZ,gBACE,OAAA,MAAA,KAAA,WAAA,IACA,CAACR,aAAAA,CADD,gBAAA,IAEA,CAAClK,SAAAA,CAHH,+BAAA,EAIE;AACA,kBAAI2K,SAAAA,GAAY3K,SAAAA,CADhB,SACA;;AAEA,kBAAI;AAGF,oBAGE,CAAC4K,CAAAA,GAAAA,KAAAA,CAAAA,YAAAA,EAAalL,MAAAA,CAAAA,QAAAA,CAAbkL,IAAAA,EAHH,SAGGA,CAHH,EAIE;AACAD,kBAAAA,SAAAA,GAAYT,aAAAA,CAAAA,gBAAAA,CACV,IAAA,GAAA,CAAA,SAAA,EAAmBxK,MAAAA,CAAnB,QAAA,EAFF,IACYwK,CAAZS;AARA;;AAeF,sBAAMlL,MAAAA,GAAS,IAAA,MAAA,CAfb,SAea,CAAf;AACA,sBAAMqB,cAAAA,GAAiB,IAAA,gBAAA,CAAA,cAAA,CAAA,MAAA,EAAA,QAAA,EAhBrB,MAgBqB,CAAvB;;AACA,sBAAM+J,cAAAA,GAAiB,MAAM;AAC3BpL,kBAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAD2B,aAC3BA;AACAqB,kBAAAA,cAAAA,CAF2B,OAE3BA;AACArB,kBAAAA,MAAAA,CAH2B,SAG3BA;;AACA,sBAAI,KAAJ,SAAA,EAAoB;AAClB,yBAAA,gBAAA,CAAA,MAAA,CAA6B,IAAA,KAAA,CADX,sBACW,CAA7B;AADF,mBAAA,MAEO;AAGL,yBAHK,gBAGL;AATyB;AAA7B,iBAAA;;AAaA,sBAAMqL,aAAAA,GAAgB,MAAM;AAC1B,sBAAI,CAAC,KAAL,UAAA,EAAsB;AAGpBD,oBAAAA,cAHoB;AADI;AAA5B,iBAAA;;AAOApL,gBAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EArCE,aAqCFA;AAEAqB,gBAAAA,cAAAA,CAAAA,EAAAA,CAAAA,MAAAA,EAA0BrgB,IAAAA,IAAQ;AAChCgf,kBAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EADgC,aAChCA;;AACA,sBAAI,KAAJ,SAAA,EAAoB;AAClBoL,oBAAAA,cADkB;AAAA;AAFY;;AAMhC,sBAAA,IAAA,EAAU;AAER,yBAAA,eAAA,GAFQ,cAER;AACA,yBAAA,KAAA,GAHQ,MAGR;AACA,yBAAA,UAAA,GAJQ,MAIR;;AACA,wBAAI,CAACpqB,IAAAA,CAAL,gBAAA,EAA4B;AAC1B,2BAAA,oBAAA,GAD0B,KAC1B;AANM;;AAQR,yBAAA,gBAAA,CARQ,OAQR;;AAEAqgB,oBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAiC;AAC/BpJ,sBAAAA,SAAAA,EAAW,KAXL;AAUyB,qBAAjCoJ;AAVF,mBAAA,MAaO;AACL,yBADK,gBACL;;AACAA,oBAAAA,cAAAA,CAFK,OAELA;AACArB,oBAAAA,MAAAA,CAHK,SAGLA;AAtB8B;AAAlCqB,iBAAAA;AA0BAA,gBAAAA,cAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAA2BrgB,IAAAA,IAAQ;AACjCgf,kBAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EADiC,aACjCA;;AACA,sBAAI,KAAJ,SAAA,EAAoB;AAClBoL,oBAAAA,cADkB;AAAA;AAFa;;AAMjC,sBAAI;AACFE,oBAAAA,QADE;AAAJ,mBAAA,CAEE,OAAA,CAAA,EAAU;AAEV,yBAFU,gBAEV;AAV+B;AAAnCjK,iBAAAA;;AAcA,sBAAMiK,QAAAA,GAAW,MAAM;AACrB,wBAAMC,OAAAA,GAAU,IAAA,UAAA,CAAe,CAAC,KAAA,oBAAA,GAAA,GAAA,GADX,CACU,CAAf,CAAhB;;AAGA,sBAAI;AACFlK,oBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAqC,CAACkK,OAAAA,CADpC,MACmC,CAArClK;AADF,mBAAA,CAEE,OAAA,EAAA,EAAW;AACXld,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADW,mCACXA;AACAonB,oBAAAA,OAAAA,CAAAA,CAAAA,CAAAA,GAFW,CAEXA;AACAlK,oBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAHW,OAGXA;AATmB;AAAvB,iBAAA;;AAgBAiK,gBAAAA,QA/FE;AAAA;AAAJ,eAAA,CAiGE,OAAA,CAAA,EAAU;AACVE,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADU,+BACVA;AArGF;AAVU;;AAoHZ,iBApHY,gBAoHZ;AAtLY;;AAyLdC,UAAAA,gBAAAA,GAAmB;AACjB,gBAAI,CAAChB,aAAAA,CAAL,gBAAA,EAAqC;AACnCtmB,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADmC,yBACnCA;AACAsmB,cAAAA,aAAAA,CAAAA,gBAAAA,GAFmC,IAEnCA;AAHe;;AAMjBlK,YAAAA,SAAAA,CAAAA,sBAAAA,CAAAA,IAAAA,CACQmL,oBAAAA,IAAwB;AAC5B,kBAAI,KAAJ,SAAA,EAAoB;AAClB,qBAAA,gBAAA,CAAA,MAAA,CAA6B,IAAA,KAAA,CADX,sBACW,CAA7B;;AADkB;AADQ;;AAK5B,oBAAMrL,IAAAA,GAAO,IALe,YAKf,EAAb;AACA,mBAAA,KAAA,GAN4B,IAM5B;AAGA,oBAAMsL,EAAAA,GAAK,OAAOlB,aAAAA,CATU,YASVA,EATU,EAS5B;AAIA,oBAAMmB,aAAAA,GAAgB,IAAA,gBAAA,CAAA,cAAA,CAAmBD,EAAAA,GAAnB,SAAA,EAAA,EAAA,EAbM,IAaN,CAAtB;AACAD,cAAAA,oBAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EAd4B,IAc5BA;AAEA,oBAAMrK,cAAAA,GAAiB,IAAA,gBAAA,CAAA,cAAA,CAAA,EAAA,EAAuBsK,EAAAA,GAAvB,SAAA,EAhBK,IAgBL,CAAvB;AACA,mBAAA,eAAA,GAjB4B,cAiB5B;;AACA,mBAAA,gBAAA,CAlB4B,OAkB5B;;AAEAtK,cAAAA,cAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAiC;AAC/BpJ,gBAAAA,SAAAA,EAAW,KArBe;AAoBK,eAAjCoJ;AArBJd,aAAAA,EAAAA,KAAAA,CAyBSvB,MAAAA,IAAU;AACf,mBAAA,gBAAA,CAAA,MAAA,CACE,IAAA,KAAA,CAAU,mCAAmCA,MAAAA,CAFhC,OAAA,IAEb,CADF;AA1BJuB,aAAAA;AA/LY;;AAkOd1B,UAAAA,OAAAA,GAAU;AACR,iBAAA,SAAA,GADQ,IACR;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AAEnB,mBAAA,UAAA,CAFmB,SAEnB;;AACA,mBAAA,UAAA,GAHmB,IAGnB;AALM;;AAOR0B,YAAAA,SAAAA,CAAAA,YAAAA,CAAAA,MAAAA,CAA8B,KAPtB,KAORA;;AACA,iBAAA,KAAA,GARQ,IAQR;;AACA,gBAAI,KAAJ,eAAA,EAA0B;AACxB,mBAAA,eAAA,CADwB,OACxB;;AACA,mBAAA,eAAA,GAFwB,IAExB;AAXM;AAlOI;;AAoPd,iBAAOsL,QAAP,CAAA,MAAA,EAAwB;AACtB,gBAAI,CAAC/L,MAAAA,EAAL,IAAA,EAAmB;AACjB,oBAAM,IAAA,KAAA,CADW,gDACX,CAAN;AAFoB;;AAItB,gBAAI,KAAA,YAAA,CAAA,GAAA,CAAsBA,MAAAA,CAA1B,IAAI,CAAJ,EAAwC;AACtC,qBAAO,KAAA,YAAA,CAAA,GAAA,CAAsBA,MAAAA,CADS,IAC/B,CAAP;AALoB;;AAOtB,mBAAO,IAAA,SAAA,CAPe,MAOf,CAAP;AA3PY;;AAkQd,qBAAWoL,SAAX,GAAuB;AACrB,gBAAI5K,eAAAA,CAAAA,mBAAAA,CAAJ,SAAA,EAAmC;AACjC,qBAAOA,eAAAA,CAAAA,mBAAAA,CAD0B,SACjC;AAFmB;;AAIrB,gBAAImK,aAAAA,CAAAA,iBAAAA,KAAJ,IAAA,EAA8C;AAC5C,kBAAI,CAAJ,QAAA,CAAA,QAAA,EAAe;AACbnH,iBAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EADa,+CACbA;AAF0C;;AAI5C,qBAAOmH,aAAAA,CAJqC,iBAI5C;AARmB;;AAUrB,kBAAM,IAAA,KAAA,CAVe,+CAUf,CAAN;AA5QY;;AA+Qd,qBAAWqB,+BAAX,GAA6C;AAC3C,gBAAI;AACF,qBAAOzrB,UAAAA,CAAAA,WAAAA,EAAAA,oBAAAA,IADL,IACF;AADF,aAAA,CAEE,OAAA,EAAA,EAAW;AACX,qBADW,IACX;AAJyC;AA/Q/B;;AAwRd,qBAAW0rB,sBAAX,GAAoC;AAClC,kBAAMC,MAAAA,GAAS,YAAY;AACzB,oBAAMC,wBAAAA,GAA2B,KADR,+BACzB;;AAEA,kBAAA,wBAAA,EAA8B;AAE5B,uBAF4B,wBAE5B;AALuB;;AAWzB,kBACE,QAAA,CAAA,QAAA,IAGA,OAAA,OAAA,KAJF,UAAA,EAKE;AAcA,sBAAMjM,MAAAA,GAASkM,IAAAA,CAAAA,SAAAA,CAAAA,CAAgB,KAd/B,SAceA,CAAf;AACA,uBAAOlM,MAAAA,CAfP,oBAeA;AA/BuB;;AAiCzB,oBAAMmM,CAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EAAW,KAjCQ,SAiCnBA,CAAN;AACA,qBAAOlM,MAAAA,CAAAA,WAAAA,CAlCkB,oBAkCzB;AAlCF,aAAA;;AAqCA,mBAAO/f,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,wBAAAA,EAAuC8rB,MAtCZ,EAsC3B9rB,CAAP;AA9TY;;AAAA;;;AAiUiD;AAC/DqgB,UAAAA,SAAAA,CAAAA,YAAAA,GAAyB,YAAY;AACnC+C,aAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EADmC,uEACnCA;AAGA,mBAAO,KAJ4B,SAInC;AAJF/C,WAAAA;AAp0EF;;AAg1EA,cAAA,eAAA,CAAsB;AACpBpgB,UAAAA,WAAAA,CAAAA,cAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,MAAAA,EAAgE;AAC9D,iBAAA,cAAA,GAD8D,cAC9D;AACA,iBAAA,WAAA,GAF8D,WAE9D;AACA,iBAAA,UAAA,GAAkB,IAH4C,UAG5C,EAAlB;AACA,iBAAA,UAAA,GAAkB,IAAA,YAAA,CAAA,UAAA,CAAe;AAC/BqgB,cAAAA,KAAAA,EAAO2E,WAAAA,CADwB,KAAA;AAE/BiH,cAAAA,oBAAAA,EAAsB,KAAA,qBAAA,CAAA,IAAA,CAFS,IAET,CAFS;AAG/BhsB,cAAAA,aAAAA,EAAe0f,MAAAA,CAHgB,aAAA;AAI/BuM,cAAAA,YAAAA,EAAcvM,MAAAA,CAJiB;AAAA,aAAf,CAAlB;AAMA,iBAAA,OAAA,GAV8D,MAU9D;;AAEA,gBAAI,CAACA,MAAAA,CAAL,cAAA,EAA4B;AAC1B,mBAAA,iBAAA,GAAyB,IAAIA,MAAAA,CAAJ,iBAAA,CAA6B;AACpD3a,gBAAAA,OAAAA,EAAS2a,MAAAA,CAD2C,OAAA;AAEpDhB,gBAAAA,YAAAA,EAAcgB,MAAAA,CAFsC;AAAA,eAA7B,CAAzB;AAIA,mBAAA,uBAAA,GAA+B,IAAIA,MAAAA,CAAJ,uBAAA,CAAmC;AAChE3a,gBAAAA,OAAAA,EAAS2a,MAAAA,CANe;AAKwC,eAAnC,CAA/B;AAjB4D;;AAsB9D,iBAAA,SAAA,GAtB8D,KAsB9D;AACA,iBAAA,iBAAA,GAvB8D,IAuB9D;AACA,iBAAA,mBAAA,GAxB8D,IAwB9D;AAEA,iBAAA,cAAA,GA1B8D,aA0B9D;AACA,iBAAA,WAAA,GA3B8D,IA2B9D;AACA,iBAAA,aAAA,GA5B8D,IA4B9D;AAEA,iBAAA,SAAA,GA9B8D,EA8B9D;AACA,iBAAA,YAAA,GA/B8D,EA+B9D;AACA,iBAAA,sBAAA,GAhC8D,CAAA,GAAA,KAAA,CAAA,uBAAA,GAgC9D;AAEA,iBAlC8D,mBAkC9D;AAnCkB;;AAsCpB,cAAIyD,iBAAJ,GAAwB;AACtB,mBAAOrjB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,EAAkC,IADnB,mBAAA,CAAA,iBACmB,EAAlCA,CAAP;AAvCkB;;AA0CpBosB,UAAAA,kBAAAA,CAAAA,MAAAA,EAIE;AAAA,gBAFAhG,cAEA,uEAFiBrf,KAAAA,CAAAA,cAAAA,CAFnBqlB,MAIE;AAAA,gBADAC,QACA,uEAJFD,KAIE;AACA,gBAAI1C,eAAAA,GAAkBnjB,KAAAA,CAAAA,mBAAAA,CADtB,OACA;AACA,gBAAI+lB,YAAAA,GAFJ,EAEA;;AAEA,oBAAA,MAAA;AACE,mBAAA,KAAA;AACE5C,gBAAAA,eAAAA,GAAkBnjB,KAAAA,CAAAA,mBAAAA,CADpB,GACEmjB;AAFJ;;AAIE,mBAAA,SAAA;AAJF;;AAME,mBAAA,OAAA;AACEA,gBAAAA,eAAAA,GAAkBnjB,KAAAA,CAAAA,mBAAAA,CADpB,KACEmjB;AAPJ;;AASE;AACEzlB,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,wCAVT,MAAA,EAUIA;AAVJ;;AAaA,oBAAA,cAAA;AACE,mBAAK8C,KAAAA,CAAAA,cAAAA,CAAL,OAAA;AACE2iB,gBAAAA,eAAAA,IAAmBnjB,KAAAA,CAAAA,mBAAAA,CADrB,mBACEmjB;AAFJ;;AAIE,mBAAK3iB,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AAJF;;AAME,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,YAAA;AACE2iB,gBAAAA,eAAAA,IAAmBnjB,KAAAA,CAAAA,mBAAAA,CADrB,iBACEmjB;AAPJ;;AASE,mBAAK3iB,KAAAA,CAAAA,cAAAA,CAAL,cAAA;AACE2iB,gBAAAA,eAAAA,IAAmBnjB,KAAAA,CAAAA,mBAAAA,CADrB,mBACEmjB;AAEA4C,gBAAAA,YAAAA,GAAe,KAAA,iBAAA,CAHjB,YAGEA;AAZJ;;AAcE;AACEroB,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,gDAfT,cAAA,EAeIA;AAfJ;;AAkBA,gBAAA,QAAA,EAAc;AACZylB,cAAAA,eAAAA,IAAmBnjB,KAAAA,CAAAA,mBAAAA,CADP,MACZmjB;AApCF;;AAuCA,mBAAO;AAAA,cAAA,eAAA;AAEL6C,cAAAA,QAAAA,EAAU,GAAA,eAAA,IAFL,YAAA;AAAA,aAAP;AArFkB;;AA2FpB5N,UAAAA,OAAAA,GAAU;AACR,gBAAI,KAAJ,iBAAA,EAA4B;AAC1B,qBAAO,KAAA,iBAAA,CADmB,OAC1B;AAFM;;AAKR,iBAAA,SAAA,GALQ,IAKR;AACA,iBAAA,iBAAA,GANQ,CAAA,GAAA,KAAA,CAAA,uBAAA,GAMR;;AAEA,gBAAI,KAAJ,mBAAA,EAA8B;AAC5B,mBAAA,mBAAA,CAAA,MAAA,CACE,IAAA,KAAA,CAF0B,iDAE1B,CADF;AATM;;AAcR,kBAAMsK,MAAAA,GAdE,EAcR;;AAGA,iBAAA,MAAA,IAAA,IAAmB,KAAnB,SAAA,EAAmC;AACjC,kBAAA,IAAA,EAAU;AACRA,gBAAAA,MAAAA,CAAAA,IAAAA,CAAYuD,IAAAA,CADJ,QACIA,EAAZvD;AAF+B;AAjB3B;;AAsBR,iBAAA,SAAA,CAAA,MAAA,GAtBQ,CAsBR;AACA,iBAAA,YAAA,CAAA,MAAA,GAvBQ,CAuBR;;AAEA,gBAAI,KAAA,cAAA,CAAJ,mBAAI,CAAJ,EAA8C;AAC5C,mBAAA,iBAAA,CAD4C,aAC5C;AA1BM;;AA6BR,kBAAMwD,UAAAA,GAAa,KAAA,cAAA,CAAA,eAAA,CAAA,WAAA,EA7BX,IA6BW,CAAnB;AACAxD,YAAAA,MAAAA,CAAAA,IAAAA,CA9BQ,UA8BRA;AAEAtB,YAAAA,OAAAA,CAAAA,GAAAA,CAAAA,MAAAA,EAAAA,IAAAA,CAAyB,MAAM;AAC7B,mBAAA,UAAA,CAD6B,KAC7B;AACA,mBAAA,UAAA,CAF6B,KAE7B;AACA,mBAAA,uBAAA,GAH6B,IAG7B;AACA,mBAAA,oBAAA,GAJ6B,IAI7B;;AAEA,kBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAA,cAAA,CAAA,iBAAA,CACE,IAAA,KAAA,CAAA,cAAA,CAFqB,wBAErB,CADF;AAP2B;;AAY7B,kBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAA,cAAA,CADuB,OACvB;AACA,qBAAA,cAAA,GAFuB,IAEvB;AAd2B;;AAgB7B,mBAAA,iBAAA,CAhB6B,OAgB7B;AAhBFA,aAAAA,EAiBG,KAAA,iBAAA,CAjDK,MAgCRA;AAkBA,mBAAO,KAAA,iBAAA,CAlDC,OAkDR;AA7IkB;;AAgJpB+E,UAAAA,mBAAAA,GAAsB;AACpB,kBAAM;AAAA,cAAA,cAAA;AAAA,cAAA;AAAA,gBADc,IACpB;AAEAvL,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,WAAAA,EAA+B,CAAA,IAAA,EAAA,IAAA,KAAgB;AAC7C/d,eAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KADFA,cAAAA,EAD6C,iDAC7CA;AAIA,mBAAA,WAAA,GAAmB,KAAA,cAAA,CAL0B,aAK1B,EAAnB;;AACA,mBAAA,WAAA,CAAA,UAAA,GAA8BupB,GAAAA,IAAO;AACnC,qBAAA,aAAA,GAAqB;AACnBC,kBAAAA,MAAAA,EAAQD,GAAAA,CADW,MAAA;AAEnBE,kBAAAA,KAAAA,EAAOF,GAAAA,CAFY;AAAA,iBAArB;AADF,eAAA;;AAMAG,cAAAA,IAAAA,CAAAA,MAAAA,GAAc,MAAM;AAClB,qBAAA,WAAA,CAAA,IAAA,GAAA,IAAA,CAEQ,kBAA2B;AAAA,sBAAjB;AAAA,oBAAA,KAAA;AAAV,oBAAA;AAAU,mBAAiB;;AAC/B,sBAAA,IAAA,EAAU;AACRA,oBAAAA,IAAAA,CADQ,KACRA;AADQ;AADqB;;AAK/B1pB,mBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEsc,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EADFtc,KACEsc,CADFtc,EAL+B,sCAK/BA;AAMA0pB,kBAAAA,IAAAA,CAAAA,OAAAA,CAAa,IAAA,UAAA,CAAbA,KAAa,CAAbA,EAAAA,CAAAA,EAAuC,CAXR,KAWQ,CAAvCA;AAbJ,iBAAA,EAAA,KAAA,CAeShO,MAAAA,IAAU;AACfgO,kBAAAA,IAAAA,CAAAA,KAAAA,CADe,MACfA;AAhBJ,iBAAA;AADFA,eAAAA;;AAqBAA,cAAAA,IAAAA,CAAAA,QAAAA,GAAgBhO,MAAAA,IAAU;AACxB,qBAAA,WAAA,CAAA,MAAA,CADwB,MACxB;;AAEAgO,gBAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAiBC,WAAAA,IAAe;AAC9B,sBAAI,KAAJ,SAAA,EAAoB;AAAA;AADU;;AAI9B,wBAJ8B,WAI9B;AAJFD,iBAAAA;AAHFA,eAAAA;AAjCF3L,aAAAA;AA6CAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,oBAAAA,EAAwCrgB,IAAAA,IAAQ;AAC9C,oBAAMksB,iBAAAA,GADwC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAC9C;AACA,oBAAMC,UAAAA,GAAa,KAF2B,WAE9C;AACAA,cAAAA,UAAAA,CAAAA,YAAAA,CAAAA,IAAAA,CAA6B,MAAM;AAGjC,oBAAI,CAACA,UAAAA,CAAD,oBAAA,IAAoC,CAACA,UAAAA,CAAzC,gBAAA,EAAsE;AACpE,sBAAI,KAAA,aAAA,IAAsBhI,WAAAA,CAA1B,UAAA,EAAkD;AAChDA,oBAAAA,WAAAA,CAAAA,UAAAA,CAAuB,KADyB,aAChDA;AAFkE;;AAIpEgI,kBAAAA,UAAAA,CAAAA,UAAAA,GAAwBN,GAAAA,IAAO;AAC7B,wBAAI1H,WAAAA,CAAJ,UAAA,EAA4B;AAC1BA,sBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AACrB2H,wBAAAA,MAAAA,EAAQD,GAAAA,CADa,MAAA;AAErBE,wBAAAA,KAAAA,EAAOF,GAAAA,CAFc;AAAA,uBAAvB1H;AAF2B;AAA/BgI,mBAAAA;AAP+B;;AAiBjCD,gBAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AACxBE,kBAAAA,oBAAAA,EAAsBD,UAAAA,CADE,oBAAA;AAExBE,kBAAAA,gBAAAA,EAAkBF,UAAAA,CAFM,gBAAA;AAGxBG,kBAAAA,aAAAA,EAAeH,UAAAA,CAHS;AAAA,iBAA1BD;AAjBFC,eAAAA,EAsBGD,iBAAAA,CAzB2C,MAG9CC;AAwBA,qBAAOD,iBAAAA,CA3BuC,OA2B9C;AA3BF7L,aAAAA;AA8BAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,gBAAAA,EAAoC,CAAA,IAAA,EAAA,IAAA,KAAgB;AAClD/d,eAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KADFA,cAAAA,EADkD,sDAClDA;;AAIA,oBAAMiqB,WAAAA,GAAc,KAAA,cAAA,CAAA,cAAA,CAClBvsB,IAAAA,CADkB,KAAA,EAElBA,IAAAA,CAPgD,GAK9B,CAApB;;AAeA,kBAAI,CAAJ,WAAA,EAAkB;AAChBgsB,gBAAAA,IAAAA,CADgB,KAChBA;AADgB;AApBgC;;AAyBlDA,cAAAA,IAAAA,CAAAA,MAAAA,GAAc,MAAM;AAClBO,gBAAAA,WAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CAEQ,kBAA2B;AAAA,sBAAjB;AAAA,oBAAA,KAAA;AAAV,oBAAA;AAAU,mBAAiB;;AAC/B,sBAAA,IAAA,EAAU;AACRP,oBAAAA,IAAAA,CADQ,KACRA;AADQ;AADqB;;AAK/B1pB,mBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEsc,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EADFtc,KACEsc,CADFtc,EAL+B,2CAK/BA;AAIA0pB,kBAAAA,IAAAA,CAAAA,OAAAA,CAAa,IAAA,UAAA,CAAbA,KAAa,CAAbA,EAAAA,CAAAA,EAAuC,CATR,KASQ,CAAvCA;AAXJO,iBAAAA,EAAAA,KAAAA,CAaSvO,MAAAA,IAAU;AACfgO,kBAAAA,IAAAA,CAAAA,KAAAA,CADe,MACfA;AAdJO,iBAAAA;AADFP,eAAAA;;AAmBAA,cAAAA,IAAAA,CAAAA,QAAAA,GAAgBhO,MAAAA,IAAU;AACxBuO,gBAAAA,WAAAA,CAAAA,MAAAA,CADwB,MACxBA;AAEAP,gBAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAiBC,WAAAA,IAAe;AAC9B,sBAAI,KAAJ,SAAA,EAAoB;AAAA;AADU;;AAI9B,wBAJ8B,WAI9B;AAJFD,iBAAAA;AAHFA,eAAAA;AA5CF3L,aAAAA;AAwDAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,QAAAA,EAA4B,UAAiB;AAAA,kBAAhB;AAAD,gBAAA;AAAC,eAAgB;AAC3C,mBAAA,SAAA,GAAiBmM,OAAAA,CAD0B,QAC3C;AACA,mBAAA,WAAA,GAAmBA,OAAAA,CAFwB,UAE3C;AACA,qBAAOA,OAAAA,CAHoC,UAG3C;;AACArI,cAAAA,WAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAgC,IAAA,gBAAA,CAAA,OAAA,EAJW,IAIX,CAAhCA;AAJF9D,aAAAA;AAOAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,cAAAA,EAAkC,UAAA,EAAA,EAAc;AAC9C,kBAD8C,MAC9C;;AACA,sBAAQoM,EAAAA,CAAR,IAAA;AACE,qBAAA,mBAAA;AACEzO,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,iBAAA,CAAsByO,EAAAA,CAAtB,OAAA,EAAkCA,EAAAA,CAD7C,IACW,CAATzO;AAFJ;;AAIE,qBAAA,qBAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,mBAAA,CAAwByO,EAAAA,CADnC,OACW,CAATzO;AALJ;;AAOE,qBAAA,qBAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,mBAAA,CAAwByO,EAAAA,CADnC,OACW,CAATzO;AARJ;;AAUE,qBAAA,6BAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,2BAAA,CAAgCyO,EAAAA,CAAhC,OAAA,EAA4CA,EAAAA,CADvD,MACW,CAATzO;AAXJ;;AAaE,qBAAA,uBAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,qBAAA,CAA0ByO,EAAAA,CAA1B,OAAA,EAAsCA,EAAAA,CADjD,OACW,CAATzO;AAdJ;;AAgBE;AACE7G,mBAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAjBJ,wCAiBIA;AAjBJ;;AAmBAgN,cAAAA,WAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CArB8C,MAqB9CA;AArBF9D,aAAAA;AAwBAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,iBAAAA,EAAqCqM,SAAAA,IAAa;AAChD,mBAAA,mBAAA,GADgD,CAAA,GAAA,KAAA,CAAA,uBAAA,GAChD;;AAEA,kBAAIvI,WAAAA,CAAJ,UAAA,EAA4B;AAC1B,sBAAMwI,cAAAA,GAAiBjM,QAAAA,IAAY;AACjC,uBAAA,mBAAA,CAAA,OAAA,CAAiC;AADA,oBAAA;AACA,mBAAjC;AADF,iBAAA;;AAKA,oBAAI;AACFyD,kBAAAA,WAAAA,CAAAA,UAAAA,CAAAA,cAAAA,EAAuCuI,SAAAA,CADrC,IACFvI;AADF,iBAAA,CAEE,OAAA,EAAA,EAAW;AACX,uBAAA,mBAAA,CAAA,MAAA,CADW,EACX;AATwB;AAA5B,eAAA,MAWO;AACL,qBAAA,mBAAA,CAAA,MAAA,CACE,IAAA,KAAA,CAAA,iBAAA,CAAsBuI,SAAAA,CAAtB,OAAA,EAAyCA,SAAAA,CAFtC,IAEH,CADF;AAf8C;;AAmBhD,qBAAO,KAAA,mBAAA,CAnByC,OAmBhD;AAnBFrM,aAAAA;AAsBAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,YAAAA,EAAgCrgB,IAAAA,IAAQ;AAGtC,kBAAImkB,WAAAA,CAAJ,UAAA,EAA4B;AAC1BA,gBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AACrB2H,kBAAAA,MAAAA,EAAQ9rB,IAAAA,CADa,MAAA;AAErB+rB,kBAAAA,KAAAA,EAAO/rB,IAAAA,CAFc;AAAA,iBAAvBmkB;AAJoC;;AAStC,mBAAA,sBAAA,CAAA,OAAA,CATsC,IAStC;AATF9D,aAAAA;AAYAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,iBAAAA,EAAqCrgB,IAAAA,IAAQ;AAC3C,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADuB;;AAK3C,oBAAM0rB,IAAAA,GAAO,KAAA,SAAA,CAAe1rB,IAAAA,CALe,SAK9B,CAAb;;AACA0rB,cAAAA,IAAAA,CAAAA,gBAAAA,CAAsB1rB,IAAAA,CAAtB0rB,YAAAA,EAAyC1rB,IAAAA,CANE,QAM3C0rB;AANFrL,aAAAA;AASAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,WAAAA,EAA+BrgB,IAAAA,IAAQ;AACrC,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADiB;;AAKrC,oBAAM,CAAA,EAAA,EAAA,IAAA,EAAA,YAAA,IAL+B,IAKrC;;AACA,kBAAI,KAAA,UAAA,CAAA,GAAA,CAAJ,EAAI,CAAJ,EAA6B;AAAA;AANQ;;AAUrC,sBAAA,IAAA;AACE,qBAAA,MAAA;AACE,wBAAM8e,MAAAA,GAAS,KADjB,OACE;;AAEA,sBAAI,WAAJ,YAAA,EAA6B;AAC3B,0BAAM8N,aAAAA,GAAgBC,YAAAA,CADK,KAC3B;AACA1pB,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,8BAFsB,aAAA,EAE3BA;AACA,yBAAA,UAAA,CAAA,OAAA,CAAA,EAAA,EAH2B,aAG3B;AAH2B;AAH/B;;AAUE,sBAAI2pB,YAAAA,GAVN,IAUE;;AACA,sBAAIhO,MAAAA,CAAAA,MAAAA,IAAiBzf,UAAAA,CAAAA,aAAAA,EAArB,OAAA,EAAwD;AACtDytB,oBAAAA,YAAAA,GAAe;AACbC,sBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwB;AACtB1tB,wBAAAA,UAAAA,CAAAA,aAAAA,CAAAA,SAAAA,CAAAA,IAAAA,EADsB,GACtBA;AAFW;;AAAA,qBAAfytB;AAZJ;;AAkBE,wBAAMhX,IAAAA,GAAO,IAAA,YAAA,CAAA,cAAA,CAAA,YAAA,EAAiC;AAC5CuD,oBAAAA,eAAAA,EAAiByF,MAAAA,CAD2B,eAAA;AAE5C+B,oBAAAA,eAAAA,EAAiB/B,MAAAA,CAF2B,eAAA;AAG5CkC,oBAAAA,YAAAA,EAAclC,MAAAA,CAH8B,YAAA;AAI5CsM,oBAAAA,oBAAAA,EAAsB,KAAA,qBAAA,CAAA,IAAA,CAJsB,IAItB,CAJsB;AAAA,oBAAA;AAAA,mBAAjC,CAAb;AAQA,uBAAA,UAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAESpN,MAAAA,IAAU;AACf,2BAAOqC,cAAAA,CAAAA,eAAAA,CAAAA,cAAAA,EAA+C;AADvC,sBAAA;AACuC,qBAA/CA,CAAP;AAHJ,mBAAA,EAAA,OAAA,CAKW,MAAM;AACb,wBAAI,CAACvB,MAAAA,CAAD,mBAAA,IAA+BhJ,IAAAA,CAAnC,IAAA,EAA8C;AAM5CA,sBAAAA,IAAAA,CAAAA,IAAAA,GAN4C,IAM5CA;AAPW;;AASb,yBAAA,UAAA,CAAA,OAAA,CAAA,EAAA,EATa,IASb;AAdJ,mBAAA;AA3BJ;;AA4CE,qBA5CF,UA4CE;AACA,qBAAA,OAAA;AACE,uBAAA,UAAA,CAAA,OAAA,CAAA,EAAA,EADF,YACE;AA9CJ;;AAgDE;AACE,wBAAM,IAAA,KAAA,CAAU,kCAjDpB,IAAA,EAiDU,CAAN;AAjDJ;AAVFuK,aAAAA;AA+DAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAyBrgB,IAAAA,IAAQ;AAC/B,kBAAI,KAAJ,SAAA,EAAoB;AAElB,uBAFkB,SAElB;AAH6B;;AAM/B,oBAAM,CAAA,EAAA,EAAA,SAAA,EAAA,IAAA,EAAA,SAAA,IANyB,IAM/B;AACA,oBAAMgtB,SAAAA,GAAY,KAAA,SAAA,CAPa,SAOb,CAAlB;;AACA,kBAAIA,SAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAJ,EAAIA,CAAJ,EAA4B;AAC1B,uBAD0B,SAC1B;AAT6B;;AAY/B,sBAAA,IAAA;AACE,qBAAA,OAAA;AACEA,kBAAAA,SAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EADF,SACEA;AAGA,wBAAMC,uBAAAA,GAJR,OAIE;;AACA,sBAAIC,SAAAA,EAAAA,IAAAA,EAAAA,MAAAA,GAAJ,uBAAA,EAAuD;AACrDF,oBAAAA,SAAAA,CAAAA,kBAAAA,GADqD,IACrDA;AANJ;;AADF;;AAUE,qBAAA,SAAA;AACEA,kBAAAA,SAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EADF,SACEA;AAXJ;;AAaE;AACE,wBAAM,IAAA,KAAA,CAAU,2BAdpB,IAAA,EAcU,CAAN;AAdJ;;AAgBA,qBA5B+B,SA4B/B;AA5BF3M,aAAAA;AA+BAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,aAAAA,EAAiCrgB,IAAAA,IAAQ;AACvC,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADmB;;AAKvC,kBAAImkB,WAAAA,CAAJ,UAAA,EAA4B;AAC1BA,gBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AACrB2H,kBAAAA,MAAAA,EAAQ9rB,IAAAA,CADa,MAAA;AAErB+rB,kBAAAA,KAAAA,EAAO/rB,IAAAA,CAFc;AAAA,iBAAvBmkB;AANqC;AAAzC9D,aAAAA;AAaAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,oBAAAA,EAEE,KAAA,qBAAA,CAAA,IAAA,CA7TkB,IA6TlB,CAFFA;AAKAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,kBAAAA,EAAsCrgB,IAAAA,IAAQ;AAC5C,kBAAI,KAAJ,SAAA,EAAoB;AAClB,uBAAO6mB,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADJ,uBACI,CAAfA,CAAP;AAF0C;;AAI5C,kBAAI,CAAC,KAAL,iBAAA,EAA6B;AAC3B,uBAAOA,OAAAA,CAAAA,MAAAA,CACL,IAAA,KAAA,CAFyB,wEAEzB,CADKA,CAAP;AAL0C;;AAW5C,qBAAO,KAAA,iBAAA,CAAA,KAAA,CAXqC,IAWrC,CAAP;AAXFxG,aAAAA;AAcAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,uBAAAA,EAA2CrgB,IAAAA,IAAQ;AACjD,kBAAI,KAAJ,SAAA,EAAoB;AAClB,uBAAO6mB,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADJ,uBACI,CAAfA,CAAP;AAF+C;;AAIjD,kBAAI,CAAC,KAAL,uBAAA,EAAmC;AACjC,uBAAOA,OAAAA,CAAAA,MAAAA,CACL,IAAA,KAAA,CAF+B,8EAE/B,CADKA,CAAP;AAL+C;;AAWjD,qBAAO,KAAA,uBAAA,CAAA,KAAA,CAX0C,IAW1C,CAAP;AAXFxG,aAAAA;AA9dkB;;AA6epB8M,UAAAA,qBAAAA,SAAqC;AAAA,gBAAf;AAAtBA,cAAAA;AAAsB,aAAe;;AACnC,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AADe;;AAInC,gBAAI,KAAA,WAAA,CAAJ,oBAAA,EAA2C;AACzC,mBAAA,WAAA,CAAA,oBAAA,CADyC,SACzC;AALiC;AA7ejB;;AAsfpBtJ,UAAAA,OAAAA,GAAU;AACR,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EADC,IACD,CAAP;AAvfkB;;AA0fpBjB,UAAAA,OAAAA,CAAAA,UAAAA,EAAoB;AAClB,gBACE,CAAC1L,MAAAA,CAAAA,SAAAA,CAAD,UAACA,CAAD,IACAuN,UAAAA,IADA,CAAA,IAEAA,UAAAA,GAAa,KAHf,SAAA,EAIE;AACA,qBAAOoC,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADtB,sBACsB,CAAfA,CAAP;AANgB;;AASlB,kBAAMH,SAAAA,GAAYjC,UAAAA,GATA,CASlB;;AACA,gBAAIiC,SAAAA,IAAa,KAAjB,YAAA,EAAoC;AAClC,qBAAO,KAAA,YAAA,CAD2B,SAC3B,CAAP;AAXgB;;AAalB,kBAAMjF,OAAAA,GAAU,KAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EACc;AADd,cAAA;AACc,aADd,EAAA,IAAA,CAIR2L,QAAAA,IAAY;AAChB,kBAAI,KAAJ,SAAA,EAAoB;AAClB,sBAAM,IAAA,KAAA,CADY,qBACZ,CAAN;AAFc;;AAIhB,oBAAM1B,IAAAA,GAAO,IAAA,YAAA,CAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAIX,KAAA,OAAA,CAJW,aAAA,EAKX,KAAA,OAAA,CATc,MAIH,CAAb;AAOA,mBAAA,SAAA,CAAA,SAAA,IAXgB,IAWhB;AACA,qBAZgB,IAYhB;AAhBJ,aAAgB,CAAhB;AAkBA,iBAAA,YAAA,CAAA,SAAA,IA/BkB,OA+BlB;AACA,mBAhCkB,OAgClB;AA1hBkB;;AA6hBpB7I,UAAAA,YAAAA,CAAAA,GAAAA,EAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,cAAA,EAAoD;AAD3C,cAAA;AAC2C,aAApD,CAAP;AA9hBkB;;AAmiBpBkC,UAAAA,cAAAA,CAAAA,SAAAA,EAAAA,MAAAA,EAAkC;AAChC,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EAAsD;AAAA,cAAA,SAAA;AAAA,cAAA;AAAA,aAAtD,CAAP;AApiBkB;;AA0iBpBX,UAAAA,YAAAA,GAAe;AACb,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,cAAA,EAC4B;AAC/B1B,cAAAA,SAAAA,EAAW,CAAC,CAAC,KADkB,WAAA;AAE/BF,cAAAA,QAAAA,EAAU,KAFqB,SAAA;AAG/BD,cAAAA,iBAAAA,EAAmB,KAAA,iBAAA,CAHY,YAAA;AAI/B8K,cAAAA,QAAAA,EAAU,KAAA,WAAA,EAAA,QAAA,IAJqB;AAAA,aAD5B,EAAA,OAAA,CAOI,MAAM;AACb,mBAAA,iBAAA,CADa,aACb;AARJ,aAAO,CAAP;AA3iBkB;;AAujBpBhJ,UAAAA,eAAAA,GAAkB;AAChB,mBAAQ,KAAA,uBAAA,KACN,KAAA,cAAA,CAAA,eAAA,CAAA,iBAAA,EAFc,IAEd,CADF;AAxjBkB;;AA4jBpBC,UAAAA,YAAAA,GAAe;AACb,mBAAQ,KAAA,oBAAA,KAA8B,KAAA,cAAA,CAAA,eAAA,CAAA,cAAA,EADzB,IACyB,CAAtC;AA7jBkB;;AAmkBpBC,UAAAA,sBAAAA,GAAyB;AACvB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,wBAAA,EADgB,IAChB,CAAP;AApkBkB;;AAukBpBzB,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,iBAAA,EADS,IACT,CAAP;AAxkBkB;;AA2kBpBC,UAAAA,cAAAA,CAAAA,EAAAA,EAAmB;AACjB,gBAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAC1B,qBAAO8D,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADI,8BACJ,CAAfA,CAAP;AAFe;;AAIjB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EAAsD;AAJ5C,cAAA;AAI4C,aAAtD,CAAP;AA/kBkB;;AAolBpB7D,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AArlBkB;;AAwlBpBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AAzlBkB;;AA4lBpBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,aAAA,EADK,IACL,CAAP;AA7lBkB;;AAgmBpBC,UAAAA,oBAAAA,GAAuB;AACrB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,sBAAA,EADc,IACd,CAAP;AAjmBkB;;AAomBpBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AArmBkB;;AAwmBpBC,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EADQ,IACR,CAAP;AAzmBkB;;AA4mBpBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AA7mBkB;;AAgnBpBgK,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,iBAAA,EADS,IACT,CAAP;AAjnBkB;;AAonBpBC,UAAAA,gBAAAA,CAAAA,SAAAA,EAA4B;AAC1B,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,kBAAA,EAAwD;AADrC,cAAA;AACqC,aAAxD,CAAP;AArnBkB;;AA0nBpBtF,UAAAA,aAAAA,CAAAA,SAAAA,EAAyB;AACvB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EAAqD;AADrC,cAAA;AACqC,aAArD,CAAP;AA3nBkB;;AAgoBpBzE,UAAAA,UAAAA,GAAa;AACX,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,YAAA,EADI,IACJ,CAAP;AAjoBkB;;AAooBpBC,UAAAA,wBAAAA,GAA2B;AACzB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,0BAAA,EAAA,IAAA,EAAA,IAAA,CAEC+J,OAAAA,IAAW;AACf,qBAAO,IAAA,wBAAA,CAAA,qBAAA,CADQ,OACR,CAAP;AAHJ,aAAO,CAAP;AAroBkB;;AA4oBpB9J,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EADQ,IACR,CAAP;AA7oBkB;;AAgpBpBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,aAAA,EAAA,IAAA,EAAA,IAAA,CAEC6J,OAAAA,IAAW;AACf,qBAAO;AACLhD,gBAAAA,IAAAA,EAAMgD,OAAAA,CADD,CACCA,CADD;AAELC,gBAAAA,QAAAA,EAAUD,OAAAA,CAAAA,CAAAA,CAAAA,GAAa,IAAA,SAAA,CAAA,QAAA,CAAaA,OAAAA,CAA1BA,CAA0BA,CAAb,CAAbA,GAFL,IAAA;AAGLzN,gBAAAA,0BAAAA,EAA4B,KAAA,WAAA,EAAA,QAAA,IAHvB,IAAA;AAILuM,gBAAAA,aAAAA,EAAe,KAAA,WAAA,EAAA,aAAA,IAJV;AAAA,eAAP;AAHJ,aAAO,CAAP;AAjpBkB;;AA6pBpB1I,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,aAAA,EADK,IACL,CAAP;AA9pBkB;;AAiqBpBG,UAAAA,QAAAA,GAAW;AACT,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,UAAA,EADE,IACF,CAAP;AAlqBkB;;AAqqBpB,gBAAM2J,YAAN,GAA4C;AAAA,gBAAzBzJ,eAAyB,uEAA5C,KAA4C;AAC1C,kBAAM,KAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EADoC,IACpC,CAAN;;AAEA,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AAHsB;;AAM1C,iBAAK,IAAIphB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK,KAAA,SAAA,CAArB,MAAA,EAA4CC,CAAAA,GAA5C,EAAA,EAAoDA,CAApD,EAAA,EAAyD;AACvD,oBAAM6oB,IAAAA,GAAO,KAAA,SAAA,CAD0C,CAC1C,CAAb;;AACA,kBAAI,CAAJ,IAAA,EAAW;AAAA;AAF4C;;AAKvD,oBAAMiC,iBAAAA,GAAoBjC,IAAAA,CAL6B,OAK7BA,EAA1B;;AAEA,kBAAI,CAAJ,iBAAA,EAAwB;AACtB,sBAAM,IAAA,KAAA,CAAU,sBAAsB7oB,CAAAA,GADhB,CAAA,0BAChB,CAAN;AARqD;AANf;;AAiB1C,iBAAA,UAAA,CAjB0C,KAiB1C;;AACA,gBAAI,CAAJ,eAAA,EAAsB;AACpB,mBAAA,UAAA,CADoB,KACpB;AAnBwC;;AAqB1C,iBAAA,uBAAA,GArB0C,IAqB1C;AACA,iBAAA,oBAAA,GAtB0C,IAsB1C;AA3rBkB;;AA8rBpB,cAAIqhB,aAAJ,GAAoB;AAClB,kBAAMpF,MAAAA,GAAS,KADG,OAClB;AACA,mBAAO,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,eAAA,EAA8B;AACnC6B,cAAAA,gBAAAA,EAAkB7B,MAAAA,CADiB,gBAAA;AAEnCoC,cAAAA,SAAAA,EAAWpC,MAAAA,CAFwB;AAAA,aAA9B,CAAP;AAhsBkB;;AAAA;;AA6sBtB,cAAA,UAAA,CAAiB;AACf3f,UAAAA,WAAAA,GAAc;AACZ,iBAAA,KAAA,GAAasE,MAAAA,CAAAA,MAAAA,CADD,IACCA,CAAb;AAFa;;AASfmqB,UAAAA,UAAAA,CAAAA,KAAAA,EAAkB;AAChB,gBAAI,KAAA,KAAA,CAAJ,KAAI,CAAJ,EAAuB;AACrB,qBAAO,KAAA,KAAA,CADc,KACd,CAAP;AAFc;;AAIhB,mBAAQ,KAAA,KAAA,CAAA,KAAA,IAAoB;AAC1BpR,cAAAA,UAAAA,EAD0B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAAA;AAE1Bxc,cAAAA,IAAAA,EAF0B,IAAA;AAG1B6tB,cAAAA,QAAAA,EAH0B;AAAA,aAA5B;AAba;;AA4BfnR,UAAAA,GAAAA,CAAAA,KAAAA,EAA4B;AAAA,gBAAjB4J,QAAiB,uEAA5B5J,IAA4B;;AAG1B,gBAAA,QAAA,EAAc;AACZ,mBAAA,UAAA,CAAA,KAAA,EAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CADY,QACZ;;AACA,qBAFY,IAEZ;AALwB;;AAS1B,kBAAM3D,GAAAA,GAAM,KAAA,KAAA,CATc,KASd,CAAZ;;AAGA,gBAAI,CAAA,GAAA,IAAQ,CAACA,GAAAA,CAAb,QAAA,EAA2B;AACzB,oBAAM,IAAA,KAAA,CAAU,6CADS,KAAA,GACnB,CAAN;AAbwB;;AAe1B,mBAAOA,GAAAA,CAfmB,IAe1B;AA3Ca;;AA8Cf+U,UAAAA,GAAAA,CAAAA,KAAAA,EAAW;AACT,kBAAM/U,GAAAA,GAAM,KAAA,KAAA,CADH,KACG,CAAZ;AACA,mBAAOA,GAAAA,EAAAA,QAAAA,IAFE,KAET;AAhDa;;AAsDf9Y,UAAAA,OAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EAAqB;AACnB,kBAAM8Y,GAAAA,GAAM,KAAA,UAAA,CADO,KACP,CAAZ;;AAEAA,YAAAA,GAAAA,CAAAA,QAAAA,GAHmB,IAGnBA;AACAA,YAAAA,GAAAA,CAAAA,IAAAA,GAJmB,IAInBA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CALmB,IAKnBA;AA3Da;;AA8DfgV,UAAAA,KAAAA,GAAQ;AACN,iBAAA,KAAA,GAAatqB,MAAAA,CAAAA,MAAAA,CADP,IACOA,CAAb;AA/Da;;AAAA;;AAsEjB,cAAA,UAAA,CAAiB;AACftE,UAAAA,WAAAA,CAAAA,kBAAAA,EAAgC;AAC9B,iBAAA,mBAAA,GAD8B,kBAC9B;AAQA,iBAAA,UAAA,GAT8B,IAS9B;AAVa;;AAiBf,cAAIsiB,OAAJ,GAAc;AACZ,mBAAO,KAAA,mBAAA,CAAA,UAAA,CADK,OACZ;AAlBa;;AA0BfuM,UAAAA,MAAAA,GAAS;AACP,iBAAA,mBAAA,CADO,MACP;AA3Ba;;AAAA;;;;AAmCjB,cAAA,kBAAA,CAAyB;AACvB,qBAAWC,WAAX,GAAyB;AACvB,mBAAO/uB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,aAAAA,EAA4B,IADZ,OACY,EAA5BA,CAAP;AAFqB;;AAKvBC,UAAAA,WAAAA,SAUG;AAAA,gBAVS;AAAA,cAAA,QAAA;AAAA,cAAA,MAAA;AAAA,cAAA,IAAA;AAAA,cAAA,UAAA;AAAA,cAAA,YAAA;AAAA,cAAA,SAAA;AAAA,cAAA,aAAA;AAQVwnB,cAAAA,wBAAAA,GARU,KAAA;AASVnC,cAAAA,MAAAA,GATFrlB;AAAY,aAUT;AACD,iBAAA,QAAA,GADC,QACD;AACA,iBAAA,MAAA,GAFC,MAED;AACA,iBAAA,IAAA,GAHC,IAGD;AACA,iBAAA,UAAA,GAJC,UAID;AACA,iBAAA,eAAA,GALC,IAKD;AACA,iBAAA,YAAA,GANC,YAMD;AACA,iBAAA,UAAA,GAPC,SAOD;AACA,iBAAA,aAAA,GARC,aAQD;AACA,iBAAA,OAAA,GATC,MASD;AAEA,iBAAA,OAAA,GAXC,KAWD;AACA,iBAAA,qBAAA,GAZC,IAYD;AACA,iBAAA,aAAA,GAbC,KAaD;AACA,iBAAA,yBAAA,GACEwnB,wBAAAA,KAAAA,IAAAA,IAAqC,OAAA,MAAA,KAftC,WAcD;AAEA,iBAAA,SAAA,GAhBC,KAgBD;AACA,iBAAA,UAAA,GAjBC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAiBD;AACA,iBAAA,IAAA,GAAY,IAAA,UAAA,CAlBX,IAkBW,CAAZ;AAEA,iBAAA,YAAA,GAAoB,KAAA,MAAA,CAAA,IAAA,CApBnB,IAoBmB,CAApB;AACA,iBAAA,cAAA,GAAsB,KAAA,SAAA,CAAA,IAAA,CArBrB,IAqBqB,CAAtB;AACA,iBAAA,kBAAA,GAA0B,KAAA,aAAA,CAAA,IAAA,CAtBzB,IAsByB,CAA1B;AACA,iBAAA,UAAA,GAAkB,KAAA,KAAA,CAAA,IAAA,CAvBjB,IAuBiB,CAAlB;AACA,iBAAA,OAAA,GAAe7H,MAAAA,CAAAA,aAAAA,CAxBd,MAwBD;AAvCqB;;AA0CvB,cAAIoP,SAAJ,GAAgB;AACd,mBAAO,KAAA,UAAA,CAAA,OAAA,CAAA,KAAA,CAA8B,YADvB,CACd,CAAO,CAAP;AA3CqB;;AAiDvBC,UAAAA,kBAAAA,SAAoE;AAAA,gBAAjD;AAAEC,cAAAA,YAAAA,GAAF,KAAA;AAAnBD,cAAAA;AAAmB,aAAiD;;AAClE,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AAD8C;;AAIlE,gBAAI,KAAJ,OAAA,EAAkB;AAChB,kBAAIE,kBAAAA,CAAAA,WAAAA,CAAAA,GAAAA,CAAmC,KAAvC,OAAIA,CAAJ,EAAsD;AACpD,sBAAM,IAAA,KAAA,CACJ,qEAAA,0DAAA,GAFkD,yBAC9C,CAAN;AAFc;;AAQhBA,cAAAA,kBAAAA,CAAAA,WAAAA,CAAAA,GAAAA,CAAmC,KARnB,OAQhBA;AAZgE;;AAelE,gBAAI,KAAA,OAAA,IAAgBhvB,UAAAA,CAAAA,cAAAA,EAApB,OAAA,EAAwD;AACtD,mBAAA,OAAA,GAAeA,UAAAA,CAAAA,cAAAA,CAAAA,MAAAA,CAAiC,KADM,UACvCA,CAAf;AACA,mBAAA,OAAA,CAAA,IAAA,CAAkB,KAFoC,YAEtD;AACA,mBAAA,OAAA,CAAA,cAAA,GAA8B,KAAA,OAAA,CAHwB,iBAGxB,EAA9B;AAlBgE;;AAoBlE,kBAAM;AAAA,cAAA,aAAA;AAAA,cAAA,QAAA;AAAA,cAAA,SAAA;AAAA,cAAA,UAAA;AAAA,cAAA;AAAA,gBACJ,KArBgE,MAoBlE;AAGA,iBAAA,GAAA,GAAW,IAAA,OAAA,CAAA,cAAA,CAAA,aAAA,EAET,KAFS,UAAA,EAGT,KAHS,IAAA,EAIT,KAJS,aAAA,EAAA,UAAA,EAvBuD,qBAuBvD,CAAX;AAQA,iBAAA,GAAA,CAAA,YAAA,CAAsB;AAAA,cAAA,SAAA;AAAA,cAAA,QAAA;AAAA,cAAA,YAAA;AAAA,cAAA;AAAA,aAAtB;AAMA,iBAAA,eAAA,GArCkE,CAqClE;AACA,iBAAA,aAAA,GAtCkE,IAsClE;;AACA,gBAAI,KAAJ,qBAAA,EAAgC;AAC9B,mBAD8B,qBAC9B;AAxCgE;AAjD7C;;AA6FvB2uB,UAAAA,MAAAA,GAAqB;AAAA,gBAAd5H,KAAc,uEAArB4H,IAAqB;AACnB,iBAAA,OAAA,GADmB,KACnB;AACA,iBAAA,SAAA,GAFmB,IAEnB;;AACA,gBAAI,KAAJ,GAAA,EAAc;AACZ,mBAAA,GAAA,CADY,UACZ;AAJiB;;AAMnB,gBAAI,KAAJ,OAAA,EAAkB;AAChBK,cAAAA,kBAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAAsC,KADtB,OAChBA;AAPiB;;AASnB,iBAAA,QAAA,CACEjI,KAAAA,IACE,IAAA,cAAA,CAAA,2BAAA,CACE,6BAA6B,KAAA,UAAA,GAD/B,CAAA,EAAA,EAXe,QAWf,CAFJ;AAtGqB;;AA+GvBkI,UAAAA,mBAAAA,GAAsB;AACpB,gBAAI,CAAC,KAAL,aAAA,EAAyB;AACvB,kBAAI,CAAC,KAAL,qBAAA,EAAiC;AAC/B,qBAAA,qBAAA,GAA6B,KADE,cAC/B;AAFqB;;AAAA;AADL;;AAQpB,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,kBAAA,CAAgC,KADhB,YAChB;AATkB;;AAYpB,gBAAI,KAAJ,OAAA,EAAkB;AAAA;AAZE;;AAepB,iBAfoB,SAepB;AA9HqB;;AAiIvBC,UAAAA,SAAAA,GAAY;AACV,iBAAA,OAAA,GADU,IACV;;AACA,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AAFV;;AAKV,gBAAI,KAAA,IAAA,CAAJ,UAAA,EAA0B;AACxB,mBAAA,IAAA,CAAA,UAAA,CAAqB,KADG,kBACxB;AADF,aAAA,MAEO;AACL,mBADK,aACL;AARQ;AAjIW;;AA6IvBC,UAAAA,aAAAA,GAAgB;AACd,gBAAI,KAAJ,yBAAA,EAAoC;AAClCvP,cAAAA,MAAAA,CAAAA,qBAAAA,CAA6B,MAAM;AACjC,qBAAA,UAAA,GAAA,KAAA,CAAwB,KADS,YACjC;AADFA,eAAAA;AADF,aAAA,MAIO;AACL4H,cAAAA,OAAAA,CAAAA,OAAAA,GAAAA,IAAAA,CAAuB,KAAvBA,UAAAA,EAAAA,KAAAA,CAA8C,KADzC,YACLA;AANY;AA7IO;;AAuJvB,gBAAM4H,KAAN,GAAc;AACZ,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AADR;;AAIZ,iBAAA,eAAA,GAAuB,KAAA,GAAA,CAAA,mBAAA,CACrB,KADqB,YAAA,EAErB,KAFqB,eAAA,EAGrB,KAHqB,cAAA,EAIrB,KARU,OAIW,CAAvB;;AAMA,gBAAI,KAAA,eAAA,KAAyB,KAAA,YAAA,CAAA,SAAA,CAA7B,MAAA,EAAiE;AAC/D,mBAAA,OAAA,GAD+D,KAC/D;;AACA,kBAAI,KAAA,YAAA,CAAJ,SAAA,EAAiC;AAC/B,qBAAA,GAAA,CAD+B,UAC/B;;AACA,oBAAI,KAAJ,OAAA,EAAkB;AAChBJ,kBAAAA,kBAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAAsC,KADtB,OAChBA;AAH6B;;AAK/B,qBAL+B,QAK/B;AAP6D;AAVrD;AAvJS;;AAAA;;AA+KzB,cAAMK,OAAAA,GArzGN,UAqzGA;;AAGA,cAAMC,KAAAA,GAxzGN,WAwzGA;;;;;;;;;;;;;ACzyGA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAWA,cAAA,cAAA,CAAqB;AACnBxvB,UAAAA,WAAAA,SAMG;AAAA,gBANS;AAAA,cAAA,KAAA;AAAA,cAAA,oBAAA;AAGVC,cAAAA,aAAAA,GAAgBC,UAAAA,CAHN,QAAA;AAKVgsB,cAAAA,YAAAA,GALFlsB;AAAY,aAMT;;AACD,gBAAI,KAAA,WAAA,KAAJ,cAAA,EAAyC;AACvCgY,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADuC,mCACvCA;AAFD;;AAID,iBAAA,KAAA,GAJC,KAID;AACA,iBAAA,qBAAA,GALC,oBAKD;AACA,iBAAA,SAAA,GANC,aAMD;AAEA,iBAAA,eAAA,GARC,EAQD;AACA,iBAAA,YAAA,GATC,IASD;AAhBiB;;AAsBnByX,UAAAA,iBAAAA,CAAAA,cAAAA,EAAkC;AAChC,iBAAA,eAAA,CAAA,IAAA,CADgC,cAChC;;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAFgC,cAEhC;AAxBiB;;AA2BnBC,UAAAA,UAAAA,CAAAA,IAAAA,EAAiB;AACf,gBAAIxD,YAAAA,GAAe,KADJ,YACf;;AACA,gBAAI,CAAJ,YAAA,EAAmB;AACjBA,cAAAA,YAAAA,GAAe,KAAA,YAAA,GAAoB,KAAA,SAAA,CAAA,aAAA,CADlB,OACkB,CAAnCA;AACAA,cAAAA,YAAAA,CAAAA,EAAAA,GAAkB,wBAAwB,KAFzB,KAAA,EAEjBA;;AACA,mBAAA,SAAA,CAAA,eAAA,CAAA,oBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,WAAA,CAHiB,YAGjB;AALa;;AASf,kBAAMyD,UAAAA,GAAazD,YAAAA,CATJ,KASf;AACAyD,YAAAA,UAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EAA4BA,UAAAA,CAAAA,QAAAA,CAVb,MAUfA;AArCiB;;AAwCnBf,UAAAA,KAAAA,GAAQ;AACN,iBAAA,MAAA,cAAA,IAA6B,KAA7B,eAAA,EAAmD;AACjD,mBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,CADiD,cACjD;AAFI;;AAIN,iBAAA,eAAA,CAAA,MAAA,GAJM,CAIN;;AAEA,gBAAI,KAAJ,YAAA,EAAuB;AAErB,mBAAA,YAAA,CAFqB,MAErB;AACA,mBAAA,YAAA,GAHqB,IAGrB;AATI;AAxCW;;AAqDnB,gBAAMgB,IAAN,CAAA,IAAA,EAAiB;AAEf,gBAAIjZ,IAAAA,CAAAA,QAAAA,IAAiBA,IAAAA,CAArB,WAAA,EAAuC;AAAA;AAFxB;;AAKfA,YAAAA,IAAAA,CAAAA,QAAAA,GALe,IAKfA;;AAEA,gBAAI,KAAJ,yBAAA,EAAoC;AAClC,oBAAMkZ,cAAAA,GAAiBlZ,IAAAA,CADW,oBACXA,EAAvB;;AACA,kBAAA,cAAA,EAAoB;AAClB,qBAAA,iBAAA,CADkB,cAClB;;AACA,oBAAI;AACF,wBAAMkZ,cAAAA,CADJ,MACF;AADF,iBAAA,CAEE,OAAA,EAAA,EAAW;AACX,uBAAA,qBAAA,CAA2B;AACzBC,oBAAAA,SAAAA,EAAW1Z,KAAAA,CAAAA,oBAAAA,CAFF;AACgB,mBAA3B;;AAGApS,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,wBAAwB6rB,cAAAA,CAAxB,MAAA,OAJM,EAAA,IAIX7rB;AAGA2S,kBAAAA,IAAAA,CAAAA,eAAAA,GAPW,IAOXA;AACA,wBARW,EAQX;AAZgB;AAFc;;AAAA;AAPrB;;AA4Bf,kBAAMoZ,IAAAA,GAAOpZ,IAAAA,CA5BE,kBA4BFA,EAAb;;AACA,gBAAA,IAAA,EAAU;AACR,mBAAA,UAAA,CADQ,IACR;;AAEA,kBAAI,KAAJ,0BAAA,EAAqC;AAAA;AAH7B;;AAMR,oBAAM,IAAA,OAAA,CAAY7V,OAAAA,IAAW;AAC3B,sBAAMH,OAAAA,GAAU,KAAA,qBAAA,CADW,OACX,CAAhB;;AACA,qBAAA,qBAAA,CAA2B,CAA3B,IAA2B,CAA3B,EAAmC,CAAnC,IAAmC,CAAnC,EAF2B,OAE3B;AAFF,eAAM,CAAN;AAnCa;AArDE;;AAgGnBqvB,UAAAA,qBAAAA,CAAAA,QAAAA,EAAgC;AAC9BhY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD8B,0CAC9BA;AAjGiB;;AAoGnB,cAAIiY,yBAAJ,GAAgC;AAC9B,kBAAMC,QAAAA,GAAW,CAAC,CAAC,KAAA,SAAA,EADW,KAC9B;AAWA,mBAAOnwB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,2BAAAA,EAZuB,QAYvBA,CAAP;AAhHiB;;AAoHnB,cAAIowB,0BAAJ,GAAiC;AAC/BnY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD+B,+CAC/BA;AArHiB;;AAyHnB,cAAIoY,aAAJ,GAAoB;AAClBpY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADkB,kCAClBA;AA1HiB;;AA6HnBqY,UAAAA,qBAAAA,CAAAA,KAAAA,EAAAA,WAAAA,EAAAA,OAAAA,EAAmD;AACjDrY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADiD,0CACjDA;AA9HiB;;AAAA;;AAkIrB,YA5JA,UA4JA;;AAOO;AAGLsY,UAAAA,OAAAA,CAAAA,UAAAA,GAAAA,UAAAA,GAAa,MAAA,iBAAA,SAAA,cAAA,CAA+C;AAC1DtwB,YAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,oBADkB,MAClB;AACA,mBAAA,cAAA,GAAsB;AACpBuwB,gBAAAA,QAAAA,EADoB,EAAA;AAEpBC,gBAAAA,aAAAA,EAFoB;AAAA,eAAtB;AAIA,mBAAA,cAAA,GANkB,CAMlB;AAPwD;;AAU1D,gBAAIL,0BAAJ,GAAiC;AAC/B,kBAAIM,SAAAA,GAD2B,KAC/B;;AAEE,kBAAI,OAAA,SAAA,KAAJ,WAAA,EAAsC;AAEpCA,gBAAAA,SAAAA,GAFoC,IAEpCA;AAFF,eAAA,MAGO;AAGL,sBAAM7V,CAAAA,GAAI,mCAAA,IAAA,CACR8V,SAAAA,CAJG,SAGK,CAAV;;AAGA,oBAAI9V,CAAAA,GAAAA,CAAAA,CAAAA,IAAJ,EAAA,EAAkB;AAChB6V,kBAAAA,SAAAA,GADgB,IAChBA;AAPG;AANsB;;AAkB/B,qBAAO1wB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,4BAAAA,EAlBwB,SAkBxBA,CAAP;AA5BwD;;AA+B1DiwB,YAAAA,qBAAAA,CAAAA,QAAAA,EAAgC;AAC9B,uBAAA,eAAA,GAA2B;AACzB7sB,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO,CAACxC,OAAAA,CAARwC,IAAAA,EADyB,2CACzBA;AACAxC,gBAAAA,OAAAA,CAAAA,IAAAA,GAFyB,IAEzBA;;AAGA,uBAAO4d,OAAAA,CAAAA,QAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAA+BA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAtC,IAAA,EAAgE;AAC9D,wBAAMoS,YAAAA,GAAepS,OAAAA,CAAAA,QAAAA,CADyC,KACzCA,EAArB;AACAqS,kBAAAA,UAAAA,CAAWD,YAAAA,CAAXC,QAAAA,EAF8D,CAE9DA,CAAAA;AAPuB;AADG;;AAY9B,oBAAMrS,OAAAA,GAAU,KAZc,cAY9B;AACA,oBAAM5d,OAAAA,GAAU;AACd6qB,gBAAAA,EAAAA,EAAI,sBAAsBjN,OAAAA,CADZ,aACYA,EADZ,EAAA;AAEdsS,gBAAAA,IAAAA,EAFc,KAAA;AAGd7J,gBAAAA,QAAAA,EAHc,eAAA;AAAA,gBAAA;AAAA,eAAhB;AAMAzI,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAnB8B,OAmB9BA;AACA,qBApB8B,OAoB9B;AAnDwD;;AAsD1D,gBAAI6R,aAAJ,GAAoB;AAClB,oBAAMU,eAAAA,GAAkB,YAAY;AAGlC,uBAAOC,IAAAA,CACL,yEAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAJgC,sEAG3BA,CAAP;AAHF,eAAA;;AA4BA,qBAAOhxB,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,eAAAA,EAA8B+wB,eA7BnB,EA6BX/wB,CAAP;AAnFwD;;AAsF1DswB,YAAAA,qBAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAA6C;AAO3C,uBAAA,KAAA,CAAA,IAAA,EAAA,MAAA,EAA6B;AAC3B,uBACGxvB,IAAAA,CAAAA,UAAAA,CAAAA,MAAAA,KAAD,EAACA,GACAA,IAAAA,CAAAA,UAAAA,CAAgBmwB,MAAAA,GAAhBnwB,CAAAA,KADD,EAACA,GAEAA,IAAAA,CAAAA,UAAAA,CAAgBmwB,MAAAA,GAAhBnwB,CAAAA,KAFD,CAACA,GAGAA,IAAAA,CAAAA,UAAAA,CAAgBmwB,MAAAA,GAAhBnwB,CAAAA,IALwB,IAC3B;AARyC;;AAe3C,uBAAA,YAAA,CAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAiD;AAC/C,sBAAMowB,MAAAA,GAASC,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EADgC,MAChCA,CAAf;AACA,sBAAMC,MAAAA,GAASD,CAAAA,CAAAA,SAAAA,CAAYF,MAAAA,GAFoB,MAEhCE,CAAf;AACA,uBAAOD,MAAAA,GAAAA,MAAAA,GAHwC,MAG/C;AAlByC;;AAoB3C,kBAAA,CAAA,EApB2C,EAoB3C;;AAGA,oBAAM7wB,MAAAA,GAAS,KAAA,SAAA,CAAA,aAAA,CAvB4B,QAuB5B,CAAf;;AACAA,cAAAA,MAAAA,CAAAA,KAAAA,GAxB2C,CAwB3CA;AACAA,cAAAA,MAAAA,CAAAA,MAAAA,GAzB2C,CAyB3CA;AACA,oBAAMgxB,GAAAA,GAAMhxB,MAAAA,CAAAA,UAAAA,CA1B+B,IA0B/BA,CAAZ;AAEA,kBAAIixB,MAAAA,GA5BuC,CA4B3C;;AACA,uBAAA,WAAA,CAAA,IAAA,EAAA,QAAA,EAAqC;AACnCA,gBAAAA,MADmC;;AAGnC,oBAAIA,MAAAA,GAAJ,EAAA,EAAiB;AACfrtB,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADe,8BACfA;AACAmjB,kBAAAA,QAFe;AAAA;AAHkB;;AAQnCiK,gBAAAA,GAAAA,CAAAA,IAAAA,GAAW,UARwB,IAQnCA;AACAA,gBAAAA,GAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EATmC,EASnCA;AACA,sBAAMrD,SAAAA,GAAYqD,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAViB,CAUjBA,CAAlB;;AACA,oBAAIrD,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAJ,CAAA,EAA2B;AACzB5G,kBAAAA,QADyB;AAAA;AAXQ;;AAenCyJ,gBAAAA,UAAAA,CAAWU,WAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAfwB,QAexBA,CAAXV,CAAAA;AA5CyC;;AA+C3C,oBAAMW,cAAAA,GAAiB,KAAK9sB,IAAAA,CAAL,GAAKA,EAAL,GAAkB,KA/CE,cA+CF,EA/CE,EA+C3C;AAMA,kBAAI5D,IAAAA,GAAO,KArDgC,aAqD3C;AACA,oBAAM2wB,cAAAA,GAtDqC,GAsD3C;AACA3wB,cAAAA,IAAAA,GAAO4wB,YAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAGLF,cAAAA,CAHKE,MAAAA,EAvDoC,cAuDpCA,CAAP5wB;AAOA,oBAAM6wB,mBAAAA,GA9DqC,EA8D3C;AACA,oBAAMC,UAAAA,GA/DqC,UA+D3C;AACA,kBAAIC,QAAAA,GAAWC,KAAAA,CAAAA,IAAAA,EAhE4B,mBAgE5BA,CAAf;;AACA,mBAAKnuB,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAK8tB,cAAAA,CAAAA,MAAAA,GAAjB,CAAA,EAA4C7tB,CAAAA,GAA5C,EAAA,EAAoDA,CAAAA,IAApD,CAAA,EAA4D;AAC1DkuB,gBAAAA,QAAAA,GAAYA,QAAAA,GAAAA,UAAAA,GAAwBC,KAAAA,CAAAA,cAAAA,EAAzB,CAAyBA,CAAxBD,GAD8C,CAC1DA;AAlEyC;;AAoE3C,kBAAIluB,CAAAA,GAAI6tB,cAAAA,CAAR,MAAA,EAA+B;AAE7BK,gBAAAA,QAAAA,GACGA,QAAAA,GAAAA,UAAAA,GAAwBC,KAAAA,CAAMN,cAAAA,GAANM,KAAAA,EAAzB,CAAyBA,CAAxBD,GAH0B,CAE7BA;AAtEyC;;AAyE3C/wB,cAAAA,IAAAA,GAAO4wB,YAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAAA,CAAAA,EAA2CK,CAAAA,GAAAA,KAAAA,CAAAA,QAAAA,EAzEP,QAyEOA,CAA3CL,CAAP5wB;AAEA,oBAAMuC,GAAAA,GAAM,iCAAiC2uB,IAAAA,CA3EF,IA2EEA,CA3EF,IA2E3C;AACA,oBAAMhC,IAAAA,GAAO,4BAAA,cAAA,SA5E8B,GAAA,GA4E3C;AACA,mBAAA,UAAA,CA7E2C,IA6E3C;AAEA,oBAAMiC,KAAAA,GA/EqC,EA+E3C;;AACA,mBAAA,MAAA,IAAA,IAAA,KAAA,EAA0B;AACxBA,gBAAAA,KAAAA,CAAAA,IAAAA,CAAWrb,IAAAA,CADa,UACxBqb;AAjFyC;;AAmF3CA,cAAAA,KAAAA,CAAAA,IAAAA,CAnF2C,cAmF3CA;;AAEA,oBAAMC,GAAAA,GAAM,KAAA,SAAA,CAAA,aAAA,CArF+B,KAqF/B,CAAZ;;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAtF2C,QAsF3CA;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAkBA,GAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAvFyB,MAuF3CA;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAxF2C,UAwF3CA;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,GAAgBA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAzF2B,KAyF3CA;;AAEA,mBAAA,MAAA,IAAA,IAAA,KAAA,EAA0B;AACxB,sBAAMC,IAAAA,GAAO,KAAA,SAAA,CAAA,aAAA,CADW,MACX,CAAb;;AACAA,gBAAAA,IAAAA,CAAAA,WAAAA,GAFwB,IAExBA;AACAA,gBAAAA,IAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAHwB,IAGxBA;AACAD,gBAAAA,GAAAA,CAAAA,WAAAA,CAJwB,IAIxBA;AA/FyC;;AAiG3C,mBAAA,SAAA,CAAA,IAAA,CAAA,WAAA,CAjG2C,GAiG3C;;AAEAX,cAAAA,WAAAA,CAAAA,cAAAA,EAA4B,MAAM;AAChC,qBAAA,SAAA,CAAA,IAAA,CAAA,WAAA,CADgC,GAChC;;AACA3wB,gBAAAA,OAAAA,CAFgC,QAEhCA;AAFF2wB,eAAAA,CAAAA;AAzLwD;;AAAA,WAA5DhB;AAtKF;;AAwWA,cAAA,cAAA,CAAqB;AACnBtwB,UAAAA,WAAAA,CAAAA,cAAAA,UASE;AAAA,gBAPA;AACEka,cAAAA,eAAAA,GADF,IAAA;AAEEwH,cAAAA,eAAAA,GAFF,KAAA;AAGEG,cAAAA,YAAAA,GAHF,KAAA;AAAA,cAAA,oBAAA;AAKE8L,cAAAA,YAAAA,GAPJ3tB;AAEE,aAOA;AACA,iBAAA,cAAA,GAAsBsE,MAAAA,CAAAA,MAAAA,CADtB,IACsBA,CAAtB;;AAEA,iBAAA,MAAA,CAAA,IAAA,cAAA,EAAgC;AAC9B,mBAAA,CAAA,IAAU6tB,cAAAA,CADoB,CACpBA,CAAV;AAJF;;AAMA,iBAAA,eAAA,GAAuBjY,eAAAA,KANvB,KAMA;AACA,iBAAA,eAAA,GAAuBwH,eAAAA,KAPvB,IAOA;AACA,iBAAA,YAAA,GAAoBG,YAAAA,KARpB,IAQA;AACA,iBAAA,qBAAA,GATA,oBASA;AACA,iBAAA,YAAA,GAVA,YAUA;AApBiB;;AAuBnBuQ,UAAAA,oBAAAA,GAAuB;AACrB,gBAAI,CAAC,KAAD,IAAA,IAAc,KAAlB,eAAA,EAAwC;AACtC,qBADsC,IACtC;AAFmB;;AAIrB,gBAJqB,cAIrB;;AACA,gBAAI,CAAC,KAAL,WAAA,EAAuB;AACrBvC,cAAAA,cAAAA,GAAiB,IAAA,QAAA,CAAa,KAAb,UAAA,EAA8B,KAA9B,IAAA,EADI,EACJ,CAAjBA;AADF,aAAA,MAEO;AACL,oBAAMwC,GAAAA,GAAM;AACVC,gBAAAA,MAAAA,EAAQ,KAAA,WAAA,CAFL;AACO,eAAZ;;AAGA,kBAAI,KAAA,WAAA,CAAJ,WAAA,EAAkC;AAChCD,gBAAAA,GAAAA,CAAAA,KAAAA,GAAY,WAAW,KAAA,WAAA,CADS,WAAA,KAChCA;AALG;;AAOLxC,cAAAA,cAAAA,GAAiB,IAAA,QAAA,CACf,KAAA,WAAA,CADe,UAAA,EAEf,KAFe,IAAA,EAPZ,GAOY,CAAjBA;AAdmB;;AAqBrB,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,YAAA,CAAA,YAAA,CADqB,IACrB;AAtBmB;;AAwBrB,mBAxBqB,cAwBrB;AA/CiB;;AAkDnB0C,UAAAA,kBAAAA,GAAqB;AACnB,gBAAI,CAAC,KAAD,IAAA,IAAc,KAAlB,eAAA,EAAwC;AACtC,qBADsC,IACtC;AAFiB;;AAInB,kBAAM1xB,IAAAA,GAAO2xB,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KAJR,IAINA,CAAb;AAEA,kBAAMpvB,GAAAA,GAAM,YAAY,KAAZ,QAAA,WAAoC2uB,IAAAA,CAN7B,IAM6BA,CAN7B,IAMnB;AACA,gBAPmB,IAOnB;;AACA,gBAAI,CAAC,KAAL,WAAA,EAAuB;AACrBhC,cAAAA,IAAAA,GAAO,4BAA4B,KAA5B,UAAA,SADc,GAAA,GACrBA;AADF,aAAA,MAEO;AACL,kBAAIsC,GAAAA,GAAM,gBAAgB,KAAA,WAAA,CADrB,UAAA,GACL;;AACA,kBAAI,KAAA,WAAA,CAAJ,WAAA,EAAkC;AAChCA,gBAAAA,GAAAA,IAAO,uBAAuB,KAAA,WAAA,CADE,WAAA,MAChCA;AAHG;;AAKLtC,cAAAA,IAAAA,GAAO,4BAA4B,KAAA,WAAA,CAA5B,UAAA,KAAA,GAAA,OALF,GAAA,GAKLA;AAfiB;;AAkBnB,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,YAAA,CAAA,YAAA,CAAA,IAAA,EADqB,GACrB;AAnBiB;;AAqBnB,mBArBmB,IAqBnB;AAvEiB;;AA0EnB0C,UAAAA,gBAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAkC;AAChC,gBAAI,KAAA,cAAA,CAAA,SAAA,MAAJ,SAAA,EAAkD;AAChD,qBAAO,KAAA,cAAA,CADyC,SACzC,CAAP;AAF8B;;AAKhC,gBALgC,IAKhC;;AACA,gBAAI;AACFC,cAAAA,IAAAA,GAAOtL,IAAAA,CAAAA,GAAAA,CAAS,KAAA,UAAA,GAAA,QAAA,GADd,SACKA,CAAPsL;AADF,aAAA,CAEE,OAAA,EAAA,EAAW;AACX,kBAAI,CAAC,KAAL,YAAA,EAAwB;AACtB,sBADsB,EACtB;AAFS;;AAIX,mBAAA,qBAAA,CAA2B;AACzB5C,gBAAAA,SAAAA,EAAW1Z,KAAAA,CAAAA,oBAAAA,CALF;AAIgB,eAA3B;;AAGApS,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,2CAPM,EAAA,IAOXA;AAEA,qBAAQ,KAAA,cAAA,CAAA,SAAA,IAAiC,UAAA,CAAA,EAAA,IAAA,EAT9B,CASX,CAAA;AAjB8B;;AAuBhC,gBAAI,KAAA,eAAA,IAAwBiW,KAAAA,CAAAA,qBAAAA,CAA5B,KAAA,EAAyD;AACvD,oBAAM0Y,KAAAA,GADiD,EACvD;;AACA,mBAAA,MAAA,OAAA,IAAA,IAAA,EAA4B;AAC1B,sBAAMC,IAAAA,GAAOC,OAAAA,CAAAA,IAAAA,KAAAA,SAAAA,GAA6BA,OAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAA7BA,GAA6BA,CAA7BA,GADa,EAC1B;AACAF,gBAAAA,KAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAiBE,OAAAA,CAAjBF,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAF0B,MAE1BA;AAJqD;;AAOvD,qBAAQ,KAAA,cAAA,CAAA,SAAA,IAAiC,IAAA,QAAA,CAAA,GAAA,EAAA,MAAA,EAGvCA,KAAAA,CAAAA,IAAAA,CAVqD,EAUrDA,CAHuC,CAAzC;AA9B8B;;AAsChC,mBAAQ,KAAA,cAAA,CAAA,SAAA,IAAiC,UAAA,CAAA,EAAA,IAAA,EAAmB;AAC1D,mBAAA,MAAA,OAAA,IAAA,IAAA,EAA4B;AAC1B,oBAAIE,OAAAA,CAAAA,GAAAA,KAAJ,OAAA,EAA6B;AAC3BA,kBAAAA,OAAAA,CAAAA,IAAAA,GAAe,CAAA,IAAA,EAAO,CAAtBA,IAAe,CAAfA;AAFwB;;AAI1B/W,gBAAAA,CAAAA,CAAE+W,OAAAA,CAAF/W,GAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAwB+W,OAAAA,CAJE,IAI1B/W;AALwD;AAA5D,aAAA;AAhHiB;;AAAA;;;;;;;;;;;;;;ACxVrB,YAAA,aAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAhBA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAwBA,YAAIgX,iBAAAA,GAAoB,MAAM;AAC5B9yB,UAAAA,WAAAA,GAAc;AACZgY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADY,oCACZA;AAF0B;;AAAA,SAA9B;;AAMA,YAAI+a,qBAAAA,GAAwB,MAAM;AAChC/yB,UAAAA,WAAAA,GAAc;AACZgY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADY,wCACZA;AAF8B;;AAAA,SAAlC;;AAMA,YAAIgb,2BAAAA,GAA8B,MAAM;AACtChzB,UAAAA,WAAAA,GAAc;AACZgY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADY,8CACZA;AAFoC;;AAAA,SAAxC;;;AAMA,YAAA,QAAA,CAAA,QAAA,EAA+E;AAC7E,gBAAM9W,SAAAA,GAAY,UAAA,GAAA,EAAe;AAC/B,mBAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,oBAAM+xB,EAAAA,GAAKC,OAAAA,CAD2B,IAC3BA,CAAX;;AACAD,cAAAA,EAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAiB,CAAA,KAAA,EAAA,IAAA,KAAiB;AAChC,oBAAIhM,KAAAA,IAAS,CAAb,IAAA,EAAoB;AAClBlmB,kBAAAA,MAAAA,CAAO,IAAA,KAAA,CADW,KACX,CAAPA,CAAAA;AADkB;AADY;;AAKhCD,gBAAAA,OAAAA,CAAQ,IAAA,UAAA,CALwB,IAKxB,CAARA,CAAAA;AALFmyB,eAAAA;AAFF,aAAO,CAAP;AADF,WAAA;;AAaAH,UAAAA,OAAAA,CAAAA,iBAAAA,GAAAA,iBAAAA,GAAoB,cAAA,aAAA,CAAA,iBAAA,CAAgC;AAClD3yB,YAAAA,aAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAA6B;AAC3B,oBAAMgzB,MAAAA,GAASD,OAAAA,CADY,QACZA,CAAf;;AACA,qBAAOC,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,EAFoB,MAEpBA,CAAP;AAHgD;;AAAA,WAApDL;AAOAC,UAAAA,OAAAA,CAAAA,qBAAAA,GAAAA,qBAAAA,GAAwB,cAAA,aAAA,CAAA,qBAAA,CAAoC;AAC1D/xB,YAAAA,UAAAA,CAAAA,GAAAA,EAAAA,eAAAA,EAAiC;AAC/B,qBAAO,SAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAoBH,IAAAA,IAAQ;AACjC,uBAAO;AAAEI,kBAAAA,QAAAA,EAAF,IAAA;AAAA,kBAAA;AAAA,iBAAP;AADF,eAAO,CAAP;AAFwD;;AAAA,WAA5D8xB;AAQAC,UAAAA,OAAAA,CAAAA,2BAAAA,GAAAA,2BAAAA,GAA8B,cAAA,aAAA,CAAA,2BAAA,CAA0C;AACtEhyB,YAAAA,UAAAA,CAAAA,GAAAA,EAAgB;AACd,qBAAOE,SAAAA,CADO,GACPA,CAAP;AAFoE;;AAAA,WAAxE8xB;AAvEF;;;;;;;;;;;;;ACAA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAoBA,cAAA,iBAAA,CAAwB;AACtBhzB,UAAAA,WAAAA,GAAc;AACZ,iBAAA,QAAA,GAAgB,IADJ,GACI,EAAhB;AACA,iBAAA,UAAA,GAAkByE,IAAAA,CAFN,GAEMA,EAAlB;AACA,iBAAA,SAAA,GAHY,KAGZ;AAMA,iBAAA,aAAA,GATY,IASZ;AACA,iBAAA,eAAA,GAVY,IAUZ;AAXoB;;AAuBtB2uB,UAAAA,QAAAA,CAAAA,GAAAA,EAAAA,YAAAA,EAA4B;AAC1B,kBAAMzZ,KAAAA,GAAQ,KAAA,QAAA,CAAA,GAAA,CADY,GACZ,CAAd;;AACA,gBAAIA,KAAAA,KAAJ,SAAA,EAAyB;AACvB,qBADuB,YACvB;AAHwB;;AAM1B,mBAAOrV,MAAAA,CAAAA,MAAAA,CAAAA,YAAAA,EANmB,KAMnBA,CAAP;AA7BoB;;AAwCtB+uB,UAAAA,QAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAqB;AACnB,kBAAMzZ,GAAAA,GAAM,KAAA,QAAA,CAAA,GAAA,CADO,GACP,CAAZ;;AACA,gBAAI0Z,QAAAA,GAFe,KAEnB;;AACA,gBAAI1Z,GAAAA,KAAJ,SAAA,EAAuB;AACrB,mBAAA,MAAW,CAAA,KAAA,EAAX,GAAW,CAAX,IAA2BtV,MAAAA,CAAAA,OAAAA,CAA3B,KAA2BA,CAA3B,EAAkD;AAChD,oBAAIsV,GAAAA,CAAAA,KAAAA,CAAAA,KAAJ,GAAA,EAAwB;AACtB0Z,kBAAAA,QAAAA,GADsB,IACtBA;AACA1Z,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAFsB,GAEtBA;AAH8C;AAD7B;AAAvB,aAAA,MAOO;AACL0Z,cAAAA,QAAAA,GADK,IACLA;;AACA,mBAAA,QAAA,CAAA,GAAA,CAAA,GAAA,EAFK,KAEL;AAZiB;;AAcnB,gBAAA,QAAA,EAAc;AACZ,mBAAA,UAAA,GAAkB7uB,IAAAA,CADN,GACMA,EAAlB;;AACA,mBAFY,YAEZ;AAhBiB;AAxCC;;AA4DtB8uB,UAAAA,MAAAA,GAAS;AACP,mBAAO,KAAA,QAAA,CAAA,IAAA,GAAA,CAAA,GAAyBC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KAAvC,QAAyBA,CAAzB,GADA,IACP;AA7DoB;;AAgEtB,cAAIpL,IAAJ,GAAW;AACT,mBAAO,KAAA,QAAA,CADE,IACT;AAjEoB;;AAuEtBqL,UAAAA,YAAAA,GAAe;AACb,gBAAI,CAAC,KAAL,SAAA,EAAqB;AACnB,mBAAA,SAAA,GADmB,IACnB;;AACA,kBAAI,OAAO,KAAP,aAAA,KAAJ,UAAA,EAA8C;AAC5C,qBAD4C,aAC5C;AAHiB;AADR;AAvEO;;AAgFtBC,UAAAA,aAAAA,GAAgB;AACd,gBAAI,KAAJ,SAAA,EAAoB;AAClB,mBAAA,SAAA,GADkB,KAClB;;AACA,kBAAI,OAAO,KAAP,eAAA,KAAJ,UAAA,EAAgD;AAC9C,qBAD8C,eAC9C;AAHgB;AADN;AAhFM;;AA6FtB,cAAIC,YAAJ,GAAmB;AACjB,mBAAO,KAAA,QAAA,CAAA,IAAA,GAAA,CAAA,GAAyB,KAAzB,QAAA,GADU,IACjB;AA9FoB;;AAqGtB,cAAItH,YAAJ,GAAmB;AACjB,mBAAO,KAAA,UAAA,CADU,QACV,EAAP;AAtGoB;;AAAA;;;;;;;;;;;;;;ACLxB,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAcA,YAAA,eAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AA7BA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAmCA,cAAMuH,aAAAA,GAnCN,EAmCA;AAEA,cAAMC,aAAAA,GArCN,GAqCA;AACA,cAAMC,cAAAA,GAtCN,IAsCA;AAIA,cAAMC,0BAAAA,GA1CN,CA0CA;AAIA,cAAMC,cAAAA,GA9CN,EA8CA;AAEA,cAAMC,eAAAA,GAhDN,EAgDA;AAEA,cAAMC,oBAAAA,GAlDN,IAkDA;AACA,cAAMC,mBAAAA,GAnDN,IAmDA;AAEA,cAAMC,iBAAAA,GArDN,EAqDA;AAOA,cAAMC,sBAAAA,GA5DN,QA4DA;;AAEA,iBAAA,0BAAA,CAAA,GAAA,EAAyC;AAEvC,cAAIjD,GAAAA,CAAJ,mBAAA,EAA6B;AAAA;AAFU;;AAKvCA,UAAAA,GAAAA,CAAAA,aAAAA,GAAoBA,GAAAA,CALmB,IAKvCA;AACAA,UAAAA,GAAAA,CAAAA,gBAAAA,GAAuBA,GAAAA,CANgB,OAMvCA;AACAA,UAAAA,GAAAA,CAAAA,eAAAA,GAAsBA,GAAAA,CAPiB,MAOvCA;AACAA,UAAAA,GAAAA,CAAAA,cAAAA,GAAqBA,GAAAA,CARkB,KAQvCA;AACAA,UAAAA,GAAAA,CAAAA,kBAAAA,GAAyBA,GAAAA,CATc,SASvCA;AACAA,UAAAA,GAAAA,CAAAA,kBAAAA,GAAyBA,GAAAA,CAVc,SAUvCA;AACAA,UAAAA,GAAAA,CAAAA,qBAAAA,GAA4BA,GAAAA,CAXW,YAWvCA;AACAA,UAAAA,GAAAA,CAAAA,uBAAAA,GAA8BA,GAAAA,CAZS,cAYvCA;AAEAA,UAAAA,GAAAA,CAAAA,gBAAAA,GAAuBA,GAAAA,CAAAA,gBAAAA,IAAwB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA/CA,CAA+C,CAA/CA;AACAA,UAAAA,GAAAA,CAAAA,eAAAA,GAfuC,EAevCA;;AAEA,cAAI;AAIF,kBAAMnH,IAAAA,GAAO3lB,MAAAA,CAAAA,wBAAAA,CACXA,MAAAA,CAAAA,cAAAA,CADWA,GACXA,CADWA,EAJX,WAIWA,CAAb;AAKA8sB,YAAAA,GAAAA,CAAAA,aAAAA,GAAoBnH,IAAAA,CATlB,GASFmH;AACAA,YAAAA,GAAAA,CAAAA,aAAAA,GAAoBnH,IAAAA,CAVlB,GAUFmH;AAEA9sB,YAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,WAAAA,EAAwC;AACtCgwB,cAAAA,GAAAA,EAAK,SAAA,YAAA,CAAA,KAAA,EAA6B;AAChC,qBAAA,aAAA,CAAmBpyB,KAAAA,GADa,sBAChC;AAFoC,eAAA;AAItCqb,cAAAA,GAAAA,EAAK,SAAA,YAAA,GAAwB;AAC3B,uBAAO,KADoB,aACpB,EAAP;AALoC;AAAA,aAAxCjZ;AAZF,WAAA,CAoBE,OAAA,CAAA,EArCqC,CAAA;;AAuCvCA,UAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,qBAAAA,EAAkD;AAChDiZ,YAAAA,GAAAA,EAAK,SAAA,mBAAA,GAA+B;AAClC,qBAAO,KAD2B,gBAClC;AAF8C;AAAA,WAAlDjZ;AAMAA,UAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,4BAAAA,EAAyD;AACvDiZ,YAAAA,GAAAA,EAAK,SAAA,0BAAA,GAAsC;AAKzC,oBAAM,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAqB,KALc,gBAKzC;AACA,oBAAMgX,KAAAA,GAAQ3Y,CAAAA,GAAAA,CAAAA,GAAQC,CAAAA,GANmB,CAMzC;AACA,oBAAM2Y,KAAAA,GAAQ3Y,CAAAA,GAAAA,CAAAA,GAAQD,CAAAA,GAPmB,CAOzC;AAEA,qBAAO,CACLb,CAAAA,GADK,KAAA,EAELc,CAAAA,GAFK,KAAA,EAGLC,CAAAA,GAHK,KAAA,EAILF,CAAAA,GAJK,KAAA,EAKJ,CAAA,CAAA,GAAA,CAAA,GAAQE,CAAAA,GAAT,CAAC,IALI,KAAA,EAMJ,CAAA,CAAA,GAAA,CAAA,GAAQF,CAAAA,GAAT,CAAC,IANH,KAAO,CAAP;AAVqD;AAAA,WAAzDtX;;AAqBA8sB,UAAAA,GAAAA,CAAAA,IAAAA,GAAW,SAAA,OAAA,GAAmB;AAC5B,kBAAMqD,GAAAA,GAAM,KADgB,gBAC5B;;AACA,iBAAA,eAAA,CAAA,IAAA,CAF4B,GAE5B;;AACA,iBAAA,gBAAA,GAAwBA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAHI,CAGJA,CAAxB;;AAEA,iBAL4B,aAK5B;AALFrD,WAAAA;;AAQAA,UAAAA,GAAAA,CAAAA,OAAAA,GAAc,SAAA,UAAA,GAAsB;AAClC,kBAAMsD,IAAAA,GAAO,KAAA,eAAA,CADqB,GACrB,EAAb;;AACA,gBAAA,IAAA,EAAU;AACR,mBAAA,gBAAA,GADQ,IACR;;AACA,mBAFQ,gBAER;AAJgC;AAApCtD,WAAAA;;AAQAA,UAAAA,GAAAA,CAAAA,SAAAA,GAAgB,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAA4B;AAC1C,kBAAMxW,CAAAA,GAAI,KADgC,gBAC1C;AACAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CAFa,CAEbA,CAA7BA;AACAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CAHa,CAGbA,CAA7BA;;AAEA,iBAAA,kBAAA,CAAA,CAAA,EAL0C,CAK1C;AALFwW,WAAAA;;AAQAA,UAAAA,GAAAA,CAAAA,KAAAA,GAAY,SAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAwB;AAClC,kBAAMxW,CAAAA,GAAI,KADwB,gBAClC;AACAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAFkC,CAElCA;AACAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAHkC,CAGlCA;AACAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAJkC,CAIlCA;AACAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IALkC,CAKlCA;;AAEA,iBAAA,cAAA,CAAA,CAAA,EAPkC,CAOlC;AAPFwW,WAAAA;;AAUAA,UAAAA,GAAAA,CAAAA,SAAAA,GAAgB,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwC;AACtD,kBAAMxW,CAAAA,GAAI,KAD4C,gBACtD;AACA,iBAAA,gBAAA,GAAwB,CACtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GADW,CAAA,EAEtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAFW,CAAA,EAGtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAHW,CAAA,EAItBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAJW,CAAA,EAKtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CALA,CAKAA,CALA,EAMtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CANxB,CAMwBA,CANA,CAAxB;;AASAwW,YAAAA,GAAAA,CAAAA,kBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAXsD,CAWtDA;AAXFA,WAAAA;;AAcAA,UAAAA,GAAAA,CAAAA,YAAAA,GAAmB,SAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA2C;AAC5D,iBAAA,gBAAA,GAAwB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;;AAEAA,YAAAA,GAAAA,CAAAA,qBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAH4D,CAG5DA;AAHFA,WAAAA;;AAMAA,UAAAA,GAAAA,CAAAA,cAAAA,GAAqB,SAAA,iBAAA,GAA6B;AAChD,iBAAA,gBAAA,GAAwB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;;AAEAA,YAAAA,GAAAA,CAHgD,uBAGhDA;AAHFA,WAAAA;;AAMAA,UAAAA,GAAAA,CAAAA,MAAAA,GAAa,SAAA,SAAA,CAAA,KAAA,EAA0B;AACrC,kBAAMuD,QAAAA,GAAW3yB,IAAAA,CAAAA,GAAAA,CADoB,KACpBA,CAAjB;AACA,kBAAM4yB,QAAAA,GAAW5yB,IAAAA,CAAAA,GAAAA,CAFoB,KAEpBA,CAAjB;AAEA,kBAAM4Y,CAAAA,GAAI,KAJ2B,gBAIrC;AACA,iBAAA,gBAAA,GAAwB,CACtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,QAAAA,GAAkBA,CAAAA,CAAAA,CAAAA,CAAAA,GADI,QAAA,EAEtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,QAAAA,GAAkBA,CAAAA,CAAAA,CAAAA,CAAAA,GAFI,QAAA,EAGtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO,CAAPA,QAAAA,GAAmBA,CAAAA,CAAAA,CAAAA,CAAAA,GAHG,QAAA,EAItBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO,CAAPA,QAAAA,GAAmBA,CAAAA,CAAAA,CAAAA,CAAAA,GAJG,QAAA,EAKtBA,CAAAA,CALsB,CAKtBA,CALsB,EAMtBA,CAAAA,CANF,CAMEA,CANsB,CAAxB;;AASA,iBAAA,eAAA,CAdqC,KAcrC;AAdFwW,WAAAA;AA5LF;;AA8MA,cAAA,cAAA,CAAqB;AACnBpxB,UAAAA,WAAAA,CAAAA,aAAAA,EAA2B;AACzB,iBAAA,aAAA,GADyB,aACzB;AACA,iBAAA,KAAA,GAAasE,MAAAA,CAAAA,MAAAA,CAFY,IAEZA,CAAb;AAHiB;;AAMnBuwB,UAAAA,SAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,cAAAA,EAA6C;AAC3C,gBAD2C,WAC3C;;AACA,gBAAI,KAAA,KAAA,CAAA,EAAA,MAAJ,SAAA,EAAkC;AAChCC,cAAAA,WAAAA,GAAc,KAAA,KAAA,CADkB,EAClB,CAAdA;AACA,mBAAA,aAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,EAFgC,MAEhC;AAEAA,cAAAA,WAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAJgC,CAIhCA;AAJF,aAAA,MAKO;AACLA,cAAAA,WAAAA,GAAc,KAAA,aAAA,CAAA,MAAA,CAAA,KAAA,EADT,MACS,CAAdA;AACA,mBAAA,KAAA,CAAA,EAAA,IAFK,WAEL;AATyC;;AAW3C,gBAAA,cAAA,EAAoB;AAClBC,cAAAA,0BAAAA,CAA2BD,WAAAA,CADT,OAClBC,CAAAA;AAZyC;;AAc3C,mBAd2C,WAc3C;AApBiB;;AAuBnBnG,UAAAA,KAAAA,GAAQ;AACN,iBAAA,MAAA,EAAA,IAAiB,KAAjB,KAAA,EAA6B;AAC3B,oBAAMkG,WAAAA,GAAc,KAAA,KAAA,CADO,EACP,CAApB;AACA,mBAAA,aAAA,CAAA,OAAA,CAF2B,WAE3B;AACA,qBAAO,KAAA,KAAA,CAHoB,EAGpB,CAAP;AAJI;AAvBW;;AAAA;;AAoCrB,cAAA,QAAA,CAAe;AACb90B,UAAAA,WAAAA,GAAyB;AAAA,gBAAbg1B,OAAa,uEAAzBh1B,CAAyB;AACvB,iBAAA,MAAA,GAAc,IADS,GACT,EAAd;AACA,iBAAA,QAAA,GAFuB,OAEvB;AAHW;;AAMb2uB,UAAAA,GAAAA,CAAAA,GAAAA,EAAS;AACP,mBAAO,KAAA,MAAA,CAAA,GAAA,CADA,GACA,CAAP;AAPW;;AAUbpR,UAAAA,GAAAA,CAAAA,GAAAA,EAAS;AACP,gBAAI,KAAA,MAAA,CAAA,GAAA,CAAJ,GAAI,CAAJ,EAA0B;AAExB,oBAAM5D,KAAAA,GAAQ,KAAA,MAAA,CAAA,GAAA,CAFU,GAEV,CAAd;;AACA,mBAAA,MAAA,CAAA,MAAA,CAHwB,GAGxB;;AACA,mBAAA,MAAA,CAAA,GAAA,CAAA,GAAA,EAJwB,KAIxB;AALK;;AAOP,mBAAO,KAAA,MAAA,CAAA,GAAA,CAPA,GAOA,CAAP;AAjBW;;AAoBb2a,UAAAA,GAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAgB;AACd,gBAAI,KAAA,QAAA,IAAJ,CAAA,EAAwB;AAAA;AADV;;AAId,gBAAI,KAAA,MAAA,CAAA,IAAA,GAAA,CAAA,GAAuB,KAA3B,QAAA,EAA0C;AAExC,mBAAA,MAAA,CAAA,MAAA,CAAmB,KAAA,MAAA,CAAA,IAAA,GAAA,IAAA,GAFqB,KAExC;AANY;;AAQd,iBAAA,MAAA,CAAA,GAAA,CAAA,GAAA,EARc,KAQd;AA5BW;;AA+Bb1F,UAAAA,KAAAA,GAAQ;AACN,iBAAA,MAAA,CADM,KACN;AAhCW;;AAAA;;AAoCf,iBAAA,iBAAA,CAAA,OAAA,EAAoC;AAClC,gBAAMqG,sBAAAA,GAD4B,IAClC;AACA,gBAAMC,WAAAA,GAAc,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAnC,CAAmC,CAAf,CAApB;AAIA,gBAAMhzB,KAAAA,GAAQizB,OAAAA,CAAd,KAAA;AAAA,gBACEhzB,MAAAA,GAASgzB,OAAAA,CADX,MAAA;AAAA,gBAEEC,MAAAA,GAASlzB,KAAAA,GARuB,CAMlC;AAGA,cAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EATkC,EASlC;AACA,gBAAMmzB,MAAAA,GAAS,IAAA,UAAA,CAAeD,MAAAA,IAAU,MAAA,GAVN,CAUJA,CAAf,CAAf;AAGA,gBAAME,QAAAA,GAAYpzB,KAAAA,GAAD,CAACA,GAAa,CAA/B,CAAA;AAAA,gBACEqzB,KAAAA,GAAQJ,OAAAA,CAdwB,IAalC;AAEA,gBAAMt0B,IAAAA,GAAO,IAAA,UAAA,CAAey0B,QAAAA,GAfM,MAerB,CAAb;AACA,cAAI9b,GAAAA,GAhB8B,CAgBlC;;AACA,eAAK9V,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAK8xB,KAAAA,CAAjB,MAAA,EAA+B7xB,CAAAA,GAA/B,EAAA,EAAuCA,CAAvC,EAAA,EAA4C;AAC1C,kBAAM8xB,IAAAA,GAAOD,KAAAA,CAD6B,CAC7BA,CAAb;AACA,gBAAIE,IAAAA,GAFsC,GAE1C;;AACA,mBAAOA,IAAAA,GAAP,CAAA,EAAiB;AACf50B,cAAAA,IAAAA,CAAK2Y,GAAL3Y,EAAAA,CAAAA,GAAc20B,IAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GADC,GACf30B;AACA40B,cAAAA,IAAAA,KAFe,CAEfA;AALwC;AAjBV;;AAoClC,cAAIC,KAAAA,GApC8B,CAoClC;AACAlc,UAAAA,GAAAA,GArCkC,CAqClCA;;AACA,cAAI3Y,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnBw0B,YAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAxCgC;;AA0ClC,eAAKM,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,KAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,gBAAI90B,IAAAA,CAAAA,GAAAA,CAAAA,KAAcA,IAAAA,CAAK2Y,GAAAA,GAAvB,CAAkB3Y,CAAlB,EAAiC;AAC/Bw0B,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYx0B,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADmB,CAC/Bw0B;AACA,gBAF+B,KAE/B;AAHwB;;AAK1B7b,YAAAA,GAL0B;AA1CM;;AAiDlC,cAAI3Y,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnBw0B,YAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAnDgC;;AAqDlC,eAAK3xB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,MAAA,EAAwBA,CAAxB,EAAA,EAA6B;AAC3B8V,YAAAA,GAAAA,GAAM9V,CAAAA,GADqB,QAC3B8V;AACAoc,YAAAA,EAAAA,GAAKlyB,CAAAA,GAFsB,MAE3BkyB;;AACA,gBAAI/0B,IAAAA,CAAK2Y,GAAAA,GAAL3Y,QAAAA,CAAAA,KAAyBA,IAAAA,CAA7B,GAA6BA,CAA7B,EAAwC;AACtCw0B,cAAAA,MAAAA,CAAAA,EAAAA,CAAAA,GAAax0B,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADyB,CACtCw0B;AACA,gBAFsC,KAEtC;AALyB;;AAS3B,gBAAIQ,GAAAA,GAAO,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAD,CAAC,KAAsB,IAAA,CAAKrc,GAAAA,GAAL,QAAA,CAAA,GAAA,CAAA,GATN,CAShB,CAAX;;AACA,iBAAKmc,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,KAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1BE,cAAAA,GAAAA,GACG,CAAA,GAAA,IAAD,CAAC,KACA,IAAA,CAAKrc,GAAAA,GAAL,CAAA,CAAA,GAAA,CAAA,GADD,CAAC,KAEA,IAAA,CAAKA,GAAAA,GAAAA,QAAAA,GAAL,CAAA,CAAA,GAAA,CAAA,GAJuB,CAEvB,CADHqc;;AAIA,kBAAIX,WAAAA,CAAJ,GAAIA,CAAJ,EAAsB;AACpBG,gBAAAA,MAAAA,CAAOO,EAAAA,GAAPP,CAAAA,CAAAA,GAAiBH,WAAAA,CADG,GACHA,CAAjBG;AACA,kBAFoB,KAEpB;AAPwB;;AAS1B7b,cAAAA,GAT0B;AAVD;;AAqB3B,gBAAI3Y,IAAAA,CAAK2Y,GAAAA,GAAL3Y,QAAAA,CAAAA,KAAyBA,IAAAA,CAA7B,GAA6BA,CAA7B,EAAwC;AACtCw0B,cAAAA,MAAAA,CAAOO,EAAAA,GAAPP,CAAAA,CAAAA,GAAiBx0B,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADqB,CACtCw0B;AACA,gBAFsC,KAEtC;AAvByB;;AA0B3B,gBAAIK,KAAAA,GAAJ,sBAAA,EAAoC;AAClC,qBADkC,IAClC;AA3ByB;AArDK;;AAoFlClc,UAAAA,GAAAA,GAAM8b,QAAAA,IAAY,MAAA,GApFgB,CAoF5BA,CAAN9b;AACAoc,UAAAA,EAAAA,GAAKlyB,CAAAA,GArF6B,MAqFlCkyB;;AACA,cAAI/0B,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnBw0B,YAAAA,MAAAA,CAAAA,EAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAxFgC;;AA0FlC,eAAKM,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,KAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,gBAAI90B,IAAAA,CAAAA,GAAAA,CAAAA,KAAcA,IAAAA,CAAK2Y,GAAAA,GAAvB,CAAkB3Y,CAAlB,EAAiC;AAC/Bw0B,cAAAA,MAAAA,CAAOO,EAAAA,GAAPP,CAAAA,CAAAA,GAAiBx0B,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADc,CAC/Bw0B;AACA,gBAF+B,KAE/B;AAHwB;;AAK1B7b,YAAAA,GAL0B;AA1FM;;AAiGlC,cAAI3Y,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnBw0B,YAAAA,MAAAA,CAAOO,EAAAA,GAAPP,CAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAnGgC;;AAqGlC,cAAIK,KAAAA,GAAJ,sBAAA,EAAoC;AAClC,mBADkC,IAClC;AAtGgC;;AA0GlC,gBAAMI,KAAAA,GAAQ,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,MAAA,EAAY,CAAZ,CAAA,EAAA,CAAA,EAAmB,CAAnB,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA7B,CAA6B,CAAf,CAAd;AACA,gBAAMC,QAAAA,GA3G4B,EA2GlC;;AACA,eAAKryB,CAAAA,GAAL,CAAA,EAAYgyB,KAAAA,IAAShyB,CAAAA,IAArB,MAAA,EAAkCA,CAAlC,EAAA,EAAuC;AACrC,gBAAIiX,CAAAA,GAAIjX,CAAAA,GAD6B,MACrC;AACA,kBAAMG,GAAAA,GAAM8W,CAAAA,GAFyB,KAErC;;AACA,mBAAOA,CAAAA,GAAAA,GAAAA,IAAW,CAAC0a,MAAAA,CAAnB,CAAmBA,CAAnB,EAA8B;AAC5B1a,cAAAA,CAD4B;AAHO;;AAMrC,gBAAIA,CAAAA,KAAJ,GAAA,EAAe;AAAA;AANsB;;AASrC,kBAAMqb,MAAAA,GAAS,CAACrb,CAAAA,GAAD,MAAA,EAAf,CAAe,CAAf;AAEA,kBAAMsb,EAAAA,GAX+B,CAWrC;AACA,gBAAItY,IAAAA,GAAO0X,MAAAA,CAZ0B,CAY1BA,CAAX;;AACA,eAAG;AACD,oBAAMa,IAAAA,GAAOJ,KAAAA,CADZ,IACYA,CAAb;;AACA,iBAAG;AACDnb,gBAAAA,CAAAA,IADC,IACDA;AADF,eAAA,QAES,CAAC0a,MAAAA,CAJT,CAISA,CAFV;;AAIA,oBAAMc,EAAAA,GAAKd,MAAAA,CANV,CAMUA,CAAX;;AACA,kBAAIc,EAAAA,KAAAA,CAAAA,IAAYA,EAAAA,KAAhB,EAAA,EAA2B;AAEzBxY,gBAAAA,IAAAA,GAFyB,EAEzBA;AAEA0X,gBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAJyB,CAIzBA;AAJF,eAAA,MAKO;AAGL1X,gBAAAA,IAAAA,GAAOwY,EAAAA,GAAO,OAAD,IAAC,IAHT,CAGLxY;AAEA0X,gBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAc1X,IAAAA,IAAD,CAACA,GAAcA,IAAAA,IALvB,CAKL0X;AAjBD;;AAoBDW,cAAAA,MAAAA,CAAAA,IAAAA,CAAYrb,CAAAA,GAAZqb,MAAAA,EAAyBrb,CAAAA,GAAD,MAACA,GApBxB,CAoBDqb;;AAEA,kBAAI,CAACX,MAAAA,CAAL,CAAKA,CAAL,EAAgB;AACd,kBADc,KACd;AAvBD;AAAH,aAAA,QAyBSY,EAAAA,KAtC4B,CAarC;;AA0BAF,YAAAA,QAAAA,CAAAA,IAAAA,CAvCqC,MAuCrCA;AACA,cAxCqC,CAwCrC;AApJgC;;AAuJlC,gBAAMK,WAAAA,GAAc,UAAA,CAAA,EAAa;AAC/Bta,YAAAA,CAAAA,CAD+B,IAC/BA;AAEAA,YAAAA,CAAAA,CAAAA,KAAAA,CAAQ,IAARA,KAAAA,EAAmB,CAAA,CAAA,GAHY,MAG/BA;AACAA,YAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAe,CAJgB,MAI/BA;AACAA,YAAAA,CAAAA,CAL+B,SAK/BA;;AACA,iBAAK,IAAIua,CAAAA,GAAJ,CAAA,EAAWC,EAAAA,GAAKP,QAAAA,CAArB,MAAA,EAAsCM,CAAAA,GAAtC,EAAA,EAA8CA,CAA9C,EAAA,EAAmD;AACjD,oBAAME,CAAAA,GAAIR,QAAAA,CADuC,CACvCA,CAAV;AACAja,cAAAA,CAAAA,CAAAA,MAAAA,CAASya,CAAAA,CAATza,CAASya,CAATza,EAAeya,CAAAA,CAFkC,CAElCA,CAAfza;;AACA,mBAAK,IAAI0a,CAAAA,GAAJ,CAAA,EAAWC,EAAAA,GAAKF,CAAAA,CAArB,MAAA,EAA+BC,CAAAA,GAA/B,EAAA,EAAuCA,CAAAA,IAAvC,CAAA,EAA+C;AAC7C1a,gBAAAA,CAAAA,CAAAA,MAAAA,CAASya,CAAAA,CAATza,CAASya,CAATza,EAAeya,CAAAA,CAAEC,CAAAA,GAD4B,CAC9BD,CAAfza;AAJ+C;AANpB;;AAa/BA,YAAAA,CAAAA,CAb+B,IAa/BA;AACAA,YAAAA,CAAAA,CAd+B,SAc/BA;AACAA,YAAAA,CAAAA,CAf+B,OAe/BA;AAfF,WAAA;;AAkBA,iBAzKkC,WAyKlC;AA/bF;;AAkcA,cAAA,gBAAA,CAAuB;AACrB9b,UAAAA,WAAAA,GAAc;AAEZ,iBAAA,YAAA,GAFY,KAEZ;AACA,iBAAA,QAAA,GAHY,CAGZ;AACA,iBAAA,aAAA,GAJY,CAIZ;AACA,iBAAA,UAAA,GALY,KAAA,CAAA,eAKZ;AACA,iBAAA,eAAA,GANY,CAMZ;AACA,iBAAA,UAAA,GAPY,KAAA,CAAA,oBAOZ;AACA,iBAAA,OAAA,GARY,CAQZ;AAEA,iBAAA,CAAA,GAVY,CAUZ;AACA,iBAAA,CAAA,GAXY,CAWZ;AAEA,iBAAA,KAAA,GAbY,CAaZ;AACA,iBAAA,KAAA,GAdY,CAcZ;AAEA,iBAAA,WAAA,GAhBY,CAgBZ;AACA,iBAAA,WAAA,GAjBY,CAiBZ;AACA,iBAAA,UAAA,GAlBY,CAkBZ;AACA,iBAAA,iBAAA,GAAyB2H,KAAAA,CAAAA,iBAAAA,CAnBb,IAmBZ;AACA,iBAAA,QAAA,GApBY,CAoBZ;AAEA,iBAAA,SAAA,GAtBY,SAsBZ;AACA,iBAAA,WAAA,GAvBY,SAuBZ;AACA,iBAAA,WAAA,GAxBY,KAwBZ;AAEA,iBAAA,SAAA,GA1BY,CA0BZ;AACA,iBAAA,WAAA,GA3BY,CA2BZ;AACA,iBAAA,SAAA,GA5BY,CA4BZ;AACA,iBAAA,WAAA,GA7BY,IA6BZ;AACA,iBAAA,cAAA,GA9BY,IA8BZ;AACA,iBAAA,YAAA,GA/BY,IA+BZ;AAhCmB;;AAmCrBvF,UAAAA,KAAAA,GAAQ;AACN,mBAAOkC,MAAAA,CAAAA,MAAAA,CADD,IACCA,CAAP;AApCmB;;AAuCrBoyB,UAAAA,eAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAsB;AACpB,iBAAA,CAAA,GADoB,CACpB;AACA,iBAAA,CAAA,GAFoB,CAEpB;AAzCmB;;AAAA;;AA6CvB,iBAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAA+D;AAAA,cAArBC,YAAqB,uEAA/D,IAA+D;;AAC7D,cAAI,OAAA,SAAA,KAAA,WAAA,IAAoCxB,OAAAA,YAAxC,SAAA,EAAsE;AACpE/D,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAAAA,CAAAA,EADoE,CACpEA;AADoE;AADT;;AAiB7D,gBAAMjvB,MAAAA,GAASgzB,OAAAA,CAAf,MAAA;AAAA,gBACEjzB,KAAAA,GAAQizB,OAAAA,CAlBmD,KAiB7D;AAEA,gBAAMyB,kBAAAA,GAAqBz0B,MAAAA,GAnBkC,iBAmB7D;AACA,gBAAM00B,UAAAA,GAAc,CAAA,MAAA,GAAD,kBAAC,IApByC,iBAoB7D;AACA,gBAAMC,WAAAA,GAAcF,kBAAAA,KAAAA,CAAAA,GAAAA,UAAAA,GAAwCC,UAAAA,GArBC,CAqB7D;AAEA,gBAAME,YAAAA,GAAe3F,GAAAA,CAAAA,eAAAA,CAAAA,KAAAA,EAvBwC,iBAuBxCA,CAArB;AACA,cAAI4F,MAAAA,GAAJ,CAAA;AAAA,cAxB6D,OAwB7D;AAEA,gBAAMzX,GAAAA,GAAM4V,OAAAA,CA1BiD,IA0B7D;AACA,gBAAM8B,IAAAA,GAAOF,YAAAA,CA3BgD,IA2B7D;AACA,cAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EA5B6D,gBA4B7D;AAEA,cAAA,cAAA,EAAA,gBAAA,EAAA,eAAA,EA9B6D,eA8B7D;;AACA,cAAA,YAAA,EAAkB;AAChB,oBAAQJ,YAAAA,CAAR,MAAA;AACE,mBAAA,CAAA;AACEO,gBAAAA,cAAAA,GAAiBP,YAAAA,CADnB,CACmBA,CAAjBO;AACAC,gBAAAA,gBAAAA,GAAmBR,YAAAA,CAFrB,CAEqBA,CAAnBQ;AACAC,gBAAAA,eAAAA,GAAkBT,YAAAA,CAHpB,CAGoBA,CAAlBS;AACAC,gBAAAA,eAAAA,GAAkBV,YAAAA,CAJpB,CAIoBA,CAAlBU;AALJ;;AAOE,mBAAA,CAAA;AACEH,gBAAAA,cAAAA,GAAiBP,YAAAA,CADnB,CACmBA,CAAjBO;AACAC,gBAAAA,gBAAAA,GAAmBR,YAAAA,CAFrB,CAEqBA,CAAnBQ;AACAC,gBAAAA,eAAAA,GAAkBT,YAAAA,CAHpB,CAGoBA,CAAlBS;AACAC,gBAAAA,eAAAA,GAAkBV,YAAAA,CAJpB,CAIoBA,CAAlBU;AAXJ;AAAA;AAhC2D;;AAkD7D,cAAIlC,OAAAA,CAAAA,IAAAA,KAAiB7sB,KAAAA,CAAAA,SAAAA,CAArB,cAAA,EAA+C;AAE7C,kBAAMgvB,SAAAA,GAAY/X,GAAAA,CAF2B,UAE7C;AACA,kBAAMgY,MAAAA,GAAS,IAAA,WAAA,CAAgBN,IAAAA,CAAhB,MAAA,EAAA,CAAA,EAAgCA,IAAAA,CAAAA,UAAAA,IAHF,CAG9B,CAAf;AACA,kBAAMO,gBAAAA,GAAmBD,MAAAA,CAJoB,MAI7C;AACA,kBAAME,WAAAA,GAAev1B,KAAAA,GAAD,CAACA,IALwB,CAK7C;AACA,gBAAIw1B,KAAAA,GANyC,UAM7C;AACA,gBAAIC,KAAAA,GAAQ5d,KAAAA,CAAAA,oBAAAA,CAAAA,KAAAA,GAAAA,UAAAA,GAPiC,UAO7C;;AAEA,gBAAA,eAAA,EAAqB;AACnB,kBAAIsd,eAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAAA,IAA+BA,eAAAA,CAAAA,IAAAA,CAAAA,KAAnC,CAAA,EAAgE;AAC9D,iBAAA,KAAA,EAAA,KAAA,IAAiB,CAAA,KAAA,EAAjB,KAAiB,CAAjB;AAFiB;AATwB;;AAe7C,iBAAK3zB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,WAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChCk0B,cAAAA,eAAAA,GAAkBl0B,CAAAA,GAAAA,UAAAA,GAAAA,iBAAAA,GADc,kBAChCk0B;AACAC,cAAAA,OAAAA,GAFgC,CAEhCA;;AACA,mBAAKlC,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,eAAA,EAAiCA,CAAjC,EAAA,EAAsC;AACpC,sBAAMmC,OAAAA,GAAUR,SAAAA,GADoB,MACpC;AACA,oBAAIjB,CAAAA,GAFgC,CAEpC;AACA,sBAAM0B,IAAAA,GAAOD,OAAAA,GAAAA,WAAAA,GAAAA,KAAAA,GAAgCA,OAAAA,GAAAA,CAAAA,GAHT,CAGpC;AACA,sBAAME,YAAAA,GAAeD,IAAAA,GAAO,CAJQ,CAIpC;AACA,oBAAItC,IAAAA,GALgC,CAKpC;AACA,oBAAIwC,OAAAA,GANgC,CAMpC;;AACA,uBAAO5B,CAAAA,GAAP,YAAA,EAAyBA,CAAAA,IAAzB,CAAA,EAAiC;AAC/B4B,kBAAAA,OAAAA,GAAU1Y,GAAAA,CAAIyX,MADiB,EACrBzX,CAAV0Y;AACAV,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,GAAAA,GAAAA,KAAAA,GAFW,KAE/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GAHW,KAG/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GAJW,KAI/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GALW,KAK/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GANW,KAM/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GAPW,KAO/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GARW,KAQ/BV;AACAA,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GATW,KAS/BV;AAhBkC;;AAkBpC,uBAAOlB,CAAAA,GAAP,IAAA,EAAiBA,CAAjB,EAAA,EAAsB;AACpB,sBAAIZ,IAAAA,KAAJ,CAAA,EAAgB;AACdwC,oBAAAA,OAAAA,GAAU1Y,GAAAA,CAAIyX,MADA,EACJzX,CAAV0Y;AACAxC,oBAAAA,IAAAA,GAFc,GAEdA;AAHkB;;AAMpB8B,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,IAAAA,GAAAA,KAAAA,GANA,KAMpBV;AACA9B,kBAAAA,IAAAA,KAPoB,CAOpBA;AAzBkC;AAHN;;AAgChC,qBAAOoC,OAAAA,GAAP,gBAAA,EAAmC;AACjCN,gBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GADiC,CACjCA;AAjC8B;;AAoChCnG,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAAkC1tB,CAAAA,GApCF,iBAoChC0tB;AAnD2C;AAA/C,WAAA,MAqDO,IAAI+D,OAAAA,CAAAA,IAAAA,KAAiB7sB,KAAAA,CAAAA,SAAAA,CAArB,UAAA,EAA2C;AAEhD,kBAAM4vB,eAAAA,GAAkB,CAAC,EACvB,cAAA,IAAA,gBAAA,IAH8C,eAEvB,CAAzB;AAMAvC,YAAAA,CAAAA,GARgD,CAQhDA;AACAwC,YAAAA,gBAAAA,GAAmBj2B,KAAAA,GAAAA,iBAAAA,GAT6B,CAShDi2B;;AACA,iBAAKz0B,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,UAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/BuzB,cAAAA,IAAAA,CAAAA,GAAAA,CAAS1X,GAAAA,CAAAA,QAAAA,CAAAA,MAAAA,EAAqByX,MAAAA,GADC,gBACtBzX,CAAT0X;AACAD,cAAAA,MAAAA,IAF+B,gBAE/BA;;AAEA,kBAAA,eAAA,EAAqB;AACnB,qBAAK,IAAIX,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,gBAAA,EAAsCA,CAAAA,IAAtC,CAAA,EAA8C;AAC5C,sBAAA,cAAA,EAAoB;AAClBY,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcC,cAAAA,CAAeD,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAfC,CAAdD;AAF0C;;AAI5C,sBAAA,gBAAA,EAAsB;AACpBA,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcE,gBAAAA,CAAiBF,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAjBE,CAAdF;AAL0C;;AAO5C,sBAAA,eAAA,EAAqB;AACnBA,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcG,eAAAA,CAAgBH,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAhBG,CAAdH;AAR0C;AAD3B;AAJU;;AAkB/B7F,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAlB+B,CAkB/BA;AACAuE,cAAAA,CAAAA,IAnB+B,iBAmB/BA;AA7B8C;;AA+BhD,gBAAIjyB,CAAAA,GAAJ,WAAA,EAAqB;AACnBy0B,cAAAA,gBAAAA,GAAmBj2B,KAAAA,GAAAA,kBAAAA,GADA,CACnBi2B;AACAlB,cAAAA,IAAAA,CAAAA,GAAAA,CAAS1X,GAAAA,CAAAA,QAAAA,CAAAA,MAAAA,EAAqByX,MAAAA,GAFX,gBAEVzX,CAAT0X;;AAEA,kBAAA,eAAA,EAAqB;AACnB,qBAAK,IAAIZ,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,gBAAA,EAAsCA,CAAAA,IAAtC,CAAA,EAA8C;AAC5C,sBAAA,cAAA,EAAoB;AAClBY,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcC,cAAAA,CAAeD,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAfC,CAAdD;AAF0C;;AAI5C,sBAAA,gBAAA,EAAsB;AACpBA,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcE,gBAAAA,CAAiBF,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAjBE,CAAdF;AAL0C;;AAO5C,sBAAA,eAAA,EAAqB;AACnBA,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcG,eAAAA,CAAgBH,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAhBG,CAAdH;AAR0C;AAD3B;AAJF;;AAkBnB7F,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAlBmB,CAkBnBA;AAjD8C;AAA3C,WAAA,MAmDA,IAAI+D,OAAAA,CAAAA,IAAAA,KAAiB7sB,KAAAA,CAAAA,SAAAA,CAArB,SAAA,EAA0C;AAE/C,kBAAM4vB,eAAAA,GAAkB,CAAC,EACvB,cAAA,IAAA,gBAAA,IAH6C,eAEtB,CAAzB;AAMAN,YAAAA,eAAAA,GAR+C,iBAQ/CA;AACAO,YAAAA,gBAAAA,GAAmBj2B,KAAAA,GAT4B,eAS/Ci2B;;AACA,iBAAKz0B,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,WAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChC,kBAAIA,CAAAA,IAAJ,UAAA,EAAqB;AACnBk0B,gBAAAA,eAAAA,GADmB,kBACnBA;AACAO,gBAAAA,gBAAAA,GAAmBj2B,KAAAA,GAFA,eAEnBi2B;AAH8B;;AAMhCN,cAAAA,OAAAA,GANgC,CAMhCA;;AACA,mBAAKlC,CAAAA,GAAL,gBAAA,EAA2BA,CAA3B,EAAA,GAAkC;AAChCsB,gBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAAkB1X,GAAAA,CAAIyX,MADU,EACdzX,CAAlB0X;AACAA,gBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAAkB1X,GAAAA,CAAIyX,MAFU,EAEdzX,CAAlB0X;AACAA,gBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAAkB1X,GAAAA,CAAIyX,MAHU,EAGdzX,CAAlB0X;AACAA,gBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAJgC,GAIhCA;AAX8B;;AAchC,kBAAA,eAAA,EAAqB;AACnB,qBAAK,IAAIZ,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,OAAA,EAA6BA,CAAAA,IAA7B,CAAA,EAAqC;AACnC,sBAAA,cAAA,EAAoB;AAClBY,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcC,cAAAA,CAAeD,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAfC,CAAdD;AAFiC;;AAInC,sBAAA,gBAAA,EAAsB;AACpBA,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcE,gBAAAA,CAAiBF,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAjBE,CAAdF;AALiC;;AAOnC,sBAAA,eAAA,EAAqB;AACnBA,oBAAAA,IAAAA,CAAKZ,CAAAA,GAALY,CAAAA,CAAAA,GAAcG,eAAAA,CAAgBH,IAAAA,CAAKZ,CAAAA,GADhB,CACWY,CAAhBG,CAAdH;AARiC;AADlB;AAdW;;AA4BhC7F,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAAkC1tB,CAAAA,GA5BF,iBA4BhC0tB;AAtC6C;AAA1C,WAAA,MAwCA;AACL,kBAAM,IAAA,KAAA,CAAU,mBAAmB+D,OAAAA,CAD9B,IAAA,EACC,CAAN;AAnM2D;AA/e/D;;AAsrBA,iBAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAA0C;AACxC,gBAAMhzB,MAAAA,GAASgzB,OAAAA,CAAf,MAAA;AAAA,gBACEjzB,KAAAA,GAAQizB,OAAAA,CAF8B,KACxC;AAEA,gBAAMyB,kBAAAA,GAAqBz0B,MAAAA,GAHa,iBAGxC;AACA,gBAAM00B,UAAAA,GAAc,CAAA,MAAA,GAAD,kBAAC,IAJoB,iBAIxC;AACA,gBAAMC,WAAAA,GAAcF,kBAAAA,KAAAA,CAAAA,GAAAA,UAAAA,GAAwCC,UAAAA,GALpB,CAKxC;AAEA,gBAAME,YAAAA,GAAe3F,GAAAA,CAAAA,eAAAA,CAAAA,KAAAA,EAPmB,iBAOnBA,CAArB;AACA,cAAI4F,MAAAA,GARoC,CAQxC;AACA,gBAAMzX,GAAAA,GAAM4V,OAAAA,CAT4B,IASxC;AACA,gBAAM8B,IAAAA,GAAOF,YAAAA,CAV2B,IAUxC;;AAEA,eAAK,IAAIrzB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,WAAA,EAAiCA,CAAjC,EAAA,EAAsC;AACpC,kBAAMk0B,eAAAA,GACJl0B,CAAAA,GAAAA,UAAAA,GAAAA,iBAAAA,GAFkC,kBACpC;AAKA,gBAAIm0B,OAAAA,GANgC,CAMpC;;AACA,iBAAK,IAAIlC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,eAAA,EAAqCA,CAArC,EAAA,EAA0C;AACxC,kBAAA,IAAA;AAAA,kBACEF,IAAAA,GAFsC,CACxC;;AAEA,mBAAK,IAAIY,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC9B,oBAAI,CAAJ,IAAA,EAAW;AACTb,kBAAAA,IAAAA,GAAOjW,GAAAA,CAAIyX,MADF,EACFzX,CAAPiW;AACAC,kBAAAA,IAAAA,GAFS,GAETA;AAH4B;;AAK9BwB,gBAAAA,IAAAA,CAAAA,OAAAA,CAAAA,GAAgBzB,IAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GALc,GAK9ByB;AACAY,gBAAAA,OAAAA,IAN8B,CAM9BA;AACApC,gBAAAA,IAAAA,KAP8B,CAO9BA;AAVsC;AAPN;;AAoBpCrE,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAAkC1tB,CAAAA,GApBE,iBAoBpC0tB;AAhCsC;AAtrB1C;;AA0tBA,iBAAA,YAAA,CAAA,SAAA,EAAA,OAAA,EAA0C;AACxC,gBAAMgH,UAAAA,GAAa,CAAA,aAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,YAAA,EAAA,0BAAA,EAAnB,MAAmB,CAAnB;;AAYA,eAAK,IAAI10B,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK20B,UAAAA,CAArB,MAAA,EAAwC10B,CAAAA,GAAxC,EAAA,EAAgDA,CAAhD,EAAA,EAAqD;AACnD,kBAAM20B,QAAAA,GAAWD,UAAAA,CADkC,CAClCA,CAAjB;;AACA,gBAAIE,SAAAA,CAAAA,QAAAA,CAAAA,KAAJ,SAAA,EAAuC;AACrCC,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,GAAoBD,SAAAA,CADiB,QACjBA,CAApBC;AAHiD;AAbb;;AAmBxC,cAAID,SAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAAyC;AACvCC,YAAAA,OAAAA,CAAAA,WAAAA,CAAoBD,SAAAA,CADmB,WACnBA,EAApBC;AACAA,YAAAA,OAAAA,CAAAA,cAAAA,GAAyBD,SAAAA,CAFc,cAEvCC;AArBsC;AA1tB1C;;AAmvBA,iBAAA,iBAAA,CAAA,GAAA,EAAgC;AAC9BnH,UAAAA,GAAAA,CAAAA,WAAAA,GAD8B,SAC9BA;AACAA,UAAAA,GAAAA,CAAAA,SAAAA,GAF8B,SAE9BA;AACAA,UAAAA,GAAAA,CAAAA,QAAAA,GAH8B,SAG9BA;AACAA,UAAAA,GAAAA,CAAAA,WAAAA,GAJ8B,CAI9BA;AACAA,UAAAA,GAAAA,CAAAA,SAAAA,GAL8B,CAK9BA;AACAA,UAAAA,GAAAA,CAAAA,OAAAA,GAN8B,MAM9BA;AACAA,UAAAA,GAAAA,CAAAA,QAAAA,GAP8B,OAO9BA;AACAA,UAAAA,GAAAA,CAAAA,UAAAA,GAR8B,EAQ9BA;AACAA,UAAAA,GAAAA,CAAAA,wBAAAA,GAT8B,aAS9BA;AACAA,UAAAA,GAAAA,CAAAA,IAAAA,GAV8B,iBAU9BA;;AACA,cAAIA,GAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAAmC;AACjCA,YAAAA,GAAAA,CAAAA,WAAAA,CADiC,EACjCA;AACAA,YAAAA,GAAAA,CAAAA,cAAAA,GAFiC,CAEjCA;AAb4B;AAnvBhC;;AAowBA,iBAAA,oBAAA,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAiD;AAC/C,gBAAMrY,MAAAA,GAASD,KAAAA,CADgC,MAC/C;;AACA,eAAK,IAAIpV,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClC,kBAAM80B,KAAAA,GAAQ1f,KAAAA,CADoB,CACpBA,CAAd;;AACA,gBAAI0f,KAAAA,KAAJ,CAAA,EAAiB;AACf1f,cAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GADe,EACfA;AACAA,cAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAFe,EAEfA;AACAA,cAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAHe,EAGfA;AAHF,aAAA,MAIO,IAAI0f,KAAAA,GAAJ,GAAA,EAAiB;AACtB,oBAAMC,MAAAA,GAAS,MADO,KACtB;AACA3f,cAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAgBA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAAA,KAAAA,GAAuB4f,EAAAA,GAAxB,MAAC5f,IAFM,CAEtBA;AACAA,cAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAgBA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAAA,KAAAA,GAAuB6f,EAAAA,GAAxB,MAAC7f,IAHM,CAGtBA;AACAA,cAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAgBA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAAA,KAAAA,GAAuB8f,EAAAA,GAAxB,MAAC9f,IAJM,CAItBA;AAVgC;AAFW;AApwBjD;;AAqxBA,iBAAA,iBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAA6D;AAC3D,gBAAMC,MAAAA,GAAS8f,QAAAA,CAD4C,MAC3D;AACA,gBAAMx2B,KAAAA,GAAQ,IAF6C,GAE3D;;AACA,eAAK,IAAIqB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClC,kBAAM80B,KAAAA,GAAQM,WAAAA,GAAcA,WAAAA,CAAYD,QAAAA,CAA1BC,CAA0BD,CAAZC,CAAdA,GAAyCD,QAAAA,CADrB,CACqBA,CAAvD;AACAE,YAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAgBA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,GAAD,KAACA,GAFkB,CAElCA;AALyD;AArxB7D;;AA8xBA,iBAAA,sBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAkE;AAChE,gBAAMhgB,MAAAA,GAAS8f,QAAAA,CADiD,MAChE;;AACA,eAAK,IAAIn1B,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClC,kBAAMs1B,CAAAA,GACJH,QAAAA,CAASn1B,CAAAA,GAATm1B,CAAAA,CAAAA,GAAAA,EAAAA,GACAA,QAAAA,CAASn1B,CAAAA,GAATm1B,CAAAA,CAAAA,GADAA,GAAAA,GAEAA,QAAAA,CAASn1B,CAAAA,GAATm1B,CAAAA,CAAAA,GAJgC,EAClC;AAIAE,YAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAeD,WAAAA,GACVC,SAAAA,CAAAA,CAAAA,CAAAA,GAAeD,WAAAA,CAAYE,CAAAA,IAA5B,CAAgBF,CAAfC,IADUD,CAAAA,GAEVC,SAAAA,CAAAA,CAAAA,CAAAA,GAAD,CAACA,IAP6B,EAKlCA;AAP8D;AA9xBlE;;AA2yBA,iBAAA,mBAAA,CAAA,OAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAQE;AACA,gBAAME,WAAAA,GAAc,CAAC,CADrB,QACA;AACA,gBAAMP,EAAAA,GAAKO,WAAAA,GAAcC,QAAAA,CAAdD,CAAcC,CAAdD,GAFX,CAEA;AACA,gBAAMN,EAAAA,GAAKM,WAAAA,GAAcC,QAAAA,CAAdD,CAAcC,CAAdD,GAHX,CAGA;AACA,gBAAML,EAAAA,GAAKK,WAAAA,GAAcC,QAAAA,CAAdD,CAAcC,CAAdD,GAJX,CAIA;AAEA,cANA,SAMA;;AACA,cAAIE,OAAAA,KAAJ,YAAA,EAA8B;AAC5BC,YAAAA,SAAAA,GAD4B,sBAC5BA;AADF,WAAA,MAEO;AACLA,YAAAA,SAAAA,GADK,iBACLA;AAVF;;AAcA,gBAAMC,iBAAAA,GAdN,OAcA;AACA,gBAAMC,SAAAA,GAAYt3B,IAAAA,CAAAA,GAAAA,CAAAA,MAAAA,EAAiBA,IAAAA,CAAAA,IAAAA,CAAUq3B,iBAAAA,GAf7C,KAemCr3B,CAAjBA,CAAlB;;AACA,eAAK,IAAIu3B,GAAAA,GAAT,CAAA,EAAkBA,GAAAA,GAAlB,MAAA,EAAgCA,GAAAA,IAAhC,SAAA,EAAkD;AAChD,kBAAMC,WAAAA,GAAcx3B,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAoBG,MAAAA,GADQ,GAC5BH,CAApB;AACA,kBAAM62B,QAAAA,GAAWY,OAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAF+B,WAE/BA,CAAjB;AACA,kBAAMV,SAAAA,GAAYW,QAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAH8B,WAG9BA,CAAlB;;AAEA,gBAAA,WAAA,EAAiB;AACfC,cAAAA,oBAAAA,CAAqBd,QAAAA,CAArBc,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EADe,EACfA,CAAAA;AAN8C;;AAQhDP,YAAAA,SAAAA,CAAUP,QAAAA,CAAVO,IAAAA,EAAyBL,SAAAA,CAAzBK,IAAAA,EARgD,WAQhDA,CAAAA;AAEAK,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EAVgD,GAUhDA;AA1BF;AAnzBF;;AAi1BA,iBAAA,YAAA,CAAA,GAAA,EAAA,KAAA,EAAA,QAAA,EAA4C;AAC1C,gBAAMhE,IAAAA,GAAOhf,KAAAA,CAD6B,MAC1C;AACA,gBAAMgjB,OAAAA,GAAUhjB,KAAAA,CAF0B,OAE1C;AAEA2a,UAAAA,GAAAA,CAAAA,YAAAA,CACE3a,KAAAA,CADF2a,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAIE3a,KAAAA,CAJF2a,MAAAA,EAKE3a,KAAAA,CALF2a,OAAAA,EAME3a,KAAAA,CAVwC,OAI1C2a;AASAwI,UAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAGEnE,IAAAA,CAHFmE,KAAAA,EAIEnE,IAAAA,CAJFmE,MAAAA,EAKEnjB,KAAAA,CALFmjB,OAAAA,EAMEnjB,KAAAA,CANFmjB,QAAAA,EAOEnjB,KAAAA,CApBwC,WAa1CmjB,CAAAA;AASAxI,UAAAA,GAAAA,CAAAA,SAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAtB0C,CAsB1CA;AAv2BF;;AA02BA,iBAAA,wBAAA,CAAA,SAAA,EAAA,WAAA,EAA0D;AACxD,gBAAM/uB,KAAAA,GAAQ6Y,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAD0C,SAC1CA,CAAd;;AAGA7Y,UAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWL,IAAAA,CAAAA,MAAAA,CAAYK,KAAAA,CAJiC,CAIjCA,CAAZL,CAAXK;AACAA,UAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWL,IAAAA,CAAAA,MAAAA,CAAYK,KAAAA,CALiC,CAKjCA,CAAZL,CAAXK;AACA,gBAAMw3B,WAAAA,GAAc73B,IAAAA,CAAAA,MAAAA,CACjB,CAAA,UAAA,CAAA,gBAAA,IAAD,CAAC,IAAoCpC,cAAAA,CAAAA,aAAAA,CAPiB,gBAMpCoC,CAApB;;AAGA,cAAI83B,WAAAA,KAAJ,SAAA,EAA+B;AAE7B,mBAF6B,WAE7B;AAFF,WAAA,MAGO,IAAIz3B,KAAAA,CAAAA,CAAAA,CAAAA,IAAAA,WAAAA,IAA2BA,KAAAA,CAAAA,CAAAA,CAAAA,IAA/B,WAAA,EAAwD;AAE7D,mBAF6D,IAE7D;AAdsD;;AAiBxD,iBAjBwD,KAiBxD;AA33BF;;AA83BA,cAAM03B,eAAAA,GAAkB,CAAA,MAAA,EAAA,OAAA,EAAxB,QAAwB,CAAxB;AACA,cAAMC,gBAAAA,GAAmB,CAAA,OAAA,EAAA,OAAA,EAAzB,OAAyB,CAAzB;AACA,cAAMC,WAAAA,GAh4BN,EAg4BA;AACA,cAAMC,OAAAA,GAj4BN,EAi4BA;;AAEA,cAAA,cAAA,CAAqB;AACnBl6B,UAAAA,WAAAA,CAAAA,SAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,aAAAA,EAAAA,UAAAA,EAAAA,qBAAAA,EAOE;AACA,iBAAA,GAAA,GADA,SACA;AACA,iBAAA,OAAA,GAAe,IAFf,gBAEe,EAAf;AACA,iBAAA,UAAA,GAHA,EAGA;AACA,iBAAA,WAAA,GAJA,IAIA;AACA,iBAAA,aAAA,GALA,KAKA;AACA,iBAAA,GAAA,GANA,IAMA;AACA,iBAAA,KAAA,GAPA,IAOA;AACA,iBAAA,UAAA,GARA,UAQA;AACA,iBAAA,IAAA,GATA,IASA;AACA,iBAAA,aAAA,GAVA,aAUA;AACA,iBAAA,UAAA,GAXA,UAWA;AACA,iBAAA,UAAA,GAZA,EAYA;AACA,iBAAA,eAAA,GAbA,IAaA;AAGA,iBAAA,aAAA,GAhBA,IAgBA;AACA,iBAAA,kBAAA,GAjBA,EAiBA;AACA,iBAAA,UAAA,GAlBA,CAkBA;AACA,iBAAA,UAAA,GAnBA,EAmBA;AACA,iBAAA,YAAA,GApBA,CAoBA;AACA,iBAAA,SAAA,GArBA,IAqBA;AACA,iBAAA,cAAA,GAtBA,IAsBA;AACA,iBAAA,kBAAA,GAvBA,EAuBA;AACA,iBAAA,qBAAA,GAxBA,qBAwBA;AACA,iBAAA,cAAA,GAAsB,IAAA,cAAA,CAAmB,KAzBzC,aAyBsB,CAAtB;AACA,iBAAA,oBAAA,GAA4B,IAAA,QAAA,CA1B5B,0BA0B4B,CAA5B;AACA,iBAAA,cAAA,GAAsB,IA3BtB,GA2BsB,EAAtB;;AACA,gBAAA,SAAA,EAAe;AAGb+0B,cAAAA,0BAAAA,CAHa,SAGbA,CAAAA;AA/BF;;AAiCA,iBAAA,0BAAA,GAjCA,IAiCA;AAzCiB;;AA4CnBoF,UAAAA,YAAAA,SAKG;AAAA,gBALU;AAAA,cAAA,SAAA;AAAA,cAAA,QAAA;AAGXlL,cAAAA,YAAAA,GAHW,KAAA;AAIX3I,cAAAA,UAAAA,GAJF6T;AAAa,aAKV;AAMD,kBAAMj4B,KAAAA,GAAQ,KAAA,GAAA,CAAA,MAAA,CANb,KAMD;AACA,kBAAMC,MAAAA,GAAS,KAAA,GAAA,CAAA,MAAA,CAPd,MAOD;AAEA,iBAAA,GAAA,CATC,IASD;AACA,iBAAA,GAAA,CAAA,SAAA,GAAqBmkB,UAAAA,IAVpB,oBAUD;AACA,iBAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAXC,MAWD;AACA,iBAAA,GAAA,CAZC,OAYD;;AAEA,gBAAA,YAAA,EAAkB;AAChB,oBAAM8T,iBAAAA,GAAoB,KAAA,cAAA,CAAA,SAAA,CAAA,aAAA,EAAA,KAAA,EAAA,MAAA,EADV,IACU,CAA1B;AAMA,mBAAA,YAAA,GAAoB,KAPJ,GAOhB;AACA,mBAAA,iBAAA,GAAyBA,iBAAAA,CART,MAQhB;AACA,mBAAA,GAAA,GAAWA,iBAAAA,CATK,OAShB;AACA,mBAAA,GAAA,CAVgB,IAUhB;AAGA,mBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EAAmC,KAAA,YAAA,CAbnB,mBAahB;AA3BD;;AA8BD,iBAAA,GAAA,CA9BC,IA8BD;AACAC,YAAAA,iBAAAA,CAAkB,KA/BjB,GA+BDA,CAAAA;;AACA,gBAAA,SAAA,EAAe;AACb,mBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EADa,SACb;AAjCD;;AAmCD,iBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EAAmCC,QAAAA,CAnClC,SAmCD;AAEA,iBAAA,aAAA,GAAqB,KAAA,GAAA,CAAA,mBAAA,CArCpB,KAqCoB,EAArB;AACA,iBAAA,oBAAA,GAA4Bt4B,IAAAA,CAAAA,KAAAA,CAC1B,KAAA,aAAA,CAD0BA,CAC1B,CAD0BA,EAE1B,KAAA,aAAA,CAxCD,CAwCC,CAF0BA,CAA5B;;AAKA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CADmB,WACnB;AA5CD;AAjDgB;;AAiGnBu4B,UAAAA,mBAAAA,CAAAA,YAAAA,EAAAA,iBAAAA,EAAAA,gBAAAA,EAAAA,OAAAA,EAKE;AACA,kBAAMzT,SAAAA,GAAYQ,YAAAA,CADlB,SACA;AACA,kBAAMT,OAAAA,GAAUS,YAAAA,CAFhB,OAEA;AACA,gBAAI5jB,CAAAA,GAAI82B,iBAAAA,IAHR,CAGA;AACA,kBAAMC,YAAAA,GAAe3T,SAAAA,CAJrB,MAIA;;AAGA,gBAAI2T,YAAAA,KAAJ,CAAA,EAAwB;AACtB,qBADsB,CACtB;AARF;;AAWA,kBAAMC,eAAAA,GACJD,YAAAA,GAAAA,CAAAA,GAAAA,eAAAA,IACA,OAAA,gBAAA,KAbF,UAWA;AAGA,kBAAME,OAAAA,GAAUD,eAAAA,GAAkBj2B,IAAAA,CAAAA,GAAAA,KAAlBi2B,cAAAA,GAdhB,CAcA;AACA,gBAAI5E,KAAAA,GAfJ,CAeA;AAEA,kBAAMzO,UAAAA,GAAa,KAjBnB,UAiBA;AACA,kBAAMD,IAAAA,GAAO,KAlBb,IAkBA;AACA,gBAnBA,IAmBA;;AAEA,mBAAA,IAAA,EAAa;AACX,kBAAIwT,OAAAA,KAAAA,SAAAA,IAAyBl3B,CAAAA,KAAMk3B,OAAAA,CAAnC,cAAA,EAA2D;AACzDA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,EADyD,gBACzDA;AACA,uBAFyD,CAEzD;AAHS;;AAMXC,cAAAA,IAAAA,GAAOhU,OAAAA,CANI,CAMJA,CAAPgU;;AAEA,kBAAIA,IAAAA,KAASrqB,KAAAA,CAAAA,GAAAA,CAAb,UAAA,EAA6B;AAC3B,qBAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAuBsW,SAAAA,CADI,CACJA,CAAvB;AADF,eAAA,MAEO;AACL,qBAAA,MAAA,QAAA,IAAuBA,SAAAA,CAAvB,CAAuBA,CAAvB,EAAqC;AACnC,wBAAMgU,QAAAA,GAAWC,QAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IAAAA,UAAAA,GADkB,IACnC;;AAIA,sBAAI,CAACD,QAAAA,CAAAA,GAAAA,CAAL,QAAKA,CAAL,EAA6B;AAC3BA,oBAAAA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAD2B,gBAC3BA;AACA,2BAF2B,CAE3B;AAPiC;AADhC;AAVI;;AAuBXp3B,cAAAA,CAvBW;;AA0BX,kBAAIA,CAAAA,KAAJ,YAAA,EAAwB;AACtB,uBADsB,CACtB;AA3BS;;AAgCX,kBAAIg3B,eAAAA,IAAmB,EAAA,KAAA,GAAvB,eAAA,EAAkD;AAChD,oBAAIj2B,IAAAA,CAAAA,GAAAA,KAAJ,OAAA,EAA0B;AACxBu2B,kBAAAA,gBADwB;AAExB,yBAFwB,CAExB;AAH8C;;AAKhDlF,gBAAAA,KAAAA,GALgD,CAKhDA;AArCS;AArBb;AAtGiB;;AAwKnBmF,UAAAA,UAAAA,GAAa;AAEX,mBAAO,KAAA,UAAA,CAAA,MAAA,IAA0B,KAAA,OAAA,CAAA,WAAA,KAAjC,IAAA,EAAoE;AAClE,mBADkE,OAClE;AAHS;;AAMX,iBAAA,GAAA,CANW,OAMX;;AAEA,gBAAI,KAAJ,iBAAA,EAA4B;AAC1B,mBAAA,GAAA,GAAW,KADe,YAC1B;AACA,mBAAA,GAAA,CAF0B,IAE1B;AACA,mBAAA,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAH0B,CAG1B;AACA,mBAAA,GAAA,CAAA,SAAA,CAAmB,KAAnB,iBAAA,EAAA,CAAA,EAJ0B,CAI1B;AACA,mBAAA,GAAA,CAL0B,OAK1B;AACA,mBAAA,iBAAA,GAN0B,IAM1B;AAdS;;AAiBX,iBAAA,cAAA,CAjBW,KAiBX;AACA,iBAAA,oBAAA,CAlBW,KAkBX;AACA,iBAAA,cAAA,CAnBW,KAmBX;;AAEA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CADmB,SACnB;AAtBS;AAxKM;;AAkMnBC,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,gBAAAA,EAAmC;AAIjC,kBAAMh5B,KAAAA,GAAQi5B,GAAAA,CAJmB,KAIjC;AACA,kBAAMh5B,MAAAA,GAASg5B,GAAAA,CALkB,MAKjC;AACA,gBAAIC,UAAAA,GAAap5B,IAAAA,CAAAA,GAAAA,CACfA,IAAAA,CAAAA,KAAAA,CAAWuZ,gBAAAA,CAAXvZ,CAAWuZ,CAAXvZ,EAAgCuZ,gBAAAA,CADjBvZ,CACiBuZ,CAAhCvZ,CADeA,EANgB,CAMhBA,CAAjB;AAIA,gBAAIq5B,WAAAA,GAAcr5B,IAAAA,CAAAA,GAAAA,CAChBA,IAAAA,CAAAA,KAAAA,CAAWuZ,gBAAAA,CAAXvZ,CAAWuZ,CAAXvZ,EAAgCuZ,gBAAAA,CADhBvZ,CACgBuZ,CAAhCvZ,CADgBA,EAVe,CAUfA,CAAlB;AAKA,gBAAIs5B,UAAAA,GAAJ,KAAA;AAAA,gBACEC,WAAAA,GAhB+B,MAejC;AAEA,gBAAIC,WAAAA,GAjB6B,WAiBjC;AACA,gBAAA,SAAA,EAlBiC,MAkBjC;;AACA,mBACGJ,UAAAA,GAAAA,CAAAA,IAAkBE,UAAAA,GAAnB,CAACF,IACAC,WAAAA,GAAAA,CAAAA,IAAmBE,WAAAA,GAFtB,CAAA,EAGE;AACA,kBAAIE,QAAAA,GAAJ,UAAA;AAAA,kBACEC,SAAAA,GAFF,WACA;;AAEA,kBAAIN,UAAAA,GAAAA,CAAAA,IAAkBE,UAAAA,GAAtB,CAAA,EAAsC;AACpCG,gBAAAA,QAAAA,GAAWz5B,IAAAA,CAAAA,IAAAA,CAAUs5B,UAAAA,GADe,CACzBt5B,CAAXy5B;AACAL,gBAAAA,UAAAA,IAAcE,UAAAA,GAFsB,QAEpCF;AALF;;AAOA,kBAAIC,WAAAA,GAAAA,CAAAA,IAAmBE,WAAAA,GAAvB,CAAA,EAAwC;AACtCG,gBAAAA,SAAAA,GAAY15B,IAAAA,CAAAA,IAAAA,CAAUu5B,WAAAA,GADgB,CAC1Bv5B,CAAZ05B;AACAL,gBAAAA,WAAAA,IAAeE,WAAAA,GAFuB,SAEtCF;AATF;;AAWAM,cAAAA,SAAAA,GAAY,KAAA,cAAA,CAAA,SAAA,CAAA,WAAA,EAAA,QAAA,EAXZ,SAWY,CAAZA;AAKAC,cAAAA,MAAAA,GAASD,SAAAA,CAhBT,OAgBAC;AACAA,cAAAA,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,QAAAA,EAjBA,SAiBAA;AACAA,cAAAA,MAAAA,CAAAA,SAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,QAAAA,EAlBA,SAkBAA;AAWAT,cAAAA,GAAAA,GAAMQ,SAAAA,CA7BN,MA6BAR;AACAG,cAAAA,UAAAA,GA9BA,QA8BAA;AACAC,cAAAA,WAAAA,GA/BA,SA+BAA;AACAC,cAAAA,WAAAA,GAAcA,WAAAA,KAAAA,WAAAA,GAAAA,WAAAA,GAhCd,WAgCAA;AAtD+B;;AAwDjC,mBAAO;AAAA,cAAA,GAAA;AAAA,cAAA,UAAA;AAAA,cAAA;AAAA,aAAP;AA1PiB;;AAiQnBK,UAAAA,iBAAAA,CAAAA,GAAAA,EAAuB;AACrB,kBAAMzK,GAAAA,GAAM,KADS,GACrB;AACA,kBAAMlvB,KAAAA,GAAQi5B,GAAAA,CAAd,KAAA;AAAA,kBACEh5B,MAAAA,GAASg5B,GAAAA,CAHU,MAErB;AAEA,kBAAMW,SAAAA,GAAY,KAAA,OAAA,CAJG,SAIrB;AACA,kBAAMC,aAAAA,GAAgB,KAAA,OAAA,CALD,WAKrB;AACA,kBAAMC,UAAAA,GAAa,KAAA,cAAA,CAAA,SAAA,CAAA,YAAA,EAAA,KAAA,EANE,MAMF,CAAnB;AAKA,kBAAMvC,OAAAA,GAAUuC,UAAAA,CAXK,OAWrB;AACAC,YAAAA,kBAAAA,CAAAA,OAAAA,EAZqB,GAYrBA,CAAAA;AAMA,kBAAMC,WAAAA,GAAc9K,GAAAA,CAlBC,mBAkBrB;;AACA,gBAAI+K,YAAAA,GAAe,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,WAAA,EAA4B,CAC7C,IAD6C,KAAA,EAAA,CAAA,EAAA,CAAA,EAI7C,CAAA,CAAA,GAJ6C,MAAA,EAAA,CAAA,EAA/C,CAA+C,CAA5B,CAAnB;;AAQAA,YAAAA,YAAAA,GAAe,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,YAAA,EAA6B,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAgB,CAA5DA,MAA4C,CAA7B,CAAfA;;AACA,kBAAMC,KAAAA,GAAQ,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EA5BO,YA4BP,CAAd;;AACA,kBAAMC,KAAAA,GAAQ,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,MAAoB,CAApB,EA7BO,YA6BP,CAAd;;AACA,kBAAM55B,IAAAA,GAAO,KAAA,CAAA,IAAA,CAAA,aAAA,CAAmB,CAAC25B,KAAAA,CAAD,CAACA,CAAD,EAAWA,KAAAA,CAAX,CAAWA,CAAX,EAAqBC,KAAAA,CAArB,CAAqBA,CAArB,EAA+BA,KAAAA,CAA/D,CAA+DA,CAA/B,CAAnB,CAAb;;AACA,kBAAMC,UAAAA,GAAat6B,IAAAA,CAAAA,IAAAA,CAAUS,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CA/BlB,CA+BkBA,CAApBT,CAAnB;AACA,kBAAMu6B,WAAAA,GAAcv6B,IAAAA,CAAAA,IAAAA,CAAUS,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAhCnB,CAgCmBA,CAApBT,CAApB;AACA,kBAAMw6B,UAAAA,GAAa,KAAA,cAAA,CAAA,SAAA,CAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAjCE,IAiCF,CAAnB;AAMA,kBAAMC,OAAAA,GAAUD,UAAAA,CAvCK,OAuCrB;AAEA,kBAAMp7B,OAAAA,GAAUY,IAAAA,CAAAA,GAAAA,CAASo6B,KAAAA,CAATp6B,CAASo6B,CAATp6B,EAAmBq6B,KAAAA,CAzCd,CAyCcA,CAAnBr6B,CAAhB;AACA,kBAAMX,OAAAA,GAAUW,IAAAA,CAAAA,GAAAA,CAASo6B,KAAAA,CAATp6B,CAASo6B,CAATp6B,EAAmBq6B,KAAAA,CA1Cd,CA0CcA,CAAnBr6B,CAAhB;AACAy6B,YAAAA,OAAAA,CAAAA,SAAAA,CAAkB,CAAlBA,OAAAA,EAA4B,CA3CP,OA2CrBA;AACAA,YAAAA,OAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,OAAAA,EA5CqB,YA4CrBA;;AAEA,kBAAMC,MAAAA,GAAS,KAAA,WAAA,CACbV,UAAAA,CADa,MAAA,EAEbS,OAAAA,CAhDmB,0BA8CN,CAAf;;AAIAA,YAAAA,OAAAA,CAAAA,qBAAAA,GAAgCE,wBAAAA,CAC9BF,OAAAA,CAD8BE,mBAAAA,EAE9BxB,GAAAA,CApDmB,WAkDWwB,CAAhCF;AAIAA,YAAAA,OAAAA,CAAAA,SAAAA,CACEC,MAAAA,CADFD,GAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAIEC,MAAAA,CAAAA,GAAAA,CAJFD,KAAAA,EAKEC,MAAAA,CAAAA,GAAAA,CALFD,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAtDqB,MAsDrBA;AAWAA,YAAAA,OAAAA,CAAAA,wBAAAA,GAjEqB,WAiErBA;;AAEA,kBAAMG,OAAAA,GAAU,KAAA,CAAA,IAAA,CAAA,SAAA,CAAeH,OAAAA,CAAf,0BAAA,EAAmD,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAKjE,CALiE,OAAA,EAMjE,CANF,OAAmE,CAAnD,CAAhB;;AAQAA,YAAAA,OAAAA,CAAAA,SAAAA,GAAoBV,aAAAA,GAChBD,SAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAAA,OAAAA,EADgBC,KAChBD,CADgBC,GA3EC,SA2ErBU;AAIAA,YAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EA/EqB,MA+ErBA;AAGA,mBAAO;AACLr8B,cAAAA,MAAAA,EAAQo8B,UAAAA,CADH,MAAA;AAELp7B,cAAAA,OAAAA,EAASY,IAAAA,CAAAA,KAAAA,CAFJ,OAEIA,CAFJ;AAGLX,cAAAA,OAAAA,EAASW,IAAAA,CAAAA,KAAAA,CAHJ,OAGIA;AAHJ,aAAP;AAnViB;;AA2VnB0O,UAAAA,YAAAA,CAAAA,KAAAA,EAAoB;AAClB,iBAAA,OAAA,CAAA,SAAA,GADkB,KAClB;AACA,iBAAA,GAAA,CAAA,SAAA,GAFkB,KAElB;AA7ViB;;AAgWnBC,UAAAA,UAAAA,CAAAA,KAAAA,EAAkB;AAChB,iBAAA,GAAA,CAAA,OAAA,GAAmBopB,eAAAA,CADH,KACGA,CAAnB;AAjWiB;;AAoWnBnpB,UAAAA,WAAAA,CAAAA,KAAAA,EAAmB;AACjB,iBAAA,GAAA,CAAA,QAAA,GAAoBopB,gBAAAA,CADH,KACGA,CAApB;AArWiB;;AAwWnBnpB,UAAAA,aAAAA,CAAAA,KAAAA,EAAqB;AACnB,iBAAA,GAAA,CAAA,UAAA,GADmB,KACnB;AAzWiB;;AA4WnBC,UAAAA,OAAAA,CAAAA,SAAAA,EAAAA,SAAAA,EAA8B;AAC5B,kBAAMsgB,GAAAA,GAAM,KADgB,GAC5B;;AACA,gBAAIA,GAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAAmC;AACjCA,cAAAA,GAAAA,CAAAA,WAAAA,CADiC,SACjCA;AACAA,cAAAA,GAAAA,CAAAA,cAAAA,GAFiC,SAEjCA;AAJ0B;AA5WX;;AAoXnBrgB,UAAAA,kBAAAA,CAAAA,MAAAA,EApXmB,CAAA;;AAwXnBC,UAAAA,WAAAA,CAAAA,QAAAA,EAxXmB,CAAA;;AA4XnBC,UAAAA,SAAAA,CAAAA,MAAAA,EAAkB;AAChB,iBAAK,IAAIvN,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKo5B,MAAAA,CAArB,MAAA,EAAoCn5B,CAAAA,GAApC,EAAA,EAA4CA,CAA5C,EAAA,EAAiD;AAC/C,oBAAMo5B,KAAAA,GAAQD,MAAAA,CADiC,CACjCA,CAAd;AACA,oBAAME,GAAAA,GAAMD,KAAAA,CAFmC,CAEnCA,CAAZ;AACA,oBAAMnjB,KAAAA,GAAQmjB,KAAAA,CAHiC,CAGjCA,CAAd;;AAEA,sBAAA,GAAA;AACE,qBAAA,IAAA;AACE,uBAAA,YAAA,CADF,KACE;AAFJ;;AAIE,qBAAA,IAAA;AACE,uBAAA,UAAA,CADF,KACE;AALJ;;AAOE,qBAAA,IAAA;AACE,uBAAA,WAAA,CADF,KACE;AARJ;;AAUE,qBAAA,IAAA;AACE,uBAAA,aAAA,CADF,KACE;AAXJ;;AAaE,qBAAA,GAAA;AACE,uBAAA,OAAA,CAAanjB,KAAAA,CAAb,CAAaA,CAAb,EAAuBA,KAAAA,CADzB,CACyBA,CAAvB;AAdJ;;AAgBE,qBAAA,IAAA;AACE,uBAAA,kBAAA,CADF,KACE;AAjBJ;;AAmBE,qBAAA,IAAA;AACE,uBAAA,WAAA,CADF,KACE;AApBJ;;AAsBE,qBAAA,MAAA;AACE,uBAAA,OAAA,CAAaA,KAAAA,CAAb,CAAaA,CAAb,EAAuBA,KAAAA,CADzB,CACyBA,CAAvB;AAvBJ;;AAyBE,qBAAA,IAAA;AACE,uBAAA,OAAA,CAAA,WAAA,GAA2BmjB,KAAAA,CAD7B,CAC6BA,CAA3B;AA1BJ;;AA4BE,qBAAA,IAAA;AACE,uBAAA,OAAA,CAAA,SAAA,GAAyBA,KAAAA,CAD3B,CAC2BA,CAAzB;AACA,uBAAA,GAAA,CAAA,WAAA,GAAuBA,KAAAA,CAFzB,CAEyBA,CAAvB;AA9BJ;;AAgCE,qBAAA,IAAA;AACE,uBAAA,GAAA,CAAA,wBAAA,GADF,KACE;AAjCJ;;AAmCE,qBAAA,OAAA;AACE,sBAAI,KAAA,OAAA,CAAJ,WAAA,EAA8B;AAI5B,wBACE,KAAA,UAAA,CAAA,MAAA,GAAA,CAAA,IACA,KAAA,UAAA,CAAgB,KAAA,UAAA,CAAA,MAAA,GAAhB,CAAA,EAAA,WAAA,KACE,KAAA,OAAA,CAHJ,WAAA,EAIE;AACA,2BADA,iBACA;AALF,qBAAA,MAMO;AACL,2BADK,aACL;AAX0B;AADhC;;AAeE,uBAAA,OAAA,CAAA,WAAA,GAA2BnjB,KAAAA,GAAQ,KAARA,SAAAA,GAf7B,IAeE;;AACA,sBAAI,KAAA,OAAA,CAAJ,WAAA,EAA8B;AAC5B,yBAD4B,eAC5B;AAjBJ;;AAmBE,uBAAA,SAAA,GAnBF,IAmBE;AAtDJ;;AAwDE,qBAAA,IAAA;AACE,uBAAA,OAAA,CAAA,YAAA,GAzDJ,KAyDI;AAzDJ;AANc;AA5XC;;AAgcnBqjB,UAAAA,eAAAA,GAAkB;AAChB,kBAAMC,WAAAA,GAAc,KAAA,OAAA,CADJ,WAChB;AACA,kBAAMX,UAAAA,GAAaW,WAAAA,CAAAA,MAAAA,CAFH,KAEhB;AACA,kBAAMV,WAAAA,GAAcU,WAAAA,CAAAA,MAAAA,CAHJ,MAGhB;AACA,kBAAMC,OAAAA,GAAU,iBAAiB,KAJjB,UAIhB;AACA,kBAAMC,aAAAA,GAAgB,KAAA,cAAA,CAAA,SAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EALN,IAKM,CAAtB;AAOA,kBAAMC,UAAAA,GAAa,KAZH,GAYhB;AACA,kBAAMC,gBAAAA,GAAmBD,UAAAA,CAbT,mBAahB;AACA,iBAAA,GAAA,CAdgB,IAchB;AAEA,kBAAME,QAAAA,GAAWH,aAAAA,CAhBD,OAgBhB;AACAG,YAAAA,QAAAA,CAAAA,KAAAA,CAAe,IAAIL,WAAAA,CAAnBK,MAAAA,EAAuC,IAAIL,WAAAA,CAjB3B,MAiBhBK;AACAA,YAAAA,QAAAA,CAAAA,SAAAA,CAAmB,CAACL,WAAAA,CAApBK,OAAAA,EAAyC,CAACL,WAAAA,CAlB1B,OAkBhBK;AACAA,YAAAA,QAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAnBgB,gBAmBhBA;AAEAL,YAAAA,WAAAA,CAAAA,qBAAAA,GAAoCK,QAAAA,CArBpB,0BAqBhBL;AAEAM,YAAAA,YAAAA,CAAAA,UAAAA,EAvBgB,QAuBhBA,CAAAA;AACA,iBAAA,GAAA,GAxBgB,QAwBhB;AACA,iBAAA,SAAA,CAAe,CACb,CAAA,IAAA,EADa,aACb,CADa,EAEb,CAAA,IAAA,EAFa,CAEb,CAFa,EAGb,CAAA,IAAA,EAHF,CAGE,CAHa,CAAf;AAKA,iBAAA,UAAA,CAAA,IAAA,CA9BgB,UA8BhB;AACA,iBA/BgB,UA+BhB;AA/diB;;AAkenBC,UAAAA,iBAAAA,GAAoB;AAGlB,kBAAMF,QAAAA,GAAW,KAHC,GAGlB;AACA,iBAJkB,UAIlB;AACA,iBAAA,GAAA,GAAW,KAAA,UAAA,CALO,GAKP,EAAX;AAEAG,YAAAA,YAAAA,CAAa,KAAbA,GAAAA,EAAuB,KAAA,OAAA,CAAvBA,WAAAA,EAPkB,QAOlBA,CAAAA;AACA,iBAAA,GAAA,CARkB,OAQlB;AACA,iBAAA,GAAA,CATkB,IASlB;AACAF,YAAAA,YAAAA,CAAAA,QAAAA,EAAuB,KAVL,GAUlBA,CAAAA;AAGA,iBAAA,OAAA,CAAA,cAAA,GAbkB,QAalB;;AAGA,kBAAMG,cAAAA,GAAiBxiB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CACrB,KAAA,OAAA,CAAA,WAAA,CADqBA,qBAAAA,EAErBoiB,QAAAA,CAlBgB,mBAgBKpiB,CAAvB;;AAIA,iBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EApBkB,cAoBlB;AAGAoiB,YAAAA,QAAAA,CAvBkB,IAuBlBA;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAxBkB,CAwBlBA;AACAA,YAAAA,QAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAyBA,QAAAA,CAAAA,MAAAA,CAAzBA,KAAAA,EAAgDA,QAAAA,CAAAA,MAAAA,CAzB9B,MAyBlBA;AACAA,YAAAA,QAAAA,CA1BkB,OA0BlBA;AA5fiB;;AA+fnBK,UAAAA,gBAAAA,GAAmB;AAIjB,kBAAML,QAAAA,GAAW,KAAA,OAAA,CAJA,cAIjB;AACA,kBAAMF,UAAAA,GAAa,KALF,GAKjB;AACA,iBAAA,GAAA,GANiB,QAMjB;AACA,iBAAA,UAAA,CAAA,IAAA,CAPiB,UAOjB;AACA,iBARiB,UAQjB;AAvgBiB;;AA0gBnBQ,UAAAA,aAAAA,GAAgB;AACd,kBAAMN,QAAAA,GAAW,KADH,GACd;AACA,iBAFc,UAEd;AACA,iBAAA,GAAA,GAAW,KAAA,UAAA,CAHG,GAGH,EAAX;AAEAG,YAAAA,YAAAA,CAAa,KAAbA,GAAAA,EAAuB,KAAA,OAAA,CAAvBA,WAAAA,EALc,QAKdA,CAAAA;AACA,iBAAA,GAAA,CANc,OAMd;AACAF,YAAAA,YAAAA,CAAAA,QAAAA,EAAuB,KAPT,GAOdA,CAAAA;;AAGA,kBAAMG,cAAAA,GAAiBxiB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CACrB,KAAA,OAAA,CAAA,WAAA,CADqBA,qBAAAA,EAErBoiB,QAAAA,CAZY,mBAUSpiB,CAAvB;;AAIA,iBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EAdc,cAcd;AAxhBiB;;AA2hBnBhK,UAAAA,IAAAA,GAAO;AACL,iBAAA,GAAA,CADK,IACL;AACA,kBAAMujB,GAAAA,GAAM,KAFP,OAEL;AACA,iBAAA,UAAA,CAAA,IAAA,CAHK,GAGL;AACA,iBAAA,OAAA,GAAeA,GAAAA,CAJV,KAIUA,EAAf;AACA,iBAAA,OAAA,CAAA,cAAA,GALK,IAKL;AAhiBiB;;AAmiBnBtjB,UAAAA,OAAAA,GAAU;AAER,gBAAI,KAAA,OAAA,CAAJ,cAAA,EAAiC;AAC/B,mBAD+B,gBAC/B;AAHM;;AAOR,gBACE,KAAA,OAAA,CAAA,WAAA,KAAA,IAAA,KACC,KAAA,UAAA,CAAA,MAAA,KAAA,CAAA,IACC,KAAA,UAAA,CAAgB,KAAA,UAAA,CAAA,MAAA,GAAhB,CAAA,EAAA,WAAA,KACE,KAAA,OAAA,CAJN,WACE,CADF,EAKE;AACA,mBADA,aACA;AAbM;;AAgBR,gBAAI,KAAA,UAAA,CAAA,MAAA,KAAJ,CAAA,EAAkC;AAChC,mBAAA,OAAA,GAAe,KAAA,UAAA,CADiB,GACjB,EAAf;AACA,mBAAA,GAAA,CAFgC,OAEhC;AAGA,mBAAA,WAAA,GALgC,IAKhC;AAEA,mBAAA,0BAAA,GAPgC,IAOhC;AAPF,aAAA,MAQO;AAEL,mBAAA,OAAA,CAAA,WAAA,GAFK,IAEL;AA1BM;AAniBS;;AAikBnBC,UAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA4B;AAC1B,iBAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAD0B,CAC1B;AAEA,iBAAA,0BAAA,GAH0B,IAG1B;AApkBiB;;AAwkBnB+E,UAAAA,aAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAyB;AACvB,kBAAMib,GAAAA,GAAM,KADW,GACvB;AACA,kBAAMyB,OAAAA,GAAU,KAFO,OAEvB;AACA,gBAAIgL,CAAAA,GAAIhL,OAAAA,CAAR,CAAA;AAAA,gBACEmG,CAAAA,GAAInG,OAAAA,CAJiB,CAGvB;;AAEA,iBAAK,IAAInvB,CAAAA,GAAJ,CAAA,EAAWiyB,CAAAA,GAAX,CAAA,EAAkBlyB,EAAAA,GAAKq6B,GAAAA,CAA5B,MAAA,EAAwCp6B,CAAAA,GAAxC,EAAA,EAAgDA,CAAhD,EAAA,EAAqD;AACnD,sBAAQo6B,GAAAA,CAAAA,CAAAA,CAAAA,GAAR,CAAA;AACE,qBAAKttB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEqtB,kBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CADX,EACM/C,CAAJiL;AACA7E,kBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAFX,EAEM/C,CAAJoG;AACA,wBAAM92B,KAAAA,GAAQ0wB,IAAAA,CAAK+C,CAHrB,EAGgB/C,CAAd;AACA,wBAAMzwB,MAAAA,GAASywB,IAAAA,CAAK+C,CAJtB,EAIiB/C,CAAf;AAEA,wBAAMmL,EAAAA,GAAKF,CAAAA,GANb,KAME;AACA,wBAAMG,EAAAA,GAAKhF,CAAAA,GAPb,MAOE;AACA5H,kBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EARF,CAQEA;;AACA,sBAAIlvB,KAAAA,KAAAA,CAAAA,IAAeC,MAAAA,KAAnB,CAAA,EAAiC;AAC/BivB,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAD+B,EAC/BA;AADF,mBAAA,MAEO;AACLA,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EADK,CACLA;AACAA,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAFK,EAELA;AACAA,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAHK,EAGLA;AAdJ;;AAiBEA,kBAAAA,GAAAA,CAjBF,SAiBEA;AAlBJ;;AAoBE,qBAAK5gB,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEqtB,kBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CADX,EACM/C,CAAJiL;AACA7E,kBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAFX,EAEM/C,CAAJoG;AACA5H,kBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAHF,CAGEA;AAvBJ;;AAyBE,qBAAK5gB,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEqtB,kBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CADX,EACM/C,CAAJiL;AACA7E,kBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAFX,EAEM/C,CAAJoG;AACA5H,kBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAHF,CAGEA;AA5BJ;;AA8BE,qBAAK5gB,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACEqtB,kBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CAAAA,GADX,CACM/C,CAAJiL;AACA7E,kBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAAAA,GAFX,CAEM/C,CAAJoG;AACA5H,kBAAAA,GAAAA,CAAAA,aAAAA,CACEwB,IAAAA,CADFxB,CACEwB,CADFxB,EAEEwB,IAAAA,CAAK+C,CAAAA,GAFPvE,CAEEwB,CAFFxB,EAGEwB,IAAAA,CAAK+C,CAAAA,GAHPvE,CAGEwB,CAHFxB,EAIEwB,IAAAA,CAAK+C,CAAAA,GAJPvE,CAIEwB,CAJFxB,EAAAA,CAAAA,EAHF,CAGEA;AAQAuE,kBAAAA,CAAAA,IAXF,CAWEA;AAzCJ;;AA2CE,qBAAKnlB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE4gB,kBAAAA,GAAAA,CAAAA,aAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAGEwB,IAAAA,CAHFxB,CAGEwB,CAHFxB,EAIEwB,IAAAA,CAAK+C,CAAAA,GAJPvE,CAIEwB,CAJFxB,EAKEwB,IAAAA,CAAK+C,CAAAA,GALPvE,CAKEwB,CALFxB,EAMEwB,IAAAA,CAAK+C,CAAAA,GAPT,CAOI/C,CANFxB;AAQAyM,kBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CAAAA,GATX,CASM/C,CAAJiL;AACA7E,kBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAAAA,GAVX,CAUM/C,CAAJoG;AACArD,kBAAAA,CAAAA,IAXF,CAWEA;AAtDJ;;AAwDE,qBAAKnlB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEqtB,kBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CAAAA,GADX,CACM/C,CAAJiL;AACA7E,kBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAAAA,GAFX,CAEM/C,CAAJoG;AACA5H,kBAAAA,GAAAA,CAAAA,aAAAA,CAAkBwB,IAAAA,CAAlBxB,CAAkBwB,CAAlBxB,EAA2BwB,IAAAA,CAAK+C,CAAAA,GAAhCvE,CAA2BwB,CAA3BxB,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAHF,CAGEA;AACAuE,kBAAAA,CAAAA,IAJF,CAIEA;AA5DJ;;AA8DE,qBAAKnlB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE4gB,kBAAAA,GAAAA,CADF,SACEA;AA/DJ;AAAA;AANqB;;AAyEvByB,YAAAA,OAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAzEuB,CAyEvBA;AAjpBiB;;AAopBnBnhB,UAAAA,SAAAA,GAAY;AACV,iBAAA,GAAA,CADU,SACV;AArpBiB;;AAwpBnBE,UAAAA,MAAAA,CAAAA,WAAAA,EAAoB;AAClBqsB,YAAAA,WAAAA,GAAc,OAAA,WAAA,KAAA,WAAA,GAAA,WAAA,GADI,IAClBA;AACA,kBAAM7M,GAAAA,GAAM,KAFM,GAElB;AACA,kBAAM8M,WAAAA,GAAc,KAAA,OAAA,CAHF,WAGlB;AAGA9M,YAAAA,GAAAA,CAAAA,WAAAA,GAAkB,KAAA,OAAA,CANA,WAMlBA;;AACA,gBAAI,KAAJ,cAAA,EAAyB;AACvB,kBAAI,OAAA,WAAA,KAAA,QAAA,IAAmC8M,WAAAA,EAAvC,UAAA,EAAgE;AAC9D,sBAAMC,SAAAA,GAAY,KAD4C,mBAC5C,EAAlB;AACA/M,gBAAAA,GAAAA,CAF8D,IAE9DA;AACAA,gBAAAA,GAAAA,CAAAA,WAAAA,GAAkB8M,WAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAGhB9M,GAAAA,CAN4D,0BAG5C8M,CAAlB9M;AAMAA,gBAAAA,GAAAA,CAAAA,SAAAA,GAAgBpvB,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAoB,KAAA,OAAA,CAT0B,SAS9CA,CAAhBovB;AACAA,gBAAAA,GAAAA,CAV8D,MAU9DA;AACAA,gBAAAA,GAAAA,CAX8D,OAW9DA;AAXF,eAAA,MAYO;AACL,sBAAM+M,SAAAA,GAAY,KADb,mBACa,EAAlB;;AACA,oBAAIA,SAAAA,GAAAA,CAAAA,IAAiB,CAAA,SAAA,IAAc,KAAA,OAAA,CAAnC,SAAA,EAA2D;AAGzD/M,kBAAAA,GAAAA,CAHyD,IAGzDA;AACAA,kBAAAA,GAAAA,CAJyD,cAIzDA;AACAA,kBAAAA,GAAAA,CAAAA,SAAAA,GAAgBpvB,IAAAA,CAAAA,KAAAA,CAAW,KAL8B,oBAKzCA,CAAhBovB;AACAA,kBAAAA,GAAAA,CANyD,MAMzDA;AACAA,kBAAAA,GAAAA,CAPyD,OAOzDA;AAPF,iBAAA,MAQO;AAELA,kBAAAA,GAAAA,CAAAA,SAAAA,GAAgBpvB,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAoB,KAAA,OAAA,CAF/B,SAEWA,CAAhBovB;AACAA,kBAAAA,GAAAA,CAHK,MAGLA;AAbG;AAbgB;AAPP;;AAqClB,gBAAA,WAAA,EAAiB;AACf,mBADe,WACf;AAtCgB;;AAyClBA,YAAAA,GAAAA,CAAAA,WAAAA,GAAkB,KAAA,OAAA,CAzCA,SAyClBA;AAjsBiB;;AAosBnBvf,UAAAA,WAAAA,GAAc;AACZ,iBADY,SACZ;AACA,iBAFY,MAEZ;AAtsBiB;;AAysBnBC,UAAAA,IAAAA,CAAAA,WAAAA,EAAkB;AAChBmsB,YAAAA,WAAAA,GAAc,OAAA,WAAA,KAAA,WAAA,GAAA,WAAA,GADE,IAChBA;AACA,kBAAM7M,GAAAA,GAAM,KAFI,GAEhB;AACA,kBAAM0K,SAAAA,GAAY,KAAA,OAAA,CAHF,SAGhB;AACA,kBAAMC,aAAAA,GAAgB,KAAA,OAAA,CAJN,WAIhB;AACA,gBAAIqC,WAAAA,GALY,KAKhB;;AAEA,gBAAA,aAAA,EAAmB;AACjBhN,cAAAA,GAAAA,CADiB,IACjBA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,GAAgB0K,SAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAGd1K,GAAAA,CALe,0BAED0K,CAAhB1K;AAKAgN,cAAAA,WAAAA,GAPiB,IAOjBA;AAdc;;AAiBhB,gBAAI,KAAJ,cAAA,EAAyB;AACvB,kBAAI,KAAJ,aAAA,EAAwB;AACtBhN,gBAAAA,GAAAA,CAAAA,IAAAA,CADsB,SACtBA;AACA,qBAAA,aAAA,GAFsB,KAEtB;AAFF,eAAA,MAGO;AACLA,gBAAAA,GAAAA,CADK,IACLA;AALqB;AAjBT;;AA0BhB,gBAAA,WAAA,EAAiB;AACfA,cAAAA,GAAAA,CADe,OACfA;AA3Bc;;AA6BhB,gBAAA,WAAA,EAAiB;AACf,mBADe,WACf;AA9Bc;AAzsBC;;AA2uBnBrf,UAAAA,MAAAA,GAAS;AACP,iBAAA,aAAA,GADO,IACP;AACA,iBAFO,IAEP;AA7uBiB;;AAgvBnBC,UAAAA,UAAAA,GAAa;AACX,iBAAA,IAAA,CADW,KACX;AACA,iBAAA,MAAA,CAFW,KAEX;AAEA,iBAJW,WAIX;AApvBiB;;AAuvBnBC,UAAAA,YAAAA,GAAe;AACb,iBAAA,aAAA,GADa,IACb;AACA,iBAFa,UAEb;AAzvBiB;;AA4vBnBC,UAAAA,eAAAA,GAAkB;AAChB,iBADgB,SAChB;AACA,iBAFgB,UAEhB;AA9vBiB;;AAiwBnBC,UAAAA,iBAAAA,GAAoB;AAClB,iBAAA,aAAA,GADkB,IAClB;AACA,iBAFkB,SAElB;AACA,iBAHkB,UAGlB;AApwBiB;;AAuwBnBC,UAAAA,OAAAA,GAAU;AACR,iBADQ,WACR;AAxwBiB;;AA4wBnBC,UAAAA,IAAAA,GAAO;AACL,iBAAA,WAAA,GADK,WACL;AA7wBiB;;AAgxBnBC,UAAAA,MAAAA,GAAS;AACP,iBAAA,WAAA,GADO,OACP;AAjxBiB;;AAqxBnBC,UAAAA,SAAAA,GAAY;AACV,iBAAA,OAAA,CAAA,UAAA,GADU,KAAA,CAAA,eACV;AACA,iBAAA,OAAA,CAAA,eAAA,GAFU,CAEV;AACA,iBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GAHP,CAGV;AACA,iBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GAJP,CAIV;AAzxBiB;;AA4xBnBC,UAAAA,OAAAA,GAAU;AACR,kBAAM6rB,KAAAA,GAAQ,KADN,gBACR;AACA,kBAAMjN,GAAAA,GAAM,KAFJ,GAER;;AACA,gBAAIiN,KAAAA,KAAJ,SAAA,EAAyB;AACvBjN,cAAAA,GAAAA,CADuB,SACvBA;AADuB;AAHjB;;AAQRA,YAAAA,GAAAA,CARQ,IAQRA;AACAA,YAAAA,GAAAA,CATQ,SASRA;;AACA,iBAAK,IAAI1tB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI26B,KAAAA,CAApB,MAAA,EAAkC36B,CAAlC,EAAA,EAAuC;AACrC,oBAAM46B,IAAAA,GAAOD,KAAAA,CADwB,CACxBA,CAAb;AACAjN,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAA4BkN,IAAAA,CAFS,SAErClN;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAckN,IAAAA,CAAdlN,CAAAA,EAAsBkN,IAAAA,CAHe,CAGrClN;AACAkN,cAAAA,IAAAA,CAAAA,SAAAA,CAAAA,GAAAA,EAAoBA,IAAAA,CAJiB,QAIrCA;AAdM;;AAgBRlN,YAAAA,GAAAA,CAhBQ,OAgBRA;AACAA,YAAAA,GAAAA,CAjBQ,IAiBRA;AACAA,YAAAA,GAAAA,CAlBQ,SAkBRA;AACA,mBAAO,KAnBC,gBAmBR;AA/yBiB;;AAkzBnB3e,UAAAA,cAAAA,CAAAA,OAAAA,EAAwB;AACtB,iBAAA,OAAA,CAAA,WAAA,GADsB,OACtB;AAnzBiB;;AAszBnBC,UAAAA,cAAAA,CAAAA,OAAAA,EAAwB;AACtB,iBAAA,OAAA,CAAA,WAAA,GADsB,OACtB;AAvzBiB;;AA0zBnBC,UAAAA,SAAAA,CAAAA,KAAAA,EAAiB;AACf,iBAAA,OAAA,CAAA,UAAA,GAA0BtQ,KAAAA,GADX,GACf;AA3zBiB;;AA8zBnBuQ,UAAAA,UAAAA,CAAAA,OAAAA,EAAoB;AAClB,iBAAA,OAAA,CAAA,OAAA,GAAuB,CADL,OAClB;AA/zBiB;;AAk0BnBC,UAAAA,OAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAA2B;AACzB,kBAAM0rB,OAAAA,GAAU,KAAA,UAAA,CAAA,GAAA,CADS,WACT,CAAhB;AACA,kBAAM1L,OAAAA,GAAU,KAFS,OAEzB;;AAEA,gBAAI,CAAJ,OAAA,EAAc;AACZ,oBAAM,IAAA,KAAA,CAAU,uBADJ,WAAA,EACN,CAAN;AALuB;;AAOzBA,YAAAA,OAAAA,CAAAA,UAAAA,GAAqB0L,OAAAA,CAAAA,UAAAA,IAPI,KAAA,CAAA,oBAOzB1L;;AAIA,gBAAIA,OAAAA,CAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAA+BA,OAAAA,CAAAA,UAAAA,CAAAA,CAAAA,MAAnC,CAAA,EAAgE;AAC9D7uB,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,kCADyD,WAC9DA;AAZuB;;AAiBzB,gBAAIokB,IAAAA,GAAJ,CAAA,EAAc;AACZA,cAAAA,IAAAA,GAAO,CADK,IACZA;AACAyK,cAAAA,OAAAA,CAAAA,aAAAA,GAAwB,CAFZ,CAEZA;AAFF,aAAA,MAGO;AACLA,cAAAA,OAAAA,CAAAA,aAAAA,GADK,CACLA;AArBuB;;AAwBzB,iBAAA,OAAA,CAAA,IAAA,GAxByB,OAwBzB;AACA,iBAAA,OAAA,CAAA,QAAA,GAzByB,IAyBzB;;AAEA,gBAAI0L,OAAAA,CAAJ,WAAA,EAAyB;AAAA;AA3BA;;AA+BzB,kBAAM/5B,IAAAA,GAAO+5B,OAAAA,CAAAA,UAAAA,IA/BY,YA+BzB;AAEA,gBAAIC,IAAAA,GAjCqB,QAiCzB;;AACA,gBAAID,OAAAA,CAAJ,KAAA,EAAmB;AACjBC,cAAAA,IAAAA,GADiB,KACjBA;AADF,aAAA,MAEO,IAAID,OAAAA,CAAJ,IAAA,EAAkB;AACvBC,cAAAA,IAAAA,GADuB,MACvBA;AArCuB;;AAuCzB,kBAAMC,MAAAA,GAASF,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GAvCU,QAuCzB;AACA,kBAAMG,QAAAA,GAAW,IAAA,IAAA,MAAcH,OAAAA,CAxCN,YAAA,EAwCzB;AAMA,gBAAII,eAAAA,GA9CqB,IA8CzB;;AACA,gBAAIvW,IAAAA,GAAJ,aAAA,EAA0B;AACxBuW,cAAAA,eAAAA,GADwB,aACxBA;AADF,aAAA,MAEO,IAAIvW,IAAAA,GAAJ,aAAA,EAA0B;AAC/BuW,cAAAA,eAAAA,GAD+B,aAC/BA;AAlDuB;;AAoDzB,iBAAA,OAAA,CAAA,aAAA,GAA6BvW,IAAAA,GApDJ,eAoDzB;AAEA,iBAAA,GAAA,CAAA,IAAA,GAAgB,GAAA,MAAA,IAAA,IAAA,IAAA,eAAA,MAtDS,QAAA,EAsDzB;AAx3BiB;;AA23BnBtV,UAAAA,oBAAAA,CAAAA,IAAAA,EAA2B;AACzB,iBAAA,OAAA,CAAA,iBAAA,GADyB,IACzB;AA53BiB;;AA+3BnBC,UAAAA,WAAAA,CAAAA,IAAAA,EAAkB;AAChB,iBAAA,OAAA,CAAA,QAAA,GADgB,IAChB;AAh4BiB;;AAm4BnBC,UAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAe;AACb,iBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,IADJ,CACb;AACA,iBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,IAFJ,CAEb;AAr4BiB;;AAw4BnBC,UAAAA,kBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAyB;AACvB,iBAAA,UAAA,CAAgB,CADO,CACvB;AACA,iBAAA,QAAA,CAAA,CAAA,EAFuB,CAEvB;AA14BiB;;AA64BnBC,UAAAA,aAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAgC;AAC9B,iBAAA,OAAA,CAAA,UAAA,GAA0B,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA1B,CAA0B,CAA1B;AACA,iBAAA,OAAA,CAAA,eAAA,GAA+BlR,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAFD,CAECA,CAA/B;AAEA,iBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GAJa,CAI9B;AACA,iBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GALa,CAK9B;AAl5BiB;;AAq5BnBmR,UAAAA,QAAAA,GAAW;AACT,iBAAA,QAAA,CAAA,CAAA,EAAiB,KAAA,OAAA,CADR,OACT;AAt5BiB;;AAy5BnByrB,UAAAA,SAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,gBAAAA,EAAAA,mBAAAA,EAAkE;AAChE,kBAAMxN,GAAAA,GAAM,KADoD,GAChE;AACA,kBAAMyB,OAAAA,GAAU,KAFgD,OAEhE;AACA,kBAAMlc,IAAAA,GAAOkc,OAAAA,CAHmD,IAGhE;AACA,kBAAMgM,iBAAAA,GAAoBhM,OAAAA,CAJsC,iBAIhE;AACA,kBAAMiM,QAAAA,GAAWjM,OAAAA,CAAAA,QAAAA,GAAmBA,OAAAA,CAL4B,aAKhE;AACA,kBAAMkM,cAAAA,GACJF,iBAAAA,GAAoBl3B,KAAAA,CAAAA,iBAAAA,CAP0C,gBAMhE;AAEA,kBAAMq3B,cAAAA,GAAiB,CAAC,EACtB,iBAAA,GAAoBr3B,KAAAA,CAAAA,iBAAAA,CAT0C,gBAQxC,CAAxB;AAGA,kBAAMs3B,WAAAA,GAAcpM,OAAAA,CAAAA,WAAAA,IAAuB,CAAClc,IAAAA,CAXoB,WAWhE;AAEA,gBAbgE,SAahE;;AACA,gBAAIA,IAAAA,CAAAA,eAAAA,IAAAA,cAAAA,IAAJ,WAAA,EAA2D;AACzDuoB,cAAAA,SAAAA,GAAYvoB,IAAAA,CAAAA,gBAAAA,CAAsB,KAAtBA,UAAAA,EAD6C,SAC7CA,CAAZuoB;AAf8D;;AAkBhE,gBAAIvoB,IAAAA,CAAAA,eAAAA,IAAJ,WAAA,EAAyC;AACvCya,cAAAA,GAAAA,CADuC,IACvCA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAFuC,CAEvCA;AACAA,cAAAA,GAAAA,CAHuC,SAGvCA;AACA8N,cAAAA,SAAAA,CAAAA,GAAAA,EAJuC,QAIvCA,CAAAA;;AACA,kBAAA,gBAAA,EAAsB;AACpB9N,gBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EADoB,gBACpBA;AANqC;;AAQvC,kBACE2N,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,IAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACAypB,gBAAAA,GAAAA,CADA,IACAA;AAZqC;;AAcvC,kBACE2N,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,MAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,oBAAA,mBAAA,EAAyB;AACvBypB,kBAAAA,GAAAA,CADuB,cACvBA;AACAA,kBAAAA,GAAAA,CAAAA,SAAAA,GAAgBpvB,IAAAA,CAAAA,KAAAA,CAAW,KAFJ,oBAEPA,CAAhBovB;AAHF;;AAKAA,gBAAAA,GAAAA,CALA,MAKAA;AAtBqC;;AAwBvCA,cAAAA,GAAAA,CAxBuC,OAwBvCA;AAxBF,aAAA,MAyBO;AACL,kBACE2N,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,IAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACAypB,gBAAAA,GAAAA,CAAAA,QAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EADA,CACAA;AALG;;AAOL,kBACE2N,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,MAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,oBAAA,mBAAA,EAAyB;AACvBypB,kBAAAA,GAAAA,CADuB,IACvBA;AACAA,kBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAFuB,CAEvBA;AACAA,kBAAAA,GAAAA,CAHuB,cAGvBA;AACAA,kBAAAA,GAAAA,CAAAA,SAAAA,GAAgBpvB,IAAAA,CAAAA,KAAAA,CAAW,KAJJ,oBAIPA,CAAhBovB;AACAA,kBAAAA,GAAAA,CAAAA,UAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EALuB,CAKvBA;AACAA,kBAAAA,GAAAA,CANuB,OAMvBA;AANF,iBAAA,MAOO;AACLA,kBAAAA,GAAAA,CAAAA,UAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EADK,CACLA;AATF;AAVG;AA3CyD;;AAmEhE,gBAAA,cAAA,EAAoB;AAClB,oBAAMiN,KAAAA,GAAQ,KAAA,gBAAA,KAA0B,KAAA,gBAAA,GADtB,EACJ,CAAd;AACAA,cAAAA,KAAAA,CAAAA,IAAAA,CAAW;AACTjtB,gBAAAA,SAAAA,EAAWggB,GAAAA,CADF,mBAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,QAAA;AAAA,gBAAA;AAAA,eAAXiN;AArE8D;AAz5B/C;;AAw+BnB,cAAIc,uBAAJ,GAA8B;AAG5B,kBAAM;AAAE5gB,cAAAA,OAAAA,EAAF;AAAA,gBAAmB,KAAA,cAAA,CAAA,SAAA,CAAA,yBAAA,EAAA,EAAA,EAHG,EAGH,CAAzB;AAKA6S,YAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAR4B,CAQ5BA;AACAA,YAAAA,GAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAT4B,EAS5BA;AACA,kBAAMvwB,IAAAA,GAAOuwB,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAVe,IAU5B;AACA,gBAAIluB,OAAAA,GAXwB,KAW5B;;AACA,iBAAK,IAAIQ,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI7C,IAAAA,CAApB,MAAA,EAAiC6C,CAAAA,IAAjC,CAAA,EAAyC;AACvC,kBAAI7C,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAeA,IAAAA,CAAAA,CAAAA,CAAAA,GAAnB,GAAA,EAAkC;AAChCqC,gBAAAA,OAAAA,GADgC,IAChCA;AADgC;AADK;AAZb;;AAkB5B,mBAAOnD,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,yBAAAA,EAlBqB,OAkBrBA,CAAP;AA1/BiB;;AA6/BnBqT,UAAAA,QAAAA,CAAAA,MAAAA,EAAiB;AACf,kBAAMyf,OAAAA,GAAU,KADD,OACf;AACA,kBAAMlc,IAAAA,GAAOkc,OAAAA,CAFE,IAEf;;AACA,gBAAIlc,IAAAA,CAAJ,WAAA,EAAsB;AACpB,qBAAO,KAAA,aAAA,CADa,MACb,CAAP;AAJa;;AAOf,kBAAMmoB,QAAAA,GAAWjM,OAAAA,CAPF,QAOf;;AACA,gBAAIiM,QAAAA,KAAJ,CAAA,EAAoB;AAClB,qBADkB,SAClB;AATa;;AAYf,kBAAM1N,GAAAA,GAAM,KAZG,GAYf;AACA,kBAAMgO,aAAAA,GAAgBvM,OAAAA,CAbP,aAaf;AACA,kBAAMwM,WAAAA,GAAcxM,OAAAA,CAdL,WAcf;AACA,kBAAMyM,WAAAA,GAAczM,OAAAA,CAfL,WAef;AACA,kBAAM0M,aAAAA,GAAgB1M,OAAAA,CAhBP,aAgBf;AACA,kBAAM2M,UAAAA,GAAa3M,OAAAA,CAAAA,UAAAA,GAjBJ,aAiBf;AACA,kBAAM4M,YAAAA,GAAeC,MAAAA,CAlBN,MAkBf;AACA,kBAAMC,QAAAA,GAAWhpB,IAAAA,CAnBF,QAmBf;AACA,kBAAMipB,UAAAA,GAAaD,QAAAA,GAAAA,CAAAA,GAAe,CApBnB,CAoBf;AACA,kBAAME,eAAAA,GAAkBlpB,IAAAA,CArBT,eAqBf;AACA,kBAAMmpB,iBAAAA,GAAoBhB,QAAAA,GAAWjM,OAAAA,CAAAA,UAAAA,CAtBtB,CAsBsBA,CAArC;AAEA,kBAAMkN,cAAAA,GACJlN,OAAAA,CAAAA,iBAAAA,KAA8BlrB,KAAAA,CAAAA,iBAAAA,CAA9BkrB,IAAAA,IACA,CAAClc,IAAAA,CADDkc,eAAAA,IAEA,CAACA,OAAAA,CA3BY,WAwBf;AAKAzB,YAAAA,GAAAA,CA7Be,IA6BfA;AACA,gBA9Be,gBA8Bf;;AACA,gBAAIyB,OAAAA,CAAJ,WAAA,EAAyB;AAGvBzB,cAAAA,GAAAA,CAHuB,IAGvBA;AACA,oBAAM4O,OAAAA,GAAUnN,OAAAA,CAAAA,SAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAGdzB,GAAAA,CAPqB,0BAIPyB,CAAhB;AAKAoN,cAAAA,gBAAAA,GAAmB7O,GAAAA,CATI,mBASvB6O;AACA7O,cAAAA,GAAAA,CAVuB,OAUvBA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,GAXuB,OAWvBA;AA1Ca;;AA4CfA,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyByB,OAAAA,CA5CV,UA4CfzB;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,CAAcyB,OAAAA,CAAdzB,CAAAA,EAAyByB,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CA7CtB,QA6CfzB;;AAEA,gBAAImO,aAAAA,GAAJ,CAAA,EAAuB;AACrBnO,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAsB,CADD,CACrBA;AADF,aAAA,MAEO;AACLA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EADK,CACLA;AAlDa;;AAqDf,gBAAI+M,SAAAA,GAAYtL,OAAAA,CArDD,SAqDf;AACA,gBAAIqN,mBAAAA,GAtDW,KAsDf;AACA,kBAAM79B,KAAAA,GAAQwwB,OAAAA,CAvDC,eAuDf;;AACA,gBAAIxwB,KAAAA,KAAAA,CAAAA,IAAe87B,SAAAA,KAAnB,CAAA,EAAoC;AAClC,oBAAMY,cAAAA,GACJlM,OAAAA,CAAAA,iBAAAA,GAA4BlrB,KAAAA,CAAAA,iBAAAA,CAFI,gBAClC;;AAEA,kBACEo3B,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,MAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,qBAAA,0BAAA,GADA,IACA;AACAw2B,gBAAAA,SAAAA,GAAY,KAFZ,mBAEY,EAAZA;AACA+B,gBAAAA,mBAAAA,GAAsB/B,SAAAA,GAHtB,CAGA+B;AATgC;AAApC,aAAA,MAWO;AACL/B,cAAAA,SAAAA,IADK,KACLA;AApEa;;AAuEf,gBAAIiB,aAAAA,KAAJ,GAAA,EAA2B;AACzBhO,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EADyB,aACzBA;AACA+M,cAAAA,SAAAA,IAFyB,aAEzBA;AAzEa;;AA4Ef/M,YAAAA,GAAAA,CAAAA,SAAAA,GA5Ee,SA4EfA;AAEA,gBAAIyM,CAAAA,GAAJ,CAAA;AAAA,gBA9Ee,CA8Ef;;AAEA,iBAAKn6B,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,YAAA,EAA8B,EAA9B,CAAA,EAAmC;AACjC,oBAAMy8B,KAAAA,GAAQT,MAAAA,CADmB,CACnBA,CAAd;;AACA,kBAAIU,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,EAAJ,KAAIA,CAAJ,EAAkB;AAChBvC,gBAAAA,CAAAA,IAAM+B,UAAAA,GAAAA,KAAAA,GAAD,QAACA,GADU,IAChB/B;AADgB;AAFe;;AAOjC,kBAAIwC,aAAAA,GAP6B,KAOjC;AACA,oBAAMC,OAAAA,GAAW,CAAA,KAAA,CAAA,OAAA,GAAA,WAAA,GAAD,CAAC,IARgB,WAQjC;AACA,oBAAMC,SAAAA,GAAYJ,KAAAA,CATe,QASjC;AACA,oBAAMK,MAAAA,GAASL,KAAAA,CAVkB,MAUjC;AACA,kBAAA,OAAA,EAXiC,OAWjC;AACA,kBAAIj+B,KAAAA,GAAQi+B,KAAAA,CAZqB,KAYjC;;AACA,kBAAA,QAAA,EAAc;AACZ,sBAAMM,OAAAA,GAAUN,KAAAA,CAAAA,OAAAA,IADJ,eACZ;AACA,sBAAMO,EAAAA,GACJ,EAAE,KAAA,CAAA,OAAA,GAAgBD,OAAAA,CAAhB,CAAgBA,CAAhB,GAA6Bv+B,KAAAA,GAA/B,GAAA,IAHU,iBAEZ;AAEA,sBAAMy+B,EAAAA,GAAKF,OAAAA,CAAAA,CAAAA,CAAAA,GAJC,iBAIZ;AAEAv+B,gBAAAA,KAAAA,GAAQu+B,OAAAA,GAAU,CAACA,OAAAA,CAAXA,CAAWA,CAAXA,GANI,KAMZv+B;AACA0+B,gBAAAA,OAAAA,GAAUF,EAAAA,GAPE,aAOZE;AACAC,gBAAAA,OAAAA,GAAW,CAAA,CAAA,GAAD,EAAC,IARC,aAQZA;AARF,eAAA,MASO;AACLD,gBAAAA,OAAAA,GAAU/C,CAAAA,GADL,aACL+C;AACAC,gBAAAA,OAAAA,GAFK,CAELA;AAxB+B;;AA2BjC,kBAAIlqB,IAAAA,CAAAA,SAAAA,IAAkBzU,KAAAA,GAAtB,CAAA,EAAiC;AAI/B,sBAAM4+B,aAAAA,GACF1P,GAAAA,CAAAA,WAAAA,CAAAA,SAAAA,EAAAA,KAAAA,GAAD,IAACA,GAAF,QAAEA,GAL2B,aAI/B;;AAGA,oBAAIlvB,KAAAA,GAAAA,aAAAA,IAAyB,KAA7B,uBAAA,EAA2D;AACzD,wBAAM6+B,eAAAA,GAAkB7+B,KAAAA,GADiC,aACzD;AACAm+B,kBAAAA,aAAAA,GAFyD,IAEzDA;AACAjP,kBAAAA,GAAAA,CAHyD,IAGzDA;AACAA,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,eAAAA,EAJyD,CAIzDA;AACAwP,kBAAAA,OAAAA,IALyD,eAKzDA;AALF,iBAAA,MAMO,IAAI1+B,KAAAA,KAAJ,aAAA,EAA6B;AAClC0+B,kBAAAA,OAAAA,IACK,CAAA,KAAA,GAAD,aAAC,IAAF,IAAE,GAAH,QAAG,GAF6B,aAClCA;AAd6B;AA3BA;;AAgDjC,kBAAI,KAAA,cAAA,KAAwB,KAAA,CAAA,QAAA,IAAkBjqB,IAAAA,CAA9C,WAAI,CAAJ,EAAiE;AAC/D,oBAAIopB,cAAAA,IAAkB,CAAtB,MAAA,EAA+B;AAE7B3O,kBAAAA,GAAAA,CAAAA,QAAAA,CAAAA,SAAAA,EAAAA,OAAAA,EAF6B,OAE7BA;AAFF,iBAAA,MAGO;AACL,uBAAA,SAAA,CAAA,SAAA,EAAA,OAAA,EAAA,OAAA,EAAA,gBAAA,EADK,mBACL;;AAOA,sBAAA,MAAA,EAAY;AACV,0BAAM4P,aAAAA,GACJJ,OAAAA,GAAW9B,QAAAA,GAAW0B,MAAAA,CAAAA,MAAAA,CAAZ,CAAC1B,GAFH,aACV;AAEA,0BAAMmC,aAAAA,GACJJ,OAAAA,GAAW/B,QAAAA,GAAW0B,MAAAA,CAAAA,MAAAA,CAAZ,CAAC1B,GAJH,aAGV;AAEA,yBAAA,SAAA,CACE0B,MAAAA,CADF,QAAA,EAAA,aAAA,EAAA,aAAA,EAAA,gBAAA,EALU,mBAKV;AAbG;AAJwD;AAhDhC;;AA4EjC,kBA5EiC,SA4EjC;;AACA,kBAAA,QAAA,EAAc;AACZU,gBAAAA,SAAAA,GAAYh/B,KAAAA,GAAAA,iBAAAA,GAA4Bo+B,OAAAA,GAD5B,aACZY;AADF,eAAA,MAEO;AACLA,gBAAAA,SAAAA,GAAYh/B,KAAAA,GAAAA,iBAAAA,GAA4Bo+B,OAAAA,GADnC,aACLY;AAhF+B;;AAkFjCrD,cAAAA,CAAAA,IAlFiC,SAkFjCA;;AAEA,kBAAA,aAAA,EAAmB;AACjBzM,gBAAAA,GAAAA,CADiB,OACjBA;AArF+B;AAhFpB;;AAwKf,gBAAA,QAAA,EAAc;AACZyB,cAAAA,OAAAA,CAAAA,CAAAA,IADY,CACZA;AADF,aAAA,MAEO;AACLA,cAAAA,OAAAA,CAAAA,CAAAA,IAAagL,CAAAA,GADR,UACLhL;AA3Ka;;AA6KfzB,YAAAA,GAAAA,CA7Ke,OA6KfA;AACA,mBA9Ke,SA8Kf;AA3qCiB;;AA8qCnB+P,UAAAA,aAAAA,CAAAA,MAAAA,EAAsB;AAEpB,kBAAM/P,GAAAA,GAAM,KAFQ,GAEpB;AACA,kBAAMyB,OAAAA,GAAU,KAHI,OAGpB;AACA,kBAAMlc,IAAAA,GAAOkc,OAAAA,CAJO,IAIpB;AACA,kBAAMiM,QAAAA,GAAWjM,OAAAA,CALG,QAKpB;AACA,kBAAM0M,aAAAA,GAAgB1M,OAAAA,CANF,aAMpB;AACA,kBAAM+M,UAAAA,GAAajpB,IAAAA,CAAAA,QAAAA,GAAAA,CAAAA,GAAoB,CAPnB,CAOpB;AACA,kBAAM0oB,WAAAA,GAAcxM,OAAAA,CARA,WAQpB;AACA,kBAAMyM,WAAAA,GAAczM,OAAAA,CATA,WASpB;AACA,kBAAM2M,UAAAA,GAAa3M,OAAAA,CAAAA,UAAAA,GAVC,aAUpB;AACA,kBAAMuO,UAAAA,GAAavO,OAAAA,CAAAA,UAAAA,IAXC,KAAA,CAAA,oBAWpB;AACA,kBAAM4M,YAAAA,GAAeC,MAAAA,CAZD,MAYpB;AACA,kBAAM2B,eAAAA,GACJxO,OAAAA,CAAAA,iBAAAA,KAA8BlrB,KAAAA,CAAAA,iBAAAA,CAdZ,SAapB;AAEA,gBAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAfoB,aAepB;;AAEA,gBAAI05B,eAAAA,IAAmBvC,QAAAA,KAAvB,CAAA,EAAuC;AAAA;AAjBnB;;AAoBpB,iBAAA,0BAAA,GApBoB,IAoBpB;AAEA1N,YAAAA,GAAAA,CAtBoB,IAsBpBA;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyByB,OAAAA,CAvBL,UAuBpBzB;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,CAAcyB,OAAAA,CAAdzB,CAAAA,EAAyByB,OAAAA,CAxBL,CAwBpBzB;AAEAA,YAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EA1BoB,aA0BpBA;;AAEA,iBAAK1tB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,YAAA,EAA8B,EAA9B,CAAA,EAAmC;AACjCy8B,cAAAA,KAAAA,GAAQT,MAAAA,CADyB,CACzBA,CAARS;;AACA,kBAAIC,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,EAAJ,KAAIA,CAAJ,EAAkB;AAChBkB,gBAAAA,aAAAA,GAAiB1B,UAAAA,GAAAA,KAAAA,GAAD,QAACA,GADD,IAChB0B;AACA,qBAAA,GAAA,CAAA,SAAA,CAAA,aAAA,EAFgB,CAEhB;AACAzO,gBAAAA,OAAAA,CAAAA,CAAAA,IAAayO,aAAAA,GAHG,UAGhBzO;AAHgB;AAFe;;AASjC,oBAAMyN,OAAAA,GAAW,CAAA,KAAA,CAAA,OAAA,GAAA,WAAA,GAAD,CAAC,IATgB,WASjC;AACA,oBAAMhZ,YAAAA,GAAe3Q,IAAAA,CAAAA,oBAAAA,CAA0BwpB,KAAAA,CAVd,cAUZxpB,CAArB;;AACA,kBAAI,CAAJ,YAAA,EAAmB;AACjB3S,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,oBAAoBm8B,KAAAA,CADR,cAAA,qBACjBn8B;AADiB;AAXc;;AAejC,kBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAA,eAAA,GADuB,KACvB;AACA,qBAFuB,IAEvB;AACAotB,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAHuB,QAGvBA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAJuB,UAIvBA;AACA,qBAAA,mBAAA,CALuB,YAKvB;AACA,qBANuB,OAMvB;AArB+B;;AAwBjC,oBAAMmQ,WAAAA,GAAc,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAACpB,KAAAA,CAAD,KAAA,EAApB,CAAoB,CAApB,EAxBa,UAwBb,CAApB;;AACAj+B,cAAAA,KAAAA,GAAQq/B,WAAAA,CAAAA,CAAAA,CAAAA,GAAAA,QAAAA,GAzByB,OAyBjCr/B;AAEAkvB,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,EA3BiC,CA2BjCA;AACAyB,cAAAA,OAAAA,CAAAA,CAAAA,IAAa3wB,KAAAA,GA5BoB,UA4BjC2wB;AAxDkB;;AA0DpBzB,YAAAA,GAAAA,CA1DoB,OA0DpBA;AACA,iBAAA,eAAA,GA3DoB,IA2DpB;AAzuCiB;;AA6uCnB5d,UAAAA,YAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EA7uCmB,CAAA;;AAkvCnBC,UAAAA,qBAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAA0D;AAGxD,iBAAA,GAAA,CAAA,IAAA,CAAA,GAAA,EAAA,GAAA,EAAwB+tB,GAAAA,GAAxB,GAAA,EAAmCC,GAAAA,GAHqB,GAGxD;AACA,iBAJwD,IAIxD;AACA,iBALwD,OAKxD;AAvvCiB;;AA2vCnBC,UAAAA,iBAAAA,CAAAA,EAAAA,EAAsB;AACpB,gBADoB,OACpB;;AACA,gBAAIC,EAAAA,CAAAA,CAAAA,CAAAA,KAAJ,eAAA,EAA+B;AAC7B,oBAAMC,KAAAA,GAAQD,EAAAA,CADe,CACfA,CAAd;AACA,oBAAME,aAAAA,GACJ,KAAA,aAAA,IAAsB,KAAA,GAAA,CAAA,mBAAA,CAHK,KAGL,EADxB;AAEA,oBAAMC,qBAAAA,GAAwB;AAC5BC,gBAAAA,oBAAAA,EAAsB3Q,GAAAA,IAAO;AAC3B,yBAAO,IAAA,cAAA,CAAA,GAAA,EAEL,KAFK,UAAA,EAGL,KAHK,IAAA,EAIL,KALyB,aACpB,CAAP;AAF0B;AAAA,eAA9B;AAUA4O,cAAAA,OAAAA,GAAU,IAAA,eAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAGR,KAHQ,GAAA,EAAA,qBAAA,EAdmB,aAcnB,CAAVA;AAdF,aAAA,MAqBO;AACLA,cAAAA,OAAAA,GAAU,KAAA,WAAA,CAAiB2B,EAAAA,CAAjB,CAAiBA,CAAjB,EAAwBA,EAAAA,CAD7B,CAC6BA,CAAxB,CAAV3B;AAxBkB;;AA0BpB,mBA1BoB,OA0BpB;AArxCiB;;AAwxCnBnsB,UAAAA,eAAAA,GAAkB;AAChB,iBAAA,OAAA,CAAA,WAAA,GAA2B,KAAA,iBAAA,CADX,SACW,CAA3B;AAzxCiB;;AA4xCnBE,UAAAA,aAAAA,GAAgB;AACd,iBAAA,OAAA,CAAA,SAAA,GAAyB,KAAA,iBAAA,CADX,SACW,CAAzB;AACA,iBAAA,OAAA,CAAA,WAAA,GAFc,IAEd;AA9xCiB;;AAiyCnBG,UAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA2B;AACzB,kBAAM0tB,KAAAA,GAAQ1mB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADW,CACXA,CAAd;;AACA,iBAAA,GAAA,CAAA,WAAA,GAFyB,KAEzB;AACA,iBAAA,OAAA,CAAA,WAAA,GAHyB,KAGzB;AApyCiB;;AAuyCnB/G,UAAAA,eAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAyB;AACvB,kBAAMytB,KAAAA,GAAQ1mB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADS,CACTA,CAAd;;AACA,iBAAA,GAAA,CAAA,SAAA,GAFuB,KAEvB;AACA,iBAAA,OAAA,CAAA,SAAA,GAHuB,KAGvB;AACA,iBAAA,OAAA,CAAA,WAAA,GAJuB,KAIvB;AA3yCiB;;AA8yCnB8mB,UAAAA,WAAAA,CAAAA,KAAAA,EAAkC;AAAA,gBAAfC,MAAe,uEAAlCD,IAAkC;AAChC,gBADgC,OAChC;;AACA,gBAAI,KAAA,cAAA,CAAA,GAAA,CAAJ,KAAI,CAAJ,EAAoC;AAClChC,cAAAA,OAAAA,GAAU,KAAA,cAAA,CAAA,GAAA,CADwB,KACxB,CAAVA;AADF,aAAA,MAEO;AACLA,cAAAA,OAAAA,GAAUkC,CAAAA,GAAAA,eAAAA,CAAAA,iBAAAA,EACR,KAAA,IAAA,CAAA,GAAA,CADQA,KACR,CADQA,EAER,KAHG,oBACKA,CAAVlC;AAIA,mBAAA,cAAA,CAAA,GAAA,CAAA,KAAA,EALK,OAKL;AAT8B;;AAWhC,gBAAA,MAAA,EAAY;AACVA,cAAAA,OAAAA,CAAAA,MAAAA,GADU,MACVA;AAZ8B;;AAchC,mBAdgC,OAchC;AA5zCiB;;AA+zCnB1rB,UAAAA,WAAAA,CAAAA,KAAAA,EAAmB;AACjB,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADT;;AAIjB,kBAAM8c,GAAAA,GAAM,KAJK,GAIjB;AAEA,iBANiB,IAMjB;;AACA,kBAAM4O,OAAAA,GAAU,KAAA,WAAA,CAPC,KAOD,CAAhB;;AACA5O,YAAAA,GAAAA,CAAAA,SAAAA,GAAgB4O,OAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAGd5O,GAAAA,CAHc4O,0BAAAA,EARC,IAQDA,CAAhB5O;AAOA,kBAAM+Q,GAAAA,GAAM/Q,GAAAA,CAfK,0BAejB;;AACA,gBAAA,GAAA,EAAS;AACP,oBAAMhxB,MAAAA,GAASgxB,GAAAA,CADR,MACP;AACA,oBAAMlvB,KAAAA,GAAQ9B,MAAAA,CAFP,KAEP;AACA,oBAAM+B,MAAAA,GAAS/B,MAAAA,CAHR,MAGP;;AAEA,oBAAMgiC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EALJ,GAKI,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,MAAoB,CAApB,EANJ,GAMI,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,CAAoB,CAApB,EAPJ,GAOI,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,MAAoB,CAApB,EARJ,GAQI,CAAX;;AAEA,oBAAMC,EAAAA,GAAKxgC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CAVlC,CAUkCA,CAA9BvgC,CAAX;AACA,oBAAMygC,EAAAA,GAAKzgC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CAXlC,CAWkCA,CAA9BvgC,CAAX;AACA,oBAAM0gC,EAAAA,GAAK1gC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CAZlC,CAYkCA,CAA9BvgC,CAAX;AACA,oBAAM2gC,EAAAA,GAAK3gC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CAblC,CAakCA,CAA9BvgC,CAAX;AAEA,mBAAA,GAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,EAA0B0gC,EAAAA,GAA1B,EAAA,EAAmCC,EAAAA,GAf5B,EAeP;AAfF,aAAA,MAgBO;AAOL,mBAAA,GAAA,CAAA,QAAA,CAAkB,CAAlB,IAAA,EAAyB,CAAzB,IAAA,EAAA,IAAA,EAPK,IAOL;AAvCe;;AA0CjB,iBA1CiB,OA0CjB;AAz2CiB;;AA62CnBpuB,UAAAA,gBAAAA,GAAmB;AACjByD,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADiB,kCACjBA;AA92CiB;;AAi3CnBxD,UAAAA,cAAAA,GAAiB;AACfwD,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADe,gCACfA;AAl3CiB;;AAq3CnB9C,UAAAA,qBAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAoC;AAClC,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADQ;;AAIlC,iBAJkC,IAIlC;AACA,iBAAA,kBAAA,CAAA,IAAA,CAA6B,KALK,aAKlC;;AAEA,gBAAIkF,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,KAAyB6nB,MAAAA,CAAAA,MAAAA,KAA7B,CAAA,EAAkD;AAChD,mBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EADgD,MAChD;AARgC;;AAWlC,iBAAA,aAAA,GAAqB,KAAA,GAAA,CAXa,mBAWlC;;AAEA,gBAAA,IAAA,EAAU;AACR,oBAAM//B,KAAAA,GAAQ0gC,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CADhB,CACgBA,CAAxB;AACA,oBAAMzgC,MAAAA,GAASygC,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAFjB,CAEiBA,CAAzB;AACA,mBAAA,GAAA,CAAA,IAAA,CAAcA,IAAAA,CAAd,CAAcA,CAAd,EAAuBA,IAAAA,CAAvB,CAAuBA,CAAvB,EAAA,KAAA,EAHQ,MAGR;AACA,mBAJQ,IAIR;AACA,mBALQ,OAKR;AAlBgC;AAr3CjB;;AA24CnBztB,UAAAA,mBAAAA,GAAsB;AACpB,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADN;;AAIpB,iBAJoB,OAIpB;AACA,iBAAA,aAAA,GAAqB,KAAA,kBAAA,CALD,GAKC,EAArB;AAh5CiB;;AAm5CnBC,UAAAA,UAAAA,CAAAA,KAAAA,EAAkB;AAChB,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADV;;AAKhB,iBALgB,IAKhB;AACA,kBAAMgoB,UAAAA,GAAa,KANH,GAMhB;;AAcA,gBAAI,CAACyF,KAAAA,CAAL,QAAA,EAAqB;AACnBxX,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADmB,oCACnBA;AArBc;;AA0BhB,gBAAIwX,KAAAA,CAAJ,QAAA,EAAoB;AAClB7+B,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADkB,gCAClBA;AA3Bc;;AA8BhB,kBAAMq5B,gBAAAA,GAAmBD,UAAAA,CA9BT,mBA8BhB;;AACA,gBAAIyF,KAAAA,CAAJ,MAAA,EAAkB;AAChBzF,cAAAA,UAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAuCyF,KAAAA,CADvB,MAChBzF;AAhCc;;AAkChB,gBAAI,CAACyF,KAAAA,CAAL,IAAA,EAAiB;AACf,oBAAM,IAAA,KAAA,CADS,2BACT,CAAN;AAnCc;;AAwChB,gBAAIC,MAAAA,GAAS5nB,KAAAA,CAAAA,IAAAA,CAAAA,0BAAAA,CACX2nB,KAAAA,CADW3nB,IAAAA,EAEXkiB,UAAAA,CA1Cc,mBAwCHliB,CAAb;;AAKA,kBAAM6nB,YAAAA,GAAe,CAAA,CAAA,EAAA,CAAA,EAGnB3F,UAAAA,CAAAA,MAAAA,CAHmB,KAAA,EAInBA,UAAAA,CAAAA,MAAAA,CAJF,MAAqB,CAArB;AAMA0F,YAAAA,MAAAA,GAAS5nB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,YAAAA,KAAwC,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAjD4nB,CAAiD,CAAjDA;AAGA,kBAAM1hC,OAAAA,GAAUY,IAAAA,CAAAA,KAAAA,CAAW8gC,MAAAA,CAtDX,CAsDWA,CAAX9gC,CAAhB;AACA,kBAAMX,OAAAA,GAAUW,IAAAA,CAAAA,KAAAA,CAAW8gC,MAAAA,CAvDX,CAuDWA,CAAX9gC,CAAhB;AACA,gBAAIs6B,UAAAA,GAAat6B,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,IAAAA,CAAU8gC,MAAAA,CAAV9gC,CAAU8gC,CAAV9gC,IAATA,OAAAA,EAxDD,CAwDCA,CAAjB;AACA,gBAAIu6B,WAAAA,GAAcv6B,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,IAAAA,CAAU8gC,MAAAA,CAAV9gC,CAAU8gC,CAAV9gC,IAATA,OAAAA,EAzDF,CAyDEA,CAAlB;AACA,gBAAIghC,MAAAA,GAAJ,CAAA;AAAA,gBACEC,MAAAA,GA3Dc,CA0DhB;;AAEA,gBAAI3G,UAAAA,GAAJ,cAAA,EAAiC;AAC/B0G,cAAAA,MAAAA,GAAS1G,UAAAA,GADsB,cAC/B0G;AACA1G,cAAAA,UAAAA,GAF+B,cAE/BA;AA9Dc;;AAgEhB,gBAAIC,WAAAA,GAAJ,cAAA,EAAkC;AAChC0G,cAAAA,MAAAA,GAAS1G,WAAAA,GADuB,cAChC0G;AACA1G,cAAAA,WAAAA,GAFgC,cAEhCA;AAlEc;;AAqEhB,gBAAIW,OAAAA,GAAU,YAAY,KArEV,UAqEhB;;AACA,gBAAI2F,KAAAA,CAAJ,KAAA,EAAiB;AAEf3F,cAAAA,OAAAA,IAAW,YAAa,KAAA,YAAA,KAFT,CAEfA;AAxEc;;AA0EhB,kBAAMC,aAAAA,GAAgB,KAAA,cAAA,CAAA,SAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EA1EN,IA0EM,CAAtB;AAMA,kBAAMG,QAAAA,GAAWH,aAAAA,CAhFD,OAgFhB;AAIAG,YAAAA,QAAAA,CAAAA,KAAAA,CAAe,IAAfA,MAAAA,EAA2B,IApFX,MAoFhBA;AACAA,YAAAA,QAAAA,CAAAA,SAAAA,CAAmB,CAAnBA,OAAAA,EAA6B,CArFb,OAqFhBA;AACAA,YAAAA,QAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAtFgB,gBAsFhBA;;AAEA,gBAAIuF,KAAAA,CAAJ,KAAA,EAAiB;AAEf,mBAAA,UAAA,CAAA,IAAA,CAAqB;AACnBziC,gBAAAA,MAAAA,EAAQ+8B,aAAAA,CADW,MAAA;AAEnB5e,gBAAAA,OAAAA,EAFmB,QAAA;AAAA,gBAAA,OAAA;AAAA,gBAAA,OAAA;AAAA,gBAAA,MAAA;AAAA,gBAAA,MAAA;AAOnB4a,gBAAAA,OAAAA,EAAS0J,KAAAA,CAAAA,KAAAA,CAPU,OAAA;AAQnB3J,gBAAAA,QAAAA,EAAU2J,KAAAA,CAAAA,KAAAA,CARS,QAAA;AASnB/J,gBAAAA,WAAAA,EAAa+J,KAAAA,CAAAA,KAAAA,CAAAA,WAAAA,IATM,IAAA;AAUnBK,gBAAAA,qBAAAA,EAVmB;AAAA,eAArB;AAFF,aAAA,MAcO;AAGL9F,cAAAA,UAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAHK,CAGLA;AACAA,cAAAA,UAAAA,CAAAA,SAAAA,CAAAA,OAAAA,EAJK,OAILA;AACAA,cAAAA,UAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EALK,MAKLA;AA3Gc;;AA+GhBG,YAAAA,YAAAA,CAAAA,UAAAA,EA/GgB,QA+GhBA,CAAAA;AACA,iBAAA,GAAA,GAhHgB,QAgHhB;AACA,iBAAA,SAAA,CAAe,CACb,CAAA,IAAA,EADa,aACb,CADa,EAEb,CAAA,IAAA,EAFa,CAEb,CAFa,EAGb,CAAA,IAAA,EAHF,CAGE,CAHa,CAAf;AAKA,iBAAA,UAAA,CAAA,IAAA,CAtHgB,UAsHhB;AACA,iBAvHgB,UAuHhB;AAGA,iBAAA,OAAA,CAAA,WAAA,GA1HgB,IA0HhB;AA7gDiB;;AAghDnBloB,UAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADZ;;AAId,iBAJc,UAId;AACA,kBAAMioB,QAAAA,GAAW,KALH,GAKd;AACA,iBAAA,GAAA,GAAW,KAAA,UAAA,CANG,GAMH,EAAX;AAGA,iBAAA,GAAA,CAAA,qBAAA,GATc,KASd;;AAEA,gBAAIuF,KAAAA,CAAJ,KAAA,EAAiB;AACf,mBAAA,SAAA,GAAiB,KAAA,UAAA,CADF,GACE,EAAjB;AADF,aAAA,MAEO;AACL,mBAAA,GAAA,CAAA,SAAA,CAAmBvF,QAAAA,CAAnB,MAAA,EAAA,CAAA,EADK,CACL;AAdY;;AAgBd,iBAhBc,OAgBd;AAhiDiB;;AAmiDnBhoB,UAAAA,gBAAAA,GAAmB;AACjB,iBADiB,IACjB;;AACA,gBAAI,KAAJ,aAAA,EAAwB;AACtB,mBAAA,GAAA,CAAA,YAAA,CAAA,KAAA,CAA4B,KAA5B,GAAA,EAAsC,KADhB,aACtB;AAHe;AAniDA;;AA0iDnBC,UAAAA,cAAAA,GAAiB;AACf,iBADe,OACf;AA3iDiB;;AA8iDnBC,UAAAA,eAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAAAA,MAAAA,EAA6C;AAC3C,iBAD2C,IAC3C;AACA6kB,YAAAA,iBAAAA,CAAkB,KAFyB,GAE3CA,CAAAA;AACA,iBAAA,OAAA,GAAe,IAH4B,gBAG5B,EAAf;;AAEA,gBAAIjgB,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,KAAuB3X,IAAAA,CAAAA,MAAAA,KAA3B,CAAA,EAA8C;AAC5C,oBAAMP,KAAAA,GAAQO,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CADoB,CACpBA,CAAxB;AACA,oBAAMN,MAAAA,GAASM,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAFmB,CAEnBA,CAAzB;AACA,mBAAA,GAAA,CAAA,IAAA,CAAcA,IAAAA,CAAd,CAAcA,CAAd,EAAuBA,IAAAA,CAAvB,CAAuBA,CAAvB,EAAA,KAAA,EAH4C,MAG5C;AACA,mBAJ4C,IAI5C;AACA,mBAL4C,OAK5C;AAVyC;;AAa3C,iBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAb2C,SAa3C;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAd2C,MAc3C;AA5jDiB;;AA+jDnBgT,UAAAA,aAAAA,GAAgB;AACd,iBADc,OACd;AAhkDiB;;AAmkDnBE,UAAAA,qBAAAA,CAAAA,GAAAA,EAA2B;AACzB,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADD;;AAIzB,kBAAMyb,GAAAA,GAAM,KAJa,GAIzB;AACA,kBAAMlvB,KAAAA,GAAQi5B,GAAAA,CAAd,KAAA;AAAA,kBACEh5B,MAAAA,GAASg5B,GAAAA,CANc,MAKzB;AAGA,kBAAMgF,KAAAA,GAAQ,KARW,eAQzB;;AAEA,gBAAIjM,oBAAAA,IAAAA,KAAAA,IAAiCiM,KAAAA,CAAAA,QAAAA,KAArC,SAAA,EAAmE;AACjE,kBAAIj+B,KAAAA,IAAAA,mBAAAA,IAAgCC,MAAAA,IAApC,mBAAA,EAAmE;AACjEg+B,gBAAAA,KAAAA,CAAAA,QAAAA,GAAiB,iBAAA,CAAkB;AAAEt/B,kBAAAA,IAAAA,EAAMs6B,GAAAA,CAAR,IAAA;AAAA,kBAAA,KAAA;AAAA,kBAAA;AAAA,iBAAlB,CAAjBgF;AADF,eAAA,MAEO;AACLA,gBAAAA,KAAAA,CAAAA,QAAAA,GADK,IACLA;AAJ+D;AAV1C;;AAkBzB,gBAAIA,KAAAA,EAAJ,QAAA,EAAqB;AACnBA,cAAAA,KAAAA,CAAAA,QAAAA,CADmB,GACnBA;AADmB;AAlBI;;AAsBzB,kBAAM1K,IAAAA,GAAO,KAAA,iBAAA,CAtBY,GAsBZ,CAAb;;AACA,kBAAMuG,UAAAA,GAAavG,IAAAA,CAvBM,MAuBzB;AAEArE,YAAAA,GAAAA,CAzByB,IAyBzBA;AAGAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EA5ByB,CA4BzBA;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,UAAAA,EAA0BqE,IAAAA,CAA1BrE,OAAAA,EAAwCqE,IAAAA,CA7Bf,OA6BzBrE;AACAA,YAAAA,GAAAA,CA9ByB,OA8BzBA;AAjmDiB;;AAomDnBnb,UAAAA,2BAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAOE;AAAA,gBAJAktB,KAIA,uEAPFltB,CAOE;AAAA,gBAHAmtB,KAGA,uEAPFntB,CAOE;AAAA,gBAPFA,MAOE;AAAA,gBAPFA,SAOE;;AACA,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,kBAAMmb,GAAAA,GAAM,KAJZ,GAIA;AACAA,YAAAA,GAAAA,CALA,IAKAA;AACA,kBAAMiM,gBAAAA,GAAmBjM,GAAAA,CANzB,mBAMA;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAPA,CAOAA;;AACA,kBAAMqE,IAAAA,GAAO,KAAA,iBAAA,CARb,OAQa,CAAb;;AAEArE,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAVA,CAUAA;;AACA,iBAAK,IAAI1tB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK4/B,SAAAA,CAArB,MAAA,EAAuC3/B,CAAAA,GAAvC,EAAA,EAA+CA,CAAAA,IAA/C,CAAA,EAAuD;AACrD,oBAAM4/B,KAAAA,GAAQ,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,gBAAA,EAAiC,CAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAK7CD,SAAAA,CAL6C,CAK7CA,CAL6C,EAM7CA,SAAAA,CAAU3/B,CAAAA,GANZ,CAME2/B,CAN6C,CAAjC,CAAd;;AASA,oBAAM,CAAA,CAAA,EAAA,CAAA,IAAS,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EAVsC,KAUtC,CAAf;;AACAjS,cAAAA,GAAAA,CAAAA,SAAAA,CAAcqE,IAAAA,CAAdrE,MAAAA,EAAAA,CAAAA,EAXqD,CAWrDA;AAtBF;;AAwBAA,YAAAA,GAAAA,CAxBA,OAwBAA;AAnoDiB;;AAsoDnBxb,UAAAA,0BAAAA,CAAAA,MAAAA,EAAmC;AACjC,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADO;;AAIjC,kBAAMwb,GAAAA,GAAM,KAJqB,GAIjC;AAEA,kBAAM0K,SAAAA,GAAY,KAAA,OAAA,CANe,SAMjC;AACA,kBAAMC,aAAAA,GAAgB,KAAA,OAAA,CAPW,WAOjC;;AACA,iBAAK,IAAIr4B,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK8/B,MAAAA,CAArB,MAAA,EAAoC7/B,CAAAA,GAApC,EAAA,EAA4CA,CAA5C,EAAA,EAAiD;AAC/C,oBAAM8/B,KAAAA,GAAQD,MAAAA,CADiC,CACjCA,CAAd;AACA,oBAAMrhC,KAAAA,GAAQshC,KAAAA,CAAd,KAAA;AAAA,oBACErhC,MAAAA,GAASqhC,KAAAA,CAHoC,MAE/C;AAGA,oBAAMxH,UAAAA,GAAa,KAAA,cAAA,CAAA,SAAA,CAAA,YAAA,EAAA,KAAA,EAL4B,MAK5B,CAAnB;AAKA,oBAAMvC,OAAAA,GAAUuC,UAAAA,CAV+B,OAU/C;AACAvC,cAAAA,OAAAA,CAX+C,IAW/CA;AAEAwC,cAAAA,kBAAAA,CAAAA,OAAAA,EAb+C,KAa/CA,CAAAA;AAEAxC,cAAAA,OAAAA,CAAAA,wBAAAA,GAf+C,WAe/CA;AAEAA,cAAAA,OAAAA,CAAAA,SAAAA,GAAoBsC,aAAAA,GAChBD,SAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAGE1K,GAAAA,CAHF0K,0BAAAA,EADgBC,KAChBD,CADgBC,GAjB2B,SAiB/CtC;AAQAA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAzB+C,MAyB/CA;AAEAA,cAAAA,OAAAA,CA3B+C,OA2B/CA;AAEArI,cAAAA,GAAAA,CA7B+C,IA6B/CA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyBoS,KAAAA,CA9BsB,SA8B/CpS;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAa,CA/BkC,CA+B/CA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAc4K,UAAAA,CAAd5K,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAAyD,CAAzDA,CAAAA,EAAAA,CAAAA,EAhC+C,CAgC/CA;AACAA,cAAAA,GAAAA,CAjC+C,OAiC/CA;AAzC+B;AAtoDhB;;AAmrDnBvb,UAAAA,iBAAAA,CAAAA,KAAAA,EAAyB;AACvB,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADH;;AAIvB,kBAAMsf,OAAAA,GAAUsO,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IACZ,KAAA,UAAA,CAAA,GAAA,CADYA,KACZ,CADYA,GAEZ,KAAA,IAAA,CAAA,GAAA,CANmB,KAMnB,CAFJ;;AAGA,gBAAI,CAAJ,OAAA,EAAc;AACZz/B,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADY,iCACZA;AADY;AAPS;;AAYvB,iBAAA,uBAAA,CAZuB,OAYvB;AA/rDiB;;AAksDnBgS,UAAAA,uBAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,SAAAA,EAA0D;AACxD,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD8B;;AAIxD,kBAAMmf,OAAAA,GAAUsO,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IACZ,KAAA,UAAA,CAAA,GAAA,CADYA,KACZ,CADYA,GAEZ,KAAA,IAAA,CAAA,GAAA,CANoD,KAMpD,CAFJ;;AAGA,gBAAI,CAAJ,OAAA,EAAc;AACZz/B,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADY,iCACZA;AADY;AAP0C;;AAYxD,kBAAM9B,KAAAA,GAAQizB,OAAAA,CAZ0C,KAYxD;AACA,kBAAMhzB,MAAAA,GAASgzB,OAAAA,CAbyC,MAaxD;AACA,kBAAMuO,GAAAA,GAdkD,EAcxD;;AACA,iBAAK,IAAIhgC,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK4/B,SAAAA,CAArB,MAAA,EAAuC3/B,CAAAA,GAAvC,EAAA,EAA+CA,CAAAA,IAA/C,CAAA,EAAuD;AACrDggC,cAAAA,GAAAA,CAAAA,IAAAA,CAAS;AACPtyB,gBAAAA,SAAAA,EAAW,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAuBiyB,SAAAA,CAAvB,CAAuBA,CAAvB,EAAqCA,SAAAA,CAAU3/B,CAAAA,GADnD,CACyC2/B,CAArC,CADJ;AAEPxF,gBAAAA,CAAAA,EAFO,CAAA;AAGP7E,gBAAAA,CAAAA,EAHO,CAAA;AAIP2K,gBAAAA,CAAAA,EAJO,KAAA;AAKPC,gBAAAA,CAAAA,EALO;AAAA,eAATF;AAhBsD;;AAwBxD,iBAAA,4BAAA,CAAA,OAAA,EAxBwD,GAwBxD;AA1tDiB;;AA6tDnB5tB,UAAAA,uBAAAA,CAAAA,OAAAA,EAAiC;AAC/B,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADK;;AAI/B,kBAAM5T,KAAAA,GAAQizB,OAAAA,CAJiB,KAI/B;AACA,kBAAMhzB,MAAAA,GAASgzB,OAAAA,CALgB,MAK/B;AACA,kBAAM/D,GAAAA,GAAM,KANmB,GAM/B;AAEA,iBAR+B,IAQ/B;AAEAA,YAAAA,GAAAA,CAAAA,KAAAA,CAAU,IAAVA,KAAAA,EAAqB,CAAA,CAAA,GAVU,MAU/BA;AAEA,gBAZ+B,UAY/B;;AAEA,gBACG,OAAA,WAAA,KAAA,UAAA,IAAqC+D,OAAAA,YAAtC,WAAC,IACD,CAACA,OAAAA,CAFH,IAAA,EAGE;AACA0O,cAAAA,UAAAA,GADA,OACAA;AAJF,aAAA,MAKO;AACL,oBAAMlI,SAAAA,GAAY,KAAA,cAAA,CAAA,SAAA,CAAA,aAAA,EAAA,KAAA,EADb,MACa,CAAlB;AAKA,oBAAMC,MAAAA,GAASD,SAAAA,CANV,OAML;AACAmI,cAAAA,kBAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAoC,KAAA,OAAA,CAP/B,YAOLA,CAAAA;AACAD,cAAAA,UAAAA,GAAalI,SAAAA,CARR,MAQLkI;AA3B6B;;AA8B/B,kBAAMnH,MAAAA,GAAS,KAAA,WAAA,CAAA,UAAA,EAA6BtL,GAAAA,CA9Bb,0BA8BhB,CAAf;;AACAA,YAAAA,GAAAA,CAAAA,qBAAAA,GAA4BuL,wBAAAA,CAC1BvL,GAAAA,CAD0BuL,mBAAAA,EAE1BxH,OAAAA,CAjC6B,WA+BHwH,CAA5BvL;AAIAA,YAAAA,GAAAA,CAAAA,SAAAA,CACEsL,MAAAA,CADFtL,GAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAIEsL,MAAAA,CAJFtL,UAAAA,EAKEsL,MAAAA,CALFtL,WAAAA,EAAAA,CAAAA,EAOE,CAPFA,MAAAA,EAAAA,KAAAA,EAnC+B,MAmC/BA;;AAYA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,oBAAM2S,QAAAA,GAAW,KAAA,iBAAA,CAAA,CAAA,EAA0B,CADxB,MACF,CAAjB;AACA,mBAAA,UAAA,CAAA,WAAA,CAA4B;AAAA,gBAAA,OAAA;AAE1BC,gBAAAA,IAAAA,EAAMD,QAAAA,CAFoB,CAEpBA,CAFoB;AAG1BE,gBAAAA,GAAAA,EAAKF,QAAAA,CAHqB,CAGrBA,CAHqB;AAI1B7hC,gBAAAA,KAAAA,EAAOA,KAAAA,GAAQkvB,GAAAA,CAAAA,0BAAAA,CAJW,CAIXA,CAJW;AAK1BjvB,gBAAAA,MAAAA,EAAQA,MAAAA,GAASivB,GAAAA,CAAAA,0BAAAA,CALS,CAKTA;AALS,eAA5B;AAjD6B;;AAyD/B,iBAzD+B,OAyD/B;AAtxDiB;;AAyxDnBrb,UAAAA,4BAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAA2C;AACzC,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADe;;AAIzC,kBAAMqb,GAAAA,GAAM,KAJ6B,GAIzC;AACA,kBAAMuS,CAAAA,GAAIxO,OAAAA,CAL+B,KAKzC;AACA,kBAAMyO,CAAAA,GAAIzO,OAAAA,CAN+B,MAMzC;AAEA,kBAAMwG,SAAAA,GAAY,KAAA,cAAA,CAAA,SAAA,CAAA,aAAA,EAAA,CAAA,EARuB,CAQvB,CAAlB;AACA,kBAAMC,MAAAA,GAASD,SAAAA,CAT0B,OASzC;AACAmI,YAAAA,kBAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAoC,KAAA,OAAA,CAVK,YAUzCA,CAAAA;;AAEA,iBAAK,IAAIpgC,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKigC,GAAAA,CAArB,MAAA,EAAiChgC,CAAAA,GAAjC,EAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,oBAAMwgC,KAAAA,GAAQR,GAAAA,CAD8B,CAC9BA,CAAd;AACAtS,cAAAA,GAAAA,CAF4C,IAE5CA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyB8S,KAAAA,CAHmB,SAG5C9S;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAa,CAJ+B,CAI5CA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CACEuK,SAAAA,CADFvK,MAAAA,EAEE8S,KAAAA,CAFF9S,CAAAA,EAGE8S,KAAAA,CAHF9S,CAAAA,EAIE8S,KAAAA,CAJF9S,CAAAA,EAKE8S,KAAAA,CALF9S,CAAAA,EAAAA,CAAAA,EAOE,CAPFA,CAAAA,EAAAA,CAAAA,EAL4C,CAK5CA;;AAWA,kBAAI,KAAJ,UAAA,EAAqB;AACnB,sBAAM2S,QAAAA,GAAW,KAAA,iBAAA,CAAuBG,KAAAA,CAAvB,CAAA,EAAgCA,KAAAA,CAD9B,CACF,CAAjB;AACA,qBAAA,UAAA,CAAA,WAAA,CAA4B;AAAA,kBAAA,OAAA;AAE1BF,kBAAAA,IAAAA,EAAMD,QAAAA,CAFoB,CAEpBA,CAFoB;AAG1BE,kBAAAA,GAAAA,EAAKF,QAAAA,CAHqB,CAGrBA,CAHqB;AAI1B7hC,kBAAAA,KAAAA,EAJ0B,CAAA;AAK1BC,kBAAAA,MAAAA,EAL0B;AAAA,iBAA5B;AAlB0C;;AA0B5CivB,cAAAA,GAAAA,CA1B4C,OA0B5CA;AAtCuC;AAzxDxB;;AAm0DnBlb,UAAAA,wBAAAA,GAA2B;AACzB,gBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADD;;AAIzB,iBAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAJyB,CAIzB;AAv0DiB;;AA40DnBvB,UAAAA,SAAAA,CAAAA,GAAAA,EA50DmB,CAAA;;AAg1DnBC,UAAAA,cAAAA,CAAAA,GAAAA,EAAAA,UAAAA,EAh1DmB,CAAA;;AAo1DnBC,UAAAA,kBAAAA,CAAAA,GAAAA,EAAwB;AACtB,iBAAA,kBAAA,CAAA,IAAA,CAA6B;AAC3BsvB,cAAAA,OAAAA,EAFoB;AACO,aAA7B;AAr1DiB;;AA01DnBrvB,UAAAA,uBAAAA,CAAAA,GAAAA,EAAAA,UAAAA,EAAyC;AACvC,gBAAIsvB,GAAAA,KAAJ,IAAA,EAAkB;AAChB,mBAAA,kBAAA,CAAA,IAAA,CAA6B;AAC3BD,gBAAAA,OAAAA,EAAS,KAAA,qBAAA,CAAA,SAAA,CAFK,UAEL;AADkB,eAA7B;AADF,aAAA,MAIO;AACL,mBAAA,kBAAA,CAAA,IAAA,CAA6B;AAC3BA,gBAAAA,OAAAA,EAFG;AACwB,eAA7B;AANqC;;AAUvC,iBAAA,cAAA,GAAsB,KAViB,gBAUjB,EAAtB;AAp2DiB;;AAu2DnBpvB,UAAAA,gBAAAA,GAAmB;AACjB,iBAAA,kBAAA,CADiB,GACjB;AACA,iBAAA,cAAA,GAAsB,KAFL,gBAEK,EAAtB;AAz2DiB;;AA82DnBC,UAAAA,WAAAA,GA92DmB,CAAA;;AAk3DnBC,UAAAA,SAAAA,GAl3DmB,CAAA;;AAw3DnBgpB,UAAAA,WAAAA,GAAc;AACZ,kBAAM7M,GAAAA,GAAM,KADA,GACZ;;AACA,gBAAI,KAAJ,WAAA,EAAsB;AACpB,kBAAI,KAAA,WAAA,KAAJ,OAAA,EAAkC;AAChCA,gBAAAA,GAAAA,CAAAA,IAAAA,CADgC,SAChCA;AADF,eAAA,MAEO;AACLA,gBAAAA,GAAAA,CADK,IACLA;AAJkB;;AAMpB,mBAAA,WAAA,GANoB,IAMpB;AARU;;AAUZA,YAAAA,GAAAA,CAVY,SAUZA;AAl4DiB;;AAq4DnBiT,UAAAA,mBAAAA,GAAsB;AACpB,gBAAI,KAAA,0BAAA,KAAJ,IAAA,EAA8C;AAY5C,oBAAMzpB,CAAAA,GAAI,KAAA,GAAA,CAZkC,mBAY5C;AAEA,oBAAM0pB,MAAAA,GAAStiC,IAAAA,CAAAA,GAAAA,CAAS4Y,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAPA,CAAOA,CAAPA,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAdD,CAcCA,CAA9B5Y,CAAf;AACA,oBAAMuiC,OAAAA,GAAU3pB,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAYA,CAAAA,CAAAA,CAAAA,CAAAA,IAfgB,CAe5C;AACA,oBAAM4pB,OAAAA,GAAU5pB,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAYA,CAAAA,CAAAA,CAAAA,CAAAA,IAhBgB,CAgB5C;AACA,oBAAM6pB,WAAAA,GAAcziC,IAAAA,CAAAA,IAAAA,CAAUA,IAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAAVA,OAAUA,CAAVA,IAjBwB,MAiB5C;;AACA,kBAAIuiC,OAAAA,KAAAA,OAAAA,IAAuB,KAAA,oBAAA,GAAA,WAAA,GAA3B,CAAA,EAAwE;AAUtE,qBAAA,0BAAA,GAAkC,EAChC,KAAA,oBAAA,GAXoE,WAUpC,CAAlC;AAVF,eAAA,MAaO,IAAID,MAAAA,GAASvsB,MAAAA,CAAb,OAAA,EAA6B;AAClC,qBAAA,0BAAA,GADkC,WAClC;AADK,eAAA,MAEA;AAEL,qBAAA,0BAAA,GAFK,CAEL;AAnC0C;AAD1B;;AAwCpB,mBAAO,KAxCa,0BAwCpB;AA76DiB;;AAg7DnB2sB,UAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAwB;AACtB,kBAAMtzB,SAAAA,GAAY,KAAA,GAAA,CADI,mBACtB;AACA,mBAAO,CACLA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAmBA,SAAAA,CAAAA,CAAAA,CAAAA,GAAnBA,CAAAA,GAAsCA,SAAAA,CADjC,CACiCA,CADjC,EAELA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAmBA,SAAAA,CAAAA,CAAAA,CAAAA,GAAnBA,CAAAA,GAAsCA,SAAAA,CAFxC,CAEwCA,CAFjC,CAAP;AAl7DiB;;AAw7DnBuzB,UAAAA,gBAAAA,GAAmB;AACjB,iBAAK,IAAIjhC,CAAAA,GAAI,KAAA,kBAAA,CAAA,MAAA,GAAb,CAAA,EAAiDA,CAAAA,IAAjD,CAAA,EAAyDA,CAAzD,EAAA,EAA8D;AAC5D,kBAAI,CAAC,KAAA,kBAAA,CAAA,CAAA,EAAL,OAAA,EAAyC;AACvC,uBADuC,KACvC;AAF0D;AAD7C;;AAMjB,mBANiB,IAMjB;AA97DiB;;AAAA;;;;AAk8DrB,aAAA,MAAA,EAAA,IAAA,KAAA,CAAA,GAAA,EAAsB;AACpB,cAAIkhC,cAAAA,CAAAA,SAAAA,CAAAA,EAAAA,MAAJ,SAAA,EAAgD;AAC9CA,YAAAA,cAAAA,CAAAA,SAAAA,CAAyBp0B,KAAAA,CAAAA,GAAAA,CAAzBo0B,EAAyBp0B,CAAzBo0B,IAAoCA,cAAAA,CAAAA,SAAAA,CADU,EACVA,CAApCA;AAFkB;AAr0FtB;;;;;;;;;;;;;;ACeA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AASA,iBAAA,gBAAA,CAAA,GAAA,EAAA,IAAA,EAAqC;AACnC,cAAI,CAAA,IAAA,IAAS,OAAA,MAAA,KAAb,WAAA,EAA4C;AAAA;AADT;;AAInC,gBAAM1iC,KAAAA,GAAQ0gC,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAJW,CAIXA,CAAxB;AACA,gBAAMzgC,MAAAA,GAASygC,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CALU,CAKVA,CAAzB;AACA,gBAAMiC,MAAAA,GAAS,IANoB,MAMpB,EAAf;AACAA,UAAAA,MAAAA,CAAAA,IAAAA,CAAYjC,IAAAA,CAAZiC,CAAYjC,CAAZiC,EAAqBjC,IAAAA,CAArBiC,CAAqBjC,CAArBiC,EAAAA,KAAAA,EAPmC,MAOnCA;AACAzT,UAAAA,GAAAA,CAAAA,IAAAA,CARmC,MAQnCA;AAhCF;;AAmCA,cAAA,kBAAA,CAAyB;AACvBpxB,UAAAA,WAAAA,GAAc;AACZ,gBAAI,KAAA,WAAA,KAAJ,kBAAA,EAA6C;AAC3CgY,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD2C,uCAC3CA;AAFU;AADS;;AAOvB8sB,UAAAA,UAAAA,GAAa;AACX9sB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADW,sCACXA;AARqB;;AAAA;;AAYzB,cAAA,yBAAA,SAAA,kBAAA,CAA2D;AACzDhY,UAAAA,WAAAA,CAAAA,EAAAA,EAAAA,oBAAAA,EAAsC;AAAA;AAEpC,iBAAA,KAAA,GAAa2hC,EAAAA,CAFuB,CAEvBA,CAAb;AACA,iBAAA,KAAA,GAAaA,EAAAA,CAHuB,CAGvBA,CAAb;AACA,iBAAA,WAAA,GAAmBA,EAAAA,CAJiB,CAIjBA,CAAnB;AACA,iBAAA,GAAA,GAAWA,EAAAA,CALyB,CAKzBA,CAAX;AACA,iBAAA,GAAA,GAAWA,EAAAA,CANyB,CAMzBA,CAAX;AACA,iBAAA,GAAA,GAAWA,EAAAA,CAPyB,CAOzBA,CAAX;AACA,iBAAA,GAAA,GAAWA,EAAAA,CARyB,CAQzBA,CAAX;AACA,iBAAA,MAAA,GAToC,IASpC;AACA,iBAAA,oBAAA,GAVoC,oBAUpC;AAXuD;;AAczDoD,UAAAA,eAAAA,CAAAA,GAAAA,EAAqB;AACnB,gBADmB,IACnB;;AACA,gBAAI,KAAA,KAAA,KAAJ,OAAA,EAA4B;AAC1BC,cAAAA,IAAAA,GAAO5T,GAAAA,CAAAA,oBAAAA,CACL,KAAA,GAAA,CADKA,CACL,CADKA,EAEL,KAAA,GAAA,CAFKA,CAEL,CAFKA,EAGL,KAAA,GAAA,CAHKA,CAGL,CAHKA,EAIL,KAAA,GAAA,CALwB,CAKxB,CAJKA,CAAP4T;AADF,aAAA,MAOO,IAAI,KAAA,KAAA,KAAJ,QAAA,EAA6B;AAClCA,cAAAA,IAAAA,GAAO5T,GAAAA,CAAAA,oBAAAA,CACL,KAAA,GAAA,CADKA,CACL,CADKA,EAEL,KAAA,GAAA,CAFKA,CAEL,CAFKA,EAGL,KAHKA,GAAAA,EAIL,KAAA,GAAA,CAJKA,CAIL,CAJKA,EAKL,KAAA,GAAA,CALKA,CAKL,CALKA,EAML,KAPgC,GAC3BA,CAAP4T;AAViB;;AAoBnB,iBAAA,MAAA,SAAA,IAAwB,KAAxB,WAAA,EAA0C;AACxCA,cAAAA,IAAAA,CAAAA,YAAAA,CAAkBC,SAAAA,CAAlBD,CAAkBC,CAAlBD,EAAgCC,SAAAA,CADQ,CACRA,CAAhCD;AArBiB;;AAuBnB,mBAvBmB,IAuBnB;AArCuD;;AAwCzDF,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAqD;AAAA,gBAArBxwB,WAAqB,uEAArDwwB,KAAqD;AACnD,gBADmD,OACnD;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAChB,kBAAI,KAAA,oBAAA,CAAA,GAAA,CAAJ,IAAI,CAAJ,EAAyC;AACvC9E,gBAAAA,OAAAA,GAAU,KAAA,oBAAA,CAAA,GAAA,CAD6B,IAC7B,CAAVA;AADF,eAAA,MAEO;AACL,sBAAMrE,SAAAA,GAAYuJ,KAAAA,CAAAA,cAAAA,CAAAA,SAAAA,CAAAA,SAAAA,EAEhBA,KAAAA,CAAAA,GAAAA,CAAAA,MAAAA,CAFgBA,KAAAA,EAGhBA,KAAAA,CAAAA,GAAAA,CAAAA,MAAAA,CAHgBA,MAAAA,EADb,IACaA,CAAlB;AAOA,sBAAMtJ,MAAAA,GAASD,SAAAA,CARV,OAQL;AACAC,gBAAAA,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAuBA,MAAAA,CAAAA,MAAAA,CAAvBA,KAAAA,EAA4CA,MAAAA,CAAAA,MAAAA,CATvC,MASLA;AACAA,gBAAAA,MAAAA,CAVK,SAULA;AACAA,gBAAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAkBA,MAAAA,CAAAA,MAAAA,CAAlBA,KAAAA,EAAuCA,MAAAA,CAAAA,MAAAA,CAXlC,MAWLA;AAEAA,gBAAAA,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAAkCsJ,KAAAA,CAb7B,aAaLtJ;;AACA,oBAAI,KAAJ,MAAA,EAAiB;AACfA,kBAAAA,MAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAA+B,KADhB,MACfA;AAfG;;AAiBLuJ,gBAAAA,gBAAAA,CAAAA,MAAAA,EAAyB,KAjBpB,KAiBLA,CAAAA;AAEAvJ,gBAAAA,MAAAA,CAAAA,SAAAA,GAAmB,KAAA,eAAA,CAnBd,MAmBc,CAAnBA;AACAA,gBAAAA,MAAAA,CApBK,IAoBLA;AAEAoE,gBAAAA,OAAAA,GAAU5O,GAAAA,CAAAA,aAAAA,CAAkBuK,SAAAA,CAAlBvK,MAAAA,EAtBL,QAsBKA,CAAV4O;AACA,qBAAA,oBAAA,CAAA,GAAA,CAAA,IAAA,EAvBK,OAuBL;AA1Bc;AAAlB,aAAA,MA4BO;AAELmF,cAAAA,gBAAAA,CAAAA,GAAAA,EAAsB,KAFjB,KAELA,CAAAA;AACAnF,cAAAA,OAAAA,GAAU,KAAA,eAAA,CAHL,GAGK,CAAVA;AAjCiD;;AAmCnD,gBAAI,CAAJ,WAAA,EAAkB;AAChB,oBAAMoF,SAAAA,GAAY,IAAA,SAAA,CADF,OACE,CAAlB;;AACA,kBAAI;AACFpF,gBAAAA,OAAAA,CAAAA,YAAAA,CADE,SACFA;AADF,eAAA,CAEE,OAAA,EAAA,EAAW;AAGXh8B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,0CAA0CspB,EAAAA,EAHpC,OAAA,IAGXtpB;AAPc;AAnCiC;;AA6CnD,mBA7CmD,OA6CnD;AArFuD;;AAAA;;AAyF3D,iBAAA,YAAA,CAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAA6D;AAE3D,gBAAMgyB,MAAAA,GAASzX,OAAAA,CAAf,MAAA;AAAA,gBACE8mB,MAAAA,GAAS9mB,OAAAA,CAHgD,MAE3D;AAEA,gBAAMzF,KAAAA,GAAQjY,IAAAA,CAAd,IAAA;AAAA,gBACEykC,OAAAA,GAAUzkC,IAAAA,CAAAA,KAAAA,GAL+C,CAI3D;AAEA,cAN2D,GAM3D;;AACA,cAAIm1B,MAAAA,CAAO/a,EAAAA,GAAP+a,CAAAA,CAAAA,GAAiBA,MAAAA,CAAO7a,EAAAA,GAA5B,CAAqB6a,CAArB,EAAqC;AACnCuP,YAAAA,GAAAA,GADmC,EACnCA;AACAtqB,YAAAA,EAAAA,GAFmC,EAEnCA;AACAE,YAAAA,EAAAA,GAHmC,GAGnCA;AACAoqB,YAAAA,GAAAA,GAJmC,EAInCA;AACAC,YAAAA,EAAAA,GALmC,EAKnCA;AACAC,YAAAA,EAAAA,GANmC,GAMnCA;AAbyD;;AAe3D,cAAIzP,MAAAA,CAAO7a,EAAAA,GAAP6a,CAAAA,CAAAA,GAAiBA,MAAAA,CAAO3a,EAAAA,GAA5B,CAAqB2a,CAArB,EAAqC;AACnCuP,YAAAA,GAAAA,GADmC,EACnCA;AACApqB,YAAAA,EAAAA,GAFmC,EAEnCA;AACAE,YAAAA,EAAAA,GAHmC,GAGnCA;AACAkqB,YAAAA,GAAAA,GAJmC,EAInCA;AACAE,YAAAA,EAAAA,GALmC,EAKnCA;AACAC,YAAAA,EAAAA,GANmC,GAMnCA;AArByD;;AAuB3D,cAAI1P,MAAAA,CAAO/a,EAAAA,GAAP+a,CAAAA,CAAAA,GAAiBA,MAAAA,CAAO7a,EAAAA,GAA5B,CAAqB6a,CAArB,EAAqC;AACnCuP,YAAAA,GAAAA,GADmC,EACnCA;AACAtqB,YAAAA,EAAAA,GAFmC,EAEnCA;AACAE,YAAAA,EAAAA,GAHmC,GAGnCA;AACAoqB,YAAAA,GAAAA,GAJmC,EAInCA;AACAC,YAAAA,EAAAA,GALmC,EAKnCA;AACAC,YAAAA,EAAAA,GANmC,GAMnCA;AA7ByD;;AA+B3D,gBAAM/C,EAAAA,GAAM,CAAA,MAAA,CAAA,EAAA,CAAA,GAAankB,OAAAA,CAAd,OAAC,IAAgCA,OAAAA,CA/Be,MA+B3D;AACA,gBAAMokB,EAAAA,GAAM,CAAA,MAAA,CAAO1nB,EAAAA,GAAP,CAAA,CAAA,GAAiBsD,OAAAA,CAAlB,OAAC,IAAoCA,OAAAA,CAhCW,MAgC3D;AACA,gBAAMonB,EAAAA,GAAM,CAAA,MAAA,CAAA,EAAA,CAAA,GAAapnB,OAAAA,CAAd,OAAC,IAAgCA,OAAAA,CAjCe,MAiC3D;AACA,gBAAMqnB,EAAAA,GAAM,CAAA,MAAA,CAAOzqB,EAAAA,GAAP,CAAA,CAAA,GAAiBoD,OAAAA,CAAlB,OAAC,IAAoCA,OAAAA,CAlCW,MAkC3D;AACA,gBAAMsnB,EAAAA,GAAM,CAAA,MAAA,CAAA,EAAA,CAAA,GAAatnB,OAAAA,CAAd,OAAC,IAAgCA,OAAAA,CAnCe,MAmC3D;AACA,gBAAMunB,EAAAA,GAAM,CAAA,MAAA,CAAOzqB,EAAAA,GAAP,CAAA,CAAA,GAAiBkD,OAAAA,CAAlB,OAAC,IAAoCA,OAAAA,CApCW,MAoC3D;;AACA,cAAIokB,EAAAA,IAAJ,EAAA,EAAc;AAAA;AArC6C;;AAwC3D,gBAAMoD,GAAAA,GAAMV,MAAAA,CAAZ,EAAYA,CAAZ;AAAA,gBACEW,GAAAA,GAAMX,MAAAA,CAAOG,EAAAA,GADf,CACQH,CADR;AAAA,gBAEEY,GAAAA,GAAMZ,MAAAA,CAAOG,EAAAA,GA1C4C,CA0CnDH,CAFR;AAGA,gBAAMa,GAAAA,GAAMb,MAAAA,CAAZ,EAAYA,CAAZ;AAAA,gBACEc,GAAAA,GAAMd,MAAAA,CAAOI,EAAAA,GADf,CACQJ,CADR;AAAA,gBAEEe,GAAAA,GAAMf,MAAAA,CAAOI,EAAAA,GA7C4C,CA6CnDJ,CAFR;AAGA,gBAAMgB,GAAAA,GAAMhB,MAAAA,CAAZ,EAAYA,CAAZ;AAAA,gBACEiB,GAAAA,GAAMjB,MAAAA,CAAOK,EAAAA,GADf,CACQL,CADR;AAAA,gBAEEkB,GAAAA,GAAMlB,MAAAA,CAAOK,EAAAA,GAhD4C,CAgDnDL,CAFR;AAIA,gBAAMmB,IAAAA,GAAOxkC,IAAAA,CAAAA,KAAAA,CAAb,EAAaA,CAAb;AAAA,gBACEykC,IAAAA,GAAOzkC,IAAAA,CAAAA,KAAAA,CAnDkD,EAmDlDA,CADT;AAEA,cAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EApD2D,GAoD3D;AACA,cAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EArD2D,GAqD3D;;AACA,eAAK,IAAIg3B,CAAAA,GAAT,IAAA,EAAmBA,CAAAA,IAAnB,IAAA,EAA8BA,CAA9B,EAAA,EAAmC;AACjC,gBAAIA,CAAAA,GAAJ,EAAA,EAAY;AACV,kBADU,CACV;;AACA,kBAAIA,CAAAA,GAAJ,EAAA,EAAY;AACV3C,gBAAAA,CAAAA,GADU,CACVA;AADF,eAAA,MAEO;AACLA,gBAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADX,EACA,CAALA;AALQ;;AAOVqQ,cAAAA,EAAAA,GAAKhE,EAAAA,GAAM,CAAA,EAAA,GAAD,EAAC,IAPD,CAOVgE;AACAC,cAAAA,GAAAA,GAAMZ,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IARH,CAQVY;AACAC,cAAAA,GAAAA,GAAMZ,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IATH,CASVY;AACAC,cAAAA,GAAAA,GAAMZ,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAVH,CAUVY;AAVF,aAAA,MAWO;AACL,kBADK,CACL;;AACA,kBAAI7N,CAAAA,GAAJ,EAAA,EAAY;AACV3C,gBAAAA,CAAAA,GADU,CACVA;AADF,eAAA,MAEO,IAAIuP,EAAAA,KAAJ,EAAA,EAAe;AACpBvP,gBAAAA,CAAAA,GADoB,CACpBA;AADK,eAAA,MAEA;AACLA,gBAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADX,EACA,CAALA;AAPG;;AASLqQ,cAAAA,EAAAA,GAAKf,EAAAA,GAAM,CAAA,EAAA,GAAD,EAAC,IATN,CASLe;AACAC,cAAAA,GAAAA,GAAMT,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAVR,CAULS;AACAC,cAAAA,GAAAA,GAAMT,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAXR,CAWLS;AACAC,cAAAA,GAAAA,GAAMT,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAZR,CAYLS;AAxB+B;;AA2BjC,gBA3BiC,CA2BjC;;AACA,gBAAI7N,CAAAA,GAAJ,EAAA,EAAY;AACV3C,cAAAA,CAAAA,GADU,CACVA;AADF,aAAA,MAEO,IAAI2C,CAAAA,GAAJ,EAAA,EAAY;AACjB3C,cAAAA,CAAAA,GADiB,CACjBA;AADK,aAAA,MAEA;AACLA,cAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADX,EACA,CAALA;AAjC+B;;AAmCjCyQ,YAAAA,EAAAA,GAAKpE,EAAAA,GAAM,CAAA,EAAA,GAAD,EAAC,IAnCsB,CAmCjCoE;AACAC,YAAAA,GAAAA,GAAMhB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IApCoB,CAoCjCgB;AACAC,YAAAA,GAAAA,GAAMhB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IArCoB,CAqCjCgB;AACAC,YAAAA,GAAAA,GAAMhB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAtCoB,CAsCjCgB;AACA,kBAAMC,GAAAA,GAAMllC,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAvCU,EAuCVA,CAAXA,CAAZ;AACA,kBAAMmlC,GAAAA,GAAMnlC,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAxCU,EAwCVA,CAAXA,CAAZ;AACA,gBAAI2zB,CAAAA,GAAI2P,OAAAA,GAAAA,CAAAA,GAAc4B,GAAAA,GAzCW,CAyCjC;;AACA,iBAAK,IAAIrJ,CAAAA,GAAT,GAAA,EAAkBA,CAAAA,IAAlB,GAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/BxH,cAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADe,EAC1B,CAALA;;AACA,kBAAIA,CAAAA,GAAJ,CAAA,EAAW;AACTA,gBAAAA,CAAAA,GADS,CACTA;AADF,eAAA,MAEO,IAAIA,CAAAA,GAAJ,CAAA,EAAW;AAChBA,gBAAAA,CAAAA,GADgB,CAChBA;AAL6B;;AAO/Bvd,cAAAA,KAAAA,CAAM6c,CAAN7c,EAAAA,CAAAA,GAAc6tB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAAR,CAACA,GAPiB,CAO/B7tB;AACAA,cAAAA,KAAAA,CAAM6c,CAAN7c,EAAAA,CAAAA,GAAc8tB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAAR,CAACA,GARiB,CAQ/B9tB;AACAA,cAAAA,KAAAA,CAAM6c,CAAN7c,EAAAA,CAAAA,GAAc+tB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAAR,CAACA,GATiB,CAS/B/tB;AACAA,cAAAA,KAAAA,CAAM6c,CAAN7c,EAAAA,CAAAA,GAV+B,GAU/BA;AApD+B;AAtDwB;AAxI7D;;AAuPA,iBAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAA2C;AACzC,gBAAMsuB,EAAAA,GAAKC,MAAAA,CAD8B,MACzC;AACA,gBAAMC,EAAAA,GAAKD,MAAAA,CAF8B,MAEzC;AACA,cAAA,CAAA,EAHyC,EAGzC;;AACA,kBAAQA,MAAAA,CAAR,IAAA;AACE,iBAAA,SAAA;AACE,oBAAME,cAAAA,GAAiBF,MAAAA,CADzB,cACE;AACA,oBAAMG,IAAAA,GAAOxlC,IAAAA,CAAAA,KAAAA,CAAWolC,EAAAA,CAAAA,MAAAA,GAAXplC,cAAAA,IAFf,CAEE;AACA,oBAAMylC,IAAAA,GAAOF,cAAAA,GAHf,CAGE;;AACA,mBAAK7jC,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,IAAA,EAAsBA,CAAtB,EAAA,EAA2B;AACzB,oBAAIgkC,CAAAA,GAAIhkC,CAAAA,GADiB,cACzB;;AACA,qBAAK,IAAIiyB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,IAAA,EAA0BA,CAAAA,IAAK+R,CAA/B,EAAA,EAAoC;AAClCC,kBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAGEP,EAAAA,CAHFO,CAGEP,CAHFO,EAIEP,EAAAA,CAAGM,CAAAA,GAJLC,CAIEP,CAJFO,EAKEP,EAAAA,CAAGM,CAAAA,GALLC,cAKEP,CALFO,EAMEL,EAAAA,CANFK,CAMEL,CANFK,EAOEL,EAAAA,CAAGI,CAAAA,GAPLC,CAOEL,CAPFK,EAQEL,EAAAA,CAAGI,CAAAA,GAT6B,cAShCJ,CARFK,CAAAA;AAUAA,kBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAGEP,EAAAA,CAAGM,CAAAA,GAAAA,cAAAA,GAHLC,CAGEP,CAHFO,EAIEP,EAAAA,CAAGM,CAAAA,GAJLC,CAIEP,CAJFO,EAKEP,EAAAA,CAAGM,CAAAA,GALLC,cAKEP,CALFO,EAMEL,EAAAA,CAAGI,CAAAA,GAAAA,cAAAA,GANLC,CAMEL,CANFK,EAOEL,EAAAA,CAAGI,CAAAA,GAPLC,CAOEL,CAPFK,EAQEL,EAAAA,CAAGI,CAAAA,GAnB6B,cAmBhCJ,CARFK,CAAAA;AAbuB;AAJ7B;;AADF;;AA+BE,iBAAA,WAAA;AACE,mBAAKjkC,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAK2jC,EAAAA,CAAjB,MAAA,EAA4B1jC,CAAAA,GAA5B,EAAA,EAAoCA,CAAAA,IAApC,CAAA,EAA4C;AAC1CikC,gBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAGEP,EAAAA,CAHFO,CAGEP,CAHFO,EAIEP,EAAAA,CAAG1jC,CAAAA,GAJLikC,CAIEP,CAJFO,EAKEP,EAAAA,CAAG1jC,CAAAA,GALLikC,CAKEP,CALFO,EAMEL,EAAAA,CANFK,CAMEL,CANFK,EAOEL,EAAAA,CAAG5jC,CAAAA,GAPLikC,CAOEL,CAPFK,EAQEL,EAAAA,CAAG5jC,CAAAA,GATqC,CASxC4jC,CARFK,CAAAA;AAFJ;;AA/BF;;AA6CE;AACE,oBAAM,IAAA,KAAA,CA9CV,gBA8CU,CAAN;AA9CJ;AA3PF;;AA6SA,cAAA,kBAAA,SAAA,kBAAA,CAAoD;AAClD3nC,UAAAA,WAAAA,CAAAA,EAAAA,EAAgB;AAAA;AAEd,iBAAA,OAAA,GAAe2hC,EAAAA,CAFD,CAECA,CAAf;AACA,iBAAA,OAAA,GAAeA,EAAAA,CAHD,CAGCA,CAAf;AACA,iBAAA,QAAA,GAAgBA,EAAAA,CAJF,CAIEA,CAAhB;AACA,iBAAA,OAAA,GAAeA,EAAAA,CALD,CAKCA,CAAf;AACA,iBAAA,KAAA,GAAaA,EAAAA,CANC,CAMDA,CAAb;AACA,iBAAA,WAAA,GAAmBA,EAAAA,CAPL,CAOKA,CAAnB;AACA,iBAAA,MAAA,GARc,IAQd;AATgD;;AAYlDiG,UAAAA,iBAAAA,CAAAA,aAAAA,EAAAA,eAAAA,EAAAA,cAAAA,EAAkE;AAGhE,kBAAMC,cAAAA,GAH0D,GAGhE;AAEA,kBAAMC,gBAAAA,GAL0D,IAKhE;AAGA,kBAAMC,WAAAA,GAR0D,CAQhE;AAEA,kBAAM3mC,OAAAA,GAAUY,IAAAA,CAAAA,KAAAA,CAAW,KAAA,OAAA,CAVqC,CAUrC,CAAXA,CAAhB;AACA,kBAAMX,OAAAA,GAAUW,IAAAA,CAAAA,KAAAA,CAAW,KAAA,OAAA,CAXqC,CAWrC,CAAXA,CAAhB;AACA,kBAAMgmC,WAAAA,GAAchmC,IAAAA,CAAAA,IAAAA,CAAU,KAAA,OAAA,CAAVA,CAAU,CAAVA,IAZ4C,OAYhE;AACA,kBAAMimC,YAAAA,GAAejmC,IAAAA,CAAAA,IAAAA,CAAU,KAAA,OAAA,CAAVA,CAAU,CAAVA,IAb2C,OAahE;AAEA,kBAAME,KAAAA,GAAQF,IAAAA,CAAAA,GAAAA,CACZA,IAAAA,CAAAA,IAAAA,CAAUA,IAAAA,CAAAA,GAAAA,CAASgmC,WAAAA,GAAcE,aAAAA,CAAdF,CAAcE,CAAdF,GADPhmC,cACFA,CAAVA,CADYA,EAfkD,gBAelDA,CAAd;AAIA,kBAAMG,MAAAA,GAASH,IAAAA,CAAAA,GAAAA,CACbA,IAAAA,CAAAA,IAAAA,CAAUA,IAAAA,CAAAA,GAAAA,CAASimC,YAAAA,GAAeC,aAAAA,CAAfD,CAAeC,CAAfD,GADNjmC,cACHA,CAAVA,CADaA,EAnBiD,gBAmBjDA,CAAf;AAIA,kBAAMghC,MAAAA,GAASgF,WAAAA,GAvBiD,KAuBhE;AACA,kBAAM/E,MAAAA,GAASgF,YAAAA,GAxBiD,MAwBhE;AAEA,kBAAM1pB,OAAAA,GAAU;AACdyX,cAAAA,MAAAA,EAAQ,KADM,OAAA;AAEdqP,cAAAA,MAAAA,EAAQ,KAFM,OAAA;AAGdjkC,cAAAA,OAAAA,EAAS,CAHK,OAAA;AAIdC,cAAAA,OAAAA,EAAS,CAJK,OAAA;AAKd2hC,cAAAA,MAAAA,EAAQ,IALM,MAAA;AAMdC,cAAAA,MAAAA,EAAQ,IANM;AAAA,aAAhB;AASA,kBAAMkF,WAAAA,GAAcjmC,KAAAA,GAAQ6lC,WAAAA,GAnCoC,CAmChE;AACA,kBAAMK,YAAAA,GAAejmC,MAAAA,GAAS4lC,WAAAA,GApCkC,CAoChE;AAEA,kBAAMpM,SAAAA,GAAY0M,cAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EAtC8C,KAsC9CA,CAAlB;AAMA,kBAAMzM,MAAAA,GAASD,SAAAA,CA5CiD,OA4ChE;AAEA,kBAAM96B,IAAAA,GAAO+6B,MAAAA,CAAAA,eAAAA,CAAAA,KAAAA,EA9CmD,MA8CnDA,CAAb;;AACA,gBAAA,eAAA,EAAqB;AACnB,oBAAM9iB,KAAAA,GAAQjY,IAAAA,CADK,IACnB;;AACA,mBAAK,IAAI6C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKqV,KAAAA,CAArB,MAAA,EAAmCpV,CAAAA,GAAnC,EAAA,EAA2CA,CAAAA,IAA3C,CAAA,EAAmD;AACjDoV,gBAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWwvB,eAAAA,CADsC,CACtCA,CAAXxvB;AACAA,gBAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAewvB,eAAAA,CAFkC,CAElCA,CAAfxvB;AACAA,gBAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAAewvB,eAAAA,CAHkC,CAGlCA,CAAfxvB;AACAA,gBAAAA,KAAAA,CAAMpV,CAAAA,GAANoV,CAAAA,CAAAA,GAJiD,GAIjDA;AANiB;AA/C2C;;AAwDhE,iBAAA,MAAA,MAAA,IAAqB,KAArB,QAAA,EAAoC;AAClCyvB,cAAAA,UAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EADkC,OAClCA,CAAAA;AAzD8D;;AA2DhE3M,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EA3DgE,WA2DhEA;AACA,kBAAMx7B,MAAAA,GAASu7B,SAAAA,CA5DiD,MA4DhE;AAEA,mBAAO;AAAA,cAAA,MAAA;AAELv6B,cAAAA,OAAAA,EAASA,OAAAA,GAAU2mC,WAAAA,GAFd,MAAA;AAGL1mC,cAAAA,OAAAA,EAASA,OAAAA,GAAU0mC,WAAAA,GAHd,MAAA;AAAA,cAAA,MAAA;AAAA,cAAA;AAAA,aAAP;AA1EgD;;AAmFlDjD,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAqD;AAAA,gBAArBxwB,WAAqB,uEAArDwwB,KAAqD;AACnDK,YAAAA,gBAAAA,CAAAA,GAAAA,EAAsB,KAD6B,KACnDA,CAAAA;AACA,gBAFmD,KAEnD;;AACA,gBAAA,WAAA,EAAiB;AACf9iC,cAAAA,KAAAA,GAAQ6Y,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmCkW,GAAAA,CAD5B,mBACPlW,CAAR7Y;AADF,aAAA,MAEO;AAELA,cAAAA,KAAAA,GAAQ6Y,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmCgqB,KAAAA,CAFtC,aAEGhqB,CAAR7Y;;AACA,kBAAI,KAAJ,MAAA,EAAiB;AACf,sBAAMmmC,WAAAA,GAActtB,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmC,KADxC,MACKA,CAApB;;AACA7Y,gBAAAA,KAAAA,GAAQ,CAACA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWmmC,WAAAA,CAAZ,CAAYA,CAAZ,EAA4BnmC,KAAAA,CAAAA,CAAAA,CAAAA,GAAWmmC,WAAAA,CAA/CnmC,CAA+CmmC,CAAvC,CAARnmC;AALG;AAL4C;;AAgBnD,kBAAMomC,sBAAAA,GAAyB,KAAA,iBAAA,CAAA,KAAA,EAE7Bn0B,WAAAA,GAAAA,IAAAA,GAAqB,KAFQ,WAAA,EAG7B4wB,KAAAA,CAnBiD,cAgBpB,CAA/B;;AAMA,gBAAI,CAAJ,WAAA,EAAkB;AAChB9T,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAA4B8T,KAAAA,CADZ,aAChB9T;;AACA,kBAAI,KAAJ,MAAA,EAAiB;AACfA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyB,KADV,MACfA;AAHc;AAtBiC;;AA6BnDA,YAAAA,GAAAA,CAAAA,SAAAA,CACEqX,sBAAAA,CADFrX,OAAAA,EAEEqX,sBAAAA,CA/BiD,OA6BnDrX;AAIAA,YAAAA,GAAAA,CAAAA,KAAAA,CAAUqX,sBAAAA,CAAVrX,MAAAA,EAAyCqX,sBAAAA,CAjCU,MAiCnDrX;AAEA,mBAAOA,GAAAA,CAAAA,aAAAA,CAAkBqX,sBAAAA,CAAlBrX,MAAAA,EAnC4C,WAmC5CA,CAAP;AAtHgD;;AAAA;;AA0HpD,cAAA,mBAAA,SAAA,kBAAA,CAAqD;AACnD0T,UAAAA,UAAAA,GAAa;AACX,mBADW,SACX;AAFiD;;AAAA;;AAMrD,iBAAA,iBAAA,CAAA,EAAA,EAAA,oBAAA,EAAqD;AACnD,kBAAQnD,EAAAA,CAAR,CAAQA,CAAR;AACE,iBAAA,aAAA;AACE,qBAAO,IAAA,yBAAA,CAAA,EAAA,EAFX,oBAEW,CAAP;;AACF,iBAAA,MAAA;AACE,qBAAO,IAAA,kBAAA,CAJX,EAIW,CAAP;;AACF,iBAAA,OAAA;AACE,qBAAO,IANX,mBAMW,EAAP;AANJ;;AAQA,gBAAM,IAAA,KAAA,CAAU,oBAAoBA,EAAAA,CATe,CASfA,CATe,EAS7C,CAAN;AAtbF;;AAybA,cAAM+G,SAAAA,GAAY;AAChBC,UAAAA,OAAAA,EADgB,CAAA;AAEhBC,UAAAA,SAAAA,EAFgB;AAAA,SAAlB;;AAKA,cAAA,aAAA,CAAoB;AAElB,qBAAWd,gBAAX,GAA8B;AAC5B,mBAAO/nC,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,kBAAAA,EADqB,IACrBA,CAAP;AAHgB;;AAMlBC,UAAAA,WAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,qBAAAA,EAAAA,aAAAA,EAAkE;AAChE,iBAAA,YAAA,GAAoB2hC,EAAAA,CAD4C,CAC5CA,CAApB;AACA,iBAAA,MAAA,GAAcA,EAAAA,CAAAA,CAAAA,CAAAA,IAAS,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAvB,CAAuB,CAAvB;AACA,iBAAA,IAAA,GAAYA,EAAAA,CAHoD,CAGpDA,CAAZ;AACA,iBAAA,KAAA,GAAaA,EAAAA,CAJmD,CAInDA,CAAb;AACA,iBAAA,KAAA,GAAaA,EAAAA,CALmD,CAKnDA,CAAb;AACA,iBAAA,SAAA,GAAiBA,EAAAA,CAN+C,CAM/CA,CAAjB;AACA,iBAAA,UAAA,GAAkBA,EAAAA,CAP8C,CAO9CA,CAAlB;AACA,iBAAA,KAAA,GARgE,KAQhE;AACA,iBAAA,GAAA,GATgE,GAShE;AACA,iBAAA,qBAAA,GAVgE,qBAUhE;AACA,iBAAA,aAAA,GAXgE,aAWhE;AAjBgB;;AAoBlBkH,UAAAA,mBAAAA,CAAAA,KAAAA,EAA2B;AACzB,kBAAMvhB,YAAAA,GAAe,KADI,YACzB;AACA,kBAAMsb,IAAAA,GAAO,KAFY,IAEzB;AACA,kBAAMkG,KAAAA,GAAQ,KAHW,KAGzB;AACA,kBAAMC,KAAAA,GAAQ,KAJW,KAIzB;AACA,kBAAMC,SAAAA,GAAY,KALO,SAKzB;AACA,kBAAMC,UAAAA,GAAa,KANM,UAMzB;AACA,kBAAMrH,KAAAA,GAAQ,KAPW,KAOzB;AACA,kBAAME,qBAAAA,GAAwB,KARL,qBAQzB;AAEAzW,aAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,iBAVoB,UAUzBA;AAsBA,kBAAMmX,EAAAA,GAAKI,IAAAA,CAAX,CAAWA,CAAX;AAAA,kBACEH,EAAAA,GAAKG,IAAAA,CADP,CACOA,CADP;AAAA,kBAEEF,EAAAA,GAAKE,IAAAA,CAFP,CAEOA,CAFP;AAAA,kBAGED,EAAAA,GAAKC,IAAAA,CAnCkB,CAmClBA,CAHP;;AAMA,kBAAM4F,WAAAA,GAActtB,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmC,KAtC9B,MAsCLA,CAApB;;AACA,kBAAMguB,cAAAA,GAAiBhuB,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CACrB,KAxCuB,aAuCFA,CAAvB;;AAGA,kBAAMgtB,aAAAA,GAAgB,CACpBM,WAAAA,CAAAA,CAAAA,CAAAA,GAAiBU,cAAAA,CADG,CACHA,CADG,EAEpBV,WAAAA,CAAAA,CAAAA,CAAAA,GAAiBU,cAAAA,CAFnB,CAEmBA,CAFG,CAAtB;AAQA,kBAAMC,IAAAA,GAAO,KAAA,eAAA,CAAA,KAAA,EAEX,KAAA,GAAA,CAAA,MAAA,CAFW,KAAA,EAGXjB,aAAAA,CArDuB,CAqDvBA,CAHW,CAAb;AAKA,kBAAMkB,IAAAA,GAAO,KAAA,eAAA,CAAA,KAAA,EAEX,KAAA,GAAA,CAAA,MAAA,CAFW,MAAA,EAGXlB,aAAAA,CA1DuB,CA0DvBA,CAHW,CAAb;AAMA,kBAAMvM,SAAAA,GAAYuJ,KAAAA,CAAAA,cAAAA,CAAAA,SAAAA,CAAAA,SAAAA,EAEhBiE,IAAAA,CAFgBjE,IAAAA,EAGhBkE,IAAAA,CAHgBlE,IAAAA,EA7DO,IA6DPA,CAAlB;AAMA,kBAAMtJ,MAAAA,GAASD,SAAAA,CAnEU,OAmEzB;AACA,kBAAM0N,QAAAA,GAAWvH,qBAAAA,CAAAA,oBAAAA,CApEQ,MAoERA,CAAjB;AACAuH,YAAAA,QAAAA,CAAAA,UAAAA,GAAsBnE,KAAAA,CArEG,UAqEzBmE;AAEA,iBAAA,8BAAA,CAAA,QAAA,EAAA,SAAA,EAvEyB,KAuEzB;AAEA,gBAAIC,UAAAA,GAzEqB,EAyEzB;AACA,gBAAIC,UAAAA,GA1EqB,EA0EzB;AACA,gBAAIC,UAAAA,GA3EqB,EA2EzB;AACA,gBAAIC,UAAAA,GA5EqB,EA4EzB;;AAIA,gBAAIjH,EAAAA,GAAJ,CAAA,EAAY;AACV8G,cAAAA,UAAAA,GADU,CACVA;AACAE,cAAAA,UAAAA,IAAcxnC,IAAAA,CAAAA,GAAAA,CAFJ,EAEIA,CAAdwnC;AAlFuB;;AAoFzB,gBAAI/G,EAAAA,GAAJ,CAAA,EAAY;AACV8G,cAAAA,UAAAA,GADU,CACVA;AACAE,cAAAA,UAAAA,IAAcznC,IAAAA,CAAAA,GAAAA,CAFJ,EAEIA,CAAdynC;AAtFuB;;AAwFzB7N,YAAAA,MAAAA,CAAAA,SAAAA,CAAiB,EAAE,IAAA,CAAA,KAAA,GAAnBA,UAAiB,CAAjBA,EAA6C,EAAE,IAAA,CAAA,KAAA,GAxFtB,UAwFoB,CAA7CA;AACAyN,YAAAA,QAAAA,CAAAA,SAAAA,CAAmBF,IAAAA,CAAnBE,KAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAqCD,IAAAA,CAArCC,KAAAA,EAAAA,CAAAA,EAzFyB,CAyFzBA;AAEA,iBAAA,QAAA,CAAA,QAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EA3FyB,UA2FzB;AAEAA,YAAAA,QAAAA,CAAAA,aAAAA,GAAyBA,QAAAA,CAAAA,GAAAA,CAAAA,mBAAAA,CA7FA,KA6FAA,EAAzBA;AAEAA,YAAAA,QAAAA,CAAAA,mBAAAA,CA/FyB,YA+FzBA;AAEAA,YAAAA,QAAAA,CAjGyB,UAiGzBA;AAEA,mBAAO;AACLjpC,cAAAA,MAAAA,EAAQu7B,SAAAA,CADH,MAAA;AAELqH,cAAAA,MAAAA,EAAQmG,IAAAA,CAFH,KAAA;AAGLlG,cAAAA,MAAAA,EAAQmG,IAAAA,CAHH,KAAA;AAILhoC,cAAAA,OAAAA,EAJK,UAAA;AAKLC,cAAAA,OAAAA,EALK;AAAA,aAAP;AAvHgB;;AAgIlBqoC,UAAAA,eAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAAA,KAAAA,EAA6C;AAE3CxT,YAAAA,IAAAA,GAAOl0B,IAAAA,CAAAA,GAAAA,CAFoC,IAEpCA,CAAPk0B;AAKA,kBAAMlB,OAAAA,GAAUhzB,IAAAA,CAAAA,GAAAA,CAAS2nC,aAAAA,CAAT3nC,gBAAAA,EAP2B,cAO3BA,CAAhB;AACA,gBAAIomB,IAAAA,GAAOpmB,IAAAA,CAAAA,IAAAA,CAAUk0B,IAAAA,GARsB,KAQhCl0B,CAAX;;AACA,gBAAIomB,IAAAA,IAAJ,OAAA,EAAqB;AACnBA,cAAAA,IAAAA,GADmB,OACnBA;AADF,aAAA,MAEO;AACL/lB,cAAAA,KAAAA,GAAQ+lB,IAAAA,GADH,IACL/lB;AAZyC;;AAc3C,mBAAO;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,aAAP;AA9IgB;;AAiJlBunC,UAAAA,QAAAA,CAAAA,QAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAmC;AACjC,kBAAMC,SAAAA,GAAYnH,EAAAA,GADe,EACjC;AACA,kBAAMoH,UAAAA,GAAanH,EAAAA,GAFc,EAEjC;AACA0G,YAAAA,QAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAHiC,UAGjCA;AACAA,YAAAA,QAAAA,CAJiC,IAIjCA;AACAA,YAAAA,QAAAA,CALiC,OAKjCA;AAtJgB;;AAyJlBU,UAAAA,8BAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAAAA,KAAAA,EAA2D;AACzD,kBAAMxrB,OAAAA,GAAU8qB,QAAAA,CAAhB,GAAA;AAAA,kBACExW,OAAAA,GAAUwW,QAAAA,CAF6C,OACzD;;AAEA,oBAAA,SAAA;AACE,mBAAKX,SAAAA,CAAL,OAAA;AACE,sBAAMtX,GAAAA,GAAM,KADd,GACE;AACA7S,gBAAAA,OAAAA,CAAAA,SAAAA,GAAoB6S,GAAAA,CAFtB,SAEE7S;AACAA,gBAAAA,OAAAA,CAAAA,WAAAA,GAAsB6S,GAAAA,CAHxB,WAGE7S;AACAsU,gBAAAA,OAAAA,CAAAA,SAAAA,GAAoBzB,GAAAA,CAJtB,SAIEyB;AACAA,gBAAAA,OAAAA,CAAAA,WAAAA,GAAsBzB,GAAAA,CALxB,WAKEyB;AANJ;;AAQE,mBAAK6V,SAAAA,CAAL,SAAA;AACE,sBAAMsB,QAAAA,GAAW9uB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkB0mB,KAAAA,CAAlB1mB,CAAkB0mB,CAAlB1mB,EAA4B0mB,KAAAA,CAA5B1mB,CAA4B0mB,CAA5B1mB,EAAsC0mB,KAAAA,CADzD,CACyDA,CAAtC1mB,CAAjB;;AACAqD,gBAAAA,OAAAA,CAAAA,SAAAA,GAFF,QAEEA;AACAA,gBAAAA,OAAAA,CAAAA,WAAAA,GAHF,QAGEA;AAEAsU,gBAAAA,OAAAA,CAAAA,SAAAA,GALF,QAKEA;AACAA,gBAAAA,OAAAA,CAAAA,WAAAA,GANF,QAMEA;AAdJ;;AAgBE;AACE,sBAAM,IAAA,KAAA,CAAA,WAAA,CAAgB,2BAjB1B,SAAA,EAiBU,CAAN;AAjBJ;AA5JgB;;AAiLlBiS,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAqD;AAAA,gBAArBxwB,WAAqB,uEAArDwwB,KAAqD;AAEnD,gBAAI7C,MAAAA,GAF+C,OAEnD;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAChBA,cAAAA,MAAAA,GAAS/mB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAuBgqB,KAAAA,CADhB,aACPhqB,CAAT+mB;;AACA,kBAAI,KAAJ,MAAA,EAAiB;AACfA,gBAAAA,MAAAA,GAAS/mB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAuB,KADjB,MACNA,CAAT+mB;AAHc;AAHiC;;AAUnD,kBAAMwG,sBAAAA,GAAyB,KAAA,mBAAA,CAVoB,KAUpB,CAA/B;AAEA,gBAAIrD,SAAAA,GAAY,IAAA,SAAA,CAZmC,MAYnC,CAAhB;AAGAA,YAAAA,SAAAA,GAAYA,SAAAA,CAAAA,SAAAA,CACVqD,sBAAAA,CADUrD,OAAAA,EAEVqD,sBAAAA,CAjBiD,OAevCrD,CAAZA;AAIAA,YAAAA,SAAAA,GAAYA,SAAAA,CAAAA,KAAAA,CACV,IAAIqD,sBAAAA,CADMrD,MAAAA,EAEV,IAAIqD,sBAAAA,CArB6C,MAmBvCrD,CAAZA;AAKA,kBAAMpF,OAAAA,GAAU5O,GAAAA,CAAAA,aAAAA,CAAkBqX,sBAAAA,CAAlBrX,MAAAA,EAxBmC,QAwBnCA,CAAhB;;AACA,gBAAI;AACF4O,cAAAA,OAAAA,CAAAA,YAAAA,CADE,SACFA;AADF,aAAA,CAEE,OAAA,EAAA,EAAW;AAGXh8B,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,8BAA8BspB,EAAAA,EAHxB,OAAA,IAGXtpB;AA9BiD;;AAgCnD,mBAhCmD,OAgCnD;AAjNgB;;AAAA;;;;;;;;;;;;;ACnapB,cAAMmc,mBAAAA,GAAsB7b,MAAAA,CAAAA,MAAAA,CA3B5B,IA2B4BA,CAA5B;;AAEA6b,QAAAA,mBAAAA,CAAAA,UAAAA,GACEA,mBAAAA,CAAAA,UAAAA,KAAAA,SAAAA,GAAAA,IAAAA,GAEIA,mBAAAA,CAhCN,UA6BAA;AAKAA,QAAAA,mBAAAA,CAAAA,SAAAA,GACEA,mBAAAA,CAAAA,SAAAA,KAAAA,SAAAA,GAAAA,EAAAA,GAEIA,mBAAAA,CArCN,SAkCAA;;;;;;;;;;;;ACnBA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAWA,cAAM8pB,YAAAA,GAAe;AACnBt7B,UAAAA,OAAAA,EADmB,CAAA;AAEnBu7B,UAAAA,IAAAA,EAFmB,CAAA;AAGnBC,UAAAA,KAAAA,EAHmB;AAAA,SAArB;AAMA,cAAMC,UAAAA,GAAa;AACjBz7B,UAAAA,OAAAA,EADiB,CAAA;AAEjB07B,UAAAA,MAAAA,EAFiB,CAAA;AAGjBC,UAAAA,eAAAA,EAHiB,CAAA;AAIjBC,UAAAA,KAAAA,EAJiB,CAAA;AAKjBC,UAAAA,OAAAA,EALiB,CAAA;AAMjBL,UAAAA,KAAAA,EANiB,CAAA;AAOjBM,UAAAA,IAAAA,EAPiB,CAAA;AAQjBC,UAAAA,aAAAA,EARiB,CAAA;AASjBC,UAAAA,cAAAA,EATiB;AAAA,SAAnB;;AAYA,iBAAA,UAAA,CAAA,MAAA,EAA4B;AAC1B,cACE,EACE,MAAA,YAAA,KAAA,IACC,OAAA,MAAA,KAAA,QAAA,IAA8B9rB,MAAAA,KAHnC,IACE,CADF,EAKE;AASA7a,aAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EATA,gEASAA;AACA,mBAVA,MAUA;AAhBwB;;AAkB1B,kBAAQ6a,MAAAA,CAAR,IAAA;AACE,iBAAA,gBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,cAAA,CAAmBA,MAAAA,CAF9B,OAEW,CAAP;;AACF,iBAAA,qBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,mBAAA,CAAwBA,MAAAA,CAJnC,OAIW,CAAP;;AACF,iBAAA,mBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,iBAAA,CAAsBA,MAAAA,CAAtB,OAAA,EAAsCA,MAAAA,CANjD,IAMW,CAAP;;AACF,iBAAA,6BAAA;AACE,qBAAO,IAAA,KAAA,CAAA,2BAAA,CAAgCA,MAAAA,CAAhC,OAAA,EAAgDA,MAAAA,CAR3D,MAQW,CAAP;;AACF,iBAAA,uBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,qBAAA,CAA0BA,MAAAA,CAA1B,OAAA,EAA0CA,MAAAA,CAVrD,OAUW,CAAP;;AACF;AACE,qBAAO,IAAA,KAAA,CAAA,qBAAA,CAA0BA,MAAAA,CAA1B,OAAA,EAA0CA,MAAAA,CAZrD,QAYqDA,EAA1C,CAAP;AAZJ;AA9DF;;AA8EA,cAAA,cAAA,CAAqB;AACnB7e,UAAAA,WAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA,MAAAA,EAA4C;AAC1C,iBAAA,UAAA,GAD0C,UAC1C;AACA,iBAAA,UAAA,GAF0C,UAE1C;AACA,iBAAA,MAAA,GAH0C,MAG1C;AACA,iBAAA,UAAA,GAJ0C,CAI1C;AACA,iBAAA,QAAA,GAL0C,CAK1C;AACA,iBAAA,oBAAA,GAN0C,IAM1C;AACA,iBAAA,WAAA,GAAmBsE,MAAAA,CAAAA,MAAAA,CAPuB,IAOvBA,CAAnB;AACA,iBAAA,iBAAA,GAAyBA,MAAAA,CAAAA,MAAAA,CARiB,IAQjBA,CAAzB;AACA,iBAAA,oBAAA,GAA4BA,MAAAA,CAAAA,MAAAA,CATc,IASdA,CAA5B;AACA,iBAAA,aAAA,GAAqBA,MAAAA,CAAAA,MAAAA,CAVqB,IAUrBA,CAArB;;AAEA,iBAAA,kBAAA,GAA0B4lB,KAAAA,IAAS;AACjC,oBAAMrpB,IAAAA,GAAOqpB,KAAAA,CADoB,IACjC;;AACA,kBAAIrpB,IAAAA,CAAAA,UAAAA,KAAoB,KAAxB,UAAA,EAAyC;AAAA;AAFR;;AAKjC,kBAAIA,IAAAA,CAAJ,MAAA,EAAiB;AACf,qBAAA,qBAAA,CADe,IACf;;AADe;AALgB;;AASjC,kBAAIA,IAAAA,CAAJ,QAAA,EAAmB;AACjB,sBAAM+pC,UAAAA,GAAa/pC,IAAAA,CADF,UACjB;AACA,sBAAMwc,UAAAA,GAAa,KAAA,oBAAA,CAFF,UAEE,CAAnB;;AACA,oBAAI,CAAJ,UAAA,EAAiB;AACf,wBAAM,IAAA,KAAA,CAAU,2BADD,UAAA,EACT,CAAN;AAJe;;AAMjB,uBAAO,KAAA,oBAAA,CANU,UAMV,CAAP;;AAEA,oBAAIxc,IAAAA,CAAAA,QAAAA,KAAkBopC,YAAAA,CAAtB,IAAA,EAAyC;AACvC5sB,kBAAAA,UAAAA,CAAAA,OAAAA,CAAmBxc,IAAAA,CADoB,IACvCwc;AADF,iBAAA,MAEO,IAAIxc,IAAAA,CAAAA,QAAAA,KAAkBopC,YAAAA,CAAtB,KAAA,EAA0C;AAC/C5sB,kBAAAA,UAAAA,CAAAA,MAAAA,CAAkBwtB,UAAAA,CAAWhqC,IAAAA,CADkB,MAC7BgqC,CAAlBxtB;AADK,iBAAA,MAEA;AACL,wBAAM,IAAA,KAAA,CADD,0BACC,CAAN;AAbe;;AAAA;AATc;;AA0BjC,oBAAMytB,MAAAA,GAAS,KAAA,aAAA,CAAmBjqC,IAAAA,CA1BD,MA0BlB,CAAf;;AACA,kBAAI,CAAJ,MAAA,EAAa;AACX,sBAAM,IAAA,KAAA,CAAU,+BAA+BA,IAAAA,CADpC,MAAA,EACL,CAAN;AA5B+B;;AA8BjC,kBAAIA,IAAAA,CAAJ,UAAA,EAAqB;AACnB,sBAAMkqC,YAAAA,GAAe,KADF,UACnB;AACA,sBAAMC,YAAAA,GAAenqC,IAAAA,CAFF,UAEnB;AAEA,oBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BC,kBAAAA,OAAAA,CAAQgqC,MAAAA,CAAOjqC,IAAAA,CADc,IACrBiqC,CAARhqC,CAAAA;AADF,iBAAA,EAAA,IAAA,CAGE,UAAA,MAAA,EAAkB;AAChBmqC,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AACjBC,oBAAAA,UAAAA,EADiB,YAAA;AAEjBC,oBAAAA,UAAAA,EAFiB,YAAA;AAGjBhkB,oBAAAA,QAAAA,EAAU8iB,YAAAA,CAHO,IAAA;AAIjBW,oBAAAA,UAAAA,EAAY/pC,IAAAA,CAJK,UAAA;AAKjBA,oBAAAA,IAAAA,EALiB;AAAA,mBAAnBoqC;AAJJ,iBAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AACjBC,oBAAAA,UAAAA,EADiB,YAAA;AAEjBC,oBAAAA,UAAAA,EAFiB,YAAA;AAGjBhkB,oBAAAA,QAAAA,EAAU8iB,YAAAA,CAHO,KAAA;AAIjBW,oBAAAA,UAAAA,EAAY/pC,IAAAA,CAJK,UAAA;AAKjBge,oBAAAA,MAAAA,EAAQgsB,UAAAA,CALS,MAKTA;AALS,mBAAnBI;AAbJ,iBAAA;AAJmB;AA9BY;;AA0DjC,kBAAIpqC,IAAAA,CAAJ,QAAA,EAAmB;AACjB,qBAAA,iBAAA,CADiB,IACjB;;AADiB;AA1Dc;;AA8DjCiqC,cAAAA,MAAAA,CAAOjqC,IAAAA,CA9D0B,IA8DjCiqC,CAAAA;AA9DF,aAAA;;AAgEAG,YAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,SAAAA,EAAmC,KA5EO,kBA4E1CA;AA7EiB;;AAgFnBG,UAAAA,EAAAA,CAAAA,UAAAA,EAAAA,OAAAA,EAAwB;AAUtB,kBAAMC,EAAAA,GAAK,KAVW,aAUtB;;AACA,gBAAIA,EAAAA,CAAJ,UAAIA,CAAJ,EAAoB;AAClB,oBAAM,IAAA,KAAA,CAAU,0CADE,UAAA,GACZ,CAAN;AAZoB;;AActBA,YAAAA,EAAAA,CAAAA,UAAAA,CAAAA,GAdsB,OActBA;AA9FiB;;AAuGnBC,UAAAA,IAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAAkC;AAChC,iBAAA,YAAA,CACE;AACEJ,cAAAA,UAAAA,EAAY,KADd,UAAA;AAEEC,cAAAA,UAAAA,EAAY,KAFd,UAAA;AAGEL,cAAAA,MAAAA,EAHF,UAAA;AAAA,cAAA;AAAA,aADF,EADgC,SAChC;AAxGiB;;AA2HnBS,UAAAA,eAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA6C;AAC3C,kBAAMX,UAAAA,GAAa,KADwB,UACxB,EAAnB;AACA,kBAAMvtB,UAAAA,GAFqC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAE3C;AACA,iBAAA,oBAAA,CAAA,UAAA,IAH2C,UAG3C;;AACA,gBAAI;AACF,mBAAA,YAAA,CACE;AACE6tB,gBAAAA,UAAAA,EAAY,KADd,UAAA;AAEEC,gBAAAA,UAAAA,EAAY,KAFd,UAAA;AAGEL,gBAAAA,MAAAA,EAHF,UAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA;AAAA,eADF,EADE,SACF;AADF,aAAA,CAWE,OAAA,EAAA,EAAW;AACXztB,cAAAA,UAAAA,CAAAA,MAAAA,CADW,EACXA;AAhByC;;AAkB3C,mBAAOA,UAAAA,CAlBoC,OAkB3C;AA7IiB;;AA0JnBmuB,UAAAA,cAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,EAAAA,SAAAA,EAA8D;AAC5D,kBAAMC,QAAAA,GAAW,KAAjB,QAAiB,EAAjB;AAAA,kBACEP,UAAAA,GAAa,KADf,UAAA;AAAA,kBAEEC,UAAAA,GAAa,KAFf,UAAA;AAAA,kBAGEF,MAAAA,GAAS,KAJiD,MAC5D;AAKA,mBAAO,IAAA,cAAA,CACL;AACEtmC,cAAAA,KAAAA,EAAO+mC,UAAAA,IAAc;AACnB,sBAAMC,eAAAA,GADa,CAAA,GAAA,KAAA,CAAA,uBAAA,GACnB;AACA,qBAAA,iBAAA,CAAA,QAAA,IAAmC;AAAA,kBAAA,UAAA;AAEjCC,kBAAAA,SAAAA,EAFiC,eAAA;AAGjCC,kBAAAA,QAAAA,EAHiC,IAAA;AAIjCC,kBAAAA,UAAAA,EAJiC,IAAA;AAKjCC,kBAAAA,QAAAA,EALiC;AAAA,iBAAnC;;AAOA,qBAAA,YAAA,CACE;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGEjB,kBAAAA,MAAAA,EAHF,UAAA;AAAA,kBAAA,QAAA;AAAA,kBAAA,IAAA;AAMEkB,kBAAAA,WAAAA,EAAaN,UAAAA,CANf;AAAA,iBADF,EATmB,SASnB;;AAYA,uBAAOC,eAAAA,CArBY,OAqBnB;AAtBJ,eAAA;AAyBEM,cAAAA,IAAAA,EAAMP,UAAAA,IAAc;AAClB,sBAAMQ,cAAAA,GADY,CAAA,GAAA,KAAA,CAAA,uBAAA,GAClB;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,GAFkB,cAElB;AACAjB,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,IAAA;AAAA,kBAAA,QAAA;AAKjB4B,kBAAAA,WAAAA,EAAaN,UAAAA,CALI;AAAA,iBAAnBT;AASA,uBAAOiB,cAAAA,CAZW,OAYlB;AArCJ,eAAA;AAwCErd,cAAAA,MAAAA,EAAQhQ,MAAAA,IAAU;AAChB1b,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO0b,MAAAA,YAAP1b,KAAAA,EADgB,iCAChBA;AACA,sBAAMipC,gBAAAA,GAFU,CAAA,GAAA,KAAA,CAAA,uBAAA,GAEhB;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,GAHgB,gBAGhB;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,GAJgB,IAIhB;AACAnB,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,MAAA;AAAA,kBAAA,QAAA;AAKjBvrB,kBAAAA,MAAAA,EAAQgsB,UAAAA,CALS,MAKTA;AALS,iBAAnBI;AAQA,uBAAOmB,gBAAAA,CAbS,OAahB;AArDJ;AAAA,aADK,EANqD,gBAMrD,CAAP;AAhKiB;;AAgOnBC,UAAAA,iBAAAA,CAAAA,IAAAA,EAAwB;AACtB,kBAAMZ,QAAAA,GAAW5qC,IAAAA,CAAjB,QAAA;AAAA,kBACEqqC,UAAAA,GAAa,KADf,UAAA;AAAA,kBAEEC,UAAAA,GAAatqC,IAAAA,CAFf,UAAA;AAAA,kBAGEoqC,MAAAA,GAAS,KAJW,MACtB;AAIA,kBAAMqB,IAAAA,GAAN,IAAA;AAAA,kBACExB,MAAAA,GAAS,KAAA,aAAA,CAAmBjqC,IAAAA,CANR,MAMX,CADX;AAGA,kBAAM0rC,UAAAA,GAAa;AACjBC,cAAAA,OAAAA,CAAAA,KAAAA,EAAoC;AAAA,oBAArBpkB,IAAqB,uEAApCokB,CAAoC;AAAA,oBAApCA,SAAoC;;AAClC,oBAAI,KAAJ,WAAA,EAAsB;AAAA;AADY;;AAIlC,sBAAMC,eAAAA,GAAkB,KAJU,WAIlC;AACA,qBAAA,WAAA,IALkC,IAKlC;;AAIA,oBAAIA,eAAAA,GAAAA,CAAAA,IAAuB,KAAA,WAAA,IAA3B,CAAA,EAAkD;AAChD,uBAAA,cAAA,GADgD,CAAA,GAAA,KAAA,CAAA,uBAAA,GAChD;AACA,uBAAA,KAAA,GAAa,KAAA,cAAA,CAFmC,OAEhD;AAXgC;;AAalCH,gBAAAA,IAAAA,CAAAA,YAAAA,CACE;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGEH,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHV,OAAA;AAAA,kBAAA,QAAA;AAAA,kBAAA;AAAA,iBADFkC,EAbkC,SAalCA;AAde,eAAA;;AA0BjBI,cAAAA,KAAAA,GAAQ;AACN,oBAAI,KAAJ,WAAA,EAAsB;AAAA;AADhB;;AAIN,qBAAA,WAAA,GAJM,IAIN;AACAzB,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,KAAA;AAAA,kBAAA;AAAA,iBAAnBa;AAMA,uBAAOqB,IAAAA,CAAAA,WAAAA,CAXD,QAWCA,CAAP;AArCe,eAAA;;AAwCjBrlB,cAAAA,KAAAA,CAAAA,MAAAA,EAAc;AACZ9jB,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO0b,MAAAA,YAAP1b,KAAAA,EADY,gCACZA;;AACA,oBAAI,KAAJ,WAAA,EAAsB;AAAA;AAFV;;AAKZ,qBAAA,WAAA,GALY,IAKZ;AACA8nC,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,KAAA;AAAA,kBAAA,QAAA;AAKjBvrB,kBAAAA,MAAAA,EAAQgsB,UAAAA,CALS,MAKTA;AALS,iBAAnBI;AA9Ce,eAAA;;AAuDjB0B,cAAAA,cAAAA,EAvDiB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAAA;AAwDjBC,cAAAA,MAAAA,EAxDiB,IAAA;AAyDjBC,cAAAA,QAAAA,EAzDiB,IAAA;AA0DjBC,cAAAA,WAAAA,EA1DiB,KAAA;AA2DjBd,cAAAA,WAAAA,EAAanrC,IAAAA,CA3DI,WAAA;AA4DjBksC,cAAAA,KAAAA,EA5DiB;AAAA,aAAnB;AA+DAR,YAAAA,UAAAA,CAAAA,cAAAA,CAvEsB,OAuEtBA;AACAA,YAAAA,UAAAA,CAAAA,KAAAA,GAAmBA,UAAAA,CAAAA,cAAAA,CAxEG,OAwEtBA;AACA,iBAAA,WAAA,CAAA,QAAA,IAzEsB,UAyEtB;AAEA,gBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BzrC,cAAAA,OAAAA,CAAQgqC,MAAAA,CAAOjqC,IAAAA,CAAPiqC,IAAAA,EADqB,UACrBA,CAARhqC,CAAAA;AADF,aAAA,EAAA,IAAA,CAGE,YAAY;AACVmqC,cAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,gBAAA,UAAA;AAAA,gBAAA,UAAA;AAGjBkB,gBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,cAAA;AAAA,gBAAA,QAAA;AAKjB4C,gBAAAA,OAAAA,EALiB;AAAA,eAAnB/B;AAJJ,aAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,cAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,gBAAA,UAAA;AAAA,gBAAA,UAAA;AAGjBkB,gBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,cAAA;AAAA,gBAAA,QAAA;AAKjBvrB,gBAAAA,MAAAA,EAAQgsB,UAAAA,CALS,MAKTA;AALS,eAAnBI;AAbJ,aAAA;AA3SiB;;AAsUnBgC,UAAAA,qBAAAA,CAAAA,IAAAA,EAA4B;AAC1B,kBAAMxB,QAAAA,GAAW5qC,IAAAA,CAAjB,QAAA;AAAA,kBACEqqC,UAAAA,GAAa,KADf,UAAA;AAAA,kBAEEC,UAAAA,GAAatqC,IAAAA,CAFf,UAAA;AAAA,kBAGEoqC,MAAAA,GAAS,KAJe,MAC1B;AAIA,kBAAMiC,gBAAAA,GAAmB,KAAA,iBAAA,CAAzB,QAAyB,CAAzB;AAAA,kBACEX,UAAAA,GAAa,KAAA,WAAA,CANW,QAMX,CADf;;AAGA,oBAAQ1rC,IAAAA,CAAR,MAAA;AACE,mBAAKupC,UAAAA,CAAL,cAAA;AACE,oBAAIvpC,IAAAA,CAAJ,OAAA,EAAkB;AAChBqsC,kBAAAA,gBAAAA,CAAAA,SAAAA,CADgB,OAChBA;AADF,iBAAA,MAEO;AACLA,kBAAAA,gBAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAkCrC,UAAAA,CAAWhqC,IAAAA,CADxC,MAC6BgqC,CAAlCqC;AAJJ;;AADF;;AAQE,mBAAK9C,UAAAA,CAAL,aAAA;AACE,oBAAIvpC,IAAAA,CAAJ,OAAA,EAAkB;AAChBqsC,kBAAAA,gBAAAA,CAAAA,QAAAA,CADgB,OAChBA;AADF,iBAAA,MAEO;AACLA,kBAAAA,gBAAAA,CAAAA,QAAAA,CAAAA,MAAAA,CAAiCrC,UAAAA,CAAWhqC,IAAAA,CADvC,MAC4BgqC,CAAjCqC;AAJJ;;AARF;;AAeE,mBAAK9C,UAAAA,CAAL,IAAA;AAEE,oBAAI,CAAJ,UAAA,EAAiB;AACfa,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,aAAA;AAAA,oBAAA,QAAA;AAKjB4C,oBAAAA,OAAAA,EALiB;AAAA,mBAAnB/B;AADe;AAFnB;;AAcE,oBAAIsB,UAAAA,CAAAA,WAAAA,IAAAA,CAAAA,IAA+B1rC,IAAAA,CAAAA,WAAAA,GAAnC,CAAA,EAAyD;AACvD0rC,kBAAAA,UAAAA,CAAAA,cAAAA,CADuD,OACvDA;AAfJ;;AAkBEA,gBAAAA,UAAAA,CAAAA,WAAAA,GAAyB1rC,IAAAA,CAlB3B,WAkBE0rC;AAEA,oBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BzrC,kBAAAA,OAAAA,CAAQyrC,UAAAA,CAAAA,MAAAA,IAAqBA,UAAAA,CADA,MACAA,EAA7BzrC,CAAAA;AADF,iBAAA,EAAA,IAAA,CAGE,YAAY;AACVmqC,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,aAAA;AAAA,oBAAA,QAAA;AAKjB4C,oBAAAA,OAAAA,EALiB;AAAA,mBAAnB/B;AAJJ,iBAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,aAAA;AAAA,oBAAA,QAAA;AAKjBvrB,oBAAAA,MAAAA,EAAQgsB,UAAAA,CALS,MAKTA;AALS,mBAAnBI;AAbJ,iBAAA;AAnCJ;;AA0DE,mBAAKb,UAAAA,CAAL,OAAA;AACEjnC,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,gBAAAA,EADF,uCACEA;;AACA,oBAAI+pC,gBAAAA,CAAJ,QAAA,EAA+B;AAAA;AAFjC;;AAKEA,gBAAAA,gBAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAoCrsC,IAAAA,CALtC,KAKEqsC;AA/DJ;;AAiEE,mBAAK9C,UAAAA,CAAL,KAAA;AACEjnC,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,gBAAAA,EADF,qCACEA;;AACA,oBAAI+pC,gBAAAA,CAAJ,QAAA,EAA+B;AAAA;AAFjC;;AAKEA,gBAAAA,gBAAAA,CAAAA,QAAAA,GALF,IAKEA;AACAA,gBAAAA,gBAAAA,CAAAA,UAAAA,CANF,KAMEA;;AACA,qBAAA,uBAAA,CAAA,gBAAA,EAPF,QAOE;;AAxEJ;;AA0EE,mBAAK9C,UAAAA,CAAL,KAAA;AACEjnC,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,gBAAAA,EADF,qCACEA;AACA+pC,gBAAAA,gBAAAA,CAAAA,UAAAA,CAAAA,KAAAA,CAAkCrC,UAAAA,CAAWhqC,IAAAA,CAF/C,MAEoCgqC,CAAlCqC;;AACA,qBAAA,uBAAA,CAAA,gBAAA,EAHF,QAGE;;AA7EJ;;AA+EE,mBAAK9C,UAAAA,CAAL,eAAA;AACE,oBAAIvpC,IAAAA,CAAJ,OAAA,EAAkB;AAChBqsC,kBAAAA,gBAAAA,CAAAA,UAAAA,CADgB,OAChBA;AADF,iBAAA,MAEO;AACLA,kBAAAA,gBAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAmCrC,UAAAA,CAAWhqC,IAAAA,CADzC,MAC8BgqC,CAAnCqC;AAJJ;;AAME,qBAAA,uBAAA,CAAA,gBAAA,EANF,QAME;;AArFJ;;AAuFE,mBAAK9C,UAAAA,CAAL,MAAA;AACE,oBAAI,CAAJ,UAAA,EAAiB;AAAA;AADnB;;AAKE,oBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BtpC,kBAAAA,OAAAA,CACEyrC,UAAAA,CAAAA,QAAAA,IAAuBA,UAAAA,CAAAA,QAAAA,CAAoB1B,UAAAA,CAAWhqC,IAAAA,CAF3B,MAEgBgqC,CAApB0B,CADzBzrC,CAAAA;AADF,iBAAA,EAAA,IAAA,CAKE,YAAY;AACVmqC,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,eAAA;AAAA,oBAAA,QAAA;AAKjB4C,oBAAAA,OAAAA,EALiB;AAAA,mBAAnB/B;AANJ,iBAAA,EAcE,UAAA,MAAA,EAAkB;AAChBA,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,eAAA;AAAA,oBAAA,QAAA;AAKjBvrB,oBAAAA,MAAAA,EAAQgsB,UAAAA,CALS,MAKTA;AALS,mBAAnBI;AAfJ,iBAAA;AAwBAsB,gBAAAA,UAAAA,CAAAA,cAAAA,CAAAA,MAAAA,CAAiC1B,UAAAA,CAAWhqC,IAAAA,CA7B9C,MA6BmCgqC,CAAjC0B;AACAA,gBAAAA,UAAAA,CAAAA,WAAAA,GA9BF,IA8BEA;AACA,uBAAO,KAAA,WAAA,CA/BT,QA+BS,CAAP;AAtHJ;;AAwHE;AACE,sBAAM,IAAA,KAAA,CAzHV,wBAyHU,CAAN;AAzHJ;AA9UiB;;AA8cnB,gBAAMY,uBAAN,CAAA,gBAAA,EAAA,QAAA,EAA0D;AAGxD,kBAAM,OAAA,CAAA,UAAA,CAAmB,CACvBD,gBAAAA,CAAAA,SAAAA,IAA8BA,gBAAAA,CAAAA,SAAAA,CADP,OAAA,EAEvBA,gBAAAA,CAAAA,QAAAA,IAA6BA,gBAAAA,CAAAA,QAAAA,CAFN,OAAA,EAGvBA,gBAAAA,CAAAA,UAAAA,IAA+BA,gBAAAA,CAAAA,UAAAA,CAHjC,OAAyB,CAAnB,CAAN;AAKA,mBAAO,KAAA,iBAAA,CARiD,QAQjD,CAAP;AAtdiB;;AA+dnBE,UAAAA,YAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAiC;AAC/B,gBAAIrjB,SAAAA,IAAa,KAAjB,oBAAA,EAA4C;AAC1C,mBAAA,MAAA,CAAA,WAAA,CAAA,OAAA,EAD0C,SAC1C;AADF,aAAA,MAEO;AACL,mBAAA,MAAA,CAAA,WAAA,CADK,OACL;AAJ6B;AA/dd;;AAuenBrL,UAAAA,OAAAA,GAAU;AACR,iBAAA,MAAA,CAAA,mBAAA,CAAA,SAAA,EAA2C,KADnC,kBACR;AAxeiB;;AAAA;;;;;;;;;;;;;;AC9ErB,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAiBA,cAAA,QAAA,CAAe;AACb1e,UAAAA,WAAAA,SAAqC;AAAA,gBAAzB;AAAA,cAAA,UAAA;AAAZA,cAAAA;AAAY,aAAyB;AACnC,iBAAA,YAAA,GADmC,UACnC;AACA,iBAAA,KAAA,GAFmC,OAEnC;AAHW;;AAMbqtC,UAAAA,MAAAA,GAAS;AACP,mBAAO,KADA,KACP;AAPW;;AAUb9vB,UAAAA,GAAAA,CAAAA,IAAAA,EAAU;AACR,mBAAO,KAAA,YAAA,CAAA,GAAA,CAAA,IAAA,KADC,IACR;AAXW;;AAcbgW,UAAAA,MAAAA,GAAS;AACP,mBAAOC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KADd,YACAA,CAAP;AAfW;;AAkBb7E,UAAAA,GAAAA,CAAAA,IAAAA,EAAU;AACR,mBAAO,KAAA,YAAA,CAAA,GAAA,CADC,IACD,CAAP;AAnBW;;AAAA;;;;;;;;;;;;;;ACHf,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAEA,cAAA,oBAAA,CAA2B;AACzB3uB,UAAAA,WAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA0B;AACxB,iBAAA,OAAA,GADwB,IACxB;AACA,iBAAA,IAAA,GAFwB,IAExB;AACA,iBAAA,MAAA,GAHwB,MAGxB;AAJuB;;AAAA;;AAQ3B,cAAA,qBAAA,CAA4B;AAC1BA,UAAAA,WAAAA,CAAAA,IAAAA,EAAkB;AAChB,iBAAA,IAAA,GADgB,IAChB;AACA,iBAAA,OAAA,GAFgB,IAEhB;AACA,iBAAA,MAAA,GAHgB,IAGhB;AACA,iBAAA,OAAA,GAAe,IAJC,GAID,EAAf;;AAEA,gBAAIa,IAAAA,KAAJ,IAAA,EAAmB;AAAA;AANH;;AAShB,iBAAA,IAAA,GAAYA,IAAAA,CATI,IAShB;AACA,iBAAA,OAAA,GAAeA,IAAAA,CAVC,OAUhB;AACA,iBAAA,MAAA,GAAcA,IAAAA,CAXE,KAWhB;;AACA,iBAAA,MAAA,KAAA,IAAoBA,IAAAA,CAApB,MAAA,EAAiC;AAC/B,mBAAA,OAAA,CAAA,GAAA,CACEgiC,KAAAA,CADF,EAAA,EAEE,IAAA,oBAAA,CAAyBA,KAAAA,CAAzB,IAAA,EAAqCA,KAAAA,CAHR,MAG7B,CAFF;AAbc;;AAmBhB,gBAAIhiC,IAAAA,CAAAA,SAAAA,KAAJ,KAAA,EAA8B;AAC5B,mBAAA,MAAA,KAAA,IAAoB,KAApB,OAAA,EAAkC;AAChCgiC,gBAAAA,KAAAA,CAAAA,OAAAA,GADgC,KAChCA;AAF0B;AAnBd;;AAyBhB,iBAAA,MAAA,EAAA,IAAiBhiC,IAAAA,CAAjB,EAAA,EAA0B;AACxB,mBAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,OAAA,GADwB,IACxB;AA1Bc;;AA6BhB,iBAAA,MAAA,GAAA,IAAkBA,IAAAA,CAAlB,GAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,GAAA,CAAA,GAAA,EAAA,OAAA,GAD0B,KAC1B;AA9Bc;AADQ;;AAmC1BysC,UAAAA,6BAAAA,CAAAA,KAAAA,EAAqC;AACnC,kBAAMv0B,MAAAA,GAASw0B,KAAAA,CADoB,MACnC;;AACA,gBAAIx0B,MAAAA,GAAJ,CAAA,EAAgB;AACd,qBADc,IACd;AAHiC;;AAKnC,kBAAMy0B,QAAAA,GAAWD,KAAAA,CALkB,CAKlBA,CAAjB;;AACA,iBAAK,IAAI7pC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/B,oBAAM+pC,OAAAA,GAAUF,KAAAA,CADe,CACfA,CAAhB;AACA,kBAF+B,KAE/B;;AACA,kBAAInzB,KAAAA,CAAAA,OAAAA,CAAJ,OAAIA,CAAJ,EAA4B;AAC1B0iB,gBAAAA,KAAAA,GAAQ,KAAA,6BAAA,CADkB,OAClB,CAARA;AADF,eAAA,MAEO,IAAI,KAAA,OAAA,CAAA,GAAA,CAAJ,OAAI,CAAJ,EAA+B;AACpCA,gBAAAA,KAAAA,GAAQ,KAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAD4B,OACpCA;AADK,eAAA,MAEA;AACL94B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADA,OAAA,EACLA;AACA,uBAFK,IAEL;AAT6B;;AAW/B,sBAAA,QAAA;AACE,qBAAA,KAAA;AACE,sBAAI,CAAJ,KAAA,EAAY;AACV,2BADU,KACV;AAFJ;;AADF;;AAME,qBAAA,IAAA;AACE,sBAAA,KAAA,EAAW;AACT,2BADS,IACT;AAFJ;;AANF;;AAWE,qBAAA,KAAA;AACE,yBAAO,CAZX,KAYI;;AACF;AACE,yBAdJ,IAcI;AAdJ;AAjBiC;;AAkCnC,mBAAOwpC,QAAAA,KAlC4B,KAkCnC;AArEwB;;AAwE1BE,UAAAA,SAAAA,CAAAA,KAAAA,EAAiB;AACf,gBAAI,KAAA,OAAA,CAAA,IAAA,KAAJ,CAAA,EAA6B;AAC3B,qBAD2B,IAC3B;AAFa;;AAIf,gBAAI,CAAJ,KAAA,EAAY;AACV1pC,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADU,qCACVA;AACA,qBAFU,IAEV;AANa;;AAQf,gBAAI6+B,KAAAA,CAAAA,IAAAA,KAAJ,KAAA,EAA0B;AACxB,kBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAiBA,KAAAA,CAAtB,EAAK,CAAL,EAAiC;AAC/B7+B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCAAqC6+B,KAAAA,CADX,EAAA,EAC/B7+B;AACA,uBAF+B,IAE/B;AAHsB;;AAKxB,qBAAO,KAAA,OAAA,CAAA,GAAA,CAAiB6+B,KAAAA,CAAjB,EAAA,EALiB,OAKxB;AALF,aAAA,MAMO,IAAIA,KAAAA,CAAAA,IAAAA,KAAJ,MAAA,EAA2B;AAEhC,kBAAIA,KAAAA,CAAJ,UAAA,EAAsB;AACpB,uBAAO,KAAA,6BAAA,CAAmCA,KAAAA,CADtB,UACb,CAAP;AAH8B;;AAKhC,kBAAI,CAACA,KAAAA,CAAD,MAAA,IAAiBA,KAAAA,CAAAA,MAAAA,KAArB,OAAA,EAA+C;AAE7C,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzB7+B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAJ,OAAA,EAAkC;AAChC,2BADgC,IAChC;AANwB;AAFiB;;AAW7C,uBAX6C,KAW7C;AAXF,eAAA,MAYO,IAAI6+B,KAAAA,CAAAA,MAAAA,KAAJ,OAAA,EAA8B;AACnC,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzB7+B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAL,OAAA,EAAmC;AACjC,2BADiC,KACjC;AANwB;AADO;;AAUnC,uBAVmC,IAUnC;AAVK,eAAA,MAWA,IAAI6+B,KAAAA,CAAAA,MAAAA,KAAJ,QAAA,EAA+B;AACpC,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzB7+B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAL,OAAA,EAAmC;AACjC,2BADiC,IACjC;AANwB;AADQ;;AAUpC,uBAVoC,KAUpC;AAVK,eAAA,MAWA,IAAI6+B,KAAAA,CAAAA,MAAAA,KAAJ,QAAA,EAA+B;AACpC,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzB7+B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAJ,OAAA,EAAkC;AAChC,2BADgC,KAChC;AANwB;AADQ;;AAUpC,uBAVoC,IAUpC;AAjD8B;;AAmDhCA,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,mCAAmC6+B,KAAAA,CAnDR,MAAA,GAmDhC7+B;AACA,qBApDgC,IAoDhC;AAlEa;;AAoEfA,aAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,sBAAsB6+B,KAAAA,CApEZ,IAAA,GAoEf7+B;AACA,mBArEe,IAqEf;AA7IwB;;AAgJ1B2pC,UAAAA,aAAAA,CAAAA,EAAAA,EAAkC;AAAA,gBAAhBxJ,OAAgB,uEAAlCwJ,IAAkC;;AAChC,gBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzB3pC,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AADyB;AADK;;AAKhC,iBAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,OAAA,GAA+B,CAAC,CALA,OAKhC;AArJwB;;AAwJ1B4pC,UAAAA,QAAAA,GAAW;AACT,gBAAI,CAAC,KAAA,OAAA,CAAL,IAAA,EAAwB;AACtB,qBADsB,IACtB;AAFO;;AAIT,gBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAO,KAAA,MAAA,CADQ,KACR,EAAP;AALO;;AAOT,mBAAOxzB,KAAAA,CAAAA,IAAAA,CAAW,KAAA,OAAA,CAPT,IAOS,EAAXA,CAAP;AA/JwB;;AAkK1ByzB,UAAAA,SAAAA,GAAY;AACV,mBAAO,KAAA,OAAA,CAAA,IAAA,GAAA,CAAA,GAAwBra,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KAAtC,OAAwBA,CAAxB,GADG,IACV;AAnKwB;;AAsK1Bsa,UAAAA,QAAAA,CAAAA,EAAAA,EAAa;AACX,mBAAO,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,KADI,IACX;AAvKwB;;AAAA;;;;;;;;;;;;;;ACT5B,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAfA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAmBA,cAAA,sBAAA,CAA6B;AAC3B9tC,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,qBAAAA,EAA2C;AACzCmD,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,qBAAAA,EADyC,6EACzCA;AAKA,iBAAA,aAAA,GANyC,EAMzC;AACA,iBAAA,gBAAA,GAAwBwc,MAAAA,CAAAA,eAAAA,IAPiB,KAOzC;AACA,iBAAA,2BAAA,GACEA,MAAAA,CAAAA,0BAAAA,IATuC,IAQzC;AAGA,kBAAMe,WAAAA,GAAcf,MAAAA,CAXqB,WAWzC;;AACA,gBAAIe,WAAAA,EAAAA,MAAAA,GAAJ,CAAA,EAA6B;AAC3B,oBAAMtD,MAAAA,GAAS,IAAA,UAAA,CAAA,WAAA,EADY,MAC3B;;AACA,mBAAA,aAAA,CAAA,IAAA,CAF2B,MAE3B;AAduC;;AAiBzC,iBAAA,sBAAA,GAjByC,qBAiBzC;AACA,iBAAA,qBAAA,GAA6B,CAACuC,MAAAA,CAlBW,aAkBzC;AACA,iBAAA,iBAAA,GAAyB,CAACA,MAAAA,CAnBe,YAmBzC;AACA,iBAAA,cAAA,GAAsBA,MAAAA,CApBmB,MAoBzC;AAEA,iBAAA,kBAAA,GAtByC,IAsBzC;AACA,iBAAA,aAAA,GAvByC,EAuBzC;;AAEA,iBAAA,sBAAA,CAAA,gBAAA,CAA6C,CAAA,KAAA,EAAA,KAAA,KAAkB;AAC7D,mBAAA,cAAA,CAAoB;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAApB;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAAA,mBAAA,CAAgD,CAAA,MAAA,EAAA,KAAA,KAAmB;AACjE,mBAAA,WAAA,CAAiB;AAAA,gBAAA,MAAA;AAAA,gBAAA;AAAA,eAAjB;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAAA,0BAAA,CAAuDvG,KAAAA,IAAS;AAC9D,mBAAA,cAAA,CAAoB;AAD0C,gBAAA;AAC1C,eAApB;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAAA,0BAAA,CAAuD,MAAM;AAC3D,mBAD2D,kBAC3D;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAzCyC,cAyCzC;AA1CyB;;AA6C3B20B,UAAAA,cAAAA,CAAAA,IAAAA,EAAqB;AACnB,kBAAM3wB,MAAAA,GAAS,IAAA,UAAA,CAAewV,IAAAA,CAAf,KAAA,EADI,MACnB;;AACA,gBAAIA,IAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA8B;AAC5B,kBAAI,KAAJ,kBAAA,EAA6B;AAC3B,qBAAA,kBAAA,CAAA,QAAA,CAD2B,MAC3B;AADF,eAAA,MAEO;AACL,qBAAA,aAAA,CAAA,IAAA,CADK,MACL;AAJ0B;AAA9B,aAAA,MAMO;AACL,oBAAMob,KAAAA,GAAQ,KAAA,aAAA,CAAA,IAAA,CAAwB,UAAA,WAAA,EAAuB;AAC3D,oBAAI5gB,WAAAA,CAAAA,MAAAA,KAAuBwF,IAAAA,CAA3B,KAAA,EAAuC;AACrC,yBADqC,KACrC;AAFyD;;AAI3DxF,gBAAAA,WAAAA,CAAAA,QAAAA,CAJ2D,MAI3DA;;AACA,uBAL2D,IAK3D;AALF,eAAc,CAAd;;AAOAjqB,eAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EARK,yEAQLA;AAhBiB;AA7CM;;AAoE3B,cAAI8qC,sBAAJ,GAA6B;AAC3B,mBAAO,KAAA,kBAAA,EAAA,OAAA,IADoB,CAC3B;AArEyB;;AAwE3BC,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,gBAAIxhB,GAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA6B;AAE3B,oBAAMyhB,WAAAA,GAAc,KAAA,aAAA,CAFO,CAEP,CAApB;;AACA,kBAAIA,WAAAA,EAAJ,UAAA,EAA6B;AAC3BA,gBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AAAExhB,kBAAAA,MAAAA,EAAQD,GAAAA,CADN;AACJ,iBAAvByhB;AAJyB;AAA7B,aAAA,MAMO;AACL,oBAAMnhB,UAAAA,GAAa,KADd,kBACL;;AACA,kBAAIA,UAAAA,EAAJ,UAAA,EAA4B;AAC1BA,gBAAAA,UAAAA,CAAAA,UAAAA,CAAsB;AAAEL,kBAAAA,MAAAA,EAAQD,GAAAA,CAAV,MAAA;AAAsBE,kBAAAA,KAAAA,EAAOF,GAAAA,CAA7B;AAAA,iBAAtBM;AAHG;AAPQ;AAxEU;;AAuF3BohB,UAAAA,kBAAAA,GAAqB;AACnB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAD2B,eAC3B;AAFiB;;AAInB,iBAAA,gBAAA,GAJmB,IAInB;AA3FyB;;AA8F3BC,UAAAA,kBAAAA,CAAAA,MAAAA,EAA2B;AACzB,kBAAM3qC,CAAAA,GAAI,KAAA,aAAA,CAAA,OAAA,CADe,MACf,CAAV;;AACA,gBAAIA,CAAAA,IAAJ,CAAA,EAAY;AACV,mBAAA,aAAA,CAAA,MAAA,CAAA,CAAA,EADU,CACV;AAHuB;AA9FA;;AAqG3B4qC,UAAAA,aAAAA,GAAgB;AACdnrC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,+DACdA;AAIA,kBAAMorC,YAAAA,GAAe,KALP,aAKd;AACA,iBAAA,aAAA,GANc,IAMd;AACA,mBAAO,IAAA,4BAAA,CAAA,IAAA,EAAA,YAAA,EAGL,KAHK,gBAAA,EAIL,KAXY,2BAOP,CAAP;AA5GyB;;AAoH3BC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,gBAAI3qC,GAAAA,IAAO,KAAX,sBAAA,EAAwC;AACtC,qBADsC,IACtC;AAFuB;;AAIzB,kBAAM6kB,MAAAA,GAAS,IAAA,iCAAA,CAAA,IAAA,EAAA,KAAA,EAJU,GAIV,CAAf;;AACA,iBAAA,sBAAA,CAAA,gBAAA,CAAA,KAAA,EALyB,GAKzB;;AACA,iBAAA,aAAA,CAAA,IAAA,CANyB,MAMzB;;AACA,mBAPyB,MAOzB;AA3HyB;;AA8H3B+lB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAIxB,iBAAA,MAAA,MAAA,IAAqB,KAAA,aAAA,CAAA,KAAA,CAArB,CAAqB,CAArB,EAAkD;AAChD/lB,cAAAA,MAAAA,CAAAA,MAAAA,CADgD,MAChDA;AALsB;;AAOxB,iBAAA,sBAAA,CAPwB,KAOxB;AArIyB;;AAAA;;;;AA0I7B,cAAA,4BAAA,CAAmC;AACjC1oB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAKE;AAAA,gBAFA2gB,eAEA,uEALF3gB,KAKE;AAAA,gBADA4gB,0BACA,uEALF5gB,IAKE;AACA,iBAAA,OAAA,GADA,MACA;AACA,iBAAA,KAAA,GAAa2gB,eAAAA,IAFb,KAEA;AACA,iBAAA,SAAA,GAAiB+tB,CAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAAA,0BAAAA,IAAAA,0BAAAA,GAHjB,IAGA;AAGA,iBAAA,aAAA,GAAqBH,YAAAA,IANrB,EAMA;AACA,iBAAA,OAAA,GAPA,CAOA;;AACA,iBAAA,MAAA,KAAA,IAAoB,KAApB,aAAA,EAAwC;AACtC,mBAAA,OAAA,IAAgBn1B,KAAAA,CADsB,UACtC;AATF;;AAWA,iBAAA,SAAA,GAXA,EAWA;AACA,iBAAA,aAAA,GAAqBsO,OAAAA,CAZrB,OAYqBA,EAArB;AACAykB,YAAAA,MAAAA,CAAAA,kBAAAA,GAbA,IAaAA;AAEA,iBAAA,UAAA,GAfA,IAeA;AArB+B;;AAwBjCwC,UAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd,gBAAI,KAAJ,KAAA,EAAgB;AAAA;AADF;;AAId,gBAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,oBAAMC,iBAAAA,GAAoB,KAAA,SAAA,CADG,KACH,EAA1B;;AACAA,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAA1B+d;AAFF,aAAA,MAGO;AACL,mBAAA,aAAA,CAAA,IAAA,CADK,KACL;AARY;;AAUd,iBAAA,OAAA,IAAgBx1B,KAAAA,CAVF,UAUd;AAlC+B;;AAqCjC,cAAIy1B,YAAJ,GAAmB;AACjB,mBAAO,KADU,aACjB;AAtC+B;;AAyCjC,cAAI3gB,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AA1C+B;;AA6CjC,cAAIhB,gBAAJ,GAAuB;AACrB,mBAAO,KAAA,OAAA,CADc,iBACrB;AA9C+B;;AAiDjC,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KAAA,OAAA,CADkB,qBACzB;AAlD+B;;AAqDjC,cAAIE,aAAJ,GAAoB;AAClB,mBAAO,KAAA,OAAA,CADW,cAClB;AAtD+B;;AAyDjC,gBAAM2hB,IAAN,GAAa;AACX,gBAAI,KAAA,aAAA,CAAA,MAAA,GAAJ,CAAA,EAAmC;AACjC,oBAAM11B,KAAAA,GAAQ,KAAA,aAAA,CADmB,KACnB,EAAd;;AACA,qBAAO;AAAEO,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AAHS;;AAKX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAElX,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AANS;;AAQX,kBAAM+d,iBAAAA,GARK,CAAA,GAAA,KAAA,CAAA,uBAAA,GAQX;;AACA,iBAAA,SAAA,CAAA,IAAA,CATW,iBASX;;AACA,mBAAOA,iBAAAA,CAVI,OAUX;AAnE+B;;AAsEjC/f,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9C+f,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAA1B+d;AAHW;;AAKb,iBAAA,SAAA,CAAA,MAAA,GALa,CAKb;AA3E+B;;AA8EjCjuB,UAAAA,eAAAA,GAAkB;AAChB,gBAAI,KAAJ,KAAA,EAAgB;AAAA;AADA;;AAIhB,iBAAA,KAAA,GAJgB,IAIhB;AAlF+B;;AAAA;;AAuFnC,cAAA,iCAAA,CAAwC;AACtC3gB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,iBAAA,OAAA,GAD8B,MAC9B;AACA,iBAAA,MAAA,GAF8B,KAE9B;AACA,iBAAA,IAAA,GAH8B,GAG9B;AACA,iBAAA,YAAA,GAJ8B,IAI9B;AACA,iBAAA,SAAA,GAL8B,EAK9B;AACA,iBAAA,KAAA,GAN8B,KAM9B;AAEA,iBAAA,UAAA,GAR8B,IAQ9B;AAToC;;AAYtC2uC,UAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd,gBAAI,KAAJ,KAAA,EAAgB;AAAA;AADF;;AAId,gBAAI,KAAA,SAAA,CAAA,MAAA,KAAJ,CAAA,EAAiC;AAC/B,mBAAA,YAAA,GAD+B,KAC/B;AADF,aAAA,MAEO;AACL,oBAAMI,kBAAAA,GAAqB,KAAA,SAAA,CADtB,KACsB,EAA3B;;AACAA,cAAAA,kBAAAA,CAAAA,OAAAA,CAA2B;AAAEp1B,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAA3Bke;;AACA,mBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9CH,gBAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,kBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,kBAAAA,IAAAA,EAApB;AAAA,iBAA1B+d;AAJG;;AAML,mBAAA,SAAA,CAAA,MAAA,GANK,CAML;AAZY;;AAcd,iBAAA,KAAA,GAdc,IAcd;;AACA,iBAAA,OAAA,CAAA,kBAAA,CAfc,IAed;AA3BoC;;AA8BtC,cAAI3hB,oBAAJ,GAA2B;AACzB,mBADyB,KACzB;AA/BoC;;AAkCtC,gBAAM6hB,IAAN,GAAa;AACX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM11B,KAAAA,GAAQ,KADO,YACrB;AACA,mBAAA,YAAA,GAFqB,IAErB;AACA,qBAAO;AAAEO,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AAJS;;AAMX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAElX,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAPS;;AASX,kBAAM+d,iBAAAA,GATK,CAAA,GAAA,KAAA,CAAA,uBAAA,GASX;;AACA,iBAAA,SAAA,CAAA,IAAA,CAVW,iBAUX;;AACA,mBAAOA,iBAAAA,CAXI,OAWX;AA7CoC;;AAgDtC/f,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9C+f,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAA1B+d;AAHW;;AAKb,iBAAA,SAAA,CAAA,MAAA,GALa,CAKb;;AACA,iBAAA,OAAA,CAAA,kBAAA,CANa,IAMb;AAtDoC;;AAAA;;;;;;;;;;;;;ACrOxC,cAAA,OAAA,CAAc;AAUZ,iBAAOvmB,WAAP,CAAA,GAAA,EAAwB;AACtB,kBAAMO,KAAAA,GADgB,EACtB;AACA,kBAAMomB,MAAAA,GAAS;AAAA,cAAA,KAAA;AAEbnmB,cAAAA,MAAAA,EAAQvkB,MAAAA,CAAAA,MAAAA,CAFK,IAELA;AAFK,aAAf;;AAIA,qBAAA,IAAA,CAAA,IAAA,EAAoB;AAClB,kBAAI,CAAJ,IAAA,EAAW;AAAA;AADO;;AAIlB,kBAAIuU,GAAAA,GAJc,IAIlB;AACA,oBAAMrU,IAAAA,GAAOyqC,IAAAA,CALK,IAKlB;;AACA,kBAAIzqC,IAAAA,KAAJ,OAAA,EAAsB;AACpBqU,gBAAAA,GAAAA,GAAMo2B,IAAAA,CADc,KACpBp2B;AADF,eAAA,MAEO,IAAI,CAAC2P,OAAAA,CAAAA,eAAAA,CAAL,IAAKA,CAAL,EAAoC;AAAA;AAApC,eAAA,MAEA,IAAIymB,IAAAA,EAAAA,UAAAA,EAAJ,WAAA,EAAmC;AACxCp2B,gBAAAA,GAAAA,GAAMo2B,IAAAA,CAAAA,UAAAA,CADkC,WACxCp2B;AADK,eAAA,MAEA,IAAIo2B,IAAAA,CAAJ,KAAA,EAAgB;AACrBp2B,gBAAAA,GAAAA,GAAMo2B,IAAAA,CADe,KACrBp2B;AAbgB;;AAelB,kBAAIA,GAAAA,KAAJ,IAAA,EAAkB;AAChB+P,gBAAAA,KAAAA,CAAAA,IAAAA,CAAW;AADK,kBAAA;AACL,iBAAXA;AAhBgB;;AAoBlB,kBAAI,CAACqmB,IAAAA,CAAL,QAAA,EAAoB;AAAA;AApBF;;AAuBlB,mBAAA,MAAA,KAAA,IAAoBA,IAAAA,CAApB,QAAA,EAAmC;AACjCC,gBAAAA,IAAAA,CADiC,KACjCA,CAAAA;AAxBgB;AANE;;AAiCtBA,YAAAA,IAAAA,CAjCsB,GAiCtBA,CAAAA;AACA,mBAlCsB,MAkCtB;AA5CU;;AAqDZ,iBAAOC,eAAP,CAAA,IAAA,EAA6B;AAC3B,mBAAO,EACL,IAAA,KAAA,UAAA,IACA3qC,IAAAA,KADA,OAAA,IAEAA,IAAAA,KAFA,QAAA,IAGAA,IAAAA,KALyB,QACpB,CAAP;AAtDU;;AAAA;;;;;;;;;;;;;;ACAd,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAUA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAzBA,YAAA,mBAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,gBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAiCA,cAAM4qC,iBAAAA,GAjCN,IAiCA;AACA,cAAMC,oBAAAA,GAAuB,IAlC7B,OAkC6B,EAA7B;;AAqBA,cAAA,wBAAA,CAA+B;AAK7B,iBAAO/wB,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAM6a,OAAAA,GAAUmW,UAAAA,CAAAA,IAAAA,CADQ,cACxB;;AAEA,oBAAA,OAAA;AACE,mBAAK5mC,KAAAA,CAAAA,cAAAA,CAAL,IAAA;AACE,uBAAO,IAAA,qBAAA,CAFX,UAEW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,IAAA;AACE,uBAAO,IAAA,qBAAA,CALX,UAKW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AACE,sBAAM6mC,SAAAA,GAAYD,UAAAA,CAAAA,IAAAA,CADpB,SACE;;AAEA,wBAAA,SAAA;AACE,uBAAA,IAAA;AACE,2BAAO,IAAA,2BAAA,CAFX,UAEW,CAAP;;AACF,uBAAA,KAAA;AACE,wBAAIA,UAAAA,CAAAA,IAAAA,CAAJ,WAAA,EAAiC;AAC/B,6BAAO,IAAA,kCAAA,CADwB,UACxB,CAAP;AADF,qBAAA,MAEO,IAAIA,UAAAA,CAAAA,IAAAA,CAAJ,QAAA,EAA8B;AACnC,6BAAO,IAAA,+BAAA,CAD4B,UAC5B,CAAP;AAJJ;;AAME,2BAAO,IAAA,iCAAA,CATX,UASW,CAAP;;AACF,uBAAA,IAAA;AACE,2BAAO,IAAA,6BAAA,CAXX,UAWW,CAAP;AAXJ;;AAaA,uBAAO,IAAA,uBAAA,CAvBX,UAuBW,CAAP;;AAEF,mBAAK5mC,KAAAA,CAAAA,cAAAA,CAAL,KAAA;AACE,uBAAO,IAAA,sBAAA,CA1BX,UA0BW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,QAAA;AACE,uBAAO,IAAA,yBAAA,CA7BX,UA6BW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,IAAA;AACE,uBAAO,IAAA,qBAAA,CAhCX,UAgCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AACE,uBAAO,IAAA,uBAAA,CAnCX,UAmCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AACE,uBAAO,IAAA,uBAAA,CAtCX,UAsCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,QAAA;AACE,uBAAO,IAAA,yBAAA,CAzCX,UAyCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,KAAA;AACE,uBAAO,IAAA,sBAAA,CA5CX,UA4CW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,GAAA;AACE,uBAAO,IAAA,oBAAA,CA/CX,UA+CW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,OAAA;AACE,uBAAO,IAAA,wBAAA,CAlDX,UAkDW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,SAAA;AACE,uBAAO,IAAA,0BAAA,CArDX,UAqDW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,SAAA;AACE,uBAAO,IAAA,0BAAA,CAxDX,UAwDW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,QAAA;AACE,uBAAO,IAAA,yBAAA,CA3DX,UA2DW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,SAAA;AACE,uBAAO,IAAA,0BAAA,CA9DX,UA8DW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,KAAA;AACE,uBAAO,IAAA,sBAAA,CAjEX,UAiEW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,cAAA;AACE,uBAAO,IAAA,+BAAA,CApEX,UAoEW,CAAP;;AAEF;AACE,uBAAO,IAAA,iBAAA,CAvEX,UAuEW,CAAP;AAvEJ;AAR2B;;AAAA;;AAoF/B,cAAA,iBAAA,CAAwB;AACtB1I,UAAAA,WAAAA,CAAAA,UAAAA,EAOE;AAAA,gBALA;AACEwvC,cAAAA,YAAAA,GADF,KAAA;AAEEC,cAAAA,YAAAA,GAFF,KAAA;AAGEC,cAAAA,oBAAAA,GAHF;AAAA,aAKA,uEAPF1vC,EAOE;AACA,iBAAA,YAAA,GADA,YACA;AACA,iBAAA,IAAA,GAAYsvC,UAAAA,CAFZ,IAEA;AACA,iBAAA,KAAA,GAAaA,UAAAA,CAHb,KAGA;AACA,iBAAA,IAAA,GAAYA,UAAAA,CAJZ,IAIA;AACA,iBAAA,QAAA,GAAgBA,UAAAA,CALhB,QAKA;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CANnB,WAMA;AACA,iBAAA,eAAA,GAAuBA,UAAAA,CAPvB,eAOA;AACA,iBAAA,kBAAA,GAA0BA,UAAAA,CAR1B,kBAQA;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CATnB,WASA;AACA,iBAAA,UAAA,GAAkBA,UAAAA,CAVlB,UAUA;AACA,iBAAA,iBAAA,GAAyBA,UAAAA,CAXzB,iBAWA;AACA,iBAAA,eAAA,GAAuBA,UAAAA,CAZvB,eAYA;AACA,iBAAA,YAAA,GAAoBA,UAAAA,CAbpB,YAaA;AACA,iBAAA,aAAA,GAAqBA,UAAAA,CAdrB,YAcA;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CAfnB,UAeA;;AAEA,gBAAA,YAAA,EAAkB;AAChB,mBAAA,SAAA,GAAiB,KAAA,gBAAA,CADD,YACC,CAAjB;AAlBF;;AAoBA,gBAAA,oBAAA,EAA0B;AACxB,mBAAA,cAAA,GAAsB,KAAA,qBAAA,CADE,YACF,CAAtB;AArBF;AARoB;;AAyCtBK,UAAAA,gBAAAA,GAAuC;AAAA,gBAAtBF,YAAsB,uEAAvCE,KAAuC;AACrC,kBAAM9uC,IAAAA,GAAO,KAAb,IAAA;AAAA,kBACE0rB,IAAAA,GAAO,KADT,IAAA;AAAA,kBAEE+N,QAAAA,GAAW,KAHwB,QACrC;AAGA,kBAAMsV,SAAAA,GAAYrvC,QAAAA,CAAAA,aAAAA,CAJmB,SAInBA,CAAlB;AACA,gBAAI2B,KAAAA,GAAQrB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CALU,CAKVA,CAA3B;AACA,gBAAIsB,MAAAA,GAAStB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CANS,CAMTA,CAA5B;AAEA+uC,YAAAA,SAAAA,CAAAA,YAAAA,CAAAA,oBAAAA,EAA6C/uC,IAAAA,CARR,EAQrC+uC;;AAIA,kBAAMntC,IAAAA,GAAO,KAAA,CAAA,IAAA,CAAA,aAAA,CAAmB,CAC9B5B,IAAAA,CAAAA,IAAAA,CAD8B,CAC9BA,CAD8B,EAE9B0rB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe1rB,IAAAA,CAAAA,IAAAA,CAAf0rB,CAAe1rB,CAAf0rB,GAA8BA,IAAAA,CAAAA,IAAAA,CAFA,CAEAA,CAFA,EAG9B1rB,IAAAA,CAAAA,IAAAA,CAH8B,CAG9BA,CAH8B,EAI9B0rB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe1rB,IAAAA,CAAAA,IAAAA,CAAf0rB,CAAe1rB,CAAf0rB,GAA8BA,IAAAA,CAAAA,IAAAA,CAJhC,CAIgCA,CAJA,CAAnB,CAAb;;AAOAqjB,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAA4B,UAAUtV,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAnBD,GAmBCA,CAnBD,GAmBrCsV;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,eAAAA,GAAkC,GAAG,CAACntC,IAAAA,CAAJ,CAAIA,CAAJ,MAAiB,CAACA,IAAAA,CApBf,CAoBeA,CApBf,IAoBrCmtC;;AAEA,gBAAI,CAAA,YAAA,IAAiB/uC,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,GAArB,CAAA,EAAiD;AAC/C+uC,cAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GAA8B,GAAG/uC,IAAAA,CAAAA,WAAAA,CADc,KAAA,IAC/C+uC;;AACA,kBAAI/uC,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,KAA2BiM,KAAAA,CAAAA,yBAAAA,CAA/B,SAAA,EAAoE;AAIlE5K,gBAAAA,KAAAA,IAAS,IAAIrB,IAAAA,CAAAA,WAAAA,CAJqD,KAIlEqB;AACAC,gBAAAA,MAAAA,IAAU,IAAItB,IAAAA,CAAAA,WAAAA,CALoD,KAKlEsB;AAP6C;;AAU/C,oBAAM0tC,gBAAAA,GAAmBhvC,IAAAA,CAAAA,WAAAA,CAVsB,sBAU/C;AACA,oBAAMivC,cAAAA,GAAiBjvC,IAAAA,CAAAA,WAAAA,CAXwB,oBAW/C;;AACA,kBAAIgvC,gBAAAA,GAAAA,CAAAA,IAAwBC,cAAAA,GAA5B,CAAA,EAAgD;AAC9C,sBAAMC,MAAAA,GAAS,GAAA,gBAAA,QAD+B,cAAA,IAC9C;AACAH,gBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,YAAAA,GAF8C,MAE9CA;AAd6C;;AAiB/C,sBAAQ/uC,IAAAA,CAAAA,WAAAA,CAAR,KAAA;AACE,qBAAKiM,KAAAA,CAAAA,yBAAAA,CAAL,KAAA;AACE8iC,kBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GADF,OACEA;AAFJ;;AAKE,qBAAK9iC,KAAAA,CAAAA,yBAAAA,CAAL,MAAA;AACE8iC,kBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GADF,QACEA;AANJ;;AASE,qBAAK9iC,KAAAA,CAAAA,yBAAAA,CAAL,OAAA;AACE9I,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADF,qCACEA;AAVJ;;AAaE,qBAAK8I,KAAAA,CAAAA,yBAAAA,CAAL,KAAA;AACE9I,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADF,mCACEA;AAdJ;;AAiBE,qBAAK8I,KAAAA,CAAAA,yBAAAA,CAAL,SAAA;AACE8iC,kBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,iBAAAA,GADF,OACEA;AAlBJ;;AAqBE;AArBF;AAAA;;AAyBA,oBAAMI,WAAAA,GAAcnvC,IAAAA,CAAAA,WAAAA,IAAoBA,IAAAA,CAApBA,KAAAA,IA1C2B,IA0C/C;;AACA,kBAAA,WAAA,EAAiB;AACf+uC,gBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GAA8B10B,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAC5Bra,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAD4Bqa,CAAAA,EAE5Bra,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAF4Bqa,CAAAA,EAG5Bra,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAJa,CACeqa,CAA9B00B;AADF,eAAA,MAMO;AAELA,gBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GAFK,CAELA;AAnD6C;AAtBZ;;AA6ErCA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAAuB,GAAGntC,IAAAA,CA7EW,CA6EXA,CA7EW,IA6ErCmtC;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,GAAsB,GAAGntC,IAAAA,CA9EY,CA8EZA,CA9EY,IA8ErCmtC;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAwB,GA/Ea,KAAA,IA+ErCA;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAyB,GAhFY,MAAA,IAgFrCA;AACA,mBAjFqC,SAiFrC;AA1HoB;;AAqItBK,UAAAA,qBAAAA,GAA4C;AAAA,gBAAtBR,YAAsB,uEAA5CQ,KAA4C;;AAC1C,gBAAI,CAAC,KAAA,IAAA,CAAL,UAAA,EAA2B;AACzB,qBADyB,IACzB;AAFwC;;AAK1C,kBAAMC,cAAAA,GALoC,EAK1C;AACA,kBAAMC,SAAAA,GAAY,KAAA,IAAA,CANwB,IAM1C;;AACA,iBAAA,MAAA,SAAA,IAAwB,KAAA,IAAA,CAAxB,UAAA,EAA8C;AAC5C,mBAAA,IAAA,CAAA,IAAA,GAAiB,CACfC,SAAAA,CAAAA,CAAAA,CAAAA,CADe,CAAA,EAEfA,SAAAA,CAAAA,CAAAA,CAAAA,CAFe,CAAA,EAGfA,SAAAA,CAAAA,CAAAA,CAAAA,CAHe,CAAA,EAIfA,SAAAA,CAAAA,CAAAA,CAAAA,CAJF,CAAiB,CAAjB;AAMAF,cAAAA,cAAAA,CAAAA,IAAAA,CAAoB,KAAA,gBAAA,CAPwB,YAOxB,CAApBA;AAdwC;;AAgB1C,iBAAA,IAAA,CAAA,IAAA,GAhB0C,SAgB1C;AACA,mBAjB0C,cAiB1C;AAtJoB;;AAmKtBG,UAAAA,YAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAA4B;AAC1B,gBAAIT,SAAAA,GAAY,KADU,SAC1B;;AACA,gBAAI,KAAJ,cAAA,EAAyB;AACvBU,cAAAA,OAAAA,GAAUA,OAAAA,IAAW,KADE,cACvBA;AACAV,cAAAA,SAAAA,GAAY,KAAA,cAAA,CAFW,CAEX,CAAZA;AAJwB;;AAQ1B,gBAAI,CAAJ,OAAA,EAAc;AACZU,cAAAA,OAAAA,GAAU/vC,QAAAA,CAAAA,aAAAA,CADE,KACFA,CAAV+vC;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAuBV,SAAAA,CAAAA,KAAAA,CAFX,MAEZU;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAsBV,SAAAA,CAAAA,KAAAA,CAHV,KAGZU;AACAV,cAAAA,SAAAA,CAAAA,WAAAA,CAJY,OAIZA;AAZwB;;AAe1B,kBAAMW,YAAAA,GAAe,IAAA,YAAA,CAAiB;AAAA,cAAA,SAAA;AAAA,cAAA,OAAA;AAGpC3O,cAAAA,KAAAA,EAAO/gC,IAAAA,CAH6B,KAAA;AAIpC2vC,cAAAA,QAAAA,EAAU3vC,IAAAA,CAJ0B,QAAA;AAKpC4vC,cAAAA,gBAAAA,EAAkB5vC,IAAAA,CALkB,gBAAA;AAMpC6vC,cAAAA,WAAAA,EAAa7vC,IAAAA,CANuB,WAAA;AAOpC8vC,cAAAA,WAAAA,EAPoC;AAAA,aAAjB,CAArB;AASA,kBAAMC,KAAAA,GAAQL,YAAAA,CAxBY,MAwBZA,EAAd;AAGAK,YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAAmBhB,SAAAA,CAAAA,KAAAA,CA3BO,KA2B1BgB;AAEAhB,YAAAA,SAAAA,CAAAA,WAAAA,CA7B0B,KA6B1BA;AAhMoB;;AA2MtBiB,UAAAA,qBAAAA,CAAAA,SAAAA,EAAiC;AAQ/B,iBAAA,MAAA,aAAA,IAA4B,KAA5B,cAAA,EAAiD;AAC/CC,cAAAA,aAAAA,CAAAA,SAAAA,GAD+C,SAC/CA;AAT6B;;AAW/B,mBAAO,KAXwB,cAW/B;AAtNoB;;AAgOtB5qB,UAAAA,MAAAA,GAAS;AACPlO,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADO,mDACPA;AAjOoB;;AAwOtB+4B,UAAAA,kBAAAA,CAAAA,IAAAA,EAAwC;AAAA,gBAAfC,MAAe,uEAAxCD,IAAwC;AACtC,kBAAME,MAAAA,GADgC,EACtC;;AAEA,gBAAI,KAAJ,aAAA,EAAwB;AACtB,oBAAMC,QAAAA,GAAW,KAAA,aAAA,CADK,IACL,CAAjB;;AACA,kBAAA,QAAA,EAAc;AACZ,qBAAA,MAAW;AAAA,kBAAA,IAAA;AAAA,kBAAA,EAAA;AAAX,kBAAA;AAAW,iBAAX,IAAA,QAAA,EAAmD;AACjD,sBAAI3kB,IAAAA,KAAS,CAAb,CAAA,EAAiB;AAAA;AADgC;;AAIjD,sBAAIf,EAAAA,KAAJ,MAAA,EAAmB;AAAA;AAJ8B;;AAOjD,wBAAM2lB,WAAAA,GACJ,OAAA,YAAA,KAAA,QAAA,GAAA,YAAA,GAR+C,IAOjD;AAGA,wBAAMC,UAAAA,GAAa7wC,QAAAA,CAAAA,cAAAA,CAV8B,EAU9BA,CAAnB;;AACA,sBAAI6wC,UAAAA,IAAc,CAAC/B,oBAAAA,CAAAA,GAAAA,CAAnB,UAAmBA,CAAnB,EAAyD;AACvDrrC,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,6CADkD,EAAA,EACvDA;AADuD;AAXR;;AAejDitC,kBAAAA,MAAAA,CAAAA,IAAAA,CAAY;AAAA,oBAAA,EAAA;AAAA,oBAAA,WAAA;AAAA,oBAAA;AAAA,mBAAZA;AAhBU;AAFQ;;AAqBtB,qBArBsB,MAqBtB;AAxBoC;;AA4BtC,iBAAA,MAAA,UAAA,IAAyB1wC,QAAAA,CAAAA,iBAAAA,CAAzB,IAAyBA,CAAzB,EAA2D;AACzD,oBAAM;AAAA,gBAAA,EAAA;AAAA,gBAAA;AAAA,kBADmD,UACzD;;AACA,kBAAIirB,EAAAA,KAAJ,MAAA,EAAmB;AAAA;AAFsC;;AAKzD,kBAAI,CAAC6jB,oBAAAA,CAAAA,GAAAA,CAAL,UAAKA,CAAL,EAA2C;AAAA;AALc;;AAQzD4B,cAAAA,MAAAA,CAAAA,IAAAA,CAAY;AAAA,gBAAA,EAAA;AAAA,gBAAA,WAAA;AAAA,gBAAA;AAAA,eAAZA;AApCoC;;AAsCtC,mBAtCsC,MAsCtC;AA9QoB;;AAiRtB,qBAAWI,QAAX,GAAsB;AACpB,kBAAMA,QAAAA,GAAW,OAAA,SAAA,KAAA,WAAA,GAAmC3gB,SAAAA,CAAnC,QAAA,GADG,EACpB;AAEA,mBAAO,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,UAAA,EAAyB;AAC9B4gB,cAAAA,KAAAA,EAAOD,QAAAA,CAAAA,QAAAA,CADuB,KACvBA,CADuB;AAE9BE,cAAAA,KAAAA,EAAOF,QAAAA,CAAAA,QAAAA,CAFuB,KAEvBA;AAFuB,aAAzB,CAAP;AApRoB;;AAAA;;AA2RxB,cAAA,qBAAA,SAAA,iBAAA,CAAsD;AACpDrxC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,GAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,IAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAFA,MAAA,IAGAA,UAAAA,CAAAA,IAAAA,CAHA,aAAA,IAIAA,UAAAA,CAAAA,IAAAA,CAJA,SAAA,IAKCA,UAAAA,CAAAA,IAAAA,CAAAA,OAAAA,KACE,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,IACCA,UAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CADD,UACCA,CADD,IAECA,UAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAVgB,YAUhBA,CAHHA,CANmB,CAAtB;AAWA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBI,cAAAA,oBAAAA,EAAhB;AAAA,aAAlB;AAbkD;;AAgBpDxpB,UAAAA,MAAAA,GAAS;AACP,kBAAM;AAAA,cAAA,IAAA;AAAA,cAAA;AAAA,gBADC,IACP;AACA,kBAAM3iB,IAAAA,GAAOhD,QAAAA,CAAAA,aAAAA,CAFN,GAEMA,CAAb;;AAEA,gBAAIM,IAAAA,CAAJ,GAAA,EAAc;AACZ,kBAEE,CAAC2wC,WAAAA,CAFH,iBAAA,EAGE;AACAxtC,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADA,kGACAA;AALU;;AASZwtC,cAAAA,WAAAA,CAAAA,iBAAAA,GAAAA,IAAAA,EAAsC3wC,IAAAA,CAAtC2wC,GAAAA,EAAgD3wC,IAAAA,CATpC,SASZ2wC;AATF,aAAA,MAUO,IAAI3wC,IAAAA,CAAJ,MAAA,EAAiB;AACtB,mBAAA,gBAAA,CAAA,IAAA,EAA4BA,IAAAA,CADN,MACtB;AADK,aAAA,MAEA,IAAIA,IAAAA,CAAJ,IAAA,EAAe;AACpB,mBAAA,SAAA,CAAA,IAAA,EAAqBA,IAAAA,CADD,IACpB;AADK,aAAA,MAEA;AACL,kBAAI4wC,cAAAA,GADC,KACL;;AACA,kBACE5wC,IAAAA,CAAAA,OAAAA,KACC,IAAA,CAAA,OAAA,CAAA,MAAA,IACCA,IAAAA,CAAAA,OAAAA,CADD,UACCA,CADD,IAECA,IAAAA,CAAAA,OAAAA,CAHFA,YAGEA,CAHFA,KAIA,KAJAA,eAAAA,IAKA,KANF,YAAA,EAOE;AACA4wC,gBAAAA,cAAAA,GADA,IACAA;;AACA,qBAAA,aAAA,CAAA,IAAA,EAFA,IAEA;AAXG;;AAcL,kBAAI5wC,IAAAA,CAAJ,SAAA,EAAoB;AAClB,qBAAA,oBAAA,CAAA,IAAA,EAAgCA,IAAAA,CADd,SAClB;AADF,eAAA,MAEO,IAAI,CAAJ,cAAA,EAAqB;AAC1B,qBAAA,SAAA,CAAA,IAAA,EAD0B,EAC1B;AAjBG;AAlBA;;AAuCP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CAAA,gBAAA,EAAA,GAAA,CACL,CAAA,aAAA,EAAA,KAAA,KAA0B;AACxB,sBAAM6wC,WAAAA,GAAcC,KAAAA,KAAAA,CAAAA,GAAAA,IAAAA,GAAqBpuC,IAAAA,CADjB,SACiBA,EAAzC;AACAutC,gBAAAA,aAAAA,CAAAA,WAAAA,CAFwB,WAExBA;AACA,uBAHwB,aAGxB;AAJJ,eAAO,CAAP;AAxCK;;AAiDP,iBAAA,SAAA,CAAA,SAAA,GAjDO,gBAiDP;AACA,iBAAA,SAAA,CAAA,WAAA,CAlDO,IAkDP;AACA,mBAAO,KAnDA,SAmDP;AAnEkD;;AA8EpDc,UAAAA,SAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA6B;AAC3BruC,YAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,kBAAA,CADe,WACf,CAAZA;;AACAA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,kBAAA,WAAA,EAAiB;AACf,qBAAA,WAAA,CAAA,eAAA,CADe,WACf;AAFiB;;AAInB,qBAJmB,KAInB;AAJFA,aAAAA;;AAMA,gBAAIsuC,WAAAA,IAAeA,WAAAA,KAAnB,EAAA,EAA6D;AAC3DtuC,cAAAA,IAAAA,CAAAA,SAAAA,GAD2D,cAC3DA;AATyB;AA9EuB;;AAmGpDuuC,UAAAA,gBAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA+B;AAC7BvuC,YAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,YAAA,CADiB,EACjB,CAAZA;;AACAA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,mBAAA,WAAA,CAAA,kBAAA,CADmB,MACnB;AACA,qBAFmB,KAEnB;AAFFA,aAAAA;;AAIAA,YAAAA,IAAAA,CAAAA,SAAAA,GAN6B,cAM7BA;AAzGkD;;AAoHpDwuC,UAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA0B;AACxBxuC,YAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,YAAA,CADY,EACZ,CAAZA;AACA,kBAAMmgC,GAAAA,GAAM,IAAA,GAAA,CAAQ,CAClB,CAAA,QAAA,EADkB,SAClB,CADkB,EAElB,CAAA,UAAA,EAFkB,WAElB,CAFkB,EAGlB,CAAA,YAAA,EAHF,aAGE,CAHkB,CAAR,CAAZ;;AAKA,iBAAA,MAAA,IAAA,IAAmBp/B,MAAAA,CAAAA,IAAAA,CAAYzD,IAAAA,CAA/B,OAAmByD,CAAnB,EAA8C;AAC5C,oBAAM0tC,MAAAA,GAAStO,GAAAA,CAAAA,GAAAA,CAD6B,IAC7BA,CAAf;;AACA,kBAAI,CAAJ,MAAA,EAAa;AAAA;AAF+B;;AAK5CngC,cAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAe,MAAM;AACnB,qBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dic,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,kBAAAA,MAAAA,EAAQ;AACNzmB,oBAAAA,EAAAA,EAAI3qB,IAAAA,CADE,EAAA;AAAA,oBAAA;AAAA;AAFoD,iBAA9D;AAOA,uBARmB,KAQnB;AARF0C,eAAAA;AAZsB;;AAwBxB,gBAAI,CAACA,IAAAA,CAAL,OAAA,EAAmB;AACjBA,cAAAA,IAAAA,CAAAA,OAAAA,GAAe,MADE,KACjBA;AAzBsB;;AA2BxBA,YAAAA,IAAAA,CAAAA,SAAAA,GA3BwB,cA2BxBA;AA/IkD;;AAkJpD2uC,UAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAsC;AACpC,kBAAMC,gBAAAA,GAAmB5uC,IAAAA,CADW,OACpC;;AACA,gBAAI,CAAJ,gBAAA,EAAuB;AACrBA,cAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,YAAA,CADS,EACT,CAAZA;AAHkC;;AAKpCA,YAAAA,IAAAA,CAAAA,SAAAA,GALoC,cAKpCA;;AAEA,gBAAI,CAAC,KAAL,aAAA,EAAyB;AACvBS,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EACE,2DAAA,GAFqB,uDACvBA;;AAIA,kBAAI,CAAJ,gBAAA,EAAuB;AACrBT,gBAAAA,IAAAA,CAAAA,OAAAA,GAAe,MADM,KACrBA;AANqB;;AAAA;AAPW;;AAkBpCA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,kBAAA,gBAAA,EAAsB;AACpB4uC,gBAAAA,gBADoB;AADH;;AAKnB,oBAAM;AACJlB,gBAAAA,MAAAA,EADI,eAAA;AAEJmB,gBAAAA,IAAAA,EAFI,aAAA;AAAA,gBAAA;AAAA,kBALa,SAKnB;AAMA,oBAAMC,SAAAA,GAXa,EAWnB;;AACA,kBAAIC,eAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IAAgCC,aAAAA,CAAAA,MAAAA,KAApC,CAAA,EAAgE;AAC9D,sBAAMC,QAAAA,GAAW,IAAA,GAAA,CAD6C,aAC7C,CAAjB;;AACA,qBAAA,MAAA,SAAA,IAAA,eAAA,EAAyC;AACvC,wBAAMvB,MAAAA,GAAS,KAAA,aAAA,CAAA,SAAA,KADwB,EACvC;;AACA,uBAAA,MAAW;AAAX,oBAAA;AAAW,mBAAX,IAAA,MAAA,EAA6B;AAC3BuB,oBAAAA,QAAAA,CAAAA,GAAAA,CAD2B,EAC3BA;AAHqC;AAFqB;;AAQ9D,qBAAA,MAAA,MAAA,IAAqBluC,MAAAA,CAAAA,MAAAA,CAAc,KAAnC,aAAqBA,CAArB,EAAwD;AACtD,uBAAA,MAAA,KAAA,IAAA,MAAA,EAA4B;AAC1B,wBAAIkuC,QAAAA,CAAAA,GAAAA,CAAaC,KAAAA,CAAbD,EAAAA,MAAJ,OAAA,EAAwC;AACtCH,sBAAAA,SAAAA,CAAAA,IAAAA,CADsC,KACtCA;AAFwB;AAD0B;AARM;AAAhE,eAAA,MAeO;AACL,qBAAA,MAAA,MAAA,IAAqB/tC,MAAAA,CAAAA,MAAAA,CAAc,KAAnC,aAAqBA,CAArB,EAAwD;AACtD+tC,kBAAAA,SAAAA,CAAAA,IAAAA,CAAe,GADuC,MACtDA;AAFG;AA3BY;;AAiCnB,oBAAMK,OAAAA,GAAU,KAjCG,iBAiCnB;AACA,oBAAMC,MAAAA,GAlCa,EAkCnB;;AACA,mBAAA,MAAA,KAAA,IAAA,SAAA,EAA+B;AAC7B,sBAAM;AAAA,kBAAA;AAAA,oBADuB,KAC7B;AACAA,gBAAAA,MAAAA,CAAAA,IAAAA,CAF6B,EAE7BA;;AACA,wBAAQF,KAAAA,CAAR,IAAA;AACE,uBAAA,MAAA;AAAa;AACX,4BAAM94B,KAAAA,GAAQ84B,KAAAA,CAAAA,YAAAA,IADH,EACX;AACAC,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAA,wBAAA,KAAA;AAASE,wBAAAA,aAAAA,EAAT;AAAA,uBAArBF;AAFW;AADf;;AAME,uBANF,UAME;AACA,uBAAA,aAAA;AAAoB;AAClB,4BAAM/4B,KAAAA,GAAQ84B,KAAAA,CAAAA,YAAAA,KAAuBA,KAAAA,CADnB,YAClB;AACAC,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAFH,wBAAA;AAEG,uBAArBA;AAFkB;AAPtB;;AAYE,uBAZF,UAYE;AACA,uBAAA,SAAA;AAAgB;AACd,4BAAM/4B,KAAAA,GAAQ84B,KAAAA,CAAAA,YAAAA,IADA,EACd;AACAC,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAFP,wBAAA;AAEO,uBAArBA;AAFc;AAblB;;AAkBE;AAlBF;AAAA;;AAqBA,sBAAMtB,UAAAA,GAAa7wC,QAAAA,CAAAA,cAAAA,CAxBU,EAwBVA,CAAnB;;AACA,oBAAI,CAAA,UAAA,IAAe,CAAC8uC,oBAAAA,CAAAA,GAAAA,CAApB,UAAoBA,CAApB,EAA0D;AAAA;AAzB7B;;AA4B7B+B,gBAAAA,UAAAA,CAAAA,aAAAA,CAAyB,IAAA,KAAA,CA5BI,WA4BJ,CAAzBA;AA/DiB;;AAkEnB,kBAAI,KAAJ,eAAA,EAA0B;AAExB,qBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5D5xB,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,kBAAAA,MAAAA,EAAQ;AACNzmB,oBAAAA,EAAAA,EADM,KAAA;AAENqnB,oBAAAA,GAAAA,EAFM,MAAA;AAGNruC,oBAAAA,IAAAA,EAHM;AAAA;AAFoD,iBAA9D;AApEiB;;AA8EnB,qBA9EmB,KA8EnB;AA9EFjB,aAAAA;AApKkD;;AAAA;;AAuPtD,cAAA,qBAAA,SAAA,iBAAA,CAAsD;AACpDvD,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AANI,cAAA;AAMJ,aAAlB;AAPkD;;AAUpDppB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,gBACP;AAEA,kBAAMsd,KAAAA,GAAQjjC,QAAAA,CAAAA,aAAAA,CAHP,KAGOA,CAAd;AACAijC,YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAqB,KAAA,SAAA,CAAA,KAAA,CAJd,MAIPA;AACAA,YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAoB,KAAA,SAAA,CAAA,KAAA,CALb,KAKPA;AACAA,YAAAA,KAAAA,CAAAA,GAAAA,GACE,KAAA,kBAAA,GAAA,aAAA,GAEA,KAAA,IAAA,CAAA,IAAA,CAFA,WAEA,EAFA,GAPK,MAMPA;AAKAA,YAAAA,KAAAA,CAAAA,GAAAA,GAXO,uBAWPA;AACAA,YAAAA,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,GAZO,sBAYPA;AACAA,YAAAA,KAAAA,CAAAA,OAAAA,CAAAA,QAAAA,GAAyBsP,IAAAA,CAAAA,SAAAA,CAAe;AAAEn1B,cAAAA,IAAAA,EAAM,KAAA,IAAA,CAbzC;AAaiC,aAAfm1B,CAAzBtP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,KAAA,EAAyB,KADF,IACvB;AAhBK;;AAmBP,iBAAA,SAAA,CAAA,WAAA,CAnBO,KAmBP;AACA,mBAAO,KApBA,SAoBP;AA9BkD;;AAAA;;AAkCtD,cAAA,uBAAA,SAAA,iBAAA,CAAwD;AACtDtd,UAAAA,MAAAA,GAAS;AAEP,gBAAI,KAAA,IAAA,CAAJ,eAAA,EAA+B;AAC7B,mBAAA,SAAA,CAAA,KAAA,GAAuB,KAAA,IAAA,CADM,eAC7B;AAHK;;AAMP,mBAAO,KANA,SAMP;AAPoD;;AAUtD6sB,UAAAA,eAAAA,CAAAA,KAAAA,EAAuB;AACrB,kBAAM;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,gBAAmBC,iBAAAA,CADJ,QACrB;AACA,mBAAQ1B,KAAAA,IAASpnB,KAAAA,CAAV,OAAConB,IAA4BC,KAAAA,IAASrnB,KAAAA,CAFxB,OAErB;AAZoD;;AAetD+oB,UAAAA,iBAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,WAAAA,EAA6D;AAC3D,gBAAIC,QAAAA,CAAAA,QAAAA,CAAJ,OAAIA,CAAJ,EAAgC;AAE9BzF,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCvjB,KAAAA,IAAS;AAC1C,qBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5D1K,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,kBAAAA,MAAAA,EAAQ;AACNzmB,oBAAAA,EAAAA,EAAI,KAAA,IAAA,CADE,EAAA;AAENhnB,oBAAAA,IAAAA,EAFM,SAAA;AAGNmV,oBAAAA,KAAAA,EAAOw5B,WAAAA,CAHD,KAGCA,CAHD;AAINC,oBAAAA,KAAAA,EAAOlpB,KAAAA,CAJD,QAAA;AAKNmpB,oBAAAA,QAAAA,EAAU,KAAA,eAAA,CALJ,KAKI;AALJ;AAFoD,iBAA9D;AADF5F,eAAAA;AAFF,aAAA,MAcO;AAELA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCvjB,KAAAA,IAAS;AAC1C,qBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5D1K,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,kBAAAA,MAAAA,EAAQ;AACNzmB,oBAAAA,EAAAA,EAAI,KAAA,IAAA,CADE,EAAA;AAENhnB,oBAAAA,IAAAA,EAFM,SAAA;AAGNmV,oBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CAHD;AAAA;AAFoD,iBAA9D;AADFujB,eAAAA;AAjByD;AAfP;;AA6CtD6F,UAAAA,kBAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAA2C;AACzC,iBAAA,MAAW,CAAA,QAAA,EAAX,SAAW,CAAX,IAAA,KAAA,EAA2C;AACzC,kBAAIC,SAAAA,KAAAA,QAAAA,IAA0B,KAAA,IAAA,CAAA,OAAA,GAA9B,SAA8B,CAA9B,EAA8D;AAC5D,qBAAA,iBAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAD4D,MAC5D;AAFuC;AADF;AA7CW;;AAqDtDC,UAAAA,mBAAAA,CAAAA,OAAAA,EAA6B;AAC3B,kBAAM5R,KAAAA,GAAQ,KAAA,IAAA,CAAA,eAAA,IADa,IAC3B;AACA6L,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,eAAAA,GACE7L,KAAAA,KAAAA,IAAAA,GAAAA,aAAAA,GAEI1mB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkB0mB,KAAAA,CAAlB1mB,CAAkB0mB,CAAlB1mB,EAA4B0mB,KAAAA,CAA5B1mB,CAA4B0mB,CAA5B1mB,EAAsC0mB,KAAAA,CALjB,CAKiBA,CAAtC1mB,CAHNuyB;AAvDoD;;AA6DtDgG,UAAAA,yBAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAA4C;AAC1C,kBAAMC,QAAAA,GAAW,CAAA,MAAA,EAAA,SAAA,EAAA,KAAA,KAA8B;AAC7C,oBAAM9R,KAAAA,GAAQ1X,KAAAA,CAAAA,MAAAA,CAD+B,MAC/BA,CAAd;AACAA,cAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,SAAAA,IAAgCypB,gBAAAA,CAAAA,eAAAA,CAAgB,GAAG/R,KAAAA,CAAnB+R,CAAmB/R,CAAnB+R,OAAAA,EAC9B/R,KAAAA,CAAAA,KAAAA,CAH2C,CAG3CA,CAD8B+R,CAAhCzpB;AAFF,aAAA;;AAOA,kBAAM0pB,aAAAA,GAAgB;AACpBC,cAAAA,OAAAA,EAAS3pB,KAAAA,IAAS;AAChB,sBAAM4pB,MAAAA,GAAS5pB,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,GAAAA,CAAAA,KADC,CAChB;AACAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAgC4pB,MAAAA,GAAAA,QAAAA,GAFhB,SAEhB5pB;AACA,qBAAA,iBAAA,CAAA,QAAA,CAAgC,KAAA,IAAA,CAAhC,EAAA,EAA8C;AAAA,kBAAA,MAAA;AAE5C6pB,kBAAAA,KAAAA,EAAO7pB,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,KAAAA,CAAAA,IAA8BA,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,KAFO;AAAA,iBAA9C;AAJkB,eAAA;AASpB6pB,cAAAA,KAAAA,EAAO7pB,KAAAA,IAAS;AACd,qBAAA,iBAAA,CAAA,QAAA,CAAgC,KAAA,IAAA,CAAhC,EAAA,EAA8C;AAC5C6pB,kBAAAA,KAAAA,EAAO7pB,KAAAA,CAAAA,MAAAA,CAFK;AACgC,iBAA9C;AAVkB,eAAA;AAcpB4pB,cAAAA,MAAAA,EAAQ5pB,KAAAA,IAAS;AACfA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAgCA,KAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GADjB,SACfA;AAGA,qBAAA,iBAAA,CAAA,QAAA,CAAgC,KAAA,IAAA,CAAhC,EAAA,EAA8C;AAC5C4pB,kBAAAA,MAAAA,EAAQ5pB,KAAAA,CAAAA,MAAAA,CALK;AAI+B,iBAA9C;AAlBkB,eAAA;AAsBpB8pB,cAAAA,KAAAA,EAAO9pB,KAAAA,IAAS;AACd0G,gBAAAA,UAAAA,CAAW,MAAM1G,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAmB;AAAE+pB,kBAAAA,aAAAA,EAAtCrjB;AAAoC,iBAAnB1G,CAAjB0G,EADc,CACdA,CAAAA;AAvBkB,eAAA;AAyBpBsjB,cAAAA,QAAAA,EAAUhqB,KAAAA,IAAS;AAEjBA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqBA,KAAAA,CAAAA,MAAAA,CAFJ,QAEjBA;AA3BkB,eAAA;AA6BpBiqB,cAAAA,QAAAA,EAAUjqB,KAAAA,IAAS;AACjB,oBAAIA,KAAAA,CAAAA,MAAAA,CAAJ,QAAA,EAA2B;AACzBA,kBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EADyB,EACzBA;AADF,iBAAA,MAEO;AACLA,kBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CADK,UACLA;AAJe;AA7BC,eAAA;AAoCpBkqB,cAAAA,QAAAA,EAAUlqB,KAAAA,IAAS;AACjB,oBAAIA,KAAAA,CAAAA,MAAAA,CAAJ,QAAA,EAA2B;AACzBA,kBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EADyB,EACzBA;AADF,iBAAA,MAEO;AACLA,kBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CADK,UACLA;AAJe;AApCC,eAAA;AA2CpBmqB,cAAAA,OAAAA,EAASnqB,KAAAA,IAAS;AAChBwpB,gBAAAA,QAAAA,CAAAA,SAAAA,EAAAA,iBAAAA,EADgB,KAChBA,CAAAA;AA5CkB,eAAA;AA8CpB5X,cAAAA,SAAAA,EAAW5R,KAAAA,IAAS;AAClBwpB,gBAAAA,QAAAA,CAAAA,WAAAA,EAAAA,iBAAAA,EADkB,KAClBA,CAAAA;AA/CkB,eAAA;AAiDpBY,cAAAA,OAAAA,EAASpqB,KAAAA,IAAS;AAChBwpB,gBAAAA,QAAAA,CAAAA,SAAAA,EAAAA,OAAAA,EADgB,KAChBA,CAAAA;AAlDkB,eAAA;AAoDpBa,cAAAA,SAAAA,EAAWrqB,KAAAA,IAAS;AAClBwpB,gBAAAA,QAAAA,CAAAA,WAAAA,EAAAA,OAAAA,EADkB,KAClBA,CAAAA;AArDkB,eAAA;AAuDpB1D,cAAAA,WAAAA,EAAa9lB,KAAAA,IAAS;AACpBwpB,gBAAAA,QAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EADoB,KACpBA,CAAAA;AAxDkB,eAAA;AA0DpBxV,cAAAA,WAAAA,EAAahU,KAAAA,IAAS;AACpBwpB,gBAAAA,QAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EADoB,KACpBA,CAAAA;AA3DkB;AAAA,aAAtB;;AA+DA,iBAAA,MAAA,IAAA,IAAmBpvC,MAAAA,CAAAA,IAAAA,CAAYkwC,OAAAA,CAA/B,MAAmBlwC,CAAnB,EAAgD;AAC9C,oBAAMwmC,MAAAA,GAAS2J,OAAAA,CAAAA,IAAAA,CAAAA,IAAiBb,aAAAA,CADc,IACdA,CAAhC;;AACA,kBAAA,MAAA,EAAY;AACV9I,gBAAAA,MAAAA,CADU,OACVA,CAAAA;AAH4C;AAvEN;AA7DU;;AAAA;;AA6IxD,cAAA,2BAAA,SAAA,uBAAA,CAAkE;AAChE9qC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GACJF,UAAAA,CAAAA,WAAAA,IACC,CAACA,UAAAA,CAAAA,IAAAA,CAAD,aAAA,IAAkC,CAAC,CAACA,UAAAA,CAAAA,IAAAA,CAHjB,UACtB;AAGA,kBAAA,UAAA,EAAkB;AAJI,cAAA;AAIJ,aAAlB;AAL8D;;AAQhEoF,UAAAA,qBAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,YAAAA,EAAsD;AACpD,kBAAMhC,OAAAA,GAAU,KADoC,iBACpD;;AACA,iBAAA,MAAA,OAAA,IAAsB,KAAA,kBAAA,CACpBz6B,IAAAA,CADoB,IAAA,EAELA,IAAAA,CAFjB,EAAsB,CAAtB,EAGG;AACD,kBAAIw1B,OAAAA,CAAJ,UAAA,EAAwB;AACtBA,gBAAAA,OAAAA,CAAAA,UAAAA,CAAAA,GAAAA,IADsB,KACtBA;AAFD;;AAIDiF,cAAAA,OAAAA,CAAAA,QAAAA,CAAiBjF,OAAAA,CAAjBiF,EAAAA,EAA6B;AAAE,iBAAA,YAAA,GAJ9B;AAI4B,eAA7BA;AATkD;AARU;;AAqBhExsB,UAAAA,MAAAA,GAAS;AACP,kBAAMwsB,OAAAA,GAAU,KADT,iBACP;AACA,kBAAMlnB,EAAAA,GAAK,KAAA,IAAA,CAFJ,EAEP;AAEA,iBAAA,SAAA,CAAA,SAAA,GAJO,sBAIP;AAEA,gBAAIiiB,OAAAA,GANG,IAMP;;AACA,gBAAI,KAAJ,WAAA,EAAsB;AAIpB,oBAAMkH,UAAAA,GAAa,OAAA,CAAA,QAAA,CAAA,EAAA,EAAqB;AACtCh7B,gBAAAA,KAAAA,EAAO,KAAA,IAAA,CAD+B,UAAA;AAEtCi5B,gBAAAA,aAAAA,EAAe,KAAA,IAAA,CAFuB;AAAA,eAArB,CAAnB;AAIA,oBAAMvqB,WAAAA,GAAcssB,UAAAA,CAAAA,aAAAA,IAA4BA,UAAAA,CAA5BA,KAAAA,IARA,EAQpB;AACA,oBAAMC,WAAAA,GAAc;AAClBC,gBAAAA,SAAAA,EADkB,IAAA;AAElBC,gBAAAA,cAAAA,EAFkB,IAAA;AAGlBC,gBAAAA,yBAAAA,EAHkB,IAAA;AAIlBC,gBAAAA,gBAAAA,EAJkB;AAAA,eAApB;;AAOA,kBAAI,KAAA,IAAA,CAAJ,SAAA,EAAyB;AACvBvH,gBAAAA,OAAAA,GAAUltC,QAAAA,CAAAA,aAAAA,CADa,UACbA,CAAVktC;AACAA,gBAAAA,OAAAA,CAAAA,WAAAA,GAFuB,WAEvBA;AAFF,eAAA,MAGO;AACLA,gBAAAA,OAAAA,GAAUltC,QAAAA,CAAAA,aAAAA,CADL,OACKA,CAAVktC;AACAA,gBAAAA,OAAAA,CAAAA,IAAAA,GAFK,MAELA;AACAA,gBAAAA,OAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAHK,WAGLA;AAtBkB;;AAwBpB4B,cAAAA,oBAAAA,CAAAA,GAAAA,CAxBoB,OAwBpBA;AACA5B,cAAAA,OAAAA,CAAAA,QAAAA,GAAmB,KAAA,IAAA,CAzBC,QAyBpBA;AACAA,cAAAA,OAAAA,CAAAA,IAAAA,GAAe,KAAA,IAAA,CA1BK,SA0BpBA;AACAA,cAAAA,OAAAA,CAAAA,QAAAA,GA3BoB,iBA2BpBA;AAEAmH,cAAAA,WAAAA,CAAAA,SAAAA,GA7BoB,WA6BpBA;AACAnH,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EA9BoB,EA8BpBA;AAEAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCvjB,KAAAA,IAAS;AACzCwoB,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,kBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CADW;AACpB,iBAArBwoB;AACA,qBAAA,qBAAA,CAAA,OAAA,EAAA,OAAA,EAGExoB,KAAAA,CAAAA,MAAAA,CAHF,KAAA,EAFyC,OAEzC;AAFFujB,eAAAA;AAUAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsCvjB,KAAAA,IAAS;AAC7C,sBAAM+qB,YAAAA,GAAe,KAAA,IAAA,CAAA,iBAAA,IADwB,EAC7C;AACAxH,gBAAAA,OAAAA,CAAAA,KAAAA,GAAgBmH,WAAAA,CAAAA,SAAAA,GAF6B,YAE7CnH;AACA,uBAAOmH,WAAAA,CAHsC,cAG7C;AAHFnH,eAAAA;;AAMA,kBAAIyH,YAAAA,GAAehrB,KAAAA,IAAS;AAC1B,oBAAI0qB,WAAAA,CAAJ,cAAA,EAAgC;AAC9B1qB,kBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqB0qB,WAAAA,CADS,cAC9B1qB;AAFwB;;AAK1BA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,UAAAA,GAL0B,CAK1BA;AACA0qB,gBAAAA,WAAAA,CAAAA,yBAAAA,GAN0B,IAM1BA;AANF,eAAA;;AASA,kBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7CnH,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCvjB,KAAAA,IAAS;AACzC,sBAAI0qB,WAAAA,CAAJ,SAAA,EAA2B;AACzB1qB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqB0qB,WAAAA,CADI,SACzB1qB;AAFuC;AAA3CujB,iBAAAA;AAMAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAA8C+G,OAAAA,IAAW;AACvD,wBAAMC,OAAAA,GAAU;AACd96B,oBAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACXi7B,sBAAAA,WAAAA,CAAAA,SAAAA,GAAwB1qB,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IADb,EACX0qB;AACAlC,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,wBAAAA,KAAAA,EAAOi7B,WAAAA,CAAAA,SAAAA,CAFnB,QAEmBA;AAAT,uBAArBlC;;AACA,0BAAI,CAACkC,WAAAA,CAAL,cAAA,EAAiC;AAC/B1qB,wBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqB0qB,WAAAA,CADU,SAC/B1qB;AAJS;AADC,qBAAA;;AAQd0oB,oBAAAA,aAAAA,CAAAA,KAAAA,EAAqB;AACnBgC,sBAAAA,WAAAA,CAAAA,cAAAA,GAA6B1qB,KAAAA,CAAAA,MAAAA,CAAAA,aAAAA,IADV,EACnB0qB;;AACA,0BAAI1qB,KAAAA,CAAAA,MAAAA,KAAiB3pB,QAAAA,CAArB,aAAA,EAA6C;AAE3C2pB,wBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqB0qB,WAAAA,CAFsB,cAE3C1qB;AAJiB;;AAMnBwoB,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBoC,wBAAAA,cAAAA,EAAgBF,WAAAA,CAPC;AAME,uBAArBlC;AAdY,qBAAA;;AAkBdyC,oBAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd,4BAAM,CAAA,QAAA,EAAA,MAAA,IAAqBjrB,KAAAA,CAAAA,MAAAA,CADb,QACd;;AACA,0BAAIkrB,QAAAA,IAAAA,CAAAA,IAAiBC,MAAAA,GAASnrB,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAA9B,MAAA,EAAyD;AACvDA,wBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,QAAAA,EADuD,MACvDA;AAHY;AAlBF;;AAAA,mBAAhB;;AAyBA,uBAAA,yBAAA,CAAA,OAAA,EA1BuD,OA0BvD;AA1BFujB,iBAAAA;AA+BAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,SAAAA,EAAoCvjB,KAAAA,IAAS;AAC3C0qB,kBAAAA,WAAAA,CAAAA,gBAAAA,GAA+B1qB,KAAAA,CAAAA,MAAAA,CADY,KAC3C0qB;AAGA,sBAAIU,SAAAA,GAAY,CAJ2B,CAI3C;;AACA,sBAAIprB,KAAAA,CAAAA,GAAAA,KAAJ,QAAA,EAA4B;AAC1BorB,oBAAAA,SAAAA,GAD0B,CAC1BA;AADF,mBAAA,MAEO,IAAIprB,KAAAA,CAAAA,GAAAA,KAAJ,OAAA,EAA2B;AAChCorB,oBAAAA,SAAAA,GADgC,CAChCA;AADK,mBAAA,MAEA,IAAIprB,KAAAA,CAAAA,GAAAA,KAAJ,KAAA,EAAyB;AAC9BorB,oBAAAA,SAAAA,GAD8B,CAC9BA;AAVyC;;AAY3C,sBAAIA,SAAAA,KAAc,CAAlB,CAAA,EAAsB;AAAA;AAZqB;;AAgB3CV,kBAAAA,WAAAA,CAAAA,SAAAA,GAAwB1qB,KAAAA,CAAAA,MAAAA,CAhBmB,KAgB3C0qB;AACA,uBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dp1B,oBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,oBAAAA,MAAAA,EAAQ;AAAA,sBAAA,EAAA;AAENztC,sBAAAA,IAAAA,EAFM,WAAA;AAGNmV,sBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CAHD,KAAA;AAINqrB,sBAAAA,UAAAA,EAJM,IAAA;AAAA,sBAAA,SAAA;AAMNH,sBAAAA,QAAAA,EAAUlrB,KAAAA,CAAAA,MAAAA,CANJ,cAAA;AAONmrB,sBAAAA,MAAAA,EAAQnrB,KAAAA,CAAAA,MAAAA,CAPF;AAAA;AAFoD,mBAA9D;AAjBFujB,iBAAAA;AA8BA,sBAAM+H,aAAAA,GApEuC,YAoE7C;AACAN,gBAAAA,YAAAA,GArE6C,IAqE7CA;AACAzH,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,MAAAA,EAAiCvjB,KAAAA,IAAS;AACxC,sBAAI,KAAA,WAAA,CAAJ,MAAA,EAA6B;AAE3B0qB,oBAAAA,WAAAA,CAAAA,SAAAA,GAAwB1qB,KAAAA,CAAAA,MAAAA,CAFG,KAE3B0qB;AACA,yBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dp1B,sBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,sBAAAA,MAAAA,EAAQ;AAAA,wBAAA,EAAA;AAENztC,wBAAAA,IAAAA,EAFM,WAAA;AAGNmV,wBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CAHD,KAAA;AAINqrB,wBAAAA,UAAAA,EAJM,IAAA;AAKND,wBAAAA,SAAAA,EALM,CAAA;AAMNF,wBAAAA,QAAAA,EAAUlrB,KAAAA,CAAAA,MAAAA,CANJ,cAAA;AAONmrB,wBAAAA,MAAAA,EAAQnrB,KAAAA,CAAAA,MAAAA,CAPF;AAAA;AAFoD,qBAA9D;AAJsC;;AAiBxCsrB,kBAAAA,aAAAA,CAjBwC,KAiBxCA,CAAAA;AAjBF/H,iBAAAA;AAmBAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsCvjB,KAAAA,IAAS;AAC7C0qB,kBAAAA,WAAAA,CAAAA,gBAAAA,GAA+B1qB,KAAAA,CAAAA,MAAAA,CADc,KAC7C0qB;AACAA,kBAAAA,WAAAA,CAAAA,yBAAAA,GAF6C,IAE7CA;AAFFnH,iBAAAA;AAIAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCvjB,KAAAA,IAAS;AAEzC,sBAAIA,KAAAA,CAAAA,MAAAA,CAAAA,cAAAA,KAAgCA,KAAAA,CAAAA,MAAAA,CAApC,YAAA,EAA+D;AAC7D0qB,oBAAAA,WAAAA,CAAAA,yBAAAA,GAD6D,IAC7DA;AAHuC;AAA3CnH,iBAAAA;AAMAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCvjB,KAAAA,IAAS;AAC1C0qB,kBAAAA,WAAAA,CAAAA,yBAAAA,GAAwC,CACtC1qB,KAAAA,CAAAA,MAAAA,CADsC,cAAA,EAEtCA,KAAAA,CAAAA,MAAAA,CAFF0qB,YAAwC,CAAxCA;AADFnH,iBAAAA;;AAOA,oBAAI,KAAA,IAAA,CAAA,OAAA,EAAJ,SAAA,EAAkC;AAGhCA,kBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCvjB,KAAAA,IAAS;AACzC,wBAAIkrB,QAAAA,GAAW,CAD0B,CACzC;AACA,wBAAIC,MAAAA,GAAS,CAF4B,CAEzC;;AACA,wBAAIT,WAAAA,CAAJ,yBAAA,EAA2C;AACzC,uBAAA,QAAA,EAAA,MAAA,IAAqBA,WAAAA,CADoB,yBACzC;AAJuC;;AAMzC,yBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dp1B,sBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,sBAAAA,MAAAA,EAAQ;AAAA,wBAAA,EAAA;AAENztC,wBAAAA,IAAAA,EAFM,WAAA;AAGNmV,wBAAAA,KAAAA,EAAOi7B,WAAAA,CAHD,gBAAA;AAINa,wBAAAA,MAAAA,EAAQvrB,KAAAA,CAJF,IAAA;AAKNqrB,wBAAAA,UAAAA,EALM,KAAA;AAAA,wBAAA,QAAA;AAAA,wBAAA;AAAA;AAFoD,qBAA9D;AANF9H,mBAAAA;AA7G2C;;AAkI7C,qBAAA,kBAAA,CAAA,OAAA,EAEE,CACE,CAAA,OAAA,EADF,OACE,CADF,EAEE,CAAA,MAAA,EAFF,MAEE,CAFF,EAGE,CAAA,WAAA,EAHF,YAGE,CAHF,EAIE,CAAA,YAAA,EAJF,aAIE,CAJF,EAKE,CAAA,YAAA,EALF,YAKE,CALF,EAME,CAAA,SAAA,EARJ,UAQI,CANF,CAFF,EAUEvjB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CA5IkC,KAkI7C;AA3LkB;;AAyMpB,kBAAA,YAAA,EAAkB;AAChBujB,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,MAAAA,EADgB,YAChBA;AA1MkB;;AA6MpB,kBAAI,KAAA,IAAA,CAAA,MAAA,KAAJ,IAAA,EAA+B;AAC7BA,gBAAAA,OAAAA,CAAAA,SAAAA,GAAoB,KAAA,IAAA,CADS,MAC7BA;AA9MkB;;AAiNpB,kBAAI,KAAA,IAAA,CAAJ,IAAA,EAAoB;AAClB,sBAAMiI,UAAAA,GAAa,KAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAoB,KAAA,IAAA,CAAA,IAAA,CADrB,CACqB,CAAvC;AACA,sBAAMC,SAAAA,GAAYD,UAAAA,GAAa,KAAA,IAAA,CAFb,MAElB;AAEAjI,gBAAAA,OAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAJkB,MAIlBA;AACAA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAA8B,QALZ,SAAA,WAKlBA;AAtNkB;AAAtB,aAAA,MAwNO;AACLA,cAAAA,OAAAA,GAAUltC,QAAAA,CAAAA,aAAAA,CADL,KACKA,CAAVktC;AACAA,cAAAA,OAAAA,CAAAA,WAAAA,GAAsB,KAAA,IAAA,CAFjB,UAELA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAHK,QAGLA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GAJK,YAILA;AAnOK;;AAsOP,iBAAA,aAAA,CAtOO,OAsOP;;AACA,iBAAA,mBAAA,CAvOO,OAuOP;;AAEA,iBAAA,SAAA,CAAA,WAAA,CAzOO,OAyOP;AACA,mBAAO,KA1OA,SA0OP;AA/P8D;;AAyQhEmI,UAAAA,aAAAA,CAAAA,OAAAA,EAAuB;AACrB,kBAAMC,cAAAA,GAAiB,CAAA,MAAA,EAAA,QAAA,EAAvB,OAAuB,CAAvB;AACA,kBAAM;AAAA,cAAA,QAAA;AAAA,cAAA;AAAA,gBAA0B,KAAA,IAAA,CAFX,qBAErB;AACA,kBAAMC,KAAAA,GAAQrI,OAAAA,CAHO,KAGrB;;AAKA,gBAAA,QAAA,EAAc;AACZqI,cAAAA,KAAAA,CAAAA,QAAAA,GAAiB,GADL,QAAA,IACZA;AATmB;;AAYrBA,YAAAA,KAAAA,CAAAA,KAAAA,GAAc56B,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkB66B,SAAAA,CAAlB76B,CAAkB66B,CAAlB76B,EAAgC66B,SAAAA,CAAhC76B,CAAgC66B,CAAhC76B,EAA8C66B,SAAAA,CAZvC,CAYuCA,CAA9C76B,CAAd46B;;AAEA,gBAAI,KAAA,IAAA,CAAA,aAAA,KAAJ,IAAA,EAAsC;AACpCA,cAAAA,KAAAA,CAAAA,SAAAA,GAAkBD,cAAAA,CAAe,KAAA,IAAA,CADG,aAClBA,CAAlBC;AAfmB;AAzQyC;;AAAA;;AA6RlE,cAAA,+BAAA,SAAA,uBAAA,CAAsE;AACpE91C,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEwvC,cAAAA,YAAAA,EAAcF,UAAAA,CADZ;AACJ,aAAlB;AAFkE;;AAKpEppB,UAAAA,MAAAA,GAAS;AACP,kBAAMwsB,OAAAA,GAAU,KADT,iBACP;AACA,kBAAM7xC,IAAAA,GAAO,KAFN,IAEP;AACA,kBAAM2qB,EAAAA,GAAK3qB,IAAAA,CAHJ,EAGP;AACA,gBAAI8Y,KAAAA,GAAQ+4B,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAC/B/4B,cAAAA,KAAAA,EAAO9Y,IAAAA,CAAAA,WAAAA,KAAqBA,IAAAA,CADlB6xC;AAAqB,aAArBA,EAJL,KAIP;;AAGA,gBAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAE7B/4B,cAAAA,KAAAA,GAAQA,KAAAA,KAFqB,KAE7BA;AACA+4B,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAHQ,gBAAA;AAGR,eAArBA;AAVK;;AAaP,iBAAA,SAAA,CAAA,SAAA,GAbO,iCAaP;AAEA,kBAAMjF,OAAAA,GAAUltC,QAAAA,CAAAA,aAAAA,CAfT,OAeSA,CAAhB;AACA8uC,YAAAA,oBAAAA,CAAAA,GAAAA,CAhBO,OAgBPA;AACA5B,YAAAA,OAAAA,CAAAA,QAAAA,GAAmB5sC,IAAAA,CAjBZ,QAiBP4sC;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAlBO,UAkBPA;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAAe5sC,IAAAA,CAnBR,SAmBP4sC;;AACA,gBAAA,KAAA,EAAW;AACTA,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EADS,IACTA;AArBK;;AAuBPA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAvBO,EAuBPA;AACAA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,aAAAA,EAAoC5sC,IAAAA,CAxB7B,WAwBP4sC;AACAA,YAAAA,OAAAA,CAAAA,QAAAA,GAzBO,iBAyBPA;AAEAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCvjB,KAAAA,IAAS;AAC1C,oBAAM;AAAA,gBAAA,IAAA;AAAA,gBAAA;AAAA,kBAAoBA,KAAAA,CADgB,MAC1C;;AACA,mBAAA,MAAA,QAAA,IAAuB,KAAA,kBAAA,CAAA,IAAA,EAAvB,EAAuB,CAAvB,EAAyE;AACvE,sBAAM8rB,UAAAA,GAAaC,OAAAA,IAAWC,QAAAA,CAAAA,WAAAA,KAAyBr1C,IAAAA,CADgB,WACvE;;AACA,oBAAIq1C,QAAAA,CAAJ,UAAA,EAAyB;AACvBA,kBAAAA,QAAAA,CAAAA,UAAAA,CAAAA,OAAAA,GADuB,UACvBA;AAHqE;;AAKvExD,gBAAAA,OAAAA,CAAAA,QAAAA,CAAiBwD,QAAAA,CAAjBxD,EAAAA,EAA8B;AAAE/4B,kBAAAA,KAAAA,EALuC;AAKzC,iBAA9B+4B;AAPwC;;AAS1CA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,gBAAAA,KAAAA,EATmB;AASrB,eAArB+4B;AATFjF,aAAAA;AAYAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsCvjB,KAAAA,IAAS;AAC7C,oBAAM+qB,YAAAA,GAAep0C,IAAAA,CAAAA,iBAAAA,IADwB,KAC7C;AACAqpB,cAAAA,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,GAAuB+qB,YAAAA,KAAiBp0C,IAAAA,CAFK,WAE7CqpB;AAFFujB,aAAAA;;AAKA,gBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7CA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAA8C+G,OAAAA,IAAW;AACvD,sBAAMC,OAAAA,GAAU;AACd96B,kBAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACXuQ,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,GAAuBA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,KADZ,KACXA;AACAwoB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,sBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CAFnB;AAEU,qBAArBwoB;AAHY;;AAAA,iBAAhB;;AAMA,qBAAA,yBAAA,CAAA,OAAA,EAPuD,OAOvD;AAPFjF,eAAAA;;AAUA,mBAAA,kBAAA,CAAA,OAAA,EAEE,CACE,CAAA,QAAA,EADF,UACE,CADF,EAEE,CAAA,QAAA,EAFF,QAEE,CAFF,EAGE,CAAA,OAAA,EAHF,OAGE,CAHF,EAIE,CAAA,MAAA,EAJF,MAIE,CAJF,EAKE,CAAA,WAAA,EALF,YAKE,CALF,EAME,CAAA,YAAA,EANF,aAME,CANF,EAOE,CAAA,YAAA,EAPF,YAOE,CAPF,EAQE,CAAA,SAAA,EAVJ,UAUI,CARF,CAFF,EAYEvjB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CAvBkC,OAW7C;AAvDK;;AAuEP,iBAAA,mBAAA,CAvEO,OAuEP;;AAEA,iBAAA,SAAA,CAAA,WAAA,CAzEO,OAyEP;AACA,mBAAO,KA1EA,SA0EP;AA/EkE;;AAAA;;AAmFtE,cAAA,kCAAA,SAAA,uBAAA,CAAyE;AACvElqB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEwvC,cAAAA,YAAAA,EAAcF,UAAAA,CADZ;AACJ,aAAlB;AAFqE;;AAKvEppB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,oCACP;AACA,kBAAMwsB,OAAAA,GAAU,KAFT,iBAEP;AACA,kBAAM7xC,IAAAA,GAAO,KAHN,IAGP;AACA,kBAAM2qB,EAAAA,GAAK3qB,IAAAA,CAJJ,EAIP;AACA,gBAAI8Y,KAAAA,GAAQ+4B,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAC/B/4B,cAAAA,KAAAA,EAAO9Y,IAAAA,CAAAA,UAAAA,KAAoBA,IAAAA,CADjB6xC;AAAqB,aAArBA,EALL,KAKP;;AAGA,gBAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAE7B/4B,cAAAA,KAAAA,GAAQA,KAAAA,KAAU9Y,IAAAA,CAFW,WAE7B8Y;AACA+4B,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAHQ,gBAAA;AAGR,eAArBA;AAXK;;AAcP,kBAAMjF,OAAAA,GAAUltC,QAAAA,CAAAA,aAAAA,CAdT,OAcSA,CAAhB;AACA8uC,YAAAA,oBAAAA,CAAAA,GAAAA,CAfO,OAePA;AACA5B,YAAAA,OAAAA,CAAAA,QAAAA,GAAmB5sC,IAAAA,CAhBZ,QAgBP4sC;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAjBO,OAiBPA;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAAe5sC,IAAAA,CAlBR,SAkBP4sC;;AACA,gBAAA,KAAA,EAAW;AACTA,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EADS,IACTA;AApBK;;AAsBPA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAtBO,EAsBPA;AACAA,YAAAA,OAAAA,CAAAA,QAAAA,GAvBO,iBAuBPA;AAEAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCvjB,KAAAA,IAAS;AAC1C,oBAAM;AAAA,gBAAA,IAAA;AAAA,gBAAA;AAAA,kBAAoBA,KAAAA,CADgB,MAC1C;;AACA,mBAAA,MAAA,KAAA,IAAoB,KAAA,kBAAA,CAAA,IAAA,EAApB,EAAoB,CAApB,EAAsE;AACpEwoB,gBAAAA,OAAAA,CAAAA,QAAAA,CAAiByD,KAAAA,CAAjBzD,EAAAA,EAA2B;AAAE/4B,kBAAAA,KAAAA,EADuC;AACzC,iBAA3B+4B;AAHwC;;AAK1CA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,gBAAAA,KAAAA,EALmB;AAKrB,eAArB+4B;AALFjF,aAAAA;AAQAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsCvjB,KAAAA,IAAS;AAC7C,oBAAM+qB,YAAAA,GAAep0C,IAAAA,CADwB,iBAC7C;AACAqpB,cAAAA,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,GACE+qB,YAAAA,KAAAA,IAAAA,IACAA,YAAAA,KADAA,SAAAA,IAEAA,YAAAA,KAAiBp0C,IAAAA,CAL0B,WAE7CqpB;AAFFujB,aAAAA;;AAQA,gBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7C,oBAAM2I,cAAAA,GAAiBv1C,IAAAA,CADsB,WAC7C;AACA4sC,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAA8C+G,OAAAA,IAAW;AACvD,sBAAMC,OAAAA,GAAU;AACd96B,kBAAAA,KAAAA,EAAOuQ,KAAAA,IAAS;AACd,0BAAM+rB,OAAAA,GAAUG,cAAAA,KAAmBlsB,KAAAA,CAAAA,MAAAA,CADrB,KACd;;AACA,yBAAA,MAAA,KAAA,IAAoB,KAAA,kBAAA,CAAwBA,KAAAA,CAAAA,MAAAA,CAA5C,IAAoB,CAApB,EAAgE;AAC9D,4BAAM8rB,UAAAA,GAAaC,OAAAA,IAAWE,KAAAA,CAAAA,EAAAA,KADgC,EAC9D;;AACA,0BAAIA,KAAAA,CAAJ,UAAA,EAAsB;AACpBA,wBAAAA,KAAAA,CAAAA,UAAAA,CAAAA,OAAAA,GADoB,UACpBA;AAH4D;;AAK9DzD,sBAAAA,OAAAA,CAAAA,QAAAA,CAAiByD,KAAAA,CAAjBzD,EAAAA,EAA2B;AAAE/4B,wBAAAA,KAAAA,EALiC;AAKnC,uBAA3B+4B;AAPY;AADF;AAAA,iBAAhB;;AAYA,qBAAA,yBAAA,CAAA,OAAA,EAbuD,OAavD;AAbFjF,eAAAA;;AAgBA,mBAAA,kBAAA,CAAA,OAAA,EAEE,CACE,CAAA,QAAA,EADF,UACE,CADF,EAEE,CAAA,QAAA,EAFF,QAEE,CAFF,EAGE,CAAA,OAAA,EAHF,OAGE,CAHF,EAIE,CAAA,MAAA,EAJF,MAIE,CAJF,EAKE,CAAA,WAAA,EALF,YAKE,CALF,EAME,CAAA,YAAA,EANF,aAME,CANF,EAOE,CAAA,YAAA,EAPF,YAOE,CAPF,EAQE,CAAA,SAAA,EAVJ,UAUI,CARF,CAFF,EAYEvjB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CA9BkC,OAkB7C;AA3DK;;AA2EP,iBAAA,mBAAA,CA3EO,OA2EP;;AAEA,iBAAA,SAAA,CAAA,WAAA,CA7EO,OA6EP;AACA,mBAAO,KA9EA,SA8EP;AAnFqE;;AAAA;;AAuFzE,cAAA,iCAAA,SAAA,qBAAA,CAAsE;AACpEhE,UAAAA,MAAAA,GAAS;AAIP,kBAAM0pB,SAAAA,GAAY,MAJX,MAIW,EAAlB;AACAA,YAAAA,SAAAA,CAAAA,SAAAA,GALO,mCAKPA;;AAEA,gBAAI,KAAA,IAAA,CAAJ,eAAA,EAA+B;AAC7BA,cAAAA,SAAAA,CAAAA,KAAAA,GAAkB,KAAA,IAAA,CADW,eAC7BA;AARK;;AAWP,mBAXO,SAWP;AAZkE;;AAAA;;AAgBtE,cAAA,6BAAA,SAAA,uBAAA,CAAoE;AAClE5vC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEwvC,cAAAA,YAAAA,EAAcF,UAAAA,CADZ;AACJ,aAAlB;AAFgE;;AAKlEppB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,wBACP;AACA,kBAAMwsB,OAAAA,GAAU,KAFT,iBAEP;AACA,kBAAMlnB,EAAAA,GAAK,KAAA,IAAA,CAHJ,EAGP;AASAknB,YAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,cAAAA,KAAAA,EACE,KAAA,IAAA,CAAA,UAAA,CAAA,MAAA,GAAA,CAAA,GAAkC,KAAA,IAAA,CAAA,UAAA,CAAlC,CAAkC,CAAlC,GAdG;AAYc,aAArB+4B;AAKA,gBAAI;AAAA,cAAA;AAAA,gBAAe,KAAA,IAAA,CAjBZ,qBAiBP;;AACA,gBAAI,CAAJ,QAAA,EAAe;AACb5T,cAAAA,QAAAA,GADa,CACbA;AAnBK;;AAqBP,kBAAMuX,aAAAA,GAAgB,QArBf,QAAA,0BAqBP;AAEA,kBAAMC,aAAAA,GAAgB/1C,QAAAA,CAAAA,aAAAA,CAvBf,QAuBeA,CAAtB;AACA8uC,YAAAA,oBAAAA,CAAAA,GAAAA,CAxBO,aAwBPA;AACAiH,YAAAA,aAAAA,CAAAA,QAAAA,GAAyB,KAAA,IAAA,CAzBlB,QAyBPA;AACAA,YAAAA,aAAAA,CAAAA,IAAAA,GAAqB,KAAA,IAAA,CA1Bd,SA0BPA;AACAA,YAAAA,aAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EA3BO,EA2BPA;AACAA,YAAAA,aAAAA,CAAAA,QAAAA,GA5BO,iBA4BPA;AAEAA,YAAAA,aAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAA+B,GA9BxB,QAAA,IA8BPA;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,KAAA,EAAsB;AAEpBA,cAAAA,aAAAA,CAAAA,IAAAA,GAAqB,KAAA,IAAA,CAAA,OAAA,CAFD,MAEpBA;;AACA,kBAAI,KAAA,IAAA,CAAJ,WAAA,EAA2B;AACzBA,gBAAAA,aAAAA,CAAAA,QAAAA,GADyB,IACzBA;AAJkB;AAhCf;;AAwCPA,YAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAA4CpsB,KAAAA,IAAS;AACnD,oBAAM+qB,YAAAA,GAAe,KAAA,IAAA,CAD8B,iBACnD;;AACA,mBAAA,MAAA,MAAA,IAAqBqB,aAAAA,CAArB,OAAA,EAA4C;AAC1CC,gBAAAA,MAAAA,CAAAA,QAAAA,GAAkBA,MAAAA,CAAAA,KAAAA,KADwB,YAC1CA;AAHiD;AAArDD,aAAAA;;AAQA,iBAAA,MAAA,MAAA,IAAqB,KAAA,IAAA,CAArB,OAAA,EAAwC;AACtC,oBAAME,aAAAA,GAAgBj2C,QAAAA,CAAAA,aAAAA,CADgB,QAChBA,CAAtB;AACAi2C,cAAAA,aAAAA,CAAAA,WAAAA,GAA4BD,MAAAA,CAFU,YAEtCC;AACAA,cAAAA,aAAAA,CAAAA,KAAAA,GAAsBD,MAAAA,CAHgB,WAGtCC;;AACA,kBAAI,KAAA,IAAA,CAAJ,KAAA,EAAqB;AACnBA,gBAAAA,aAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GADmB,aACnBA;AALoC;;AAOtC,kBAAI,KAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAA8BD,MAAAA,CAAlC,WAAI,CAAJ,EAAuD;AACrDC,gBAAAA,aAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EADqD,IACrDA;AARoC;;AAUtCF,cAAAA,aAAAA,CAAAA,WAAAA,CAVsC,aAUtCA;AA1DK;;AA6DP,kBAAMljB,QAAAA,GAAW,CAAA,KAAA,EAAA,QAAA,KAAqB;AACpC,oBAAM5uB,IAAAA,GAAOiyC,QAAAA,GAAAA,OAAAA,GADuB,aACpC;AACA,oBAAMt+B,OAAAA,GAAU+R,KAAAA,CAAAA,MAAAA,CAFoB,OAEpC;;AACA,kBAAI,CAACA,KAAAA,CAAAA,MAAAA,CAAL,QAAA,EAA4B;AAC1B,uBAAO/R,OAAAA,CAAAA,aAAAA,KAA0B,CAA1BA,CAAAA,GAAAA,IAAAA,GAEHA,OAAAA,CAAQA,OAAAA,CAARA,aAAAA,CAAAA,CAHsB,IAGtBA,CAFJ;AAJkC;;AAQpC,qBAAOiC,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EACUm8B,MAAAA,IAAUA,MAAAA,CADpBn8B,QAAAA,EAAAA,GAAAA,CAEAm8B,MAAAA,IAAUA,MAAAA,CAVmB,IAUnBA,CAFVn8B,CAAP;AARF,aAAA;;AAaA,kBAAMs8B,QAAAA,GAAWxsB,KAAAA,IAAS;AACxB,oBAAM/R,OAAAA,GAAU+R,KAAAA,CAAAA,MAAAA,CADQ,OACxB;AACA,qBAAO,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,EAAkCqsB,MAAAA,IAAU;AACjD,uBAAO;AAAEI,kBAAAA,YAAAA,EAAcJ,MAAAA,CAAhB,WAAA;AAAoCpF,kBAAAA,WAAAA,EAAaoF,MAAAA,CAAjD;AAAA,iBAAP;AADF,eAAO,CAAP;AAFF,aAAA;;AAOA,gBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7CD,cAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAAoD9B,OAAAA,IAAW;AAC7D,sBAAMC,OAAAA,GAAU;AACd96B,kBAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACX,0BAAMA,KAAAA,GAAQuQ,KAAAA,CAAAA,MAAAA,CADH,KACX;AACA,0BAAM0sB,MAAAA,GAAS,IAAA,GAAA,CAAQx8B,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAA+B,CAF3C,KAE2C,CAAvC,CAAf;;AACA,yBAAA,MAAA,MAAA,IAAqBk8B,aAAAA,CAArB,OAAA,EAA4C;AAC1CC,sBAAAA,MAAAA,CAAAA,QAAAA,GAAkBK,MAAAA,CAAAA,GAAAA,CAAWL,MAAAA,CADa,KACxBK,CAAlBL;AAJS;;AAMX7D,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,sBAAAA,KAAAA,EAAOyZ,QAAAA,CAAAA,KAAAA,EAPE,IAOFA;AADY,qBAArBsf;AAPY,mBAAA;;AAWdmE,kBAAAA,iBAAAA,CAAAA,KAAAA,EAAyB;AACvBP,oBAAAA,aAAAA,CAAAA,QAAAA,GADuB,IACvBA;AAZY,mBAAA;;AAcdQ,kBAAAA,MAAAA,CAAAA,KAAAA,EAAc;AACZ,0BAAM3+B,OAAAA,GAAUm+B,aAAAA,CADJ,OACZ;AACA,0BAAM3E,KAAAA,GAAQznB,KAAAA,CAAAA,MAAAA,CAFF,MAEZ;AACA/R,oBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,CAAAA,QAAAA,GAHY,KAGZA;AACAm+B,oBAAAA,aAAAA,CAAAA,MAAAA,CAJY,KAIZA;;AACA,wBAAIn+B,OAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAwB;AACtB,4BAAMzU,CAAAA,GAAI0W,KAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAERm8B,MAAAA,IAAUA,MAAAA,CAHU,QACZn8B,CAAV;;AAIA,0BAAI1W,CAAAA,KAAM,CAAV,CAAA,EAAc;AACZyU,wBAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,GADY,IACZA;AANoB;AALZ;;AAcZu6B,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,sBAAAA,KAAAA,EAAOyZ,QAAAA,CAAAA,KAAAA,EADY,IACZA,CADY;AAEnBxK,sBAAAA,KAAAA,EAAO8tB,QAAAA,CAFY,KAEZA;AAFY,qBAArBhE;AA5BY,mBAAA;;AAiCd9jB,kBAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACX,2BAAO0nB,aAAAA,CAAAA,MAAAA,KAAP,CAAA,EAAmC;AACjCA,sBAAAA,aAAAA,CAAAA,MAAAA,CADiC,CACjCA;AAFS;;AAIX5D,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,sBAAAA,KAAAA,EAAF,IAAA;AAAeiP,sBAAAA,KAAAA,EAAf;AAAA,qBAArB8pB;AArCY,mBAAA;;AAuCdqE,kBAAAA,MAAAA,CAAAA,KAAAA,EAAc;AACZ,0BAAM;AAAA,sBAAA,KAAA;AAAA,sBAAA,YAAA;AAAA,sBAAA;AAAA,wBAAuC7sB,KAAAA,CAAAA,MAAAA,CADjC,MACZ;AACA,0BAAMssB,aAAAA,GAAgBj2C,QAAAA,CAAAA,aAAAA,CAFV,QAEUA,CAAtB;AACAi2C,oBAAAA,aAAAA,CAAAA,WAAAA,GAHY,YAGZA;AACAA,oBAAAA,aAAAA,CAAAA,KAAAA,GAJY,WAIZA;AACAF,oBAAAA,aAAAA,CAAAA,YAAAA,CAAAA,aAAAA,EAEEA,aAAAA,CAAAA,QAAAA,CAPU,KAOVA,CAFFA;AAIA5D,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,sBAAAA,KAAAA,EAAOyZ,QAAAA,CAAAA,KAAAA,EADY,IACZA,CADY;AAEnBxK,sBAAAA,KAAAA,EAAO8tB,QAAAA,CAFY,KAEZA;AAFY,qBAArBhE;AAhDY,mBAAA;;AAqDd9pB,kBAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACX,0BAAM;AAAA,sBAAA;AAAA,wBAAYsB,KAAAA,CADP,MACX;;AACA,2BAAOosB,aAAAA,CAAAA,MAAAA,KAAP,CAAA,EAAmC;AACjCA,sBAAAA,aAAAA,CAAAA,MAAAA,CADiC,CACjCA;AAHS;;AAKX,yBAAA,MAAA,IAAA,IAAA,KAAA,EAA0B;AACxB,4BAAM;AAAA,wBAAA,YAAA;AAAA,wBAAA;AAAA,0BADkB,IACxB;AACA,4BAAME,aAAAA,GAAgBj2C,QAAAA,CAAAA,aAAAA,CAFE,QAEFA,CAAtB;AACAi2C,sBAAAA,aAAAA,CAAAA,WAAAA,GAHwB,YAGxBA;AACAA,sBAAAA,aAAAA,CAAAA,KAAAA,GAJwB,WAIxBA;AACAF,sBAAAA,aAAAA,CAAAA,WAAAA,CALwB,aAKxBA;AAVS;;AAYX,wBAAIA,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAsC;AACpCA,sBAAAA,aAAAA,CAAAA,OAAAA,CAAAA,CAAAA,EAAAA,QAAAA,GADoC,IACpCA;AAbS;;AAeX5D,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,sBAAAA,KAAAA,EAAOyZ,QAAAA,CAAAA,KAAAA,EADY,IACZA,CADY;AAEnBxK,sBAAAA,KAAAA,EAAO8tB,QAAAA,CAFY,KAEZA;AAFY,qBAArBhE;AApEY,mBAAA;;AAyEdsE,kBAAAA,OAAAA,CAAAA,KAAAA,EAAe;AACb,0BAAMA,OAAAA,GAAU,IAAA,GAAA,CAAQ9sB,KAAAA,CAAAA,MAAAA,CADX,OACG,CAAhB;;AACA,yBAAA,MAAA,MAAA,IAAqBA,KAAAA,CAAAA,MAAAA,CAArB,OAAA,EAA2C;AACzCqsB,sBAAAA,MAAAA,CAAAA,QAAAA,GAAkBS,OAAAA,CAAAA,GAAAA,CAAYT,MAAAA,CADW,KACvBS,CAAlBT;AAHW;;AAKb7D,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,sBAAAA,KAAAA,EAAOyZ,QAAAA,CAAAA,KAAAA,EANI,IAMJA;AADY,qBAArBsf;AA9EY,mBAAA;;AAkFduE,kBAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd/sB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,GAAwB,CAACA,KAAAA,CAAAA,MAAAA,CADX,QACdA;AAnFY;;AAAA,iBAAhB;;AAsFA,qBAAA,yBAAA,CAAA,OAAA,EAvF6D,OAuF7D;AAvFFosB,eAAAA;AA0FAA,cAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAwCpsB,KAAAA,IAAS;AAC/C,sBAAMinB,WAAAA,GAAc/d,QAAAA,CAAAA,KAAAA,EAD2B,IAC3BA,CAApB;AACA,sBAAMzZ,KAAAA,GAAQyZ,QAAAA,CAAAA,KAAAA,EAFiC,KAEjCA,CAAd;AACAsf,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,kBAAAA,KAAAA,EAHwB;AAG1B,iBAArB+4B;AAEA,qBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5DlzB,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DyyB,kBAAAA,MAAAA,EAAQ;AAAA,oBAAA,EAAA;AAENztC,oBAAAA,IAAAA,EAFM,WAAA;AAAA,oBAAA,KAAA;AAIN0yC,oBAAAA,QAAAA,EAJM,WAAA;AAKN3B,oBAAAA,UAAAA,EALM,IAAA;AAMND,oBAAAA,SAAAA,EANM,CAAA;AAON6B,oBAAAA,OAAAA,EAPM;AAAA;AAFoD,iBAA9D;AALFb,eAAAA;;AAmBA,mBAAA,kBAAA,CAAA,aAAA,EAEE,CACE,CAAA,OAAA,EADF,OACE,CADF,EAEE,CAAA,MAAA,EAFF,MAEE,CAFF,EAGE,CAAA,WAAA,EAHF,YAGE,CAHF,EAIE,CAAA,YAAA,EAJF,aAIE,CAJF,EAKE,CAAA,YAAA,EALF,YAKE,CALF,EAME,CAAA,SAAA,EANF,UAME,CANF,EAOE,CAAA,OAAA,EATJ,QASI,CAPF,CAFF,EAWEpsB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CAzHkC,OA8G7C;AA9GF,aAAA,MA2HO;AACLosB,cAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAwC,UAAA,KAAA,EAAiB;AACvD5D,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,kBAAAA,KAAAA,EAAOyZ,QAAAA,CADyB,KACzBA;AAAT,iBAArBsf;AADF4D,eAAAA;AA7MK;;AAkNP,iBAAA,mBAAA,CAlNO,aAkNP;;AAEA,iBAAA,SAAA,CAAA,WAAA,CApNO,aAoNP;AACA,mBAAO,KArNA,SAqNP;AA1NgE;;AAAA;;AA8NpE,cAAA,sBAAA,SAAA,iBAAA,CAAuD;AACrDt2C,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,EAAA,GAAA,IAAiCF,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAFb,GACA,CAAtB;AAGA,kBAAA,UAAA,EAAkB;AAJI,cAAA;AAIJ,aAAlB;AALmD;;AAQrDppB,UAAAA,MAAAA,GAAS;AAGP,kBAAMkxB,YAAAA,GAAe,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAArB,KAAqB,CAArB;AASA,iBAAA,SAAA,CAAA,SAAA,GAZO,iBAYP;;AAEA,gBAAIA,YAAAA,CAAAA,QAAAA,CAAsB,KAAA,IAAA,CAA1B,UAAIA,CAAJ,EAAiD;AAC/C,qBAAO,KADwC,SAC/C;AAfK;;AAkBP,kBAAMC,QAAAA,GAAW,wBAAwB,KAAA,IAAA,CAlBlC,QAAA,IAkBP;AACA,kBAAMC,cAAAA,GAAiB,KAAA,KAAA,CAAA,gBAAA,CAnBhB,QAmBgB,CAAvB;;AACA,gBAAIA,cAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAiC;AAC/B,qBAAO,KADwB,SAC/B;AArBK;;AAwBP,kBAAM1G,KAAAA,GAAQ,IAAA,YAAA,CAAiB;AAC7BhB,cAAAA,SAAAA,EAAW,KADkB,SAAA;AAE7BU,cAAAA,OAAAA,EAASl2B,KAAAA,CAAAA,IAAAA,CAFoB,cAEpBA,CAFoB;AAG7BwnB,cAAAA,KAAAA,EAAO,KAAA,IAAA,CAHsB,KAAA;AAI7B4O,cAAAA,QAAAA,EAAU,KAAA,IAAA,CAJmB,QAAA;AAK7BC,cAAAA,gBAAAA,EAAkB,KAAA,IAAA,CALW,gBAAA;AAM7BC,cAAAA,WAAAA,EAAa,KAAA,IAAA,CANgB;AAAA,aAAjB,CAAd;AAWA,kBAAMnkB,IAAAA,GAAO,KAnCN,IAmCP;;AACA,kBAAM9pB,IAAAA,GAAO,KAAA,CAAA,IAAA,CAAA,aAAA,CAAmB,CAC9B,KAAA,IAAA,CAAA,UAAA,CAD8B,CAC9B,CAD8B,EAE9B8pB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe,KAAA,IAAA,CAAA,UAAA,CAAfA,CAAe,CAAfA,GAAyCA,IAAAA,CAAAA,IAAAA,CAFX,CAEWA,CAFX,EAG9B,KAAA,IAAA,CAAA,UAAA,CAH8B,CAG9B,CAH8B,EAI9BA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe,KAAA,IAAA,CAAA,UAAA,CAAfA,CAAe,CAAfA,GAAyCA,IAAAA,CAAAA,IAAAA,CAJ3C,CAI2CA,CAJX,CAAnB,CAAb;;AAMA,kBAAMgrB,SAAAA,GACJ90C,IAAAA,CAAAA,CAAAA,CAAAA,GAAU,KAAA,IAAA,CAAA,UAAA,CAAVA,CAAU,CAAVA,GAAoC,KAAA,IAAA,CAAA,UAAA,CA3C/B,CA2C+B,CADtC;AAEA,kBAAM+0C,QAAAA,GAAW/0C,IAAAA,CA5CV,CA4CUA,CAAjB;AAEA,iBAAA,SAAA,CAAA,KAAA,CAAA,eAAA,GAAuC,GAAG,CAAH,SAAA,MAAmB,CA9CnD,QAAA,IA8CP;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,GAA4B,GA/CrB,SAAA,IA+CP;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,GAAA,GAA2B,GAhDpB,QAAA,IAgDP;AAEA,iBAAA,SAAA,CAAA,WAAA,CAA2BmuC,KAAAA,CAlDpB,MAkDoBA,EAA3B;AACA,mBAAO,KAnDA,SAmDP;AA3DmD;;AAAA;;AA+DvD,cAAA,YAAA,CAAmB;AACjB5wC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,iBAAA,SAAA,GAAiBsvC,UAAAA,CADK,SACtB;AACA,iBAAA,OAAA,GAAeA,UAAAA,CAFO,OAEtB;AACA,iBAAA,KAAA,GAAaA,UAAAA,CAHS,KAGtB;AACA,iBAAA,QAAA,GAAgBA,UAAAA,CAJM,QAItB;AACA,iBAAA,gBAAA,GAAwBA,UAAAA,CALF,gBAKtB;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CANG,WAMtB;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CAAAA,WAAAA,IAPG,KAOtB;AAEA,iBAAA,MAAA,GATsB,KAStB;AAVe;;AAajBppB,UAAAA,MAAAA,GAAS;AACP,kBAAMuxB,kBAAAA,GADC,GACP;AAEA,kBAAM9sB,OAAAA,GAAUpqB,QAAAA,CAAAA,aAAAA,CAHT,KAGSA,CAAhB;AACAoqB,YAAAA,OAAAA,CAAAA,SAAAA,GAJO,cAIPA;AAMA,iBAAA,WAAA,GAAmB,KAAA,WAAA,GAAA,OAAA,GAA6B,KAVzC,SAUP;AACA,iBAAA,WAAA,CAAA,MAAA,GAXO,IAWP;AAEA,kBAAMimB,KAAAA,GAAQrwC,QAAAA,CAAAA,aAAAA,CAbP,KAaOA,CAAd;AACAqwC,YAAAA,KAAAA,CAAAA,SAAAA,GAdO,OAcPA;AAEA,kBAAMhP,KAAAA,GAAQ,KAhBP,KAgBP;;AACA,gBAAA,KAAA,EAAW;AAET,oBAAMxmB,CAAAA,GAAIq8B,kBAAAA,IAAsB,MAAM7V,KAAAA,CAA5B6V,CAA4B7V,CAA5B6V,CAAAA,GAAwC7V,KAAAA,CAFzC,CAEyCA,CAAlD;AACA,oBAAM8V,CAAAA,GAAID,kBAAAA,IAAsB,MAAM7V,KAAAA,CAA5B6V,CAA4B7V,CAA5B6V,CAAAA,GAAwC7V,KAAAA,CAHzC,CAGyCA,CAAlD;AACA,oBAAM/lB,CAAAA,GAAI47B,kBAAAA,IAAsB,MAAM7V,KAAAA,CAA5B6V,CAA4B7V,CAA5B6V,CAAAA,GAAwC7V,KAAAA,CAJzC,CAIyCA,CAAlD;AACAgP,cAAAA,KAAAA,CAAAA,KAAAA,CAAAA,eAAAA,GAA8B11B,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkBE,CAAAA,GAAlBF,CAAAA,EAAyBw8B,CAAAA,GAAzBx8B,CAAAA,EAAgCW,CAAAA,GALrD,CAKqBX,CAA9B01B;AAtBK;;AAyBP,kBAAM+G,KAAAA,GAAQp3C,QAAAA,CAAAA,aAAAA,CAzBP,IAyBOA,CAAd;AACAo3C,YAAAA,KAAAA,CAAAA,GAAAA,GAAY,KAAA,QAAA,CA1BL,GA0BPA;AACAA,YAAAA,KAAAA,CAAAA,WAAAA,GAAoB,KAAA,QAAA,CA3Bb,GA2BPA;AACA/G,YAAAA,KAAAA,CAAAA,WAAAA,CA5BO,KA4BPA;;AAKA,kBAAMgH,UAAAA,GAAaC,cAAAA,CAAAA,aAAAA,CAAAA,YAAAA,CAA2B,KAjCvC,gBAiCYA,CAAnB;;AACA,gBAAA,UAAA,EAAgB;AACd,oBAAMpH,gBAAAA,GAAmBlwC,QAAAA,CAAAA,aAAAA,CADX,MACWA,CAAzB;AACAkwC,cAAAA,gBAAAA,CAAAA,WAAAA,GAFc,oBAEdA;AACAA,cAAAA,gBAAAA,CAAAA,OAAAA,CAAAA,MAAAA,GAHc,wBAGdA;AACAA,cAAAA,gBAAAA,CAAAA,OAAAA,CAAAA,QAAAA,GAAoC,IAAA,CAAA,SAAA,CAAe;AACjDtzB,gBAAAA,IAAAA,EAAMy6B,UAAAA,CAD2C,kBAC3CA,EAD2C;AAEjDrzC,gBAAAA,IAAAA,EAAMqzC,UAAAA,CAF2C,kBAE3CA;AAF2C,eAAf,CAApCnH;AAIAG,cAAAA,KAAAA,CAAAA,WAAAA,CARc,gBAQdA;AA1CK;;AA6CP,kBAAMkH,QAAAA,GAAW,KAAA,eAAA,CAAqB,KA7C/B,WA6CU,CAAjB;;AACAlH,YAAAA,KAAAA,CAAAA,WAAAA,CA9CO,QA8CPA;;AAEA,gBAAI,CAACx2B,KAAAA,CAAAA,OAAAA,CAAc,KAAnB,OAAKA,CAAL,EAAkC;AAChC,mBAAA,OAAA,GAAe,CAAC,KADgB,OACjB,CAAf;AAjDK;;AAqDP,iBAAA,MAAA,OAAA,IAAsB,KAAtB,OAAA,EAAoC;AAClCqzB,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkC,KAAA,OAAA,CAAA,IAAA,CADA,IACA,CAAlCA;AACAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsC,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAFJ,KAEI,CAAtCA;AACAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,UAAAA,EAAqC,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAHH,KAGG,CAArCA;AAxDK;;AA0DPmD,YAAAA,KAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAgC,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EA1DzB,IA0DyB,CAAhCA;AAEAjmB,YAAAA,OAAAA,CAAAA,WAAAA,CA5DO,KA4DPA;AACA,mBA7DO,OA6DP;AA1Ee;;AAqFjBotB,UAAAA,eAAAA,SAA8B;AAAA,gBAAd;AAAA,cAAA,GAAA;AAAhBA,cAAAA;AAAgB,aAAc;AAC5B,kBAAMp9B,CAAAA,GAAIpa,QAAAA,CAAAA,aAAAA,CADkB,GAClBA,CAAV;AACAoa,YAAAA,CAAAA,CAAAA,GAAAA,GAF4B,GAE5BA;AACA,kBAAMq9B,KAAAA,GAAQn/B,GAAAA,CAAAA,KAAAA,CAHc,cAGdA,CAAd;;AACA,iBAAK,IAAInV,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKu0C,KAAAA,CAArB,MAAA,EAAmCt0C,CAAAA,GAAnC,EAAA,EAA2C,EAA3C,CAAA,EAAgD;AAC9C,oBAAMu0C,IAAAA,GAAOD,KAAAA,CADiC,CACjCA,CAAb;AACAr9B,cAAAA,CAAAA,CAAAA,WAAAA,CAAcpa,QAAAA,CAAAA,cAAAA,CAFgC,IAEhCA,CAAdoa;;AACA,kBAAIjX,CAAAA,GAAID,EAAAA,GAAR,CAAA,EAAgB;AACdkX,gBAAAA,CAAAA,CAAAA,WAAAA,CAAcpa,QAAAA,CAAAA,aAAAA,CADA,IACAA,CAAdoa;AAJ4C;AAJpB;;AAW5B,mBAX4B,CAW5B;AAhGe;;AAyGjBu9B,UAAAA,OAAAA,GAAU;AACR,gBAAI,KAAJ,MAAA,EAAiB;AACf,mBAAA,KAAA,CADe,IACf;AADF,aAAA,MAEO;AACL,mBAAA,KAAA,CADK,IACL;AAJM;AAzGO;;AAwHjBC,UAAAA,KAAAA,GAAmB;AAAA,gBAAbC,GAAa,uEAAnBD,KAAmB;;AACjB,gBAAA,GAAA,EAAS;AACP,mBAAA,MAAA,GADO,IACP;AAFe;;AAIjB,gBAAI,KAAA,WAAA,CAAJ,MAAA,EAA6B;AAC3B,mBAAA,WAAA,CAAA,MAAA,GAD2B,KAC3B;AACA,mBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,IAF2B,CAE3B;AANe;AAxHF;;AAyIjBE,UAAAA,KAAAA,GAAoB;AAAA,gBAAdC,KAAc,uEAApBD,IAAoB;;AAClB,gBAAA,KAAA,EAAW;AACT,mBAAA,MAAA,GADS,KACT;AAFgB;;AAIlB,gBAAI,CAAC,KAAA,WAAA,CAAD,MAAA,IAA4B,CAAC,KAAjC,MAAA,EAA8C;AAC5C,mBAAA,WAAA,CAAA,MAAA,GAD4C,IAC5C;AACA,mBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,IAF4C,CAE5C;AANgB;AAzIH;;AAAA;;AAoJnB,cAAA,yBAAA,SAAA,iBAAA,CAA0D;AACxDr4C,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPsD;;AAUxDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,oBACP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAJK;;AAMP,mBAAO,KANA,SAMP;AAhBsD;;AAAA;;AAoB1D,cAAA,qBAAA,SAAA,iBAAA,CAAsD;AACpDlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPkD;;AAUpDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,gBACP;AAKA,kBAAMrlB,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMqB,KAAAA,GAAQrB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMsB,MAAAA,GAAStB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAMie,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAIA,kBAAMm5B,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAbN,UAaM,CAAb;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBp3C,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAdhC,CAcgCA,CAAvCo3C;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBp3C,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAfhC,CAegCA,CAAvCo3C;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBp3C,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAhBhC,CAgBgCA,CAAvCo3C;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBp3C,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAjBhC,CAiBgCA,CAAvCo3C;AAGAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAkCp3C,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IApB3B,CAoBPo3C;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EArBO,aAqBPA;AAEAn5B,YAAAA,GAAAA,CAAAA,WAAAA,CAvBO,IAuBPA;AACA,iBAAA,SAAA,CAAA,MAAA,CAxBO,GAwBP;;AAIA,iBAAA,YAAA,CAAA,IAAA,EA5BO,IA4BP;;AAEA,mBAAO,KA9BA,SA8BP;AAxCkD;;AAAA;;AA4CtD,cAAA,uBAAA,SAAA,iBAAA,CAAwD;AACtD9e,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPoD;;AAUtDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,kBACP;AAKA,kBAAMrlB,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMqB,KAAAA,GAAQrB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMsB,MAAAA,GAAStB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAMie,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAKA,kBAAMy5B,WAAAA,GAAc13C,IAAAA,CAAAA,WAAAA,CAdb,KAcP;AACA,kBAAM23C,MAAAA,GAAS,KAAA,UAAA,CAAA,aAAA,CAfR,UAeQ,CAAf;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAAyBD,WAAAA,GAhBlB,CAgBPC;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAAyBD,WAAAA,GAjBlB,CAiBPC;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAA6Bt2C,KAAAA,GAlBtB,WAkBPs2C;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAA8Br2C,MAAAA,GAnBvB,WAmBPq2C;AAGAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAoCD,WAAAA,IAtB7B,CAsBPC;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAvBO,aAuBPA;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAxBO,MAwBPA;AAEA15B,YAAAA,GAAAA,CAAAA,WAAAA,CA1BO,MA0BPA;AACA,iBAAA,SAAA,CAAA,MAAA,CA3BO,GA2BP;;AAIA,iBAAA,YAAA,CAAA,MAAA,EA/BO,IA+BP;;AAEA,mBAAO,KAjCA,SAiCP;AA3CoD;;AAAA;;AA+CxD,cAAA,uBAAA,SAAA,iBAAA,CAAwD;AACtD9e,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPoD;;AAUtDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,kBACP;AAKA,kBAAMrlB,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMqB,KAAAA,GAAQrB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMsB,MAAAA,GAAStB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAMie,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAKA,kBAAMy5B,WAAAA,GAAc13C,IAAAA,CAAAA,WAAAA,CAdb,KAcP;AACA,kBAAM43C,MAAAA,GAAS,KAAA,UAAA,CAAA,aAAA,CAfR,aAeQ,CAAf;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bv2C,KAAAA,GAhBnB,CAgBPu2C;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bt2C,MAAAA,GAjBnB,CAiBPs2C;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bv2C,KAAAA,GAAAA,CAAAA,GAAYq2C,WAAAA,GAlB/B,CAkBPE;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bt2C,MAAAA,GAAAA,CAAAA,GAAao2C,WAAAA,GAnBhC,CAmBPE;AAGAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAoCF,WAAAA,IAtB7B,CAsBPE;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAvBO,aAuBPA;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAxBO,MAwBPA;AAEA35B,YAAAA,GAAAA,CAAAA,WAAAA,CA1BO,MA0BPA;AACA,iBAAA,SAAA,CAAA,MAAA,CA3BO,GA2BP;;AAIA,iBAAA,YAAA,CAAA,MAAA,EA/BO,IA+BP;;AAEA,mBAAO,KAjCA,SAiCP;AA3CoD;;AAAA;;AA+CxD,cAAA,yBAAA,SAAA,iBAAA,CAA0D;AACxD9e,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAEA,iBAAA,kBAAA,GARsB,oBAQtB;AACA,iBAAA,cAAA,GATsB,cAStB;AAVsD;;AAaxDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GAA2B,KADpB,kBACP;AAKA,kBAAMrlB,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMqB,KAAAA,GAAQrB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMsB,MAAAA,GAAStB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAMie,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAMA,gBAAIuW,MAAAA,GAfG,EAeP;;AACA,iBAAA,MAAA,UAAA,IAAyBx0B,IAAAA,CAAzB,QAAA,EAAwC;AACtC,oBAAMg9B,CAAAA,GAAI6a,UAAAA,CAAAA,CAAAA,GAAe73C,IAAAA,CAAAA,IAAAA,CADa,CACbA,CAAzB;AACA,oBAAMm4B,CAAAA,GAAIn4B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe63C,UAAAA,CAFa,CAEtC;AACArjB,cAAAA,MAAAA,CAAAA,IAAAA,CAAYwI,CAAAA,GAAAA,GAAAA,GAH0B,CAGtCxI;AAnBK;;AAqBPA,YAAAA,MAAAA,GAASA,MAAAA,CAAAA,IAAAA,CArBF,GAqBEA,CAATA;AAEA,kBAAMsjB,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAA8B,KAvBxC,cAuBU,CAAjB;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAxBO,MAwBPA;AAGAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAsC93C,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IA3B/B,CA2BP83C;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EA5BO,aA4BPA;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EA7BO,MA6BPA;AAEA75B,YAAAA,GAAAA,CAAAA,WAAAA,CA/BO,QA+BPA;AACA,iBAAA,SAAA,CAAA,MAAA,CAhCO,GAgCP;;AAIA,iBAAA,YAAA,CAAA,QAAA,EApCO,IAoCP;;AAEA,mBAAO,KAtCA,SAsCP;AAnDsD;;AAAA;;AAuD1D,cAAA,wBAAA,SAAA,yBAAA,CAAiE;AAC/D9e,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AAEtB,kBAFsB,UAEtB;AAEA,iBAAA,kBAAA,GAJsB,mBAItB;AACA,iBAAA,cAAA,GALsB,aAKtB;AAN6D;;AAAA;;AAUjE,cAAA,sBAAA,SAAA,iBAAA,CAAuD;AACrDA,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPmD;;AAUrDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,iBACP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAJK;;AAMP,mBAAO,KANA,SAMP;AAhBmD;;AAAA;;AAoBvD,cAAA,oBAAA,SAAA,iBAAA,CAAqD;AACnDlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAEA,iBAAA,kBAAA,GARsB,eAQtB;AAIA,iBAAA,cAAA,GAZsB,cAYtB;AAbiD;;AAgBnDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GAA2B,KADpB,kBACP;AAIA,kBAAMrlB,IAAAA,GAAO,KALN,IAKP;AACA,kBAAMqB,KAAAA,GAAQrB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CANtB,CAMsBA,CAA7B;AACA,kBAAMsB,MAAAA,GAAStB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPvB,CAOuBA,CAA9B;AACA,kBAAMie,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EARL,MAQK,CAAZ;;AAEA,iBAAA,MAAA,OAAA,IAAsBje,IAAAA,CAAtB,QAAA,EAAqC;AAKnC,kBAAIw0B,MAAAA,GAL+B,EAKnC;;AACA,mBAAA,MAAA,UAAA,IAAA,OAAA,EAAkC;AAChC,sBAAMwI,CAAAA,GAAI6a,UAAAA,CAAAA,CAAAA,GAAe73C,IAAAA,CAAAA,IAAAA,CADO,CACPA,CAAzB;AACA,sBAAMm4B,CAAAA,GAAIn4B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe63C,UAAAA,CAFO,CAEhC;AACArjB,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY,GAAA,CAAA,IAHoB,CAAA,EAGhCA;AATiC;;AAWnCA,cAAAA,MAAAA,GAASA,MAAAA,CAAAA,IAAAA,CAX0B,GAW1BA,CAATA;AAEA,oBAAMsjB,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAA8B,KAbZ,cAalB,CAAjB;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAdmC,MAcnCA;AAGAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAsC93C,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IAjBH,CAiBnC83C;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAlBmC,aAkBnCA;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAnBmC,MAmBnCA;;AAIA,mBAAA,YAAA,CAAA,QAAA,EAvBmC,IAuBnC;;AAEA75B,cAAAA,GAAAA,CAAAA,WAAAA,CAzBmC,QAyBnCA;AAnCK;;AAsCP,iBAAA,SAAA,CAAA,MAAA,CAtCO,GAsCP;AACA,mBAAO,KAvCA,SAuCP;AAvDiD;;AAAA;;AA2DrD,cAAA,0BAAA,SAAA,iBAAA,CAA2D;AACzD9e,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPuD;;AAczDxpB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,qBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,qBASP;AACA,mBAAO,KAVA,SAUP;AAxBuD;;AAAA;;AA4B3D,cAAA,0BAAA,SAAA,iBAAA,CAA2D;AACzDlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPuD;;AAczDxpB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,qBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,qBASP;AACA,mBAAO,KAVA,SAUP;AAxBuD;;AAAA;;AA4B3D,cAAA,yBAAA,SAAA,iBAAA,CAA0D;AACxDlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPsD;;AAcxDxpB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,oBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,oBASP;AACA,mBAAO,KAVA,SAUP;AAxBsD;;AAAA;;AA4B1D,cAAA,0BAAA,SAAA,iBAAA,CAA2D;AACzDlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPuD;;AAczDxpB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,qBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,qBASP;AACA,mBAAO,KAVA,SAUP;AAxBuD;;AAAA;;AA4B3D,cAAA,sBAAA,SAAA,iBAAA,CAAuD;AACrDlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMwvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EADA,GAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJoB,GACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPmD;;AAUrDvpB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,iBACP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAJK;;AAMP,mBAAO,KANA,SAMP;AAhBmD;;AAAA;;AAoBvD,cAAA,+BAAA,SAAA,iBAAA,CAAgE;AAC9DlmB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEwvC,cAAAA,YAAAA,EADE;AACJ,aAAlB;AAEA,kBAAM;AAAA,cAAA,QAAA;AAAA,cAAA;AAAA,gBAAwB,KAAA,IAAA,CAHR,IAGtB;AACA,iBAAA,QAAA,GAAgBoJ,CAAAA,GAAAA,cAAAA,CAAAA,kBAAAA,EAJM,QAINA,CAAhB;AACA,iBAAA,OAAA,GALsB,OAKtB;AAEA,iBAAA,WAAA,CAAA,QAAA,EAAA,QAAA,CAAA,0BAAA,EAAgE;AAC9Dp5B,cAAAA,MAAAA,EAD8D,IAAA;AAE9DgM,cAAAA,EAAAA,EAAIqtB,CAAAA,GAAAA,KAAAA,CAAAA,iBAAAA,EAF0D,QAE1DA,CAF0D;AAAA,cAAA,QAAA;AAAA,cAAA;AAAA,aAAhE;AAR4D;;AAgB9D3yB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,0BACP;AAEA,kBAAMoqB,OAAAA,GAAU/vC,QAAAA,CAAAA,aAAAA,CAHT,KAGSA,CAAhB;AACA+vC,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAuB,KAAA,SAAA,CAAA,KAAA,CAJhB,MAIPA;AACAA,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAsB,KAAA,SAAA,CAAA,KAAA,CALf,KAKPA;AACAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,UAAAA,EAAqC,KAAA,SAAA,CAAA,IAAA,CAN9B,IAM8B,CAArCA;;AAEA,gBACE,CAAC,KAAA,IAAA,CAAD,QAAA,KACC,KAAA,IAAA,CAAA,QAAA,EAAA,GAAA,IAA2B,KAAA,IAAA,CAAA,WAAA,EAF9B,GACE,CADF,EAGE;AACA,mBAAA,YAAA,CAAA,OAAA,EAA2B,KAD3B,IACA;AAZK;;AAeP,iBAAA,SAAA,CAAA,WAAA,CAfO,OAeP;AACA,mBAAO,KAhBA,SAgBP;AAhC4D;;AAyC9DwI,UAAAA,SAAAA,GAAY;AACV,iBAAA,eAAA,EAAA,kBAAA,CACE,KADF,SAAA,EAEE,KAFF,OAAA,EAGE,KAJQ,QACV;AA1C4D;;AAAA;;AAkEhE,cAAA,eAAA,CAAsB;AAQpB,iBAAO5yB,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAM6yB,iBAAAA,GAAN,EAAA;AAAA,kBACEC,gBAAAA,GAFsB,EACxB;;AAKA,iBAAA,MAAA,IAAA,IAAmB1J,UAAAA,CAAnB,WAAA,EAA2C;AACzC,kBAAI,CAAJ,IAAA,EAAW;AAAA;AAD8B;;AAIzC,kBAAIzuC,IAAAA,CAAAA,cAAAA,KAAwB6H,KAAAA,CAAAA,cAAAA,CAA5B,KAAA,EAAkD;AAChDswC,gBAAAA,gBAAAA,CAAAA,IAAAA,CADgD,IAChDA;AADgD;AAJT;;AAQzCD,cAAAA,iBAAAA,CAAAA,IAAAA,CARyC,IAQzCA;AAdsB;;AAgBxB,gBAAIC,gBAAAA,CAAJ,MAAA,EAA6B;AAC3BD,cAAAA,iBAAAA,CAAAA,IAAAA,CAAuB,GADI,gBAC3BA;AAjBsB;;AAoBxB,iBAAA,MAAA,IAAA,IAAA,iBAAA,EAAsC;AACpC,oBAAMtL,OAAAA,GAAU,wBAAA,CAAA,MAAA,CAAgC;AAAA,gBAAA,IAAA;AAE9CwL,gBAAAA,KAAAA,EAAO3J,UAAAA,CAFuC,GAAA;AAG9C/iB,gBAAAA,IAAAA,EAAM+iB,UAAAA,CAHwC,IAAA;AAI9ChV,gBAAAA,QAAAA,EAAUgV,UAAAA,CAJoC,QAAA;AAK9CkC,gBAAAA,WAAAA,EAAalC,UAAAA,CALiC,WAAA;AAM9C4J,gBAAAA,eAAAA,EAAiB5J,UAAAA,CAN6B,eAAA;AAO9C6J,gBAAAA,kBAAAA,EAAoB7J,UAAAA,CAAAA,kBAAAA,IAP0B,EAAA;AAQ9C8J,gBAAAA,WAAAA,EAAa9J,UAAAA,CAAAA,WAAAA,KARiC,KAAA;AAS9C+J,gBAAAA,UAAAA,EAAY,IATkC,cAAA,CAAA,aASlC,EATkC;AAU9Cj2B,gBAAAA,iBAAAA,EACEksB,UAAAA,CAAAA,iBAAAA,IAAgC,IAXY,mBAAA,CAAA,iBAWZ,EAXY;AAY9CgK,gBAAAA,eAAAA,EAAiBhK,UAAAA,CAZ6B,eAAA;AAa9CnqB,gBAAAA,YAAAA,EAAcmqB,UAAAA,CAbgC,YAAA;AAc9CiK,gBAAAA,YAAAA,EAAcjK,UAAAA,CAdgC,YAAA;AAe9CkK,gBAAAA,UAAAA,EAAYlK,UAAAA,CAAAA,UAAAA,IAAyB;AAAEmK,kBAAAA,MAAAA,EAfO;AAeT;AAfS,eAAhC,CAAhB;;AAiBA,kBAAIhM,OAAAA,CAAJ,YAAA,EAA0B;AACxB,sBAAMiM,QAAAA,GAAWjM,OAAAA,CADO,MACPA,EAAjB;;AACA,oBAAI5sC,IAAAA,CAAJ,MAAA,EAAiB;AACf64C,kBAAAA,QAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GADe,QACfA;AAHsB;;AAKxB,oBAAIt/B,KAAAA,CAAAA,OAAAA,CAAJ,QAAIA,CAAJ,EAA6B;AAC3B,uBAAA,MAAA,eAAA,IAAA,QAAA,EAAwC;AACtCk1B,oBAAAA,UAAAA,CAAAA,GAAAA,CAAAA,WAAAA,CADsC,eACtCA;AAFyB;AAA7B,iBAAA,MAIO;AACL,sBAAI7B,OAAAA,YAAJ,sBAAA,EAA+C;AAG7C6B,oBAAAA,UAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CAH6C,QAG7CA;AAHF,mBAAA,MAIO;AACLA,oBAAAA,UAAAA,CAAAA,GAAAA,CAAAA,WAAAA,CADK,QACLA;AANG;AATiB;AAlBU;AApBd;AARN;;AA2EpB,iBAAOqK,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMvoC,SAAAA,GAAY,UAAUk+B,UAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CADJ,GACIA,CADJ,GACxB;;AACA,iBAAA,MAAA,IAAA,IAAmBA,UAAAA,CAAnB,WAAA,EAA2C;AACzC,oBAAMsK,QAAAA,GAAWtK,UAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,CACf,wBAAwBzuC,IAAAA,CAFe,EAAA,IACxByuC,CAAjB;;AAGA,kBAAA,QAAA,EAAc;AACZ,qBAAA,MAAA,OAAA,IAAA,QAAA,EAAgC;AAC9B7B,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAD8B,SAC9BA;AAFU;AAJ2B;AAFnB;;AAYxB6B,YAAAA,UAAAA,CAAAA,GAAAA,CAAAA,MAAAA,GAZwB,KAYxBA;AAvFkB;;AAAA;;;;;;;;;;;;;;AClrEtB,iBAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,iBAAOttC,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAYA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAZA,CAAYA,CAAZA,IAAXA,GAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EADiB,GACjBA,CAAP;AAvBF;;AA6BA,cAAA,eAAA,CAAsB;AACpB,iBAAO63C,MAAP,SAA4B;AAAA,gBAAd,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAd,CAAc,CAAc;AAC1B,mBAAO,CAAA,GAAA,EAAM,IAAI73C,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAY,MAAA,CAAA,GAAU,OAAV,CAAA,GAAqB,OAArB,CAAA,GAA7B,CAAiBA,CAAV,CAAP;AAFkB;;AAKpB,iBAAO83C,MAAP,SAAmB;AAAA,gBAAL,CAAd,CAAc,CAAK;AACjB,mBAAO,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAkB,IAAzB,CAAO,CAAP;AANkB;;AASpB,iBAAOC,KAAP,SAAkB;AAAA,gBAAL,CAAb,CAAa,CAAK;AAChB,mBAAO,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AAVkB;;AAapB,iBAAOC,MAAP,SAAmB;AAAA,gBAAL,CAAd,CAAc,CAAK;AACjB,kBAAMC,CAAAA,GAAIC,aAAAA,CADO,CACPA,CAAV;AACA,mBAAO,IAAA,CAAA,GAAA,CAAA,GAFU,CAAA,EAEjB;AAfkB;;AAkBpB,iBAAOC,KAAP,SAAwB;AAAA,gBAAX,CAAA,CAAA,EAAA,CAAA,EAAb,CAAa,CAAW;AACtB,mBAAO,CAAA,GAAA,EAAM,MAAA,CAAA,GAAU,OAAV,CAAA,GAAqB,OAAlC,CAAO,CAAP;AAnBkB;;AAsBpB,iBAAOC,QAAP,SAA2B;AAAA,gBAAX,CAAA,CAAA,EAAA,CAAA,EAAhB,CAAgB,CAAW;AACzB,kBAAMC,CAAAA,GAAIH,aAAAA,CADe,CACfA,CAAV;AACA,kBAAMD,CAAAA,GAAIC,aAAAA,CAFe,CAEfA,CAAV;AACA,kBAAMI,CAAAA,GAAIJ,aAAAA,CAHe,CAGfA,CAAV;AACA,mBAAO,IAAA,CAAA,GAAA,CAAA,GAJkB,CAAA,EAIzB;AA1BkB;;AA6BpB,iBAAOK,MAAP,GAAgB;AACd,mBADc,WACd;AA9BkB;;AAiCpB,iBAAOC,QAAP,SAA8B;AAAA,gBAAd,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAhB,CAAgB,CAAc;AAC5B,mBAAO,CAAA,KAAA,EAEL,IAAIx4C,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAY8Z,CAAAA,GAFX,CAED9Z,CAFC,EAGL,IAAIA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAY4Y,CAAAA,GAHX,CAGD5Y,CAHC,EAIL,IAAIA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAYg3B,CAAAA,GAJlB,CAIMh3B,CAJC,CAAP;AAlCkB;;AA0CpB,iBAAOy4C,SAAP,CAAA,UAAA,EAA6B;AAC3B,mBAAO,KAAA,QAAA,CAAc,KAAA,QAAA,CADM,UACN,CAAd,CAAP;AA3CkB;;AA8CpB,iBAAOC,QAAP,SAA2B;AAAA,gBAAX,CAAA,CAAA,EAAA,CAAA,EAAhB,CAAgB,CAAW;AACzB,kBAAM5+B,CAAAA,GAAI,IADe,CACzB;AACA,kBAAMlB,CAAAA,GAAI,IAFe,CAEzB;AACA,kBAAMoe,CAAAA,GAAI,IAHe,CAGzB;AACA,kBAAM3C,CAAAA,GAAIr0B,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAJe,CAIfA,CAAV;AACA,mBAAO,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AAnDkB;;AAAA;;;;;;;;;;;;;;ACdtB,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AA6BA,cAAM24C,uBAAAA,GA5CN,MA4CA;AACA,cAAMC,iBAAAA,GA7CN,EA6CA;AACA,cAAMC,mBAAAA,GA9CN,GA8CA;AACA,cAAMC,WAAAA,GAAc,IA/CpB,GA+CoB,EAApB;AACA,cAAMC,mBAAAA,GAhDN,QAgDA;;AAEA,iBAAA,SAAA,CAAA,UAAA,EAAA,GAAA,EAAoC;AAClC,gBAAMC,YAAAA,GAAeF,WAAAA,CAAAA,GAAAA,CADa,UACbA,CAArB;;AACA,cAAA,YAAA,EAAkB;AAChB,mBADgB,YAChB;AAHgC;;AAMlC1pB,UAAAA,GAAAA,CANkC,IAMlCA;AACAA,UAAAA,GAAAA,CAAAA,IAAAA,GAAW,GAAA,iBAAA,MAPuB,UAAA,EAOlCA;AACA,gBAAM6pB,OAAAA,GAAU7pB,GAAAA,CAAAA,WAAAA,CARkB,EAQlBA,CAAhB;AAGA,cAAI8pB,MAAAA,GAASD,OAAAA,CAXqB,qBAWlC;AACA,cAAIE,OAAAA,GAAUn5C,IAAAA,CAAAA,GAAAA,CAASi5C,OAAAA,CAZW,sBAYpBj5C,CAAd;;AACA,cAAA,MAAA,EAAY;AACVovB,YAAAA,GAAAA,CADU,OACVA;AACA,kBAAMgqB,KAAAA,GAAQF,MAAAA,IAAU,MAAA,GAFd,OAEIA,CAAd;AACAJ,YAAAA,WAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAHU,KAGVA;AACA,mBAJU,KAIV;AAjBgC;;AAwBlC1pB,UAAAA,GAAAA,CAAAA,WAAAA,GAxBkC,KAwBlCA;AACAA,UAAAA,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAzBkC,iBAyBlCA;AACAA,UAAAA,GAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EA1BkC,CA0BlCA;AACA,cAAIiqB,MAAAA,GAASjqB,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAAAA,iBAAAA,EA3BqB,IA2BlC;AAMA+pB,UAAAA,OAAAA,GAjCkC,CAiClCA;;AACA,eAAK,IAAIz3C,CAAAA,GAAI23C,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,GAAb,CAAA,EAAoC33C,CAAAA,IAApC,CAAA,EAA4CA,CAAAA,IAA5C,CAAA,EAAoD;AAClD,gBAAI23C,MAAAA,CAAAA,CAAAA,CAAAA,GAAJ,CAAA,EAAmB;AACjBF,cAAAA,OAAAA,GAAUn5C,IAAAA,CAAAA,IAAAA,CAAU0B,CAAAA,GAAAA,CAAAA,GADH,iBACP1B,CAAVm5C;AADiB;AAD+B;AAlClB;;AA4ClC/pB,UAAAA,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EA5CkC,iBA4ClCA;AACAA,UAAAA,GAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EA7CkC,iBA6ClCA;AACAiqB,UAAAA,MAAAA,GAASjqB,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAAAA,iBAAAA,EA9CyB,IA8ClCiqB;AACAH,UAAAA,MAAAA,GA/CkC,CA+ClCA;;AACA,eAAK,IAAIx3C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK43C,MAAAA,CAArB,MAAA,EAAoC33C,CAAAA,GAApC,EAAA,EAA4CA,CAAAA,IAA5C,CAAA,EAAoD;AAClD,gBAAI23C,MAAAA,CAAAA,CAAAA,CAAAA,GAAJ,CAAA,EAAmB;AACjBH,cAAAA,MAAAA,GAASN,iBAAAA,GAAoB54C,IAAAA,CAAAA,KAAAA,CAAW0B,CAAAA,GAAAA,CAAAA,GADvB,iBACY1B,CAA7Bk5C;AADiB;AAD+B;AAhDlB;;AAuDlC9pB,UAAAA,GAAAA,CAvDkC,OAuDlCA;;AAEA,cAAA,MAAA,EAAY;AACV,kBAAMgqB,KAAAA,GAAQF,MAAAA,IAAU,MAAA,GADd,OACIA,CAAd;AACAJ,YAAAA,WAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAFU,KAEVA;AACA,mBAHU,KAGV;AA5DgC;;AA+DlCA,UAAAA,WAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EA/DkC,mBA+DlCA;AACA,iBAhEkC,mBAgElC;AAlHF;;AAqHA,iBAAA,UAAA,CAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAA6C;AAE3C,gBAAMQ,OAAAA,GAAU/6C,QAAAA,CAAAA,aAAAA,CAF2B,MAE3BA,CAAhB;AACA,gBAAMg7C,iBAAAA,GAAoB,IAAA,CAAA,qBAAA,GACtB;AACEC,YAAAA,KAAAA,EADF,CAAA;AAEEC,YAAAA,WAAAA,EAFF,CAAA;AAGEC,YAAAA,OAAAA,EAASC,IAAAA,CAAAA,GAAAA,KAHX,EAAA;AAIEC,YAAAA,MAAAA,EAAQD,IAAAA,CAJV,MAAA;AAKEE,YAAAA,iBAAAA,EALF,IAAA;AAMEC,YAAAA,aAAAA,EANF,CAAA;AAOEC,YAAAA,WAAAA,EAPF,CAAA;AAQEC,YAAAA,YAAAA,EARF,CAAA;AASEC,YAAAA,UAAAA,EATF,CAAA;AAUE55C,YAAAA,KAAAA,EAVF;AAAA,WADsB,GAatB;AACEm5C,YAAAA,KAAAA,EADF,CAAA;AAEEC,YAAAA,WAAAA,EAFF,CAAA;AAGEC,YAAAA,OAAAA,EAASC,IAAAA,CAAAA,GAAAA,KAHX,EAAA;AAIEC,YAAAA,MAAAA,EAAQD,IAAAA,CAJV;AAAA,WAbJ;;AAoBAr8B,UAAAA,IAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAvB2C,OAuB3CA;;AAEA,gBAAM48B,EAAAA,GAAKhhC,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAeoE,IAAAA,CAAAA,SAAAA,CAAfpE,SAAAA,EAAyCygC,IAAAA,CAzBT,SAyBhCzgC,CAAX;;AACA,cAAIsgC,KAAAA,GAAQx5C,IAAAA,CAAAA,KAAAA,CAAWk6C,EAAAA,CAAXl6C,CAAWk6C,CAAXl6C,EAAkBk6C,EAAAA,CA1Ba,CA0BbA,CAAlBl6C,CAAZ;AACA,gBAAM8zC,KAAAA,GAAQjtB,MAAAA,CAAO8yB,IAAAA,CA3BsB,QA2B7B9yB,CAAd;;AACA,cAAIitB,KAAAA,CAAJ,QAAA,EAAoB;AAClB0F,YAAAA,KAAAA,IAASx5C,IAAAA,CAAAA,EAAAA,GADS,CAClBw5C;AA7ByC;;AA+B3C,gBAAMW,UAAAA,GAAan6C,IAAAA,CAAAA,KAAAA,CAAWk6C,EAAAA,CAAXl6C,CAAWk6C,CAAXl6C,EAAkBk6C,EAAAA,CA/BM,CA+BNA,CAAlBl6C,CAAnB;AACA,gBAAMo6C,UAAAA,GAAaD,UAAAA,GAAaE,SAAAA,CAAUvG,KAAAA,CAAVuG,UAAAA,EAhCW,GAgCXA,CAAhC;AAEA,cAAA,IAAA,EAlC2C,GAkC3C;;AACA,cAAIb,KAAAA,KAAJ,CAAA,EAAiB;AACfxX,YAAAA,IAAAA,GAAOkY,EAAAA,CADQ,CACRA,CAAPlY;AACAC,YAAAA,GAAAA,GAAMiY,EAAAA,CAAAA,CAAAA,CAAAA,GAFS,UAEfjY;AAFF,WAAA,MAGO;AACLD,YAAAA,IAAAA,GAAOkY,EAAAA,CAAAA,CAAAA,CAAAA,GAAQE,UAAAA,GAAap6C,IAAAA,CAAAA,GAAAA,CADvB,KACuBA,CAA5BgiC;AACAC,YAAAA,GAAAA,GAAMiY,EAAAA,CAAAA,CAAAA,CAAAA,GAAQE,UAAAA,GAAap6C,IAAAA,CAAAA,GAAAA,CAFtB,KAEsBA,CAA3BiiC;AAxCyC;;AA4C3CqX,UAAAA,OAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAAqB,GA5CsB,IAAA,IA4C3CA;AACAA,UAAAA,OAAAA,CAAAA,KAAAA,CAAAA,GAAAA,GAAoB,GA7CuB,GAAA,IA6C3CA;AACAA,UAAAA,OAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAAyB,GA9CkB,UAAA,IA8C3CA;AACAA,UAAAA,OAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAA2BxF,KAAAA,CA/CgB,UA+C3CwF;AAGAA,UAAAA,OAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAlD2C,cAkD3CA;AAEAA,UAAAA,OAAAA,CAAAA,WAAAA,GAAsBK,IAAAA,CApDqB,GAoD3CL;AAEAA,UAAAA,OAAAA,CAAAA,GAAAA,GAAcK,IAAAA,CAtD6B,GAsD3CL;;AAIA,cAAIh8B,IAAAA,CAAJ,qBAAA,EAAgC;AAC9Bg8B,YAAAA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,GAA2BK,IAAAA,CADG,QAC9BL;AA3DyC;;AA6D3C,cAAIE,KAAAA,KAAJ,CAAA,EAAiB;AACfD,YAAAA,iBAAAA,CAAAA,KAAAA,GAA0BC,KAAAA,IAAS,MAAMx5C,IAAAA,CAD1B,EACWw5C,CAA1BD;AA9DyC;;AAmE3C,cAAIe,eAAAA,GAnEuC,KAmE3C;;AACA,cACEX,IAAAA,CAAAA,GAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IACCr8B,IAAAA,CAAAA,qBAAAA,IAA8By7B,mBAAAA,CAAAA,IAAAA,CAAyBY,IAAAA,CAF1D,GAEiCZ,CAFjC,EAGE;AACAuB,YAAAA,eAAAA,GADA,IACAA;AAJF,WAAA,MAKO,IAAIX,IAAAA,CAAAA,SAAAA,CAAAA,CAAAA,MAAsBA,IAAAA,CAAAA,SAAAA,CAA1B,CAA0BA,CAA1B,EAA6C;AAClD,kBAAMY,SAAAA,GAAYv6C,IAAAA,CAAAA,GAAAA,CAAS25C,IAAAA,CAAAA,SAAAA,CAA3B,CAA2BA,CAAT35C,CAAlB;AAAA,kBACEw6C,SAAAA,GAAYx6C,IAAAA,CAAAA,GAAAA,CAAS25C,IAAAA,CAAAA,SAAAA,CAF2B,CAE3BA,CAAT35C,CADd;;AAIA,gBACEu6C,SAAAA,KAAAA,SAAAA,IACAv6C,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAAA,SAAAA,IAAiCA,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAjCA,SAAiCA,CAAjCA,GAFF,GAAA,EAGE;AACAs6C,cAAAA,eAAAA,GADA,IACAA;AATgD;AAzET;;AAqF3C,cAAA,eAAA,EAAqB;AACnB,gBAAIxG,KAAAA,CAAJ,QAAA,EAAoB;AAClByF,cAAAA,iBAAAA,CAAAA,WAAAA,GAAgCI,IAAAA,CAAAA,MAAAA,GAAcr8B,IAAAA,CAAAA,SAAAA,CAD5B,KAClBi8B;AADF,aAAA,MAEO;AACLA,cAAAA,iBAAAA,CAAAA,WAAAA,GAAgCI,IAAAA,CAAAA,KAAAA,GAAar8B,IAAAA,CAAAA,SAAAA,CADxC,KACLi8B;AAJiB;AArFsB;;AA4F3Cj8B,UAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EA5F2C,iBA4F3CA;;AACA,cAAIA,IAAAA,CAAJ,kBAAA,EAA6B;AAC3BA,YAAAA,IAAAA,CAAAA,WAAAA,CAD2B,OAC3BA;AA9FyC;;AAiG3C,cAAIA,IAAAA,CAAAA,qBAAAA,IAA8Bi8B,iBAAAA,CAAlC,OAAA,EAA6D;AAC3D,gBAAIkB,QAAAA,GAAJ,CAAA;AAAA,gBACEC,QAAAA,GAFyD,CAC3D;;AAEA,gBAAIlB,KAAAA,KAAJ,CAAA,EAAiB;AACfiB,cAAAA,QAAAA,GAAWz6C,IAAAA,CAAAA,GAAAA,CADI,KACJA,CAAXy6C;AACAC,cAAAA,QAAAA,GAAW16C,IAAAA,CAAAA,GAAAA,CAFI,KAEJA,CAAX06C;AALyD;;AAO3D,kBAAMC,QAAAA,GACH,CAAA,KAAA,CAAA,QAAA,GAAiBhB,IAAAA,CAAjB,MAAA,GAA+BA,IAAAA,CAAhC,KAAC,IAA6Cr8B,IAAAA,CAAAA,SAAAA,CARW,KAO3D;AAEA,kBAAMs9B,SAAAA,GATqD,UAS3D;AAEA,gBAAA,CAAA,EAX2D,CAW3D;;AACA,gBAAIpB,KAAAA,KAAJ,CAAA,EAAiB;AACf5gC,cAAAA,CAAAA,GAAI,CAAA,QAAA,EAAA,QAAA,EAAqB,CAArB,QAAA,EAAA,QAAA,EAAA,IAAA,EAAJA,GAAI,CAAJA;AACAiB,cAAAA,CAAAA,GAAI,KAAA,CAAA,IAAA,CAAA,0BAAA,CAAgC,CAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAhC,SAAgC,CAAhC,EAFW,CAEX,CAAJA;AAFF,aAAA,MAGO;AACLA,cAAAA,CAAAA,GAAI,CAAA,IAAA,EAAA,GAAA,EAAYmoB,IAAAA,GAAZ,QAAA,EAA6BC,GAAAA,GAAjCpoB,SAAI,CAAJA;AAhByD;;AAmB3DyD,YAAAA,IAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAkB;AAChB0kB,cAAAA,IAAAA,EAAMnoB,CAAAA,CADU,CACVA,CADU;AAEhBooB,cAAAA,GAAAA,EAAKpoB,CAAAA,CAFW,CAEXA,CAFW;AAGhBghC,cAAAA,KAAAA,EAAOhhC,CAAAA,CAHS,CAGTA,CAHS;AAIhBihC,cAAAA,MAAAA,EAAQjhC,CAAAA,CAJQ,CAIRA,CAJQ;AAKhBoW,cAAAA,GAAAA,EALgB,OAAA;AAMhB7J,cAAAA,IAAAA,EAAM,CAAA,QAAA,EANU,SAMV,CANU;AAAA,cAAA;AAAA,aAAlB9I;AApHyC;AArH7C;;AAqPA,iBAAA,MAAA,CAAA,IAAA,EAAsB;AACpB,cAAIA,IAAAA,CAAJ,SAAA,EAAoB;AAAA;AADA;;AAIpB,gBAAMy9B,QAAAA,GAAWz9B,IAAAA,CAJG,SAIpB;AACA,gBAAMjC,UAAAA,GAAaiC,IAAAA,CALC,WAKpB;AACA,gBAAM09B,cAAAA,GAAiBD,QAAAA,CANH,MAMpB;;AAIA,cAAIC,cAAAA,GAAJ,uBAAA,EAA8C;AAC5C19B,YAAAA,IAAAA,CAAAA,cAAAA,GAD4C,IAC5CA;AACAjC,YAAAA,UAAAA,CAF4C,OAE5CA;AAF4C;AAV1B;;AAgBpB,cAAI,CAACiC,IAAAA,CAAL,kBAAA,EAA8B;AAC5B,iBAAK,IAAI5b,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,cAAA,EAAoCA,CAApC,EAAA,EAAyC;AACvC4b,cAAAA,IAAAA,CAAAA,WAAAA,CAAiBy9B,QAAAA,CADsB,CACtBA,CAAjBz9B;AAF0B;AAhBV;;AAsBpBA,UAAAA,IAAAA,CAAAA,cAAAA,GAtBoB,IAsBpBA;AACAjC,UAAAA,UAAAA,CAvBoB,OAuBpBA;AA5QF;;AA+QA,iBAAA,eAAA,CAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAA4C;AAC1C,cAAIb,MAAAA,GADsC,CAC1C;;AACA,eAAK,IAAI9Y,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC9B,kBAAMu5C,CAAAA,GAAIC,EAAAA,CAAGlsB,MADiB,EACpBksB,CAAV;;AACA,gBAAID,CAAAA,GAAJ,CAAA,EAAW;AACTzgC,cAAAA,MAAAA,GAASA,MAAAA,GAASxa,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAATwa,MAASxa,CAATwa,GADA,CACTA;AAH4B;AAFU;;AAQ1C,iBAR0C,MAQ1C;AAvRF;;AA0RA,iBAAA,MAAA,CAAA,IAAA,EAAsB;AACpB,gBAAMsmB,MAAAA,GAASxjB,IAAAA,CADK,OACpB;AACA,gBAAMgb,QAAAA,GAAWhb,IAAAA,CAFG,SAEpB;AAEA,gBAAM69B,QAAAA,GAAWC,YAAAA,CAAa9iB,QAAAA,CAAb8iB,KAAAA,EAA6B9iB,QAAAA,CAA7B8iB,MAAAA,EAJG,MAIHA,CAAjB;;AACA,eAAK,IAAI15C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIy5C,QAAAA,CAApB,MAAA,EAAqCz5C,CAArC,EAAA,EAA0C;AACxC,kBAAMuuB,GAAAA,GAAM6Q,MAAAA,CAAAA,CAAAA,CAAAA,CAD4B,GACxC;;AACA,kBAAMua,aAAAA,GAAgB/9B,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAFkB,GAElBA,CAAtB;;AACA,gBAAI+9B,aAAAA,CAAAA,KAAAA,KAAJ,CAAA,EAA+B;AAC7BA,cAAAA,aAAAA,CAAAA,WAAAA,GAA4Bva,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,GAAiBqa,QAAAA,CAAAA,CAAAA,CAAAA,CADhB,IAC7BE;AACAA,cAAAA,aAAAA,CAAAA,UAAAA,GAA2Bva,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAgBqa,QAAAA,CAAAA,CAAAA,CAAAA,CAFd,GAE7BE;AACAA,cAAAA,aAAAA,CAAAA,YAAAA,GAA6BF,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAoBra,MAAAA,CAAAA,CAAAA,CAAAA,CAHpB,KAG7Bua;AACAA,cAAAA,aAAAA,CAAAA,aAAAA,GAA8BF,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAqBra,MAAAA,CAAAA,CAAAA,CAAAA,CAJtB,MAI7Bua;;AACA/9B,cAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAL6B,aAK7BA;;AAL6B;AAHS;;AAaxC,kBAAMg+B,CAAAA,GAAIH,QAAAA,CAAV,CAAUA,CAAV;AAAA,kBACEthC,CAAAA,GAAIinB,MAAAA,CAdkC,CAclCA,CADN;AAEA,kBAAMloB,CAAAA,GAAIiB,CAAAA,CAAV,CAAA;AAAA,kBACEC,CAAAA,GAAIlB,CAAAA,CADN,CACMA,CADN;AAAA,kBAEEsW,CAAAA,GAAItW,CAAAA,CAjBkC,CAiBlCA,CAFN;AAIA,kBAAMya,MAAAA,GAAS,CAAC,CAAA,CAAA,EAAD,CAAC,CAAD,EAAS,CAAA,CAAA,EAAIxZ,CAAAA,CAAAA,IAAAA,CAAb,CAAaA,CAAJ,CAAT,EAAyB,CAACA,CAAAA,CAAAA,IAAAA,CAAD,CAACA,CAAD,EAAzB,CAAyB,CAAzB,EAAyCA,CAAAA,CAAxD,IAAe,CAAf;AACA,kBAAMqhC,EAAAA,GAAK,IAAA,YAAA,CApB6B,EAoB7B,CAAX;;AACA,iBAAK,IAAIvnB,CAAAA,GAAJ,CAAA,EAAW4nB,EAAAA,GAAKloB,MAAAA,CAArB,MAAA,EAAoCM,CAAAA,GAApC,EAAA,EAA4CA,CAA5C,EAAA,EAAiD;AAC/C,oBAAMsnB,CAAAA,GAAI/hC,KAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAoBma,MAAAA,CAApBna,CAAoBma,CAApBna,EADqC,CACrCA,CAAV;;AACAgiC,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,CAAAA,CAAAA,GAAYphC,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAASmhC,CAAAA,CAAV,CAAUA,CAAT,IAF6B,CAE/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,CAAAA,CAAAA,GAAYhsB,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQ+rB,CAAAA,CAAT,CAASA,CAAR,IAH6B,CAG/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,CAAAA,CAAAA,GAAYphC,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAUmhC,CAAAA,CAAX,CAAWA,CAAV,IAJ6B,CAI/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAW+rB,CAAAA,CAAZ,CAAYA,CAAX,IAL4B,CAK/CC;AAEAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAAS+rB,CAAAA,CAAV,CAAUA,CAAT,IAAiB,CAPW,CAO/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAaphC,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQmhC,CAAAA,CAAT,CAASA,CAAR,IAR4B,CAQ/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAU+rB,CAAAA,CAAX,CAAWA,CAAV,IAAkB,CATU,CAS/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAaphC,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAWmhC,CAAAA,CAAZ,CAAYA,CAAX,IAV4B,CAU/CC;AAEAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAaphC,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAASmhC,CAAAA,CAAV,CAAUA,CAAT,IAAiB,CAZW,CAY/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQ+rB,CAAAA,CAAT,CAASA,CAAR,IAAgB,CAbY,CAa/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAaphC,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAUmhC,CAAAA,CAAX,CAAWA,CAAV,IAAkB,CAdU,CAc/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAW+rB,CAAAA,CAAZ,CAAYA,CAAX,IAAmB,CAfS,CAe/CC;AAEAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAAS+rB,CAAAA,CAAV,CAAUA,CAAT,IAjB4B,CAiB/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAaphC,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQmhC,CAAAA,CAAT,CAASA,CAAR,IAAgB,CAlBY,CAkB/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAahsB,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAU+rB,CAAAA,CAAX,CAAWA,CAAV,IAnB4B,CAmB/CC;AACAA,cAAAA,EAAAA,CAAGvnB,CAAAA,GAAHunB,EAAAA,CAAAA,GAAaphC,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAWmhC,CAAAA,CAAZ,CAAYA,CAAX,IAAmB,CApBS,CAoB/CC;AAzCsC;;AA6CxC,kBAAMM,QAAAA,GAAW,IAAIx7C,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,GAAAA,CAATA,CAASA,CAATA,EAAsBA,IAAAA,CAAAA,GAAAA,CA7CH,CA6CGA,CAAtBA,CAArB;AACAq7C,YAAAA,aAAAA,CAAAA,WAAAA,GAA4BI,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GA9CY,QA8CxCJ;AACAA,YAAAA,aAAAA,CAAAA,UAAAA,GAA2BI,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GA/Ca,QA+CxCJ;AACAA,YAAAA,aAAAA,CAAAA,YAAAA,GAA6BI,eAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAhDW,QAgDxCJ;AACAA,YAAAA,aAAAA,CAAAA,aAAAA,GAA8BI,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GAjDU,QAiDxCJ;;AACA/9B,YAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAlDwC,aAkDxCA;AAvDkB;AA1RtB;;AAqVA,iBAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAA4C;AAC1C,gBAAMwjB,MAAAA,GAAS,KAAA,CAAA,GAAA,CAAU,UAAA,GAAA,EAAA,CAAA,EAAkB;AACzC,mBAAO;AACLJ,cAAAA,EAAAA,EAAIgb,GAAAA,CADC,IAAA;AAEL/a,cAAAA,EAAAA,EAAI+a,GAAAA,CAFC,GAAA;AAGL/X,cAAAA,EAAAA,EAAI+X,GAAAA,CAHC,KAAA;AAIL9X,cAAAA,EAAAA,EAAI8X,GAAAA,CAJC,MAAA;AAKL/L,cAAAA,KAAAA,EALK,CAAA;AAMLgM,cAAAA,KAAAA,EANK,SAAA;AAOLC,cAAAA,KAAAA,EAPK;AAAA,aAAP;AADF,WAAe,CAAf;AAWAC,UAAAA,eAAAA,CAAAA,KAAAA,EAZ0C,MAY1CA,CAAAA;AAEA,gBAAMV,QAAAA,GAAW,IAAA,KAAA,CAAUW,KAAAA,CAde,MAczB,CAAjB;;AACA,eAAA,MAAA,CAAA,IAAA,MAAA,EAAwB;AACtB,kBAAMp6C,CAAAA,GAAImY,CAAAA,CADY,KACtB;AACAshC,YAAAA,QAAAA,CAAAA,CAAAA,CAAAA,GAAc;AACZnZ,cAAAA,IAAAA,EAAMnoB,CAAAA,CADM,KAAA;AAEZooB,cAAAA,GAAAA,EAFY,CAAA;AAGZ4Y,cAAAA,KAAAA,EAAOhhC,CAAAA,CAHK,KAAA;AAIZihC,cAAAA,MAAAA,EAJY;AAAA,aAAdK;AAjBwC;;AA2B1CW,UAAAA,KAAAA,CAAAA,GAAAA,CAAU,UAAA,GAAA,EAAA,CAAA,EAAkB;AAC1B,kBAAMR,CAAAA,GAAIH,QAAAA,CAAV,CAAUA,CAAV;AAAA,kBACEthC,CAAAA,GAAIinB,MAAAA,CAFoB,CAEpBA,CADN;AAEAjnB,YAAAA,CAAAA,CAAAA,EAAAA,GAAO6hC,GAAAA,CAHmB,GAG1B7hC;AACAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAO3Z,KAAAA,GAAQo7C,CAAAA,CAJW,KAI1BzhC;AACAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAO6hC,GAAAA,CALmB,MAK1B7hC;AACAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAO3Z,KAAAA,GAAQo7C,CAAAA,CANW,IAM1BzhC;AACAA,YAAAA,CAAAA,CAAAA,KAAAA,GAP0B,CAO1BA;AACAA,YAAAA,CAAAA,CAAAA,KAAAA,GAR0B,SAQ1BA;AACAA,YAAAA,CAAAA,CAAAA,KAAAA,GAT0B,SAS1BA;AATFiiC,WAAAA;AAWAD,UAAAA,eAAAA,CAAAA,MAAAA,EAtC0C,MAsC1CA,CAAAA;;AAEA,eAAA,MAAA,CAAA,IAAA,MAAA,EAAwB;AACtB,kBAAMn6C,CAAAA,GAAImY,CAAAA,CADY,KACtB;AACAshC,YAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAkBthC,CAAAA,CAFI,KAEtBshC;AACAA,YAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAqBthC,CAAAA,CAHC,KAGtBshC;AA3CwC;;AA6C1C,iBA7C0C,QA6C1C;AAlYF;;AAqYA,iBAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAwC;AAEtCra,UAAAA,MAAAA,CAAAA,IAAAA,CAAY,UAAA,CAAA,EAAA,CAAA,EAAgB;AAC1B,mBAAOlnB,CAAAA,CAAAA,EAAAA,GAAOC,CAAAA,CAAPD,EAAAA,IAAeA,CAAAA,CAAAA,KAAAA,GAAUC,CAAAA,CADN,KAC1B;AADFinB,WAAAA;AAKA,gBAAMib,YAAAA,GAAe;AACnBrb,YAAAA,EAAAA,EAAI,CADe,QAAA;AAEnBC,YAAAA,EAAAA,EAAI,CAFe,QAAA;AAGnBgD,YAAAA,EAAAA,EAHmB,CAAA;AAInBC,YAAAA,EAAAA,EAJmB,QAAA;AAKnB+L,YAAAA,KAAAA,EAAO,CALY,CAAA;AAMnBgM,YAAAA,KAAAA,EANmB,CAAA;AAOnBC,YAAAA,KAAAA,EAPmB;AAAA,WAArB;AASA,gBAAMI,OAAAA,GAAU,CACd;AACEr5C,YAAAA,KAAAA,EAAO,CADT,QAAA;AAEEd,YAAAA,GAAAA,EAFF,QAAA;AAGEo6C,YAAAA,QAAAA,EAHF;AAAA,WADc,CAAhB;;AAQA,eAAA,MAAA,QAAA,IAAA,MAAA,EAA+B;AAG7B,gBAAIv6C,CAAAA,GAHyB,CAG7B;;AACA,mBAAOA,CAAAA,GAAIs6C,OAAAA,CAAJt6C,MAAAA,IAAsBs6C,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,IAAkBC,QAAAA,CAA/C,EAAA,EAA4D;AAC1Dv6C,cAAAA,CAD0D;AAJ/B;;AAO7B,gBAAIiyB,CAAAA,GAAIqoB,OAAAA,CAAAA,MAAAA,GAPqB,CAO7B;;AACA,mBAAOroB,CAAAA,IAAAA,CAAAA,IAAUqoB,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAoBC,QAAAA,CAArC,EAAA,EAAkD;AAChDtoB,cAAAA,CADgD;AARrB;;AAY7B,gBAAA,WAAA,EAZ6B,gBAY7B;AACA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAEEuoB,OAAAA,GAAU,CAfiB,QAa7B;;AAGA,iBAAKxW,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvByW,cAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,cAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;AACA,kBAHuB,IAGvB;;AACA,kBAAIA,gBAAAA,CAAAA,EAAAA,GAAsBH,QAAAA,CAA1B,EAAA,EAAuC;AAIrCI,gBAAAA,IAAAA,GACED,gBAAAA,CAAAA,KAAAA,GAAyBH,QAAAA,CAAzBG,KAAAA,GACIA,gBAAAA,CADJA,KAAAA,GAEIH,QAAAA,CAP+B,EAIrCI;AAJF,eAAA,MAQO,IAAID,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AAG/CC,gBAAAA,IAAAA,GAAQ,CAAA,gBAAA,CAAA,EAAA,GAAsBJ,QAAAA,CAAvB,EAAC,IAHuC,CAG/CI;AAHK,eAAA,MAIA;AAELA,gBAAAA,IAAAA,GAAOD,gBAAAA,CAFF,KAELC;AAlBqB;;AAoBvB,kBAAIA,IAAAA,GAAJ,OAAA,EAAoB;AAClBH,gBAAAA,OAAAA,GADkB,IAClBA;AArBqB;AAhBI;;AA0C7BD,YAAAA,QAAAA,CAAAA,KAAAA,GA1C6B,OA0C7BA;;AAGA,iBAAKvW,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvByW,cAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,cAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;;AACA,kBAAIA,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AAExC,oBAAIA,gBAAAA,CAAAA,EAAAA,GAAsBH,QAAAA,CAA1B,EAAA,EAAuC;AAGrC,sBAAIG,gBAAAA,CAAAA,KAAAA,GAAyBH,QAAAA,CAA7B,KAAA,EAA6C;AAC3CG,oBAAAA,gBAAAA,CAAAA,KAAAA,GAAyBA,gBAAAA,CADkB,EAC3CA;AAJmC;AAAvC,iBAAA,MAMO;AACLA,kBAAAA,gBAAAA,CAAAA,KAAAA,GADK,OACLA;AATsC;AAA1C,eAAA,MAWO,IAAIA,gBAAAA,CAAAA,KAAAA,GAAJ,OAAA,EAAsC;AAE3CA,gBAAAA,gBAAAA,CAAAA,KAAAA,GAAyBp8C,IAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAAkBo8C,gBAAAA,CAFA,EAElBp8C,CAAzBo8C;AAhBqB;AA7CI;;AAkE7B,kBAAME,cAAAA,GAlEuB,EAkE7B;AACA,gBAAIC,YAAAA,GAnEyB,IAmE7B;;AACA,iBAAK7W,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvByW,cAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,cAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;AAEA,oBAAMI,WAAAA,GACJJ,gBAAAA,CAAAA,EAAAA,GAAsBH,QAAAA,CAAtBG,EAAAA,GAAAA,gBAAAA,GALqB,QAIvB;;AAEA,kBAAIG,YAAAA,KAAJ,WAAA,EAAkC;AAEhCD,gBAAAA,cAAAA,CAAeA,cAAAA,CAAAA,MAAAA,GAAfA,CAAAA,CAAAA,CAAAA,GAAAA,GAAgDH,WAAAA,CAFhB,GAEhCG;AAFF,eAAA,MAGO;AACLA,gBAAAA,cAAAA,CAAAA,IAAAA,CAAoB;AAClB35C,kBAAAA,KAAAA,EAAOw5C,WAAAA,CADW,KAAA;AAElBt6C,kBAAAA,GAAAA,EAAKs6C,WAAAA,CAFa,GAAA;AAGlBF,kBAAAA,QAAAA,EAHkB;AAAA,iBAApBK;AAKAC,gBAAAA,YAAAA,GANK,WAMLA;AAfqB;AApEI;;AAsF7B,gBAAIP,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAmBC,QAAAA,CAAvB,EAAA,EAAoC;AAClCK,cAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAA0BL,QAAAA,CADQ,EAClCK;AACAA,cAAAA,cAAAA,CAAAA,OAAAA,CAAuB;AACrB35C,gBAAAA,KAAAA,EAAOq5C,OAAAA,CAAAA,CAAAA,CAAAA,CADc,KAAA;AAErBn6C,gBAAAA,GAAAA,EAAKo6C,QAAAA,CAFgB,EAAA;AAGrBA,gBAAAA,QAAAA,EAAUD,OAAAA,CAAAA,CAAAA,CAAAA,CAHW;AAAA,eAAvBM;AAxF2B;;AA8F7B,gBAAIL,QAAAA,CAAAA,EAAAA,GAAcD,OAAAA,CAAAA,CAAAA,CAAAA,CAAlB,GAAA,EAAkC;AAChCM,cAAAA,cAAAA,CAAeA,cAAAA,CAAAA,MAAAA,GAAfA,CAAAA,CAAAA,CAAAA,GAAAA,GAAgDL,QAAAA,CADhB,EAChCK;AACAA,cAAAA,cAAAA,CAAAA,IAAAA,CAAoB;AAClB35C,gBAAAA,KAAAA,EAAOs5C,QAAAA,CADW,EAAA;AAElBp6C,gBAAAA,GAAAA,EAAKm6C,OAAAA,CAAAA,CAAAA,CAAAA,CAFa,GAAA;AAGlBC,gBAAAA,QAAAA,EAAUD,OAAAA,CAAAA,CAAAA,CAAAA,CAHQ;AAAA,eAApBM;AAhG2B;;AA0G7B,iBAAK5W,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvByW,cAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,cAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;;AACA,kBAAIA,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AAAA;AAHnB;;AAMvB,kBAAIK,IAAAA,GANmB,KAMvB;;AACA,mBACEpoB,CAAAA,GAAI3yB,CAAAA,GADN,CAAA,EAEE,CAAA,IAAA,IAAS2yB,CAAAA,IAAT,CAAA,IAAmB2nB,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAoBI,gBAAAA,CAFzC,EAAA,EAGE/nB,CAHF,EAAA,EAIE;AACAooB,gBAAAA,IAAAA,GAAOT,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,KADP,gBACAS;AAZqB;;AAcvB,mBACEpoB,CAAAA,GAAIV,CAAAA,GADN,CAAA,EAEE,CAAA,IAAA,IAASU,CAAAA,GAAI2nB,OAAAA,CAAb,MAAA,IAA+BA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,IAAkBI,gBAAAA,CAFnD,EAAA,EAGE/nB,CAHF,EAAA,EAIE;AACAooB,gBAAAA,IAAAA,GAAOT,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,KADP,gBACAS;AAnBqB;;AAqBvB,mBAAKpoB,CAAAA,GAAL,CAAA,EAAY,CAAA,IAAA,IAASA,CAAAA,GAAIioB,cAAAA,CAAzB,MAAA,EAAgDjoB,CAAhD,EAAA,EAAqD;AACnDooB,gBAAAA,IAAAA,GAAOH,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,KAD4C,gBACnDG;AAtBqB;;AAwBvB,kBAAI,CAAJ,IAAA,EAAW;AACTL,gBAAAA,gBAAAA,CAAAA,KAAAA,GADS,OACTA;AAzBqB;AA1GI;;AAuI7BhkC,YAAAA,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,OAAAA,EAEE,CAAA,CAAA,EAAIub,CAAAA,GAAAA,CAAAA,GAAJ,CAAA,EAAA,MAAA,CAzI2B,cAyI3B,CAFFvb;AA/JoC;;AAsKtC,eAAA,MAAA,WAAA,IAAA,OAAA,EAAmC;AACjC,kBAAMgkC,gBAAAA,GAAmBD,WAAAA,CADQ,QACjC;;AACA,gBAAIC,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AACxCA,cAAAA,gBAAAA,CAAAA,KAAAA,GAAyBp8C,IAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAAgBo8C,gBAAAA,CADD,EACfp8C,CAAzBo8C;AAH+B;AAtKG;AArYxC;;AAmjBA,cAAA,mBAAA,CAA0B;AACxBp+C,UAAAA,WAAAA,SAQG;AAAA,gBARS;AAAA,cAAA,WAAA;AAAA,cAAA,iBAAA;AAAA,cAAA,SAAA;AAAA,cAAA,QAAA;AAAA,cAAA,QAAA;AAAA,cAAA,mBAAA;AAAZA,cAAAA;AAAY,aAQT;AACD,iBAAA,YAAA,GADC,WACD;AACA,iBAAA,kBAAA,GAFC,iBAED;AACA,iBAAA,UAAA,GAHC,SAGD;AACA,iBAAA,SAAA,GAAiB4vC,SAAAA,CAJhB,aAID;AACA,iBAAA,SAAA,GALC,QAKD;AACA,iBAAA,SAAA,GAAiBmN,QAAAA,IANhB,EAMD;AACA,iBAAA,oBAAA,GAA4B2B,mBAAAA,IAP3B,EAOD;AACA,iBAAA,qBAAA,GAA6B,CAAC,CAR7B,oBAQD;AACA,iBAAA,qBAAA,GAA6B,CAAC,CAACx+C,UAAAA,CAAAA,aAAAA,EAT9B,OASD;AAEA,iBAAA,OAAA,GAXC,IAWD;AACA,iBAAA,uBAAA,GAZC,IAYD;AACA,iBAAA,yBAAA,GAbC,IAaD;AACA,iBAAA,cAAA,GAdC,IAcD;AACA,iBAAA,kBAAA,GAA0B,IAfzB,OAeyB,EAA1B;AACA,iBAAA,cAAA,GAhBC,KAgBD;AACA,iBAAA,SAAA,GAjBC,KAiBD;AACA,iBAAA,WAAA,GAlBC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAkBD;AACA,iBAAA,YAAA,GAnBC,IAmBD;AACA,iBAAA,OAAA,GApBC,EAoBD;;AAGA,iBAAA,WAAA,CAAA,OAAA,CAAA,OAAA,CACW,MAAM;AACb,kBAAI,CAAC,KAAL,qBAAA,EAAiC;AAE/B,qBAAA,kBAAA,GAF+B,IAE/B;AAHW;;AAMb,kBAAI,KAAJ,cAAA,EAAyB;AAGvB,qBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAHuB,CAGvB;AACA,qBAAA,cAAA,CAAA,MAAA,CAAA,MAAA,GAJuB,CAIvB;AACA,qBAAA,cAAA,GALuB,IAKvB;AAXW;AADjB,aAAA,EAAA,KAAA,CAeS,MAtCR,CAuBD,CAAA;AAhCsB;;AAwDxB,cAAIoiB,OAAJ,GAAc;AACZ,mBAAO,KAAA,WAAA,CADK,OACZ;AAzDsB;;AA+DxBuM,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,GADO,IACP;;AACA,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,MAAA,CACU,IAAA,KAAA,CAAA,cAAA,CADV,2BACU,CADV,EAAA,KAAA,CAES,MAHO,CAChB,CAAA;;AAKA,mBAAA,OAAA,GANgB,IAMhB;AARK;;AAUP,gBAAI,KAAA,YAAA,KAAJ,IAAA,EAAgC;AAC9BnI,cAAAA,YAAAA,CAAa,KADiB,YAC9BA,CAAAA;AACA,mBAAA,YAAA,GAF8B,IAE9B;AAZK;;AAcP,iBAAA,WAAA,CAAA,MAAA,CAAwB,IAAA,KAAA,CAdjB,2BAciB,CAAxB;AA7EsB;;AAmFxBi4B,UAAAA,aAAAA,CAAAA,KAAAA,EAAAA,UAAAA,EAAiC;AAC/B,iBAAK,IAAIj7C,CAAAA,GAAJ,CAAA,EAAWk7C,GAAAA,GAAMh2B,KAAAA,CAAtB,MAAA,EAAoCllB,CAAAA,GAApC,GAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,kBAAIklB,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAJ,SAAA,EAAgC;AAC9B,oBACEA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,yBAAAA,IACAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAFF,oBAAA,EAGE;AACA,wBAAMi2B,MAAAA,GAAS,KADf,UACA;AACA,uBAAA,UAAA,GAAkBt+C,QAAAA,CAAAA,aAAAA,CAFlB,MAEkBA,CAAlB;;AACA,uBAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAHA,eAGA;;AACA,sBAAIqoB,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,KAAJ,IAAA,EAA0B;AACxB,yBAAA,UAAA,CAAA,YAAA,CAAA,IAAA,EAAmC,GAAGA,KAAAA,CAAAA,CAAAA,CAAAA,CADd,EAAA,EACxB;AALF;;AAOAi2B,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB,KAPnB,UAOAA;AAVF,iBAAA,MAWO,IAAIj2B,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAJ,kBAAA,EAA0C;AAC/C,uBAAA,UAAA,GAAkB,KAAA,UAAA,CAD6B,UAC/C;AAb4B;;AAAA;AADgB;;AAkBhD,mBAAA,oBAAA,CAAA,IAAA,CAA+BA,KAAAA,CAAAA,CAAAA,CAAAA,CAlBiB,GAkBhD;;AACAk2B,cAAAA,UAAAA,CAAAA,IAAAA,EAAiBl2B,KAAAA,CAAjBk2B,CAAiBl2B,CAAjBk2B,EAAAA,UAAAA,EAAuC,KAnBS,cAmBhDA,CAAAA;AApB6B;AAnFT;;AA8GxBC,UAAAA,WAAAA,CAAAA,OAAAA,EAAqB;AACnB,kBAAMxD,iBAAAA,GAAoB,KAAA,kBAAA,CAAA,GAAA,CADP,OACO,CAA1B;;AAEA,gBAAInqC,SAAAA,GAHe,EAGnB;;AACA,gBAAImqC,iBAAAA,CAAAA,WAAAA,KAAAA,CAAAA,IAAuCA,iBAAAA,CAA3C,OAAA,EAAsE;AACpE,oBAAM;AAAA,gBAAA,QAAA;AAAA,gBAAA;AAAA,kBAA2BD,OAAAA,CADmC,KACpE;;AAGA,kBACExc,QAAAA,KAAa,KAAbA,uBAAAA,IACAkgB,UAAAA,KAAe,KAFjB,yBAAA,EAGE;AACA,qBAAA,cAAA,CAAA,IAAA,GAA2B,GAAA,QAAA,IAD3B,UAAA,EACA;AACA,qBAAA,uBAAA,GAFA,QAEA;AACA,qBAAA,yBAAA,GAHA,UAGA;AAVkE;;AAapE,oBAAM;AAAA,gBAAA;AAAA,kBAAY,KAAA,cAAA,CAAA,WAAA,CAAgC1D,OAAAA,CAbkB,WAalD,CAAlB;;AAEA,kBAAIp5C,KAAAA,GAAJ,CAAA,EAAe;AACb,sBAAMG,KAAAA,GAAQk5C,iBAAAA,CAAAA,WAAAA,GADD,KACb;;AACA,oBAAI,KAAJ,qBAAA,EAAgC;AAC9BA,kBAAAA,iBAAAA,CAAAA,KAAAA,GAD8B,KAC9BA;AAHW;;AAKbnqC,gBAAAA,SAAAA,GAAY,UALC,KAAA,GAKbA;AApBkE;AAJnD;;AA2BnB,gBAAImqC,iBAAAA,CAAAA,KAAAA,KAAJ,CAAA,EAAmC;AACjCnqC,cAAAA,SAAAA,GAAY,UAAUmqC,iBAAAA,CAAV,KAAA,QADqB,SAAA,EACjCnqC;AA5BiB;;AA8BnB,gBAAIA,SAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAA0B;AACxB,kBAAI,KAAJ,qBAAA,EAAgC;AAC9BmqC,gBAAAA,iBAAAA,CAAAA,iBAAAA,GAD8B,SAC9BA;AAFsB;;AAIxBD,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAJwB,SAIxBA;AAlCiB;;AAqCnB,gBAAIC,iBAAAA,CAAJ,OAAA,EAA+B;AAC7B,mBAAA,UAAA,CAAA,WAAA,CAD6B,OAC7B;AAtCiB;;AAwCnB,gBAAIA,iBAAAA,CAAJ,MAAA,EAA8B;AAC5B,oBAAMlZ,EAAAA,GAAK9hC,QAAAA,CAAAA,aAAAA,CADiB,IACjBA,CAAX;AACA8hC,cAAAA,EAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAF4B,cAE5BA;;AACA,mBAAA,UAAA,CAAA,WAAA,CAH4B,EAG5B;AA3CiB;AA9GG;;AAgKxB4c,UAAAA,OAAAA,GAAqB;AAAA,gBAAbC,OAAa,uEAArBD,CAAqB;AACnB,kBAAM5hC,UAAAA,GADa,CAAA,GAAA,KAAA,CAAA,uBAAA,GACnB;AACA,gBAAI8hC,UAAAA,GAAa76C,MAAAA,CAAAA,MAAAA,CAFE,IAEFA,CAAjB;;AAGA,kBAAMlE,MAAAA,GAAS,KAAA,SAAA,CAAA,aAAA,CALI,QAKJ,CAAf;;AACAA,YAAAA,MAAAA,CAAAA,MAAAA,GAAgBA,MAAAA,CAAAA,KAAAA,GANG,iBAMnBA;AAMEA,YAAAA,MAAAA,CAAAA,SAAAA,GAZiB,IAYjBA;AAEF,iBAAA,cAAA,GAAsBA,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EAAwB;AAAEo4B,cAAAA,KAAAA,EAd7B;AAc2B,aAAxBp4B,CAAtB;;AAEA,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAMg/C,SAAAA,GAAY,KAAA,YAAA,CADG,KACrB;AACA,oBAAMC,UAAAA,GAAa,KAAA,YAAA,CAFE,MAErB;;AACA,mBAAA,aAAA,CAAA,SAAA,EAHqB,UAGrB;;AACAhiC,cAAAA,UAAAA,CAJqB,OAIrBA;AAJF,aAAA,MAKO,IAAI,KAAJ,kBAAA,EAA6B;AAClC,oBAAMsL,IAAAA,GAAO,MAAM;AACjB,qBAAA,OAAA,CAAA,IAAA,GAAA,IAAA,CAAyB,UAAqB;AAAA,sBAApB;AAAA,oBAAA,KAAA;AAAD,oBAAA;AAAC,mBAAoB;;AAC5C,sBAAA,IAAA,EAAU;AACRtL,oBAAAA,UAAAA,CADQ,OACRA;AADQ;AADkC;;AAM5C/Y,kBAAAA,MAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAA0BqV,KAAAA,CANkB,MAM5CrV;;AACA,uBAAA,aAAA,CAAmBqV,KAAAA,CAAnB,KAAA,EAP4C,UAO5C;;AACAgP,kBAAAA,IAR4C;AAA9C,iBAAA,EASGtL,UAAAA,CAVc,MACjB;AADF,eAAA;;AAaA,mBAAA,OAAA,GAAe,KAAA,kBAAA,CAdmB,SAcnB,EAAf;AACAsL,cAAAA,IAfkC;AAA7B,aAAA,MAgBA;AACL,oBAAM,IAAA,KAAA,CADD,qEACC,CAAN;AAtCiB;;AA2CnBtL,YAAAA,UAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAwB,MAAM;AAC5B8hC,cAAAA,UAAAA,GAD4B,IAC5BA;;AACA,kBAAI,CAAJ,OAAA,EAAc;AAEZj5B,gBAAAA,MAAAA,CAFY,IAEZA,CAAAA;AAFF,eAAA,MAGO;AAEL,qBAAA,YAAA,GAAoB,UAAA,CAAW,MAAM;AACnCA,kBAAAA,MAAAA,CADmC,IACnCA,CAAAA;AACA,uBAAA,YAAA,GAFmC,IAEnC;AAFkB,iBAAA,EAFf,OAEe,CAApB;AAP0B;AAA9B7I,aAAAA,EAYG,KAAA,WAAA,CAvDgB,MA2CnBA;AA3MsB;;AA6NxBiiC,UAAAA,cAAAA,GAAmC;AAAA,gBAApBC,UAAoB,uEAAnCD,KAAmC;;AACjC,gBAAI,CAAC,KAAD,qBAAA,IAA+B,CAAC,KAApC,cAAA,EAAyD;AAAA;AADxB;;AAIjC,gBAAI,KAAA,OAAA,KAAJ,IAAA,EAA2B;AACzBE,cAAAA,MAAAA,CADyB,IACzBA,CAAAA;AACA,mBAAA,OAAA,GAFyB,IAEzB;AAN+B;;AAQjC,kBAAMC,YAAAA,GAAN,EAAA;AAAA,kBACEC,UAAAA,GAT+B,EAQjC;;AAGA,iBAAK,IAAIh8C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK,KAAA,SAAA,CAArB,MAAA,EAA4CC,CAAAA,GAA5C,EAAA,EAAoDA,CAApD,EAAA,EAAyD;AACvD,oBAAMuuB,GAAAA,GAAM,KAAA,SAAA,CAD2C,CAC3C,CAAZ;;AACA,oBAAM0tB,QAAAA,GAAW,KAAA,kBAAA,CAAA,GAAA,CAFsC,GAEtC,CAAjB;;AAEA,kBAAI,CAACA,QAAAA,CAAL,OAAA,EAAuB;AAAA;AAJgC;;AAOvD,kBAAA,UAAA,EAAgB;AACdF,gBAAAA,YAAAA,CAAAA,MAAAA,GADc,CACdA;AACAC,gBAAAA,UAAAA,CAAAA,MAAAA,GAFc,CAEdA;;AAEA,oBAAIC,QAAAA,CAAJ,iBAAA,EAAgC;AAC9BF,kBAAAA,YAAAA,CAAAA,IAAAA,CAAkBE,QAAAA,CADY,iBAC9BF;AALY;;AAOd,oBAAIE,QAAAA,CAAAA,UAAAA,GAAJ,CAAA,EAA6B;AAC3BD,kBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CADQ,UAAA,IAC3BD;AACAD,kBAAAA,YAAAA,CAAAA,IAAAA,CAAkB,cAAc,CAACE,QAAAA,CAFN,UAAA,KAE3BF;AAFF,iBAAA,MAGO;AACLC,kBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AAXY;;AAad,oBAAIC,QAAAA,CAAAA,YAAAA,GAAJ,CAAA,EAA+B;AAC7BD,kBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CAAAA,YAAAA,GAAwBA,QAAAA,CADd,KAAA,IAC7BD;AADF,iBAAA,MAEO;AACLA,kBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AAhBY;;AAkBd,oBAAIC,QAAAA,CAAAA,aAAAA,GAAJ,CAAA,EAAgC;AAC9BD,kBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CADW,aAAA,IAC9BD;AADF,iBAAA,MAEO;AACLA,kBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AArBY;;AAuBd,oBAAIC,QAAAA,CAAAA,WAAAA,GAAJ,CAAA,EAA8B;AAC5BD,kBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CAAAA,WAAAA,GAAuBA,QAAAA,CADd,KAAA,IAC5BD;AACAD,kBAAAA,YAAAA,CAAAA,IAAAA,CACE,cAAc,CAACE,QAAAA,CAAD,WAAA,GAAwBA,QAAAA,CAHZ,KAAA,KAE5BF;AAFF,iBAAA,MAKO;AACLC,kBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AA7BY;;AAgCdztB,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GAAoBytB,UAAAA,CAAAA,IAAAA,CAhCN,GAgCMA,CAApBztB;;AACA,oBAAIwtB,YAAAA,CAAJ,MAAA,EAAyB;AACvBxtB,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAAsBwtB,YAAAA,CAAAA,IAAAA,CADC,GACDA,CAAtBxtB;AAlCY;AAAhB,eAAA,MAoCO;AACLA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GADK,IACLA;AACAA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAAsB0tB,QAAAA,CAFjB,iBAEL1tB;AA7CqD;AAXxB;AA7NX;;AAAA;;AA+R1B,iBAAA,eAAA,CAAA,gBAAA,EAA2C;AACzC,gBAAM3S,IAAAA,GAAO,IAAA,mBAAA,CAAwB;AACnC+I,YAAAA,WAAAA,EAAau3B,gBAAAA,CADsB,WAAA;AAEnCC,YAAAA,iBAAAA,EAAmBD,gBAAAA,CAFgB,iBAAA;AAGnChQ,YAAAA,SAAAA,EAAWgQ,gBAAAA,CAHwB,SAAA;AAInCtlB,YAAAA,QAAAA,EAAUslB,gBAAAA,CAJyB,QAAA;AAKnC7C,YAAAA,QAAAA,EAAU6C,gBAAAA,CALyB,QAAA;AAMnClB,YAAAA,mBAAAA,EAAqBkB,gBAAAA,CANc,mBAAA;AAOnCE,YAAAA,oBAAAA,EAAsBF,gBAAAA,CAPa;AAAA,WAAxB,CAAb;;AASAtgC,UAAAA,IAAAA,CAAAA,OAAAA,CAAasgC,gBAAAA,CAV4B,OAUzCtgC;;AACA,iBAXyC,IAWzC;AA71BF;;;;;;;;;;;;;ACgBA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAhBA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAgCA,YAAIygC,WAAAA,GAAc,MAAM;AACtB//C,UAAAA,WAAAA,GAAc;AACZgY,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADY,8BACZA;AAFoB;;AAAA,SAAxB;;AASE;AACA,gBAAMgoC,YAAAA,GAAe;AACnBC,YAAAA,SAAAA,EADmB,QAAA;AAEnBC,YAAAA,UAAAA,EAFmB,QAAA;AAGnBpkB,YAAAA,SAAAA,EAHmB;AAAA,WAArB;AAKA,gBAAMqkB,MAAAA,GANN,sCAMA;AACA,gBAAMC,QAAAA,GAPN,8BAOA;AACA,gBAAMrmB,eAAAA,GAAkB,CAAA,MAAA,EAAA,OAAA,EAAxB,QAAwB,CAAxB;AACA,gBAAMC,gBAAAA,GAAmB,CAAA,OAAA,EAAA,OAAA,EAAzB,OAAyB,CAAzB;;AAEA,gBAAMqmB,mBAAAA,GAAuB,YAAY;AACvC,kBAAMC,UAAAA,GAAa,IAAA,UAAA,CAAe,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAlC,IAAkC,CAAf,CAAnB;AAGA,kBAAMC,kBAAAA,GAJiC,EAIvC;AAEA,kBAAMC,QAAAA,GAAW,IAAA,UAAA,CANsB,GAMtB,CAAjB;;AACA,iBAAK,IAAI98C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,GAAA,EAAyBA,CAAzB,EAAA,EAA8B;AAC5B,kBAAIoY,CAAAA,GADwB,CAC5B;;AACA,mBAAK,IAAI8nB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,CAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,oBAAI9nB,CAAAA,GAAJ,CAAA,EAAW;AACTA,kBAAAA,CAAAA,GAAI,aAAeA,CAAAA,IAAD,CAACA,GADV,UACTA;AADF,iBAAA,MAEO;AACLA,kBAAAA,CAAAA,GAAKA,CAAAA,IAAD,CAACA,GADA,UACLA;AAJwB;AAFA;;AAS5B0kC,cAAAA,QAAAA,CAAAA,CAAAA,CAAAA,GAT4B,CAS5BA;AAhBqC;;AAmBvC,qBAAA,KAAA,CAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAiC;AAC/B,kBAAIC,GAAAA,GAAM,CADqB,CAC/B;;AACA,mBAAK,IAAI/8C,CAAAA,GAAT,KAAA,EAAoBA,CAAAA,GAApB,GAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChC,sBAAMkY,CAAAA,GAAK,CAAA,GAAA,GAAM/a,IAAAA,CAAP,CAAOA,CAAN,IADqB,IAChC;AACA,sBAAMgb,CAAAA,GAAI2kC,QAAAA,CAFsB,CAEtBA,CAAV;AACAC,gBAAAA,GAAAA,GAAOA,GAAAA,KAAD,CAACA,GAHyB,CAGhCA;AAL6B;;AAO/B,qBAAOA,GAAAA,GAAM,CAPkB,CAO/B;AA1BqC;;AA6BvC,qBAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAiD;AAC/C,kBAAI9lC,CAAAA,GAD2C,MAC/C;AACA,oBAAMikC,GAAAA,GAAM8B,IAAAA,CAFmC,MAE/C;AAEA7/C,cAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAW+9C,GAAAA,IAAD,EAACA,GAJoC,IAI/C/9C;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAe+9C,GAAAA,IAAD,EAACA,GALgC,IAK/C/9C;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAe+9C,GAAAA,IAAD,CAACA,GANgC,IAM/C/9C;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAc+9C,GAAAA,GAPiC,IAO/C/9C;AACA8Z,cAAAA,CAAAA,IAR+C,CAQ/CA;AAEA9Z,cAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAU8c,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAVqC,IAU/C9c;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAc8c,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAXiC,IAW/C9c;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAc8c,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAZiC,IAY/C9c;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAc8c,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAbiC,IAa/C9c;AACA8Z,cAAAA,CAAAA,IAd+C,CAc/CA;AAEA9Z,cAAAA,IAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAhB+C,CAgB/CA;AACA8Z,cAAAA,CAAAA,IAAK+lC,IAAAA,CAjB0C,MAiB/C/lC;AAEA,oBAAM8lC,GAAAA,GAAME,KAAAA,CAAAA,IAAAA,EAAY3vB,MAAAA,GAAZ2vB,CAAAA,EAnBmC,CAmBnCA,CAAZ;AACA9/C,cAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAW4/C,GAAAA,IAAD,EAACA,GApBoC,IAoB/C5/C;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAe4/C,GAAAA,IAAD,EAACA,GArBgC,IAqB/C5/C;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAe4/C,GAAAA,IAAD,CAACA,GAtBgC,IAsB/C5/C;AACAA,cAAAA,IAAAA,CAAK8Z,CAAAA,GAAL9Z,CAAAA,CAAAA,GAAc4/C,GAAAA,GAvBiC,IAuB/C5/C;AApDqC;;AAuDvC,qBAAA,OAAA,CAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAmC;AACjC,kBAAI+a,CAAAA,GAD6B,CACjC;AACA,kBAAIC,CAAAA,GAF6B,CAEjC;;AACA,mBAAK,IAAInY,CAAAA,GAAT,KAAA,EAAoBA,CAAAA,GAApB,GAAA,EAA6B,EAA7B,CAAA,EAAkC;AAChCkY,gBAAAA,CAAAA,GAAK,CAAA,CAAA,IAAK,IAAA,CAAA,CAAA,CAAA,GAAN,IAAC,CAAA,IAD2B,KAChCA;AACAC,gBAAAA,CAAAA,GAAK,CAAA,CAAA,GAAD,CAAC,IAF2B,KAEhCA;AAL+B;;AAOjC,qBAAQA,CAAAA,IAAD,EAACA,GAPyB,CAOjC;AA9DqC;;AAuEvC,qBAAA,WAAA,CAAA,QAAA,EAA+B;AAC7B,kBAAI,CAAJ,QAAA,CAAA,QAAA,EAAe;AAIb,uBAAO+kC,uBAAAA,CAJM,QAINA,CAAP;AAL2B;;AAO7B,kBAAI;AAUF,oBAVE,KAUF;;AAEA,oBAAIl7C,QAAAA,CAAS2Y,OAAAA,CAAAA,QAAAA,CAAT3Y,IAAAA,CAAAA,IAAJ,CAAA,EAA0C;AACxCm7C,kBAAAA,KAAAA,GADwC,QACxCA;AADF,iBAAA,MAEO;AAELA,kBAAAA,KAAAA,GAAQC,MAAAA,CAAAA,IAAAA,CAFH,QAEGA,CAARD;AAhBA;;AAkBF,sBAAM7R,MAAAA,GAAS9b,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,WAAAA,CAAAA,KAAAA,EAAmD;AAChE6tB,kBAAAA,KAAAA,EAnBA;AAkBgE,iBAAnD7tB,CAAf;;AAGA,uBAAO8b,MAAAA,YAAAA,UAAAA,GAAAA,MAAAA,GAAwC,IAAA,UAAA,CArB7C,MAqB6C,CAA/C;AArBF,eAAA,CAsBE,OAAA,CAAA,EAAU;AACVhrC,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EACE,kEAFQ,CACVA;AA9B2B;;AAmC7B,qBAAO48C,uBAAAA,CAnCsB,QAmCtBA,CAAP;AA1GqC;;AA8GvC,qBAAA,uBAAA,CAAA,QAAA,EAA2C;AACzC,kBAAIhC,GAAAA,GAAMoC,QAAAA,CAD+B,MACzC;AACA,oBAAMC,cAAAA,GAFmC,MAEzC;AAEA,oBAAMC,aAAAA,GAAgBl/C,IAAAA,CAAAA,IAAAA,CAAU48C,GAAAA,GAJS,cAInB58C,CAAtB;AACA,oBAAMm/C,IAAAA,GAAO,IAAA,UAAA,CAAe,IAAA,GAAA,GAAUD,aAAAA,GAAV,CAAA,GALa,CAK5B,CAAb;AACA,kBAAIE,EAAAA,GANqC,CAMzC;AACAD,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAPyC,IAOzCA;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GARyC,IAQzCA;AAEA,kBAAI3nC,GAAAA,GAVqC,CAUzC;;AACA,qBAAOolC,GAAAA,GAAP,cAAA,EAA6B;AAE3BuC,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAF2B,IAE3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAH2B,IAG3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAJ2B,IAI3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAL2B,IAK3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAN2B,IAM3BA;AACAA,gBAAAA,IAAAA,CAAAA,GAAAA,CAASH,QAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAuBxnC,GAAAA,GAAhC2nC,cAASH,CAATG,EAP2B,EAO3BA;AACAC,gBAAAA,EAAAA,IAR2B,cAQ3BA;AACA5nC,gBAAAA,GAAAA,IAT2B,cAS3BA;AACAolC,gBAAAA,GAAAA,IAV2B,cAU3BA;AArBuC;;AAyBzCuC,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAzByC,IAyBzCA;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAavC,GAAAA,GA1B4B,IA0BzCuC;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcvC,GAAAA,IAAD,CAACA,GA3B2B,IA2BzCuC;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAa,CAAA,GAAA,GAAA,MAAA,GA5B4B,IA4BzCA;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAe,CAAA,CAAA,GAAA,GAAD,MAAC,KAAF,CAAE,GA7B0B,IA6BzCA;AACAA,cAAAA,IAAAA,CAAAA,GAAAA,CAASH,QAAAA,CAAAA,QAAAA,CAATG,GAASH,CAATG,EA9ByC,EA8BzCA;AACAC,cAAAA,EAAAA,IAAMJ,QAAAA,CAAAA,MAAAA,GA/BmC,GA+BzCI;AAEA,oBAAMC,KAAAA,GAAQC,OAAAA,CAAAA,QAAAA,EAAAA,CAAAA,EAAqBN,QAAAA,CAjCM,MAiC3BM,CAAd;AACAH,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcE,KAAAA,IAAD,EAACA,GAlC2B,IAkCzCF;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcE,KAAAA,IAAD,EAACA,GAnC2B,IAmCzCF;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcE,KAAAA,IAAD,CAACA,GApC2B,IAoCzCF;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAaE,KAAAA,GArC4B,IAqCzCF;AACA,qBAtCyC,IAsCzC;AApJqC;;AAuJvC,qBAAA,MAAA,CAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,MAAA,EAAwD;AACtD,oBAAMj/C,KAAAA,GAAQizB,OAAAA,CADwC,KACtD;AACA,oBAAMhzB,MAAAA,GAASgzB,OAAAA,CAFuC,MAEtD;AACA,kBAAA,QAAA,EAAA,SAAA,EAHsD,QAGtD;AACA,oBAAMrc,KAAAA,GAAQqc,OAAAA,CAJwC,IAItD;;AAEA,sBAAA,IAAA;AACE,qBAAK7sB,KAAAA,CAAAA,SAAAA,CAAL,cAAA;AACEi5C,kBAAAA,SAAAA,GADF,CACEA;AACAC,kBAAAA,QAAAA,GAFF,CAEEA;AACAlsB,kBAAAA,QAAAA,GAAYpzB,KAAAA,GAAD,CAACA,IAHd,CAGEozB;AAJJ;;AAME,qBAAKhtB,KAAAA,CAAAA,SAAAA,CAAL,SAAA;AACEi5C,kBAAAA,SAAAA,GADF,CACEA;AACAC,kBAAAA,QAAAA,GAFF,CAEEA;AACAlsB,kBAAAA,QAAAA,GAAWpzB,KAAAA,GAHb,CAGEozB;AATJ;;AAWE,qBAAKhtB,KAAAA,CAAAA,SAAAA,CAAL,UAAA;AACEi5C,kBAAAA,SAAAA,GADF,CACEA;AACAC,kBAAAA,QAAAA,GAFF,CAEEA;AACAlsB,kBAAAA,QAAAA,GAAWpzB,KAAAA,GAHb,CAGEozB;AAdJ;;AAgBE;AACE,wBAAM,IAAA,KAAA,CAjBV,gBAiBU,CAAN;AAjBJ;;AAqBA,oBAAM0rB,QAAAA,GAAW,IAAA,UAAA,CAAgB,CAAA,IAAD,QAAC,IA3BqB,MA2BrC,CAAjB;AACA,kBAAIS,cAAAA,GAAJ,CAAA;AAAA,kBACEC,WAAAA,GA7BoD,CA4BtD;;AAEA,mBAAK,IAAI1oB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/BgoB,gBAAAA,QAAAA,CAASS,cAATT,EAAAA,CAAAA,GAD+B,CAC/BA;AACAA,gBAAAA,QAAAA,CAAAA,GAAAA,CACEloC,KAAAA,CAAAA,QAAAA,CAAAA,WAAAA,EAA4B4oC,WAAAA,GAD9BV,QACEloC,CADFkoC,EAF+B,cAE/BA;AAIAU,gBAAAA,WAAAA,IAN+B,QAM/BA;AACAD,gBAAAA,cAAAA,IAP+B,QAO/BA;AArCoD;;AAwCtD,kBAAIE,IAAAA,KAASr5C,KAAAA,CAAAA,SAAAA,CAATq5C,cAAAA,IAAJ,MAAA,EAAiD;AAE/CF,gBAAAA,cAAAA,GAF+C,CAE/CA;;AACA,qBAAK,IAAIzoB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/ByoB,kBAAAA,cAD+B;;AAE/B,uBAAK,IAAI/9C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,QAAA,EAA8BA,CAA9B,EAAA,EAAmC;AACjCs9C,oBAAAA,QAAAA,CAASS,cAATT,EAAAA,CAAAA,IADiC,IACjCA;AAH6B;AAHc;AAxCK;;AAmDtD,oBAAMY,IAAAA,GAAO,IAAA,UAAA,CAAe,CACzB1/C,KAAAA,IAAD,EAACA,GADyB,IAAA,EAEzBA,KAAAA,IAAD,EAACA,GAFyB,IAAA,EAGzBA,KAAAA,IAAD,CAACA,GAHyB,IAAA,EAI1BA,KAAAA,GAJ0B,IAAA,EAKzBC,MAAAA,IAAD,EAACA,GALyB,IAAA,EAMzBA,MAAAA,IAAD,EAACA,GANyB,IAAA,EAOzBA,MAAAA,IAAD,CAACA,GAPyB,IAAA,EAQ1BA,MAAAA,GAR0B,IAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAA5B,IAA4B,CAAf,CAAb;AAeA,oBAAMg/C,IAAAA,GAAOU,WAAAA,CAlEyC,QAkEzCA,CAAb;AAGA,oBAAMC,SAAAA,GACJxB,UAAAA,CAAAA,MAAAA,GAAoBC,kBAAAA,GAApBD,CAAAA,GAA6CsB,IAAAA,CAA7CtB,MAAAA,GAA2Da,IAAAA,CAtEP,MAqEtD;AAEA,oBAAMtgD,IAAAA,GAAO,IAAA,UAAA,CAvEyC,SAuEzC,CAAb;AACA,kBAAImwB,MAAAA,GAxEkD,CAwEtD;AACAnwB,cAAAA,IAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAzEsD,MAyEtDA;AACAmwB,cAAAA,MAAAA,IAAUsvB,UAAAA,CA1E4C,MA0EtDtvB;AACA+wB,cAAAA,aAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EA3EsD,MA2EtDA,CAAAA;AACA/wB,cAAAA,MAAAA,IAAUuvB,kBAAAA,GAAqBqB,IAAAA,CA5EuB,MA4EtD5wB;AACA+wB,cAAAA,aAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EA7EsD,MA6EtDA,CAAAA;AACA/wB,cAAAA,MAAAA,IAAUuvB,kBAAAA,GAAqBY,IAAAA,CA9EuB,MA8EtDnwB;AACA+wB,cAAAA,aAAAA,CAAAA,MAAAA,EAAsB,IAAA,UAAA,CAAtBA,CAAsB,CAAtBA,EAAAA,IAAAA,EA/EsD,MA+EtDA,CAAAA;AAEA,qBAAOC,CAAAA,GAAAA,KAAAA,CAAAA,eAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAjF+C,eAiF/CA,CAAP;AAxOqC;;AA4OvC,mBAAO,SAAA,mBAAA,CAAA,OAAA,EAAA,eAAA,EAAA,MAAA,EAA+D;AACpE,oBAAML,IAAAA,GACJxsB,OAAAA,CAAAA,IAAAA,KAAAA,SAAAA,GAA6B7sB,KAAAA,CAAAA,SAAAA,CAA7B6sB,cAAAA,GAAwDA,OAAAA,CAFU,IACpE;AAEA,qBAAO8sB,MAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAAA,eAAAA,EAH6D,MAG7DA,CAAP;AAHF,aAAA;AA5OF,WAA6B,EAA7B;;AAmPA,gBAAA,aAAA,CAAoB;AAClBjiD,YAAAA,WAAAA,GAAc;AACZ,mBAAA,aAAA,GADY,CACZ;AACA,mBAAA,UAAA,GAAkBggD,YAAAA,CAFN,UAEZ;AACA,mBAAA,QAAA,GAHY,CAGZ;AAEA,mBAAA,UAAA,GALY,KAAA,CAAA,eAKZ;AACA,mBAAA,UAAA,GANY,KAAA,CAAA,oBAMZ;AACA,mBAAA,OAAA,GAPY,CAOZ;AACA,mBAAA,iBAAA,GAAyBr4C,KAAAA,CAAAA,iBAAAA,CARb,IAQZ;AACA,mBAAA,eAAA,GATY,CASZ;AAGA,mBAAA,CAAA,GAZY,CAYZ;AACA,mBAAA,CAAA,GAbY,CAaZ;AAGA,mBAAA,KAAA,GAhBY,CAgBZ;AACA,mBAAA,KAAA,GAjBY,CAiBZ;AAGA,mBAAA,WAAA,GApBY,CAoBZ;AACA,mBAAA,WAAA,GArBY,CAqBZ;AACA,mBAAA,UAAA,GAtBY,CAsBZ;AACA,mBAAA,QAAA,GAvBY,CAuBZ;AAGA,mBAAA,SAAA,GAAiBq4C,YAAAA,CA1BL,SA0BZ;AACA,mBAAA,WAAA,GA3BY,SA2BZ;AAEA,mBAAA,SAAA,GA7BY,CA6BZ;AACA,mBAAA,WAAA,GA9BY,CA8BZ;AACA,mBAAA,SAAA,GA/BY,CA+BZ;AACA,mBAAA,QAAA,GAhCY,EAgCZ;AACA,mBAAA,OAAA,GAjCY,EAiCZ;AACA,mBAAA,UAAA,GAlCY,CAkCZ;AAEA,mBAAA,SAAA,GApCY,EAoCZ;AACA,mBAAA,SAAA,GArCY,CAqCZ;AAEA,mBAAA,YAAA,GAvCY,EAuCZ;AAGA,mBAAA,aAAA,GA1CY,IA0CZ;AACA,mBAAA,SAAA,GA3CY,IA2CZ;AAEA,mBAAA,MAAA,GA7CY,EA6CZ;AA9CgB;;AAiDlB59C,YAAAA,KAAAA,GAAQ;AACN,qBAAOkC,MAAAA,CAAAA,MAAAA,CADD,IACCA,CAAP;AAlDgB;;AAqDlBoyB,YAAAA,eAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAsB;AACpB,mBAAA,CAAA,GADoB,CACpB;AACA,mBAAA,CAAA,GAFoB,CAEpB;AAvDgB;;AAAA;;AA4DpB,mBAAA,YAAA,CAAA,MAAA,EAA8B;AAC5B,gBAAIwrB,MAAAA,GADwB,EAC5B;AACA,kBAAM3c,GAAAA,GAFsB,EAE5B;;AAEA,iBAAA,MAAA,aAAA,IAAA,MAAA,EAAoC;AAClC,kBAAI4c,aAAAA,CAAAA,EAAAA,KAAJ,MAAA,EAAiC;AAC/BD,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY;AAAErnB,kBAAAA,IAAAA,EAAF,EAAA;AAAYunB,kBAAAA,EAAAA,EAAZ,OAAA;AAAyBx5B,kBAAAA,KAAAA,EAAzB;AAAA,iBAAZs5B;AACA3c,gBAAAA,GAAAA,CAAAA,IAAAA,CAF+B,MAE/BA;AACA2c,gBAAAA,MAAAA,GAASA,MAAAA,CAAOA,MAAAA,CAAAA,MAAAA,GAAPA,CAAAA,CAAAA,CAHsB,KAG/BA;AAH+B;AADC;;AAQlC,kBAAIC,aAAAA,CAAAA,EAAAA,KAAJ,SAAA,EAAoC;AAClCD,gBAAAA,MAAAA,GAAS3c,GAAAA,CADyB,GACzBA,EAAT2c;AADF,eAAA,MAEO;AACLA,gBAAAA,MAAAA,CAAAA,IAAAA,CADK,aACLA;AAXgC;AAJR;;AAkB5B,mBAlB4B,MAkB5B;AA5UF;;AAsVA,mBAAA,EAAA,CAAA,KAAA,EAAmB;AACjB,gBAAInqC,MAAAA,CAAAA,SAAAA,CAAJ,KAAIA,CAAJ,EAA6B;AAC3B,qBAAO4B,KAAAA,CADoB,QACpBA,EAAP;AAFe;;AAIjB,kBAAMuX,CAAAA,GAAIvX,KAAAA,CAAAA,OAAAA,CAJO,EAIPA,CAAV;AACA,gBAAIjW,CAAAA,GAAIwtB,CAAAA,CAAAA,MAAAA,GALS,CAKjB;;AACA,gBAAIA,CAAAA,CAAAA,CAAAA,CAAAA,KAAJ,GAAA,EAAkB;AAChB,qBADgB,CAChB;AAPe;;AAWjB,eAAG;AACDxtB,cAAAA,CADC;AAAH,aAAA,QAESwtB,CAAAA,CAAAA,CAAAA,CAAAA,KAbQ,GAWjB;;AAGA,mBAAOA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAeA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAmBxtB,CAAAA,GAdxB,CAcVwtB,CAAP;AApWF;;AAgXA,mBAAA,EAAA,CAAA,CAAA,EAAe;AACb,gBAAItW,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAlB,CAAA,EAA8B;AAC5B,kBAAIA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAlB,CAAA,EAA8B;AAC5B,oBAAIA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAlB,CAAA,EAA8B;AAC5B,yBAD4B,EAC5B;AAF0B;;AAI5B,uBAAO,SAASynC,EAAAA,CAAGznC,CAAAA,CAAZ,CAAYA,CAAHynC,CAAT,IAAqBA,EAAAA,CAAGznC,CAAAA,CAJH,CAIGA,CAAHynC,CAJA,GAI5B;AAL0B;;AAO5B,kBAAIznC,CAAAA,CAAAA,CAAAA,CAAAA,KAASA,CAAAA,CAATA,CAASA,CAATA,IAAiBA,CAAAA,CAAAA,CAAAA,CAAAA,KAAS,CAACA,CAAAA,CAA/B,CAA+BA,CAA/B,EAAqC;AACnC,sBAAMgB,CAAAA,GAAK5Z,IAAAA,CAAAA,IAAAA,CAAU4Y,CAAAA,CAAV5Y,CAAU4Y,CAAV5Y,IAAD,GAACA,GAAyBA,IAAAA,CADD,EACnC;AACA,uBAAO,UAAUqgD,EAAAA,CAFkB,CAElBA,CAFkB,GAEnC;AAT0B;AAA9B,aAAA,MAWO;AACL,kBAAIznC,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAdA,CAAAA,IAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,KAA5BA,CAAAA,IAA0CA,CAAAA,CAAAA,CAAAA,CAAAA,KAA9C,CAAA,EAA0D;AACxD,uBAAO,aAAaynC,EAAAA,CAAGznC,CAAAA,CAAhB,CAAgBA,CAAHynC,CAAb,IAAyBA,EAAAA,CAAGznC,CAAAA,CADqB,CACrBA,CAAHynC,CADwB,GACxD;AAFG;AAZM;;AAiBb,mBACE,UAAUA,EAAAA,CAAGznC,CAAAA,CAAb,CAAaA,CAAHynC,CAAV,IAAsBA,EAAAA,CAAGznC,CAAAA,CAAzB,CAAyBA,CAAHynC,CAAtB,IAAkCA,EAAAA,CAAGznC,CAAAA,CAArC,CAAqCA,CAAHynC,CAAlC,IAA8CA,EAAAA,CAAGznC,CAAAA,CAAjD,CAAiDA,CAAHynC,CAA9C,IAA0DA,EAAAA,CAAGznC,CAAAA,CAA7D,CAA6DA,CAAHynC,CAA1D,GAAA,GACA,GAAGA,EAAAA,CAAGznC,CAAAA,CAnBK,CAmBLA,CAAHynC,CAnBQ,GAiBb;AAjYF;;AA0YA,cAAIC,SAAAA,GA1YJ,CA0YA;AACA,cAAIC,SAAAA,GA3YJ,CA2YA;AACA,cAAIC,YAAAA,GA5YJ,CA4YA;AAEAzC,UAAAA,OAAAA,CAAAA,WAAAA,GAAAA,WAAAA,GAAc,MAAM;AAClB//C,YAAAA,WAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAuD;AAAA,kBAAzByd,eAAyB,uEAAvDzd,KAAuD;AACrD,mBAAA,UAAA,GAAkB,IADmC,cAAA,CAAA,aACnC,EAAlB;AAEA,mBAAA,OAAA,GAAe,IAHsC,aAGtC,EAAf;AACA,mBAAA,eAAA,GAJqD,KAAA,CAAA,eAIrD;AACA,mBAAA,cAAA,GALqD,EAKrD;AACA,mBAAA,UAAA,GANqD,EAMrD;AACA,mBAAA,UAAA,GAPqD,UAOrD;AACA,mBAAA,IAAA,GARqD,IAQrD;AACA,mBAAA,WAAA,GATqD,IASrD;AACA,mBAAA,aAAA,GAVqD,KAUrD;AAEA,mBAAA,UAAA,GAZqD,KAYrD;AACA,mBAAA,aAAA,GAAqBsE,MAAAA,CAAAA,MAAAA,CAbgC,IAahCA,CAArB;AACA,mBAAA,QAAA,GAdqD,IAcrD;AACA,mBAAA,eAAA,GAAuB,CAAC,CAf6B,eAerD;AAKA,mBAAA,kBAAA,GApBqD,EAoBrD;;AACA,mBAAA,MAAA,EAAA,IAAA,KAAA,CAAA,GAAA,EAAsB;AACpB,qBAAA,kBAAA,CAAwBkM,KAAAA,CAAAA,GAAAA,CAAxB,EAAwBA,CAAxB,IADoB,EACpB;AAtBmD;AADrC;;AA2BlBU,YAAAA,IAAAA,GAAO;AACL,mBAAA,cAAA,CAAA,IAAA,CAAyB,KADpB,eACL;AACA,oBAAMujB,GAAAA,GAAM,KAFP,OAEL;AACA,mBAAA,UAAA,CAAA,IAAA,CAHK,GAGL;AACA,mBAAA,OAAA,GAAeA,GAAAA,CAJV,KAIUA,EAAf;AA/BgB;;AAkClBtjB,YAAAA,OAAAA,GAAU;AACR,mBAAA,eAAA,GAAuB,KAAA,cAAA,CADf,GACe,EAAvB;AACA,mBAAA,OAAA,GAAe,KAAA,UAAA,CAFP,GAEO,EAAf;AACA,mBAAA,WAAA,GAHQ,IAGR;AACA,mBAAA,IAAA,GAJQ,IAIR;AAtCgB;;AAyClB0xB,YAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACX,mBADW,IACX;AACA,mBAAA,aAAA,CAFW,KAEX;AACA,mBAHW,OAGX;AA5CgB;;AA+ClB4f,YAAAA,gBAAAA,CAAAA,YAAAA,EAA+B;AAC7B,oBAAM57B,OAAAA,GAAUS,YAAAA,CADa,OAC7B;AACA,oBAAMR,SAAAA,GAAYQ,YAAAA,CAFW,SAE7B;;AAEA,mBAAK,IAAI5jB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKojB,OAAAA,CAArB,MAAA,EAAqCnjB,CAAAA,GAArC,EAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,oBAAImjB,OAAAA,CAAAA,CAAAA,CAAAA,KAAerW,KAAAA,CAAAA,GAAAA,CAAnB,UAAA,EAAmC;AAAA;AADa;;AAKhD,qBAAA,MAAA,GAAA,IAAkBsW,SAAAA,CAAlB,CAAkBA,CAAlB,EAAgC;AAC9B,wBAAMgU,QAAAA,GAAWlhB,GAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IAAuB,KAAvBA,UAAAA,GAAyC,KAD5B,IAC9B;AACA,wBAAM0I,OAAAA,GAAU,IAAA,OAAA,CAAYxhB,OAAAA,IAAW;AACrCg6B,oBAAAA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EADqC,OACrCA;AADF,mBAAgB,CAAhB;AAGA,uBAAA,OAAA,CAAA,YAAA,CAAA,IAAA,CAL8B,OAK9B;AAV8C;AAJrB;;AAiB7B,qBAAOpT,OAAAA,CAAAA,GAAAA,CAAY,KAAA,OAAA,CAjBU,YAiBtBA,CAAP;AAhEgB;;AAmElBtW,YAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA4B;AAC1B,oBAAMsxC,eAAAA,GAAkB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;AACA,mBAAA,eAAA,GAAuBxnC,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CACrB,KADqBA,eAAAA,EAFG,eAEHA,CAAvB;AAIA,mBAAA,IAAA,GAN0B,IAM1B;AAzEgB;;AA4ElBynC,YAAAA,MAAAA,CAAAA,YAAAA,EAAAA,QAAAA,EAA+B;AAC7B,mBAAA,QAAA,GAD6B,QAC7B;;AAEA,oBAAMC,UAAAA,GAAa,KAAA,WAAA,CAHU,QAGV,CAAnB;;AACA,qBAAO,KAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,CAAyC,MAAM;AACpD,qBAAA,eAAA,GADoD,KAAA,CAAA,eACpD;AACA,qBAAA,aAAA,CAAmB,KAAA,aAAA,CAFiC,YAEjC,CAAnB;AACA,uBAHoD,UAGpD;AAHF,eAAO,CAAP;AAhFgB;;AAuFlBC,YAAAA,aAAAA,CAAAA,YAAAA,EAA4B;AAC1B,oBAAMC,iBAAAA,GAAoB,KADA,kBAC1B;AACA,oBAAMh8B,SAAAA,GAAYQ,YAAAA,CAFQ,SAE1B;AACA,oBAAMT,OAAAA,GAAUS,YAAAA,CAHU,OAG1B;AACA,oBAAMy7B,MAAAA,GAJoB,EAI1B;;AACA,mBAAK,IAAIr/C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKojB,OAAAA,CAArB,MAAA,EAAqCnjB,CAAAA,GAArC,EAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,sBAAMm3B,IAAAA,GAAOhU,OAAAA,CADmC,CACnCA,CAAb;AACAk8B,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY;AAAA,kBAAA,IAAA;AAEVX,kBAAAA,EAAAA,EAAIU,iBAAAA,CAFM,IAENA,CAFM;AAGVlwB,kBAAAA,IAAAA,EAAM9L,SAAAA,CAHI,CAGJA;AAHI,iBAAZi8B;AAPwB;;AAa1B,qBAAOC,YAAAA,CAbmB,MAanBA,CAAP;AApGgB;;AAuGlBC,YAAAA,aAAAA,CAAAA,MAAAA,EAAsB;AACpB,mBAAA,MAAA,aAAA,IAAA,MAAA,EAAoC;AAClC,sBAAMb,EAAAA,GAAKc,aAAAA,CADuB,EAClC;AACA,sBAAMroB,IAAAA,GAAOqoB,aAAAA,CAFqB,IAElC;AACA,sBAAMtwB,IAAAA,GAAOswB,aAAAA,CAHqB,IAGlC;;AAEA,wBAAQroB,IAAAA,GAAR,CAAA;AACE,uBAAKrqB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBADF,SACE;AAFJ;;AAIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AAJF;;AAOE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AACE,yBAAA,UAAA,CADF,IACE;AARJ;;AAUE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,kBAAA;AACE,yBAAA,kBAAA,CAAwBoiB,IAAAA,CAAxB,CAAwBA,CAAxB,EAAiCA,IAAAA,CADnC,CACmCA,CAAjC;AAXJ;;AAaE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBAAA,OAAA,CADF,IACE;AAdJ;;AAgBE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE,yBAAA,QAAA,CAAcoiB,IAAAA,CADhB,CACgBA,CAAd;AAjBJ;;AAmBE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,cAAA;AACE,yBAAA,QAAA,CAAcoiB,IAAAA,CADhB,CACgBA,CAAd;AApBJ;;AAsBE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBADF,OACE;AAvBJ;;AAyBE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE,yBAAA,QAAA,CAAcoiB,IAAAA,CAAd,CAAcA,CAAd,EAAuBA,IAAAA,CADzB,CACyBA,CAAvB;AA1BJ;;AA4BE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,cAAA;AACE,yBAAA,cAAA,CAAoBoiB,IAAAA,CADtB,CACsBA,CAApB;AA7BJ;;AA+BE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,cAAA;AACE,yBAAA,cAAA,CAAoBoiB,IAAAA,CADtB,CACsBA,CAApB;AAhCJ;;AAkCE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBAAA,SAAA,CAAeoiB,IAAAA,CADjB,CACiBA,CAAf;AAnCJ;;AAqCE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CACEoiB,IAAAA,CADF,CACEA,CADF,EAEEA,IAAAA,CAFF,CAEEA,CAFF,EAGEA,IAAAA,CAHF,CAGEA,CAHF,EAIEA,IAAAA,CAJF,CAIEA,CAJF,EAKEA,IAAAA,CALF,CAKEA,CALF,EAMEA,IAAAA,CAPJ,CAOIA,CANF;AAtCJ;;AA+CE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBoiB,IAAAA,CADnB,CACmBA,CAAjB;AAhDJ;;AAkDE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,oBAAA;AACE,yBAAA,oBAAA,CAA0BoiB,IAAAA,CAD5B,CAC4BA,CAA1B;AAnDJ;;AAqDE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,YAAA;AACE,yBAAA,YAAA,CAAkBoiB,IAAAA,CADpB,CACoBA,CAAlB;AAtDJ;;AAwDE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBoiB,IAAAA,CADnB,CACmBA,CAAjB;AAzDJ;;AA2DE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AACE,yBAAA,UAAA,CAAgBoiB,IAAAA,CADlB,CACkBA,CAAhB;AA5DJ;;AA8DE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CAAmBoiB,IAAAA,CADrB,CACqBA,CAAnB;AA/DJ;;AAiEE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,eAAA;AACE,yBAAA,eAAA,CAAqBoiB,IAAAA,CAArB,CAAqBA,CAArB,EAA8BA,IAAAA,CAA9B,CAA8BA,CAA9B,EAAuCA,IAAAA,CADzC,CACyCA,CAAvC;AAlEJ;;AAoEE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,iBAAA;AACE,yBAAA,iBAAA,CAAuBoiB,IAAAA,CAAvB,CAAuBA,CAAvB,EAAgCA,IAAAA,CAAhC,CAAgCA,CAAhC,EAAyCA,IAAAA,CAD3C,CAC2CA,CAAzC;AArEJ;;AAuEE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,eAAA;AACE,yBAAA,eAAA,CADF,IACE;AAxEJ;;AA0EE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CADF,IACE;AA3EJ;;AA6EE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBoiB,IAAAA,CADnB,CACmBA,CAAjB;AA9EJ;;AAgFE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBAAA,OAAA,CAAaoiB,IAAAA,CAAb,CAAaA,CAAb,EAAsBA,IAAAA,CADxB,CACwBA,CAAtB;AAjFJ;;AAmFE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,kBAAA;AACE,yBAAA,kBAAA,CAAwBoiB,IAAAA,CAD1B,CAC0BA,CAAxB;AApFJ;;AAsFE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBoiB,IAAAA,CADnB,CACmBA,CAAjB;AAvFJ;;AAyFE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBAAA,SAAA,CAAeoiB,IAAAA,CADjB,CACiBA,CAAf;AA1FJ;;AA4FE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,IAAA;AACE,yBADF,IACE;AA7FJ;;AA+FE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACE,yBADF,MACE;AAhGJ;;AAkGE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACE,yBADF,MACE;AAnGJ;;AAqGE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AACE,yBADF,UACE;AAtGJ;;AAwGE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,YAAA;AACE,yBADF,YACE;AAzGJ;;AA2GE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,IAAA;AACE,yBAAA,IAAA,CADF,SACE;AA5GJ;;AA8GE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACE,yBAAA,IAAA,CADF,SACE;AA/GJ;;AAiHE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,wBAAA;AACE,yBADF,wBACE;AAlHJ;;AAoHE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,iBAAA;AACE,yBAAA,iBAAA,CAAuBoiB,IAAAA,CADzB,CACyBA,CAAvB;AArHJ;;AAuHE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,uBAAA;AACE,yBAAA,uBAAA,CAA6BoiB,IAAAA,CAD/B,CAC+BA,CAA7B;AAxHJ;;AA0HE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,qBAAA;AACE,yBAAA,qBAAA,CAA2BoiB,IAAAA,CAD7B,CAC6BA,CAA3B;AA3HJ;;AA6HE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,qBAAA;AACE,yBAAA,qBAAA,CAA2BoiB,IAAAA,CAA3B,CAA2BA,CAA3B,EAAoCA,IAAAA,CADtC,CACsCA,CAApC;AA9HJ;;AAgIE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,mBAAA;AACE,yBADF,mBACE;AAjIJ;;AAmIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBADF,SACE;AApIJ;;AAsIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBADF,WACE;AAvIJ;;AAyIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,eAAA;AACE,yBADF,eACE;AA1IJ;;AA4IE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,iBAAA;AACE,yBADF,iBACE;AA7IJ;;AA+IE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE,yBADF,QACE;AAhJJ;;AAkJE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBAAA,SAAA,CACEoiB,IAAAA,CADF,CACEA,CADF,EAEEA,IAAAA,CAFF,CAEEA,CAFF,EAGEA,IAAAA,CAHF,CAGEA,CAHF,EAIEA,IAAAA,CAJF,CAIEA,CAJF,EAKEA,IAAAA,CALF,CAKEA,CALF,EAMEA,IAAAA,CAPJ,CAOIA,CANF;AAnJJ;;AA4JE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CAAmBoiB,IAAAA,CAAnB,CAAmBA,CAAnB,EAA4BA,IAAAA,CAD9B,CAC8BA,CAA5B;AA7JJ;;AA+JE,uBAAKpiB,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBADF,OACE;AAhKJ;;AAkKE,uBAAA,EAAA;AACE,yBAAA,KAAA,CAAW0yC,aAAAA,CADb,KACE;AAnKJ;;AAqKE;AACEl/C,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,0BADP,EAAA,EACEA;AAtKJ;AAAA;AANkB;AAvGJ;;AAyRlB0O,YAAAA,cAAAA,CAAAA,WAAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,WAAA,GAD0B,WAC1B;AA1RgB;;AA6RlBD,YAAAA,cAAAA,CAAAA,WAAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,WAAA,GAD0B,WAC1B;AA9RgB;;AAiSlBU,YAAAA,QAAAA,GAAW;AACT,mBAAA,QAAA,CAAA,CAAA,EAAiB,KAAA,OAAA,CADR,OACT;AAlSgB;;AAqSlBD,YAAAA,aAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAgC;AAC9B,oBAAM2f,OAAAA,GAAU,KADc,OAC9B;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqBA,OAAAA,CAAAA,UAAAA,GAAqB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA1CA,CAA0C,CAA1CA;AACAA,cAAAA,OAAAA,CAAAA,eAAAA,GAA0B7wB,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAHI,CAGJA,CAA1B6wB;AAEAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GALkB,CAK9BA;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GANkB,CAM9BA;AAEAA,cAAAA,OAAAA,CAAAA,OAAAA,GAR8B,EAQ9BA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAT8B,EAS9BA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAVc,WAUd,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CAXpB,UAW9BA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAGwvB,EAAAA,CAAGxvB,OAAAA,CAfsB,QAezBwvB,CAfyB,IAY9BxvB;AAKAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwCwvB,EAAAA,CAAG,CAACxvB,OAAAA,CAjBd,CAiBUwvB,CAAxCxvB;AAEAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqB,KAAA,UAAA,CAAA,aAAA,CAnBS,UAmBT,CAArBA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,WAAAA,CAA+BA,OAAAA,CApBD,KAoB9BA;AAzTgB;;AA4TlBtgB,YAAAA,SAAAA,GAAY;AACV,oBAAMsgB,OAAAA,GAAU,KADN,OACV;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GAFF,CAEVA;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GAHF,CAGVA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAJU,KAAA,CAAA,eAIVA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GALU,KAAA,CAAA,eAKVA;AACAA,cAAAA,OAAAA,CAAAA,eAAAA,GANU,CAMVA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAPN,WAOM,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqB,KAAA,UAAA,CAAA,aAAA,CARX,UAQW,CAArBA;AACAA,cAAAA,OAAAA,CAAAA,MAAAA,GAAiB,KAAA,UAAA,CAAA,aAAA,CATP,OASO,CAAjBA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAVU,EAUVA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAXU,EAWVA;AAvUgB;;AA0UlB7f,YAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAe;AACb,oBAAM6f,OAAAA,GAAU,KADH,OACb;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,IAFC,CAEbA;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,IAHC,CAGbA;AAEAA,cAAAA,OAAAA,CAAAA,OAAAA,GALa,EAKbA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GANa,EAMbA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAPH,WAOG,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CARrC,UAQbA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAGwvB,EAAAA,CAAGxvB,OAAAA,CAZK,QAYRwvB,CAZQ,IASbxvB;AAKAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwCwvB,EAAAA,CAAG,CAACxvB,OAAAA,CAd/B,CAc2BwvB,CAAxCxvB;AAxVgB;;AA2VlBzf,YAAAA,QAAAA,CAAAA,MAAAA,EAAiB;AACf,oBAAMyf,OAAAA,GAAU,KADD,OACf;AACA,oBAAMlc,IAAAA,GAAOkc,OAAAA,CAFE,IAEf;AACA,oBAAMiM,QAAAA,GAAWjM,OAAAA,CAHF,QAGf;;AACA,kBAAIiM,QAAAA,KAAJ,CAAA,EAAoB;AAAA;AAJL;;AAQf,oBAAMM,aAAAA,GAAgBvM,OAAAA,CARP,aAQf;AACA,oBAAMwM,WAAAA,GAAcxM,OAAAA,CATL,WASf;AACA,oBAAMyM,WAAAA,GAAczM,OAAAA,CAVL,WAUf;AACA,oBAAM0M,aAAAA,GAAgB1M,OAAAA,CAXP,aAWf;AACA,oBAAM2M,UAAAA,GAAa3M,OAAAA,CAAAA,UAAAA,GAZJ,aAYf;AACA,oBAAM8M,QAAAA,GAAWhpB,IAAAA,CAbF,QAaf;AACA,oBAAMipB,UAAAA,GAAaD,QAAAA,GAAAA,CAAAA,GAAe,CAdnB,CAcf;AACA,oBAAME,eAAAA,GAAkBlpB,IAAAA,CAfT,eAef;AACA,oBAAMmpB,iBAAAA,GAAoBhB,QAAAA,GAAWjM,OAAAA,CAAAA,UAAAA,CAhBtB,CAgBsBA,CAArC;AAEA,kBAAIgL,CAAAA,GAlBW,CAkBf;;AACA,mBAAA,MAAA,KAAA,IAAA,MAAA,EAA4B;AAC1B,oBAAIsC,KAAAA,KAAJ,IAAA,EAAoB;AAElBtC,kBAAAA,CAAAA,IAAK0B,aAAAA,GAFa,WAElB1B;AAFkB;AAApB,iBAAA,MAIO,IAAIuC,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,EAAJ,KAAIA,CAAJ,EAAkB;AACvBvC,kBAAAA,CAAAA,IAAM+B,UAAAA,GAAAA,KAAAA,GAAD,QAACA,GADiB,IACvB/B;AADuB;AALC;;AAU1B,sBAAMyC,OAAAA,GAAW,CAAA,KAAA,CAAA,OAAA,GAAA,WAAA,GAAD,CAAC,IAVS,WAU1B;AACA,sBAAMC,SAAAA,GAAYJ,KAAAA,CAXQ,QAW1B;AACA,oBAAA,OAAA,EAZ0B,OAY1B;AACA,oBAAIj+B,KAAAA,GAAQi+B,KAAAA,CAbc,KAa1B;;AACA,oBAAA,QAAA,EAAc;AACZ,sBADY,EACZ;AACA,wBAAMM,OAAAA,GAAUN,KAAAA,CAAAA,OAAAA,IAFJ,eAEZ;AACAO,kBAAAA,EAAAA,GAAKP,KAAAA,CAAAA,OAAAA,GAAgBM,OAAAA,CAAhBN,CAAgBM,CAAhBN,GAA6Bj+B,KAAAA,GAHtB,GAGZw+B;AACAA,kBAAAA,EAAAA,GAAK,CAAA,EAAA,GAJO,iBAIZA;AACA,wBAAMC,EAAAA,GAAKF,OAAAA,CAAAA,CAAAA,CAAAA,GALC,iBAKZ;AAEAv+B,kBAAAA,KAAAA,GAAQu+B,OAAAA,GAAU,CAACA,OAAAA,CAAXA,CAAWA,CAAXA,GAPI,KAOZv+B;AACA0+B,kBAAAA,OAAAA,GAAUF,EAAAA,GARE,aAQZE;AACAC,kBAAAA,OAAAA,GAAW,CAAA,CAAA,GAAD,EAAC,IATC,aASZA;AATF,iBAAA,MAUO;AACLD,kBAAAA,OAAAA,GAAU/C,CAAAA,GADL,aACL+C;AACAC,kBAAAA,OAAAA,GAFK,CAELA;AA1BwB;;AA6B1B,oBAAIV,KAAAA,CAAAA,QAAAA,IAAkBxpB,IAAAA,CAAtB,WAAA,EAAwC;AACtCkc,kBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAqBA,OAAAA,CAAAA,CAAAA,GADiB,OACtCA;;AACA,sBAAA,QAAA,EAAc;AACZA,oBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAqB,CAACA,OAAAA,CAAD,CAAA,GADT,OACZA;AAHoC;;AAKtCA,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,WAAAA,IALsC,SAKtCA;AALF,iBAAA,MA7B0B,CAAA;;AA0C1B,oBA1C0B,SA0C1B;;AACA,oBAAA,QAAA,EAAc;AACZqO,kBAAAA,SAAAA,GAAYh/B,KAAAA,GAAAA,iBAAAA,GAA4Bo+B,OAAAA,GAD5B,aACZY;AADF,iBAAA,MAEO;AACLA,kBAAAA,SAAAA,GAAYh/B,KAAAA,GAAAA,iBAAAA,GAA4Bo+B,OAAAA,GADnC,aACLY;AA9CwB;;AAiD1BrD,gBAAAA,CAAAA,IAjD0B,SAiD1BA;AApEa;;AAsEfhL,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAGEA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAzEa,GAyEbA,CAHFA;;AAKA,kBAAA,QAAA,EAAc;AACZA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAGEA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAJU,GAIVA,CAHFA;AADF,eAAA,MAMO;AACLA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwCwvB,EAAAA,CAAG,CAACxvB,OAAAA,CADvC,CACmCwvB,CAAxCxvB;AAlFa;;AAqFf,kBAAA,QAAA,EAAc;AACZA,gBAAAA,OAAAA,CAAAA,CAAAA,IADY,CACZA;AADF,eAAA,MAEO;AACLA,gBAAAA,OAAAA,CAAAA,CAAAA,IAAagL,CAAAA,GADR,UACLhL;AAxFa;;AA2FfA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CA3FnC,UA2FfA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAGwvB,EAAAA,CAAGxvB,OAAAA,CA/FO,QA+FVwvB,CA/FU,IA4FfxvB;;AAKA,kBAAIA,OAAAA,CAAAA,SAAAA,KAAsBmtB,YAAAA,CAA1B,SAAA,EAAkD;AAChDntB,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiDA,OAAAA,CADD,SAChDA;AAlGa;;AAoGf,kBAAIA,OAAAA,CAAAA,UAAAA,KAAuBmtB,YAAAA,CAA3B,UAAA,EAAoD;AAClDntB,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CADA,UAClDA;AArGa;;AAwGf,oBAAMkM,cAAAA,GACJlM,OAAAA,CAAAA,iBAAAA,GAA4BlrB,KAAAA,CAAAA,iBAAAA,CAzGf,gBAwGf;;AAEA,kBACEo3B,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,IAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,oBAAIkrB,OAAAA,CAAAA,SAAAA,KAAsBmtB,YAAAA,CAA1B,SAAA,EAAkD;AAChDntB,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA2CA,OAAAA,CADK,SAChDA;AAFF;;AAIA,oBAAIA,OAAAA,CAAAA,SAAAA,GAAJ,CAAA,EAA2B;AACzBA,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAmDA,OAAAA,CAD1B,SACzBA;AALF;AAHF,eAAA,MAUO,IAAIA,OAAAA,CAAAA,iBAAAA,KAA8BlrB,KAAAA,CAAAA,iBAAAA,CAAlC,WAAA,EAAiE;AAGtEkrB,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAHsE,aAGtEA;AAHK,eAAA,MAIA;AACLA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EADK,MACLA;AAzHa;;AA4Hf,kBACEkM,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAAnBo3B,MAAAA,IACAA,cAAAA,KAAmBp3B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,sBAAMw7C,cAAAA,GAAiB,KAAK,OAAA,CAAA,eAAA,IAD5B,CACuB,CAAvB;;AACA,qBAAA,oBAAA,CAA0BtwB,OAAAA,CAA1B,KAAA,EAFA,cAEA;AAjIa;;AAuIf,kBAAIuwB,UAAAA,GAAavwB,OAAAA,CAvIF,UAuIf;;AACA,kBAAIA,OAAAA,CAAAA,QAAAA,KAAJ,CAAA,EAA4B;AAC1BuwB,gBAAAA,UAAAA,GAAaA,UAAAA,CADa,KACbA,EAAbA;AACAA,gBAAAA,UAAAA,CAAAA,CAAAA,CAAAA,IAAiBvwB,OAAAA,CAFS,QAE1BuwB;AA1Ia;;AA6IfvwB,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAGwwB,EAAAA,CAAH,UAAGA,CAAH,UAA2BhB,EAAAA,CAhJd,UAgJcA,CAhJd,OA6IfxvB;AAKAA,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,cAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAlJe,UAkJfA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,WAAAA,CAA+BA,OAAAA,CAnJhB,KAmJfA;AACAA,cAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAA2BA,OAAAA,CApJZ,UAoJfA;;AAEA,mBAAA,qBAAA,GAAA,WAAA,CAAyCA,OAAAA,CAtJ1B,UAsJf;AAjfgB;;AAoflB5f,YAAAA,kBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAyB;AACvB,mBAAA,UAAA,CAAgB,CADO,CACvB;AACA,mBAAA,QAAA,CAAA,CAAA,EAFuB,CAEvB;AAtfgB;;AAyflBqwC,YAAAA,YAAAA,CAAAA,OAAAA,EAAsB;AACpB,kBAAI,CAAC/kB,OAAAA,CAAL,IAAA,EAAmB;AACjB,sBAAM,IAAA,KAAA,CACJ,2CAFe,6DACX,CAAN;AAFkB;;AAOpB,kBAAI,CAAC,KAAL,QAAA,EAAoB;AAClB,qBAAA,QAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CADE,WACF,CAAhB;AACA,qBAAA,QAAA,CAAA,cAAA,CAAA,IAAA,EAAA,MAAA,EAFkB,UAElB;AACA,qBAAA,IAAA,CAAA,WAAA,CAAsB,KAHJ,QAGlB;AAVkB;;AAapB,oBAAMn7B,GAAAA,GAAM4+C,CAAAA,GAAAA,KAAAA,CAAAA,eAAAA,EACVzjB,OAAAA,CADUyjB,IAAAA,EAEVzjB,OAAAA,CAFUyjB,QAAAA,EAGV,KAhBkB,eAaRA,CAAZ;AAKA,mBAAA,QAAA,CAAA,WAAA,IACE,8BAA8BzjB,OAAAA,CAA9B,UAAA,IAAA,GACA,aApBkB,GAAA,QAkBpB;AA3gBgB;;AAghBlB1rB,YAAAA,OAAAA,CAAAA,OAAAA,EAAiB;AACf,oBAAMggB,OAAAA,GAAU,KADD,OACf;AACA,oBAAM0L,OAAAA,GAAU,KAAA,UAAA,CAAA,GAAA,CAAoBglB,OAAAA,CAFrB,CAEqBA,CAApB,CAAhB;AACA,kBAAIn7B,IAAAA,GAAOm7B,OAAAA,CAHI,CAGJA,CAAX;AACA1wB,cAAAA,OAAAA,CAAAA,IAAAA,GAJe,OAIfA;;AAEA,kBACE,KAAA,UAAA,IACA,CAAC0L,OAAAA,CADD,WAAA,IAEA,CAAC,KAAA,aAAA,CAAmBA,OAAAA,CAHtB,UAGG,CAHH,EAIE;AACA,qBAAA,YAAA,CADA,OACA;AACA,qBAAA,aAAA,CAAmBA,OAAAA,CAAnB,UAAA,IAFA,OAEA;AAZa;;AAcf1L,cAAAA,OAAAA,CAAAA,UAAAA,GAAqB0L,OAAAA,CAAAA,UAAAA,IAdN,KAAA,CAAA,oBAcf1L;AAEA,kBAAI2L,IAAAA,GAhBW,QAgBf;;AACA,kBAAID,OAAAA,CAAJ,KAAA,EAAmB;AACjBC,gBAAAA,IAAAA,GADiB,KACjBA;AADF,eAAA,MAEO,IAAID,OAAAA,CAAJ,IAAA,EAAkB;AACvBC,gBAAAA,IAAAA,GADuB,MACvBA;AApBa;;AAsBf,oBAAMC,MAAAA,GAASF,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GAtBA,QAsBf;;AAEA,kBAAInW,IAAAA,GAAJ,CAAA,EAAc;AACZA,gBAAAA,IAAAA,GAAO,CADK,IACZA;AACAyK,gBAAAA,OAAAA,CAAAA,aAAAA,GAAwB,CAFZ,CAEZA;AAFF,eAAA,MAGO;AACLA,gBAAAA,OAAAA,CAAAA,aAAAA,GADK,CACLA;AA5Ba;;AA8BfA,cAAAA,OAAAA,CAAAA,QAAAA,GA9Be,IA8BfA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqB0L,OAAAA,CA/BN,UA+Bf1L;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAhCe,IAgCfA;AACAA,cAAAA,OAAAA,CAAAA,SAAAA,GAjCe,MAiCfA;AAEAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAnCD,WAmCC,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwCwvB,EAAAA,CAAG,CAACxvB,OAAAA,CApC7B,CAoCyBwvB,CAAxCxvB;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GArCe,EAqCfA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAtCe,EAsCfA;AAtjBgB;;AAyjBlBrgB,YAAAA,OAAAA,GAAU;AACR,oBAAMqgB,OAAAA,GAAU,KADR,OACR;;AACA,kBACEA,OAAAA,CAAAA,iBAAAA,GAA4BlrB,KAAAA,CAAAA,iBAAAA,CAA5BkrB,gBAAAA,IACAA,OAAAA,CAAAA,UAAAA,EAFF,aAEEA,EAFF,EAGE;AAEAA,gBAAAA,OAAAA,CAAAA,OAAAA,GAAkBA,OAAAA,CAFlB,UAEAA;AACA,qBAAA,IAAA,CAHA,SAGA;AACA,qBAJA,OAIA;AATM;AAzjBQ;;AAukBlBniB,YAAAA,YAAAA,CAAAA,KAAAA,EAAoB;AAClB,kBAAIxO,KAAAA,GAAJ,CAAA,EAAe;AACb,qBAAA,OAAA,CAAA,SAAA,GADa,KACb;AAFgB;AAvkBF;;AA6kBlByO,YAAAA,UAAAA,CAAAA,KAAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,OAAA,GAAuBopB,eAAAA,CADP,KACOA,CAAvB;AA9kBgB;;AAilBlBnpB,YAAAA,WAAAA,CAAAA,KAAAA,EAAmB;AACjB,mBAAA,OAAA,CAAA,QAAA,GAAwBopB,gBAAAA,CADP,KACOA,CAAxB;AAllBgB;;AAqlBlBnpB,YAAAA,aAAAA,CAAAA,KAAAA,EAAqB;AACnB,mBAAA,OAAA,CAAA,UAAA,GADmB,KACnB;AAtlBgB;;AAylBlB2yC,YAAAA,cAAAA,CAAAA,WAAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,WAAA,GAD0B,WAC1B;AA1lBgB;;AA6lBlBtvC,YAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA2B;AACzB,mBAAA,OAAA,CAAA,WAAA,GAA2BgH,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADF,CACEA,CAA3B;AA9lBgB;;AAimBlBuoC,YAAAA,YAAAA,CAAAA,SAAAA,EAAwB;AACtB,mBAAA,OAAA,CAAA,SAAA,GADsB,SACtB;AAlmBgB;;AAqmBlBtvC,YAAAA,eAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAyB;AACvB,mBAAA,OAAA,CAAA,SAAA,GAAyB+G,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADF,CACEA,CAAzB;AACA,mBAAA,OAAA,CAAA,KAAA,GAAqB,KAAA,UAAA,CAAA,aAAA,CAFE,WAEF,CAArB;AACA,mBAAA,OAAA,CAAA,OAAA,GAHuB,EAGvB;AACA,mBAAA,OAAA,CAAA,OAAA,GAJuB,EAIvB;AAzmBgB;;AA4mBlBrH,YAAAA,eAAAA,CAAAA,IAAAA,EAAsB;AACpB,mBAAA,OAAA,CAAA,WAAA,GAA2B,KAAA,mBAAA,CADP,IACO,CAA3B;AA7mBgB;;AAgnBlBE,YAAAA,aAAAA,CAAAA,IAAAA,EAAoB;AAClB,mBAAA,OAAA,CAAA,SAAA,GAAyB,KAAA,mBAAA,CADP,IACO,CAAzB;AAjnBgB;;AAonBlBO,YAAAA,WAAAA,CAAAA,IAAAA,EAAkB;AAChB,oBAAMpS,KAAAA,GAAQ,KAAA,QAAA,CADE,KAChB;AACA,oBAAMC,MAAAA,GAAS,KAAA,QAAA,CAFC,MAEhB;;AACA,oBAAMggC,GAAAA,GAAMjnB,KAAAA,CAAAA,IAAAA,CAAAA,gBAAAA,CAAsB,KAHlB,eAGJA,CAAZ;;AACA,oBAAMknB,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EAJK,GAIL,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,MAAoB,CAApB,EALK,GAKL,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,CAAoB,CAApB,EANK,GAML,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,MAAoB,CAApB,EAPK,GAOL,CAAX;;AACA,oBAAMC,EAAAA,GAAKxgC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CARzB,CAQyBA,CAA9BvgC,CAAX;AACA,oBAAMygC,EAAAA,GAAKzgC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CATzB,CASyBA,CAA9BvgC,CAAX;AACA,oBAAM0gC,EAAAA,GAAK1gC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CAVzB,CAUyBA,CAA9BvgC,CAAX;AACA,oBAAM2gC,EAAAA,GAAK3gC,IAAAA,CAAAA,GAAAA,CAASogC,EAAAA,CAATpgC,CAASogC,CAATpgC,EAAgBqgC,EAAAA,CAAhBrgC,CAAgBqgC,CAAhBrgC,EAAuBsgC,EAAAA,CAAvBtgC,CAAuBsgC,CAAvBtgC,EAA8BugC,EAAAA,CAXzB,CAWyBA,CAA9BvgC,CAAX;AAEA,oBAAMS,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAbG,UAaH,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAdgB,EAchBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAfgB,EAehBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAmCigC,EAAAA,GAhBnB,EAgBhBjgC;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoCkgC,EAAAA,GAjBpB,EAiBhBlgC;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAkC,KAAA,mBAAA,CAlBlB,IAkBkB,CAAlCA;;AACA,kBAAI,KAAA,OAAA,CAAA,SAAA,GAAJ,CAAA,EAAgC;AAC9BA,gBAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAA0C,KAAA,OAAA,CADZ,SAC9BA;AApBc;;AAsBhB,mBAAA,qBAAA,GAAA,WAAA,CAtBgB,IAsBhB;AA1oBgB;;AAgpBlBihD,YAAAA,mBAAAA,CAAAA,IAAAA,EAA0B;AACxB,kBAAI9wB,IAAAA,CAAAA,CAAAA,CAAAA,KAAJ,eAAA,EAAiC;AAC/B,uBAAO,KAAA,kBAAA,CADwB,IACxB,CAAP;AAFsB;;AAIxB,qBAAO,KAAA,mBAAA,CAJiB,IAIjB,CAAP;AAppBgB;;AA0pBlB+wB,YAAAA,kBAAAA,CAAAA,IAAAA,EAAyB;AACvB,oBAAM/hB,KAAAA,GAAQhP,IAAAA,CADS,CACTA,CAAd;AACA,oBAAMtL,YAAAA,GAAesL,IAAAA,CAFE,CAEFA,CAArB;AACA,oBAAMqP,MAAAA,GAASrP,IAAAA,CAAAA,CAAAA,CAAAA,IAHQ,KAAA,CAAA,eAGvB;AACA,oBAAM,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAmBA,IAAAA,CAJF,CAIEA,CAAzB;AACA,oBAAMkW,KAAAA,GAAQlW,IAAAA,CALS,CAKTA,CAAd;AACA,oBAAMmW,KAAAA,GAAQnW,IAAAA,CANS,CAMTA,CAAd;AACA,oBAAMoW,SAAAA,GAAYpW,IAAAA,CAPK,CAOLA,CAAlB;AAEA,oBAAMgxB,QAAAA,GAAW,UAAUpB,YATJ,EAAA,EASvB;;AACA,oBAAM,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IAAuB,KAAA,CAAA,IAAA,CAAA,aAAA,CAAmB,CAC9C,GAAG,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,EAAA,EAApB,EAAoB,CAApB,EAD2C,MAC3C,CAD2C,EAE9C,GAAG,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,EAAA,EAApB,EAAoB,CAApB,EAFL,MAEK,CAF2C,CAAnB,CAA7B;;AAIA,oBAAM,CAAA,MAAA,EAAA,MAAA,IAAmBtnC,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAdF,MAcEA,CAAzB;;AACA,oBAAM2oC,MAAAA,GAAS/a,KAAAA,GAfQ,MAevB;AACA,oBAAMgb,MAAAA,GAAS/a,KAAAA,GAhBQ,MAgBvB;AAEA,oBAAMgb,MAAAA,GAAS,KAAA,UAAA,CAAA,aAAA,CAlBQ,aAkBR,CAAf;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAnBuB,QAmBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EApBuB,gBAoBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EArBuB,MAqBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAtBuB,MAsBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAiC,GAvBV,GAAA,EAuBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAiC,GAxBV,GAAA,EAwBvBA;AAGA,oBAAMjlC,GAAAA,GAAM,KA3BW,GA2BvB;AACA,oBAAM4jC,eAAAA,GAAkB,KA5BD,eA4BvB;AACA,oBAAM5mB,SAAAA,GAAY,KAAA,OAAA,CA7BK,SA6BvB;AACA,oBAAMoC,WAAAA,GAAc,KAAA,OAAA,CA9BG,WA8BvB;AAEA,oBAAM0E,IAAAA,GAAO,KAAA,UAAA,CAAA,MAAA,CAAuBohB,GAAAA,GAAvB,GAAA,EAAkCC,GAAAA,GAhCxB,GAgCV,CAAb;AACA,mBAAA,GAAA,GAjCuB,IAiCvB;AACA,mBAAA,eAAA,GAlCuB,MAkCvB;;AACA,kBAAIjb,SAAAA,KAAJ,CAAA,EAAqB;AACnB,sBAAMgB,QAAAA,GAAW9uB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkB,GADhB,KACFA,CAAjB;;AACA,qBAAA,OAAA,CAAA,SAAA,GAFmB,QAEnB;AACA,qBAAA,OAAA,CAAA,WAAA,GAHmB,QAGnB;AAtCqB;;AAwCvB,mBAAA,aAAA,CAAmB,KAAA,aAAA,CAxCI,YAwCJ,CAAnB;AAGA,mBAAA,GAAA,GA3CuB,GA2CvB;AACA,mBAAA,eAAA,GA5CuB,eA4CvB;AACA,mBAAA,OAAA,CAAA,SAAA,GA7CuB,SA6CvB;AACA,mBAAA,OAAA,CAAA,WAAA,GA9CuB,WA8CvB;AAEA6oC,cAAAA,MAAAA,CAAAA,WAAAA,CAAmBnhB,IAAAA,CAAAA,UAAAA,CAhDI,CAgDJA,CAAnBmhB;AACA,mBAAA,IAAA,CAAA,WAAA,CAjDuB,MAiDvB;AACA,qBAAO,QAlDgB,QAAA,GAkDvB;AA5sBgB;;AAktBlBG,YAAAA,mBAAAA,CAAAA,IAAAA,EAA0B;AACxB,sBAAQtxB,IAAAA,CAAR,CAAQA,CAAR;AACE,qBAAA,aAAA;AACE,wBAAMuxB,SAAAA,GAAY,UAAU3B,YAD9B,EAAA,EACE;AACA,wBAAM4B,UAAAA,GAAaxxB,IAAAA,CAFrB,CAEqBA,CAAnB;AACA,sBAHF,QAGE;;AAEA,0BAAQA,IAAAA,CAAR,CAAQA,CAAR;AACE,yBAAA,OAAA;AACE,4BAAMyxB,MAAAA,GAASzxB,IAAAA,CADjB,CACiBA,CAAf;AACA,4BAAM0xB,MAAAA,GAAS1xB,IAAAA,CAFjB,CAEiBA,CAAf;AACA2xB,sBAAAA,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAHb,oBAGa,CAAXA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAJF,SAIEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EALF,gBAKEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCF,MAAAA,CANtC,CAMsCA,CAApCE;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCF,MAAAA,CAPtC,CAOsCA,CAApCE;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCD,MAAAA,CARtC,CAQsCA,CAApCC;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCD,MAAAA,CATtC,CASsCA,CAApCC;AAVJ;;AAYE,yBAAA,QAAA;AACE,4BAAMC,UAAAA,GAAa5xB,IAAAA,CADrB,CACqBA,CAAnB;AACA,4BAAM6xB,WAAAA,GAAc7xB,IAAAA,CAFtB,CAEsBA,CAApB;AACA,4BAAM8xB,WAAAA,GAAc9xB,IAAAA,CAHtB,CAGsBA,CAApB;AACA,4BAAM+xB,YAAAA,GAAe/xB,IAAAA,CAJvB,CAIuBA,CAArB;AACA2xB,sBAAAA,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CALb,oBAKa,CAAXA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EANF,SAMEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EAPF,gBAOEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCE,WAAAA,CARtC,CAQsCA,CAApCF;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCE,WAAAA,CATtC,CASsCA,CAApCF;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAVF,YAUEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCC,UAAAA,CAXtC,CAWsCA,CAApCD;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCC,UAAAA,CAZtC,CAYsCA,CAApCD;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAbF,WAaEA;AAzBJ;;AA2BE;AACE,4BAAM,IAAA,KAAA,CAAU,6BAA6B3xB,IAAAA,CA5BjD,CA4BiDA,CA5BjD,EA4BU,CAAN;AA5BJ;;AA8BA,uBAAA,MAAA,SAAA,IAAA,UAAA,EAAoC;AAClC,0BAAMgyB,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CADqB,UACrB,CAAb;AACAA,oBAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoC3f,SAAAA,CAFF,CAEEA,CAApC2f;AACAA,oBAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAwC3f,SAAAA,CAHN,CAGMA,CAAxC2f;AACAL,oBAAAA,QAAAA,CAAAA,WAAAA,CAJkC,IAIlCA;AAvCJ;;AAyCE,uBAAA,IAAA,CAAA,WAAA,CAzCF,QAyCE;AACA,yBAAO,QA3CX,SAAA,GA2CI;;AACF,qBAAA,MAAA;AACEvgD,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADF,4BACEA;AACA,yBA9CJ,IA8CI;;AACF,qBAAA,OAAA;AACE,yBAhDJ,SAgDI;;AACF;AACE,wBAAM,IAAA,KAAA,CAAU,oBAAoB4uB,IAAAA,CAlDxC,CAkDwCA,CAlDxC,EAkDU,CAAN;AAlDJ;AAntBgB;;AAywBlB9hB,YAAAA,OAAAA,CAAAA,SAAAA,EAAAA,SAAAA,EAA8B;AAC5B,mBAAA,OAAA,CAAA,SAAA,GAD4B,SAC5B;AACA,mBAAA,OAAA,CAAA,SAAA,GAF4B,SAE5B;AA3wBgB;;AA8wBlBqF,YAAAA,aAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAyB;AACvB,oBAAM0c,OAAAA,GAAU,KADO,OACvB;AACA,kBAAIgL,CAAAA,GAAIhL,OAAAA,CAAR,CAAA;AAAA,kBACEmG,CAAAA,GAAInG,OAAAA,CAHiB,CAEvB;AAEA,kBAAI9X,CAAAA,GAJmB,EAIvB;AACA,kBAAI4a,CAAAA,GALmB,CAKvB;;AAEA,mBAAA,MAAA,EAAA,IAAA,GAAA,EAAsB;AACpB,wBAAQkvB,EAAAA,GAAR,CAAA;AACE,uBAAKr0C,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEqtB,oBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CADX,EACM/C,CAAJiL;AACA7E,oBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAFX,EAEM/C,CAAJoG;AACA,0BAAM92B,KAAAA,GAAQ0wB,IAAAA,CAAK+C,CAHrB,EAGgB/C,CAAd;AACA,0BAAMzwB,MAAAA,GAASywB,IAAAA,CAAK+C,CAJtB,EAIiB/C,CAAf;AACA,0BAAMmL,EAAAA,GAAKF,CAAAA,GALb,KAKE;AACA,0BAAMG,EAAAA,GAAKhF,CAAAA,GANb,MAME;AACAje,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEsnC,EAAAA,CAFFtnC,CAEEsnC,CAFFtnC,EAGEsnC,EAAAA,CAHFtnC,CAGEsnC,CAHFtnC,EAAAA,GAAAA,EAKEsnC,EAAAA,CALFtnC,EAKEsnC,CALFtnC,EAMEsnC,EAAAA,CANFtnC,CAMEsnC,CANFtnC,EAAAA,GAAAA,EAQEsnC,EAAAA,CARFtnC,EAQEsnC,CARFtnC,EASEsnC,EAAAA,CATFtnC,EASEsnC,CATFtnC,EAAAA,GAAAA,EAWEsnC,EAAAA,CAXFtnC,CAWEsnC,CAXFtnC,EAYEsnC,EAAAA,CAZFtnC,EAYEsnC,CAZFtnC,EAPF,GAOEA;AARJ;;AAwBE,uBAAKvK,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEqtB,oBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CADX,EACM/C,CAAJiL;AACA7E,oBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAFX,EAEM/C,CAAJoG;AACAje,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAYsnC,EAAAA,CAAZtnC,CAAYsnC,CAAZtnC,EAAmBsnC,EAAAA,CAHrB,CAGqBA,CAAnBtnC;AA3BJ;;AA6BE,uBAAKvK,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEqtB,oBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CADX,EACM/C,CAAJiL;AACA7E,oBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAFX,EAEM/C,CAAJoG;AACAje,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAYsnC,EAAAA,CAAZtnC,CAAYsnC,CAAZtnC,EAAmBsnC,EAAAA,CAHrB,CAGqBA,CAAnBtnC;AAhCJ;;AAkCE,uBAAKvK,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACEqtB,oBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CAAAA,GADX,CACM/C,CAAJiL;AACA7E,oBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAAAA,GAFX,CAEM/C,CAAJoG;AACAje,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEsnC,EAAAA,CAAGzvB,IAAAA,CAFL7X,CAEK6X,CAAHyvB,CAFFtnC,EAGEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GAHV5a,CAGK6X,CAAHyvB,CAHFtnC,EAIEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GAJV5a,CAIK6X,CAAHyvB,CAJFtnC,EAKEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GALV5a,CAKK6X,CAAHyvB,CALFtnC,EAMEsnC,EAAAA,CANFtnC,CAMEsnC,CANFtnC,EAOEsnC,EAAAA,CAVJ,CAUIA,CAPFtnC;AASA4a,oBAAAA,CAAAA,IAZF,CAYEA;AA9CJ;;AAgDE,uBAAKnlB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEuK,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEsnC,EAAAA,CAFFtnC,CAEEsnC,CAFFtnC,EAGEsnC,EAAAA,CAHFtnC,CAGEsnC,CAHFtnC,EAIEsnC,EAAAA,CAAGzvB,IAAAA,CAJL7X,CAIK6X,CAAHyvB,CAJFtnC,EAKEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GALV5a,CAKK6X,CAAHyvB,CALFtnC,EAMEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GANV5a,CAMK6X,CAAHyvB,CANFtnC,EAOEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GARZ,CAQO/C,CAAHyvB,CAPFtnC;AASA8iB,oBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CAAAA,GAVX,CAUM/C,CAAJiL;AACA7E,oBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAAAA,GAXX,CAWM/C,CAAJoG;AACArD,oBAAAA,CAAAA,IAZF,CAYEA;AA5DJ;;AA8DE,uBAAKnlB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEqtB,oBAAAA,CAAAA,GAAIjL,IAAAA,CAAK+C,CAAAA,GADX,CACM/C,CAAJiL;AACA7E,oBAAAA,CAAAA,GAAIpG,IAAAA,CAAK+C,CAAAA,GAFX,CAEM/C,CAAJoG;AACAje,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEsnC,EAAAA,CAAGzvB,IAAAA,CAFL7X,CAEK6X,CAAHyvB,CAFFtnC,EAGEsnC,EAAAA,CAAGzvB,IAAAA,CAAK+C,CAAAA,GAHV5a,CAGK6X,CAAHyvB,CAHFtnC,EAIEsnC,EAAAA,CAJFtnC,CAIEsnC,CAJFtnC,EAKEsnC,EAAAA,CALFtnC,CAKEsnC,CALFtnC,EAMEsnC,EAAAA,CANFtnC,CAMEsnC,CANFtnC,EAOEsnC,EAAAA,CAVJ,CAUIA,CAPFtnC;AASA4a,oBAAAA,CAAAA,IAZF,CAYEA;AA1EJ;;AA4EE,uBAAKnlB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEuK,oBAAAA,CAAAA,CAAAA,IAAAA,CADF,GACEA;AA7EJ;AAAA;AARqB;;AA0FvBA,cAAAA,CAAAA,GAAIA,CAAAA,CAAAA,IAAAA,CA1FmB,GA0FnBA,CAAJA;;AAEA,kBACE8X,OAAAA,CAAAA,IAAAA,IACAiL,GAAAA,CAAAA,MAAAA,GADAjL,CAAAA,IAEAiL,GAAAA,CAAAA,CAAAA,CAAAA,KAAWttB,KAAAA,CAAAA,GAAAA,CAFXqiB,SAAAA,IAGAiL,GAAAA,CAAAA,CAAAA,CAAAA,KAAWttB,KAAAA,CAAAA,GAAAA,CAJb,MAAA,EAKE;AAIAuK,gBAAAA,CAAAA,GAAI8X,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,IAJJ,CAIA9X;AATF,eAAA,MAUO;AACL8X,gBAAAA,OAAAA,CAAAA,IAAAA,GAAe,KAAA,UAAA,CAAA,aAAA,CADV,UACU,CAAfA;;AACA,qBAAA,qBAAA,GAAA,WAAA,CAAyCA,OAAAA,CAFpC,IAEL;AAxGqB;;AA2GvBA,cAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EA3GuB,CA2GvBA;AACAA,cAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EA5GuB,MA4GvBA;AAIAA,cAAAA,OAAAA,CAAAA,OAAAA,GAAkBA,OAAAA,CAhHK,IAgHvBA;AACAA,cAAAA,OAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAjHuB,CAiHvBA;AA/3BgB;;AAk4BlBzgB,YAAAA,OAAAA,GAAU;AACR,oBAAMygB,OAAAA,GAAU,KADR,OACR;AAGAA,cAAAA,OAAAA,CAAAA,IAAAA,GAJQ,IAIRA;;AAEA,kBAAI,CAAC,KAAL,WAAA,EAAuB;AAAA;AANf;;AASR,kBAAI,CAACA,OAAAA,CAAL,OAAA,EAAsB;AACpB,qBAAA,WAAA,GADoB,IACpB;AADoB;AATd;;AAeR,oBAAMiyB,MAAAA,GAAS,WAAWxC,SAflB,EAAA,EAeR;AACA,oBAAMyC,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAhBT,cAgBS,CAAjB;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAjBQ,MAiBRA;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA2C1B,EAAAA,CAAG,KAlBtC,eAkBmCA,CAA3C0B;AAGA,oBAAMC,WAAAA,GAAcnyB,OAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CArBZ,IAqBYA,CAApB;;AACA,kBAAI,KAAA,WAAA,KAAJ,SAAA,EAAoC;AAClCmyB,gBAAAA,WAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EADkC,SAClCA;AADF,eAAA,MAEO;AACLA,gBAAAA,WAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EADK,SACLA;AAzBM;;AA2BR,mBAAA,WAAA,GA3BQ,IA2BR;AACAD,cAAAA,QAAAA,CAAAA,WAAAA,CA5BQ,WA4BRA;AACA,mBAAA,IAAA,CAAA,WAAA,CA7BQ,QA6BR;;AAEA,kBAAIlyB,OAAAA,CAAJ,aAAA,EAA2B;AAGzBA,gBAAAA,OAAAA,CAAAA,SAAAA,GAHyB,IAGzBA;;AACA,qBAAA,MAAA,IAAA,IAAmB,KAAnB,UAAA,EAAoC;AAClC6B,kBAAAA,IAAAA,CAAAA,SAAAA,GADkC,IAClCA;AALuB;;AAQzBqwB,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA2ClyB,OAAAA,CARlB,aAQzBkyB;AAvCM;;AAyCRlyB,cAAAA,OAAAA,CAAAA,aAAAA,GAAwB,QAzChB,MAAA,GAyCRA;AAEA,mBAAA,IAAA,GA3CQ,IA2CR;AA76BgB;;AAg7BlBxgB,YAAAA,IAAAA,CAAAA,IAAAA,EAAW;AACT,mBAAA,WAAA,GADS,IACT;AAj7BgB;;AAo7BlBX,YAAAA,SAAAA,GAAY;AACV,oBAAMmhB,OAAAA,GAAU,KADN,OACV;;AACA,kBAAIA,OAAAA,CAAJ,IAAA,EAAkB;AAChB,sBAAM9X,CAAAA,GAAI,GAAG8X,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EADG,GACHA,CADG,GAChB;AACAA,gBAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAFgB,CAEhBA;AAJQ;AAp7BM;;AA47BlBjgB,YAAAA,UAAAA,CAAAA,OAAAA,EAAoB;AAClB,mBAAA,OAAA,CAAA,OAAA,GAAuB,CADL,OAClB;AA77BgB;;AAg8BlBG,YAAAA,WAAAA,CAAAA,QAAAA,EAAsB;AACpB,mBAAA,OAAA,CAAA,QAAA,GADoB,QACpB;AAj8BgB;;AAo8BlBD,YAAAA,oBAAAA,CAAAA,iBAAAA,EAAwC;AACtC,mBAAA,OAAA,CAAA,iBAAA,GADsC,iBACtC;AAr8BgB;;AAw8BlBH,YAAAA,SAAAA,CAAAA,KAAAA,EAAiB;AACf,mBAAA,OAAA,CAAA,UAAA,GAA0BtQ,KAAAA,GADX,GACf;AAz8BgB;;AA48BlB0O,YAAAA,kBAAAA,CAAAA,MAAAA,EA58BkB,CAAA;;AAg9BlBC,YAAAA,WAAAA,CAAAA,QAAAA,EAh9BkB,CAAA;;AAo9BlBC,YAAAA,SAAAA,CAAAA,MAAAA,EAAkB;AAChB,mBAAA,MAAW,CAAA,GAAA,EAAX,KAAW,CAAX,IAAA,MAAA,EAAmC;AACjC,wBAAA,GAAA;AACE,uBAAA,IAAA;AACE,yBAAA,YAAA,CADF,KACE;AAFJ;;AAIE,uBAAA,IAAA;AACE,yBAAA,UAAA,CADF,KACE;AALJ;;AAOE,uBAAA,IAAA;AACE,yBAAA,WAAA,CADF,KACE;AARJ;;AAUE,uBAAA,IAAA;AACE,yBAAA,aAAA,CADF,KACE;AAXJ;;AAaE,uBAAA,GAAA;AACE,yBAAA,OAAA,CAAa0I,KAAAA,CAAb,CAAaA,CAAb,EAAuBA,KAAAA,CADzB,CACyBA,CAAvB;AAdJ;;AAgBE,uBAAA,IAAA;AACE,yBAAA,kBAAA,CADF,KACE;AAjBJ;;AAmBE,uBAAA,IAAA;AACE,yBAAA,WAAA,CADF,KACE;AApBJ;;AAsBE,uBAAA,MAAA;AACE,yBAAA,OAAA,CADF,KACE;AAvBJ;;AAyBE,uBAAA,IAAA;AACE,yBAAA,cAAA,CADF,KACE;AA1BJ;;AA4BE,uBAAA,IAAA;AACE,yBAAA,YAAA,CADF,KACE;AA7BJ;;AA+BE;AACE3V,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,wCADP,GAAA,EACEA;AAhCJ;AAAA;AAFc;AAp9BA;;AA4/BlB8N,YAAAA,IAAAA,GAAO;AACL,oBAAM+gB,OAAAA,GAAU,KADX,OACL;;AACA,kBAAIA,OAAAA,CAAJ,OAAA,EAAqB;AACnBA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA6CA,OAAAA,CAD1B,SACnBA;AACAA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAqDA,OAAAA,CAFlC,SAEnBA;AACA,qBAHmB,OAGnB;AALG;AA5/BW;;AAqgClBjhB,YAAAA,MAAAA,GAAS;AACP,oBAAMihB,OAAAA,GAAU,KADT,OACP;;AACA,kBAAIA,OAAAA,CAAJ,OAAA,EAAqB;AACnB,qBAAA,oBAAA,CAA0BA,OAAAA,CADP,OACnB;;AACAA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAFmB,MAEnBA;AACA,qBAHmB,OAGnB;AALK;AArgCS;;AAihClBoyB,YAAAA,oBAAAA,CAAAA,OAAAA,EAAkD;AAAA,kBAApB9B,cAAoB,uEAAlD8B,CAAkD;AAChD,oBAAMpyB,OAAAA,GAAU,KADgC,OAChD;AACA,kBAAIqyB,SAAAA,GAAYryB,OAAAA,CAFgC,SAEhD;;AACA,kBAAIswB,cAAAA,KAAAA,CAAAA,IAAwB+B,SAAAA,CAAAA,MAAAA,GAA5B,CAAA,EAAkD;AAChDA,gBAAAA,SAAAA,GAAY,SAAA,CAAA,GAAA,CAAc,UAAA,KAAA,EAAiB;AACzC,yBAAO/B,cAAAA,GADkC,KACzC;AADF+B,iBAAY,CAAZA;AAJ8C;;AAQhDzX,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAuC5a,OAAAA,CARS,WAQhD4a;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,gBAAAA,EAA+C5a,OAAAA,CATC,WAShD4a;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAkD4U,EAAAA,CAAGxvB,OAAAA,CAVL,UAUEwvB,CAAlD5U;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,gBAAAA,EAA+C5a,OAAAA,CAXC,OAWhD4a;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,iBAAAA,EAAgD5a,OAAAA,CAZA,QAYhD4a;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAGE4U,EAAAA,CAAGc,cAAAA,GAAiBtwB,OAAAA,CAApBwvB,SAAAA,CAAAA,GAhB8C,IAahD5U;AAKAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,kBAAAA,EAGEyX,SAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CArB8C,GAqB9CA,CAHFzX;AAKAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAGE4U,EAAAA,CAAGc,cAAAA,GAAiBtwB,OAAAA,CAApBwvB,SAAAA,CAAAA,GA1B8C,IAuBhD5U;AAxiCgB;;AA+iClB17B,YAAAA,MAAAA,GAAS;AACP,kBAAI,KAAA,OAAA,CAAJ,OAAA,EAA0B;AACxB,qBAAA,OAAA,CAAA,OAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EADwB,SACxB;AAFK;;AAIP,mBAJO,IAIP;AAnjCgB;;AAsjClBC,YAAAA,UAAAA,GAAa;AAGX,mBAHW,MAGX;AACA,mBAJW,IAIX;AA1jCgB;;AA6jClBC,YAAAA,YAAAA,GAAe;AACb,kBAAI,KAAA,OAAA,CAAJ,OAAA,EAA0B;AACxB,qBAAA,OAAA,CAAA,OAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EADwB,SACxB;AAFW;;AAIb,mBAJa,UAIb;AAjkCgB;;AAokClBJ,YAAAA,WAAAA,GAAc;AACZ,mBADY,SACZ;AACA,mBAFY,MAEZ;AAtkCgB;;AAykClBK,YAAAA,eAAAA,GAAkB;AAChB,mBADgB,SAChB;AACA,mBAFgB,UAEhB;AA3kCgB;;AA8kClBC,YAAAA,iBAAAA,GAAoB;AAClB,mBADkB,SAClB;AACA,mBAFkB,YAElB;AAhlCgB;;AAmlClB+D,YAAAA,wBAAAA,GAA2B;AACzB,oBAAMzT,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CADY,UACZ,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAFyB,GAEzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAHyB,GAGzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAJyB,KAIzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EALyB,KAKzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAkC,KAAA,OAAA,CANT,SAMzBA;;AAEA,mBAAA,qBAAA,GAAA,WAAA,CARyB,IAQzB;AA3lCgB;;AA8lClBoT,YAAAA,iBAAAA,CAAAA,KAAAA,EAAyB;AACvB,oBAAMsf,OAAAA,GAAUsO,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IACZ,KAAA,UAAA,CAAA,GAAA,CADYA,KACZ,CADYA,GAEZ,KAAA,IAAA,CAAA,GAAA,CAHmB,KAGnB,CAFJ;;AAGA,kBAAI,CAAJ,OAAA,EAAc;AACZz/B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,kCADO,KAAA,mBACZA;AADY;AAJS;;AAQvB,mBAAA,uBAAA,CARuB,OAQvB;AAtmCgB;;AAymClB8R,YAAAA,uBAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAuC;AACrC,oBAAM5T,KAAAA,GAAQizB,OAAAA,CADuB,KACrC;AACA,oBAAMhzB,MAAAA,GAASgzB,OAAAA,CAFsB,MAErC;AAEA,oBAAMgwB,MAAAA,GAAS9E,mBAAAA,CAAAA,OAAAA,EAA6B,KAA7BA,eAAAA,EAAmD,CAAC,CAJ9B,IAItBA,CAAf;AACA,oBAAM+E,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CALoB,UAKpB,CAAjB;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EANqC,GAMrCA;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAPqC,GAOrCA;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAuC/C,EAAAA,CARF,KAQEA,CAAvC+C;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC/C,EAAAA,CATH,MASGA,CAAxC+C;AACA,mBAAA,OAAA,CAAA,OAAA,GAVqC,QAUrC;AACA,mBAAA,IAAA,CAXqC,SAWrC;AAEA,oBAAMC,KAAAA,GAAQ,KAAA,UAAA,CAAA,aAAA,CAbuB,WAavB,CAAd;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,QAAAA,EAAAA,YAAAA,EAdqC,MAcrCA;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAfqC,GAerCA;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAgChD,EAAAA,CAAG,CAhBE,MAgBLA,CAAhCgD;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAoChD,EAAAA,CAAAA,KAAAA,CAAAA,GAjBC,IAiBrCgD;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAqChD,EAAAA,CAAAA,MAAAA,CAAAA,GAlBA,IAkBrCgD;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,SAAShD,EAAAA,CAAG,IAAZ,KAASA,CAAT,IAA0BA,EAAAA,CAAG,CAAA,CAAA,GAtBM,MAsBTA,CAtBS,GAmBrCgD;;AAKA,kBAAA,IAAA,EAAU;AACR5vB,gBAAAA,IAAAA,CAAAA,WAAAA,CADQ,KACRA;AADF,eAAA,MAEO;AACL,qBAAA,qBAAA,GAAA,WAAA,CADK,KACL;AA3BmC;AAzmCrB;;AAwoClB9f,YAAAA,qBAAAA,CAAAA,OAAAA,EAA+B;AAC7B,oBAAMkd,OAAAA,GAAU,KADa,OAC7B;AACA,oBAAM3wB,KAAAA,GAAQizB,OAAAA,CAFe,KAE7B;AACA,oBAAMhzB,MAAAA,GAASgzB,OAAAA,CAHc,MAG7B;AACA,oBAAM2G,SAAAA,GAAYjJ,OAAAA,CAJW,SAI7B;AAEAA,cAAAA,OAAAA,CAAAA,MAAAA,GAAiB,OAAO0vB,SANK,EAAA,EAM7B1vB;AACA,oBAAM4C,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAPgB,UAOhB,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAgC5C,OAAAA,CARH,MAQ7B4C;AAEA,oBAAMhzB,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAVgB,UAUhB,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAX6B,GAW7BA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAZ6B,GAY7BA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAmC4/C,EAAAA,CAbN,KAaMA,CAAnC5/C;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoC4/C,EAAAA,CAdP,MAcOA,CAApC5/C;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAf6B,SAe7BA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAkC,QAAQowB,OAAAA,CAhBb,MAAA,GAgB7BpwB;AAEA,mBAAA,IAAA,CAAA,WAAA,CAlB6B,IAkB7B;;AACA,mBAAA,qBAAA,GAAA,WAAA,CAnB6B,IAmB7B;;AAEA,mBAAA,uBAAA,CAAA,OAAA,EArB6B,IAqB7B;AA7pCgB;;AAgqClByS,YAAAA,qBAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAoC;AAClC,kBAAIkF,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,KAAyB6nB,MAAAA,CAAAA,MAAAA,KAA7B,CAAA,EAAkD;AAChD,qBAAA,SAAA,CACEA,MAAAA,CADF,CACEA,CADF,EAEEA,MAAAA,CAFF,CAEEA,CAFF,EAGEA,MAAAA,CAHF,CAGEA,CAHF,EAIEA,MAAAA,CAJF,CAIEA,CAJF,EAKEA,MAAAA,CALF,CAKEA,CALF,EAMEA,MAAAA,CAP8C,CAO9CA,CANF;AAFgC;;AAYlC,kBAAA,IAAA,EAAU;AACR,sBAAM//B,KAAAA,GAAQ0gC,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CADhB,CACgBA,CAAxB;AACA,sBAAMzgC,MAAAA,GAASygC,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAFjB,CAEiBA,CAAzB;AAEA,sBAAMwiB,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAJT,UAIS,CAAjB;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAmCxiB,IAAAA,CAL3B,CAK2BA,CAAnCwiB;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAmCxiB,IAAAA,CAN3B,CAM2BA,CAAnCwiB;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAuC/C,EAAAA,CAP/B,KAO+BA,CAAvC+C;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC/C,EAAAA,CARhC,MAQgCA,CAAxC+C;AACA,qBAAA,OAAA,CAAA,OAAA,GATQ,QASR;AACA,qBAAA,IAAA,CAVQ,SAUR;AACA,qBAXQ,OAWR;AAvBgC;AAhqClB;;AA2rClBjwC,YAAAA,mBAAAA,GA3rCkB,CAAA;;AAgsClB2V,YAAAA,WAAAA,CAAAA,QAAAA,EAAsB;AACpB,oBAAMhM,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAuBwb,QAAAA,CAAvB,KAAA,EAAuCA,QAAAA,CAD/B,MACR,CAAZ;AAGA,oBAAMgrB,WAAAA,GAAc,KAAA,UAAA,CAAA,aAAA,CAJA,UAIA,CAApB;AACAxmC,cAAAA,GAAAA,CAAAA,WAAAA,CALoB,WAKpBA;AACA,mBAAA,IAAA,GANoB,WAMpB;AAIA,oBAAMymC,SAAAA,GAAY,KAAA,UAAA,CAAA,aAAA,CAVE,OAUF,CAAlB;AACAA,cAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA4ClC,EAAAA,CAAG/oB,QAAAA,CAX3B,SAWwB+oB,CAA5CkC;AACAzmC,cAAAA,GAAAA,CAAAA,WAAAA,CAZoB,SAYpBA;AAKA,mBAAA,GAAA,GAjBoB,SAiBpB;AAEA,qBAnBoB,GAmBpB;AAntCgB;;AAytClB0mC,YAAAA,gBAAAA,GAAmB;AACjB,kBAAI,CAAC,KAAA,OAAA,CAAL,SAAA,EAA6B;AAC3B,sBAAMC,SAAAA,GAAY,KAAA,UAAA,CAAA,aAAA,CADS,OACT,CAAlB;AACAA,gBAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA4C,KAAA,OAAA,CAFjB,aAE3BA;AACA,qBAAA,GAAA,CAAA,WAAA,CAH2B,SAG3B;AACA,qBAAA,OAAA,CAAA,SAAA,GAJ2B,SAI3B;AALe;;AAOjB,qBAAO,KAAA,OAAA,CAPU,SAOjB;AAhuCgB;;AAsuClBC,YAAAA,qBAAAA,GAAwB;AACtB,kBAAI,CAAC,KAAL,IAAA,EAAgB;AACd,qBAAA,IAAA,GAAY,KAAA,UAAA,CAAA,aAAA,CADE,OACF,CAAZ;AACA,qBAAA,IAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAA4CrC,EAAAA,CAAG,KAFjC,eAE8BA,CAA5C;;AACA,oBAAI,KAAA,OAAA,CAAJ,aAAA,EAAgC;AAC9B,uBAAA,gBAAA,GAAA,WAAA,CAAoC,KADN,IAC9B;AADF,iBAAA,MAEO;AACL,uBAAA,GAAA,CAAA,WAAA,CAAqB,KADhB,IACL;AANY;AADM;;AAUtB,qBAAO,KAVe,IAUtB;AAhvCgB;;AAAA,WAApBtD;AAvbF;;;;;;;;;;;;ACAA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,SAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAkBA,cAAA,QAAA,CAAe;AACb,iBAAO4F,YAAP,CAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAwD;AACtD,kBAAMhR,UAAAA,GAAajC,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,cAAAA,KAAAA,EADY;AACd,aAArB+4B,CAAnB;;AACA,oBAAQjF,OAAAA,CAAR,IAAA;AACE,mBAAA,UAAA;AACE,oBAAIkH,UAAAA,CAAAA,KAAAA,KAAJ,IAAA,EAA+B;AAC7BiR,kBAAAA,IAAAA,CAAAA,WAAAA,GAAmBjR,UAAAA,CADU,KAC7BiR;AAFJ;;AAIE,oBAAI//B,MAAAA,KAAJ,OAAA,EAAwB;AAAA;AAJ1B;;AAOE+/B,gBAAAA,IAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAA+B17B,KAAAA,IAAS;AACtCwoB,kBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,oBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CADQ;AACjB,mBAArBwoB;AADFkT,iBAAAA;AARJ;;AAYE,mBAAA,OAAA;AACE,oBACEnY,OAAAA,CAAAA,UAAAA,CAAAA,IAAAA,KAAAA,OAAAA,IACAA,OAAAA,CAAAA,UAAAA,CAAAA,IAAAA,KAFF,UAAA,EAGE;AACA,sBAAIkH,UAAAA,CAAAA,KAAAA,KAAqBlH,OAAAA,CAAAA,UAAAA,CAAzB,KAAA,EAAmD;AACjDmY,oBAAAA,IAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EADiD,IACjDA;AADF,mBAAA,MAEO,IAAIjR,UAAAA,CAAAA,KAAAA,KAAqBlH,OAAAA,CAAAA,UAAAA,CAAzB,MAAA,EAAoD;AAGzDmY,oBAAAA,IAAAA,CAAAA,eAAAA,CAHyD,SAGzDA;AANF;;AAQA,sBAAI//B,MAAAA,KAAJ,OAAA,EAAwB;AAAA;AARxB;;AAWA+/B,kBAAAA,IAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAgC17B,KAAAA,IAAS;AACvCwoB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnB/4B,sBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,GACHA,KAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CADGA,OACHA,CADGA,GAEHA,KAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAJiC,QAIjCA;AAHe,qBAArBwoB;AADFkT,mBAAAA;AAdF,iBAAA,MAqBO;AACL,sBAAIjR,UAAAA,CAAAA,KAAAA,KAAJ,IAAA,EAA+B;AAC7BiR,oBAAAA,IAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAA2BjR,UAAAA,CADE,KAC7BiR;AAFG;;AAIL,sBAAI//B,MAAAA,KAAJ,OAAA,EAAwB;AAAA;AAJnB;;AAOL+/B,kBAAAA,IAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAA+B17B,KAAAA,IAAS;AACtCwoB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAE/4B,sBAAAA,KAAAA,EAAOuQ,KAAAA,CAAAA,MAAAA,CADQ;AACjB,qBAArBwoB;AADFkT,mBAAAA;AA7BJ;;AAZF;;AA8CE,mBAAA,QAAA;AACE,oBAAIjR,UAAAA,CAAAA,KAAAA,KAAJ,IAAA,EAA+B;AAC7B,uBAAA,MAAA,MAAA,IAAqBlH,OAAAA,CAArB,QAAA,EAAuC;AACrC,wBAAI8I,MAAAA,CAAAA,UAAAA,CAAAA,KAAAA,KAA4B5B,UAAAA,CAAhC,KAAA,EAAkD;AAChD4B,sBAAAA,MAAAA,CAAAA,UAAAA,CAAAA,QAAAA,GADgD,IAChDA;AAFmC;AADV;AADjC;;AAQEqP,gBAAAA,IAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAA+B17B,KAAAA,IAAS;AACtC,wBAAM/R,OAAAA,GAAU+R,KAAAA,CAAAA,MAAAA,CADsB,OACtC;AACA,wBAAMvQ,KAAAA,GACJxB,OAAAA,CAAAA,aAAAA,KAA0B,CAA1BA,CAAAA,GAAAA,EAAAA,GAEIA,OAAAA,CAAQA,OAAAA,CAARA,aAAAA,CAAAA,CALgC,KAEtC;AAIAu6B,kBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AANiB,oBAAA;AAMjB,mBAArBA;AANFkT,iBAAAA;AAtDJ;AAAA;AAHW;;AAqEb,iBAAOC,aAAP,SAA6E;AAAA,gBAAxD;AAAA,cAAA,IAAA;AAAA,cAAA,OAAA;AAAiBnT,cAAAA,OAAAA,GAAjB,IAAA;AAAA,cAAA,MAAA;AAArB,cAAA;AAAqB,aAAwD;AAC3E,kBAAM;AAAA,cAAA;AAAA,gBADqE,OAC3E;AACA,kBAAMoT,mBAAAA,GAAsBF,IAAAA,YAF+C,iBAE3E;;AAEA,gBAAIG,UAAAA,CAAAA,IAAAA,KAAJ,OAAA,EAAiC;AAG/BA,cAAAA,UAAAA,CAAAA,IAAAA,GAAkB,GAAGA,UAAAA,CAAH,IAAA,IAHa,MAAA,EAG/BA;AAPyE;;AAS3E,iBAAA,MAAW,CAAA,GAAA,EAAX,KAAW,CAAX,IAA2BzhD,MAAAA,CAAAA,OAAAA,CAA3B,UAA2BA,CAA3B,EAAuD;AAIrD,kBAAIqV,KAAAA,KAAAA,IAAAA,IAAkBA,KAAAA,KAAlBA,SAAAA,IAAyCojB,GAAAA,KAA7C,QAAA,EAA+D;AAAA;AAJV;;AAQrD,kBAAIA,GAAAA,KAAJ,OAAA,EAAqB;AACnB,oBAAIA,GAAAA,KAAJ,aAAA,EAA2B;AACzB6oB,kBAAAA,IAAAA,CAAAA,WAAAA,GADyB,KACzBA;AADF,iBAAA,MAEO,IAAI7oB,GAAAA,KAAJ,OAAA,EAAqB;AAC1B6oB,kBAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAAuBjsC,KAAAA,CAAAA,IAAAA,CADG,GACHA,CAAvBisC;AADK,iBAAA,MAEA;AACL,sBAAIE,mBAAAA,KAAwB,GAAA,KAAA,MAAA,IAAkB/oB,GAAAA,KAA9C,WAAI+oB,CAAJ,EAAoE;AAAA;AAD/D;;AAILF,kBAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAJK,KAILA;AATiB;AAArB,eAAA,MAWO;AACLthD,gBAAAA,MAAAA,CAAAA,MAAAA,CAAcshD,IAAAA,CAAdthD,KAAAA,EADK,KACLA;AApBmD;AAToB;;AAiC3E,gBAAA,mBAAA,EAAyB;AACvB,kBAEE,CAACktC,WAAAA,CAFH,iBAAA,EAGE;AACAxtC,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADA,2FACAA;AALqB;;AASvBwtC,cAAAA,WAAAA,CAAAA,iBAAAA,GAAAA,IAAAA,EAEEuU,UAAAA,CAFFvU,IAAAA,EAGEuU,UAAAA,CAZqB,SASvBvU;AA1CyE;;AAmD3E,gBAAIkB,OAAAA,IAAWqT,UAAAA,CAAf,MAAA,EAAkC;AAChC,mBAAA,YAAA,CAAA,IAAA,EAAwBA,UAAAA,CAAxB,MAAA,EAAA,OAAA,EADgC,OAChC;AApDyE;AArEhE;;AA6Hb,iBAAO7/B,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMwsB,OAAAA,GAAUpD,UAAAA,CADQ,iBACxB;AACA,kBAAMkC,WAAAA,GAAclC,UAAAA,CAFI,WAExB;AACA,kBAAM0W,IAAAA,GAAO1W,UAAAA,CAHW,GAGxB;AACA,kBAAMzpB,MAAAA,GAASypB,UAAAA,CAAAA,MAAAA,IAJS,SAIxB;AACA,kBAAM2W,QAAAA,GAAW1lD,QAAAA,CAAAA,aAAAA,CAAuBylD,IAAAA,CALhB,IAKPzlD,CAAjB;;AACA,gBAAIylD,IAAAA,CAAJ,UAAA,EAAqB;AACnB,mBAAA,aAAA,CAAmB;AACjBJ,gBAAAA,IAAAA,EADiB,QAAA;AAEjBnY,gBAAAA,OAAAA,EAFiB,IAAA;AAAA,gBAAA,MAAA;AAAA,gBAAA;AAAA,eAAnB;AAPsB;;AAcxB,kBAAMyY,KAAAA,GAAQ,CAAC,CAAA,IAAA,EAAO,CAAP,CAAA,EAAf,QAAe,CAAD,CAAd;AAEA,kBAAMC,OAAAA,GAAU7W,UAAAA,CAhBQ,GAgBxB;AACA6W,YAAAA,OAAAA,CAAAA,WAAAA,CAjBwB,QAiBxBA;AACA,kBAAM/0C,SAAAA,GAAY,UAAUk+B,UAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAlBJ,GAkBIA,CAlBJ,GAkBxB;AACA6W,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAnBwB,SAmBxBA;AAGAA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAtBwB,kBAsBxBA;AAGA,kBAAMpJ,QAAAA,GAzBkB,EAyBxB;;AAEA,mBAAOmJ,KAAAA,CAAAA,MAAAA,GAAP,CAAA,EAAyB;AACvB,oBAAM,CAAA,MAAA,EAAA,CAAA,EAAA,IAAA,IAAoBA,KAAAA,CAAMA,KAAAA,CAAAA,MAAAA,GADT,CACGA,CAA1B;;AACA,kBAAIxiD,CAAAA,GAAAA,CAAAA,KAAUm7C,MAAAA,CAAAA,QAAAA,CAAd,MAAA,EAAsC;AACpCqH,gBAAAA,KAAAA,CADoC,GACpCA;AADoC;AAFf;;AAOvB,oBAAME,KAAAA,GAAQvH,MAAAA,CAAAA,QAAAA,CAAgB,EAAEqH,KAAAA,CAAMA,KAAAA,CAAAA,MAAAA,GAANA,CAAAA,CAAAA,CAPT,CAOSA,CAAlBrH,CAAd;;AACA,kBAAIuH,KAAAA,KAAJ,IAAA,EAAoB;AAAA;AARG;;AAYvB,oBAAM;AAAA,gBAAA;AAAA,kBAZiB,KAYvB;;AACA,kBAAI5hD,IAAAA,KAAJ,OAAA,EAAsB;AACpB,sBAAMyqC,IAAAA,GAAO1uC,QAAAA,CAAAA,cAAAA,CAAwB6lD,KAAAA,CADjB,KACP7lD,CAAb;AACAw8C,gBAAAA,QAAAA,CAAAA,IAAAA,CAFoB,IAEpBA;AACA6I,gBAAAA,IAAAA,CAAAA,WAAAA,CAHoB,IAGpBA;AAHoB;AAbC;;AAoBvB,kBApBuB,SAoBvB;;AACA,kBAAIQ,KAAAA,EAAAA,UAAAA,EAAJ,KAAA,EAA8B;AAC5BC,gBAAAA,SAAAA,GAAY9lD,QAAAA,CAAAA,eAAAA,CAAyB6lD,KAAAA,CAAAA,UAAAA,CAAzB7lD,KAAAA,EADgB,IAChBA,CAAZ8lD;AADF,eAAA,MAEO;AACLA,gBAAAA,SAAAA,GAAY9lD,QAAAA,CAAAA,aAAAA,CADP,IACOA,CAAZ8lD;AAxBqB;;AA2BvBT,cAAAA,IAAAA,CAAAA,WAAAA,CA3BuB,SA2BvBA;;AACA,kBAAIQ,KAAAA,CAAJ,UAAA,EAAsB;AACpB,qBAAA,aAAA,CAAmB;AACjBR,kBAAAA,IAAAA,EADiB,SAAA;AAEjBnY,kBAAAA,OAAAA,EAFiB,KAAA;AAAA,kBAAA,OAAA;AAAA,kBAAA,MAAA;AAAA,kBAAA;AAAA,iBAAnB;AA7BqB;;AAsCvB,kBAAI2Y,KAAAA,CAAAA,QAAAA,IAAkBA,KAAAA,CAAAA,QAAAA,CAAAA,MAAAA,GAAtB,CAAA,EAAiD;AAC/CF,gBAAAA,KAAAA,CAAAA,IAAAA,CAAW,CAAA,KAAA,EAAQ,CAAR,CAAA,EAAXA,SAAW,CAAXA;AADF,eAAA,MAEO,IAAIE,KAAAA,CAAJ,KAAA,EAAiB;AACtB,sBAAMnX,IAAAA,GAAO1uC,QAAAA,CAAAA,cAAAA,CAAwB6lD,KAAAA,CADf,KACT7lD,CAAb;;AACA,oBAAIioB,SAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAJ,IAAIA,CAAJ,EAAmC;AACjCu0B,kBAAAA,QAAAA,CAAAA,IAAAA,CADiC,IACjCA;AAHoB;;AAKtBsJ,gBAAAA,SAAAA,CAAAA,WAAAA,CALsB,IAKtBA;AA7CqB;AA3BD;;AA4FxB,iBAAA,MAAA,EAAA,IAAiBF,OAAAA,CAAAA,gBAAAA,CAAjB,uDAAiBA,CAAjB,EAEG;AACDG,cAAAA,EAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EADC,IACDA;AA/FsB;;AAkGxB,mBAAO;AAlGiB,cAAA;AAkGjB,aAAP;AA/NW;;AA2Ob,iBAAO3M,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMvoC,SAAAA,GAAY,UAAUk+B,UAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CADJ,GACIA,CADJ,GACxB;AACAA,YAAAA,UAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAFwB,SAExBA;AACAA,YAAAA,UAAAA,CAAAA,GAAAA,CAAAA,MAAAA,GAHwB,KAGxBA;AA9OW;;AAAA;;;;;;;;;;;;;;ACFf,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAMA,YAAA,cAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAtBA;;AAiCA,cAAMrc,EAAAA,GAAKC,OAAAA,CAjCX,IAiCWA,CAAX;;AACA,cAAMqzB,IAAAA,GAAOrzB,OAAAA,CAlCb,MAkCaA,CAAb;;AACA,cAAMszB,KAAAA,GAAQtzB,OAAAA,CAnCd,OAmCcA,CAAd;;AACA,cAAM9vB,GAAAA,GAAM8vB,OAAAA,CApCZ,KAoCYA,CAAZ;;AAEA,cAAMuzB,YAAAA,GAtCN,yBAsCA;;AAEA,iBAAA,QAAA,CAAA,SAAA,EAA6B;AAC3B,gBAAMC,SAAAA,GAAYtjD,GAAAA,CAAAA,KAAAA,CADS,SACTA,CAAlB;;AACA,cAAIsjD,SAAAA,CAAAA,QAAAA,KAAAA,OAAAA,IAAkCA,SAAAA,CAAtC,IAAA,EAAsD;AACpD,mBADoD,SACpD;AAHyB;;AAM3B,cAAI,gBAAA,IAAA,CAAJ,SAAI,CAAJ,EAAqC;AACnC,mBAAOtjD,GAAAA,CAAAA,KAAAA,CAAU,WADkB,SAAA,EAC5BA,CAAP;AAPyB;;AAU3B,cAAI,CAACsjD,SAAAA,CAAL,IAAA,EAAqB;AACnBA,YAAAA,SAAAA,CAAAA,QAAAA,GADmB,OACnBA;AAXyB;;AAa3B,iBAb2B,SAa3B;AArDF;;AAwDA,cAAA,aAAA,CAAoB;AAClB1mD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,MAAA,GADkB,MAClB;AACA,iBAAA,GAAA,GAAW2mD,QAAAA,CAASnnC,MAAAA,CAFF,GAEPmnC,CAAX;AACA,iBAAA,MAAA,GACE,KAAA,GAAA,CAAA,QAAA,KAAA,OAAA,IAAiC,KAAA,GAAA,CAAA,QAAA,KAJjB,QAGlB;AAGA,iBAAA,OAAA,GAAe,KAAA,GAAA,CAAA,QAAA,KANG,OAMlB;AACA,iBAAA,WAAA,GAAoB,KAAA,MAAA,IAAennC,MAAAA,CAAhB,WAAC,IAPF,EAOlB;AAEA,iBAAA,kBAAA,GATkB,IASlB;AACA,iBAAA,oBAAA,GAVkB,EAUlB;AAXgB;;AAclB,cAAIyuB,sBAAJ,GAA6B;AAC3B,mBAAO,KAAA,kBAAA,EAAA,OAAA,IADoB,CAC3B;AAfgB;;AAkBlBK,UAAAA,aAAAA,GAAgB;AACdnrC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,sDACdA;AAIA,iBAAA,kBAAA,GAA0B,KAAA,OAAA,GACtB,IAAA,yBAAA,CADsB,IACtB,CADsB,GAEtB,IAAA,uBAAA,CAPU,IAOV,CAFJ;AAGA,mBAAO,KARO,kBAQd;AA1BgB;;AA6BlBqrC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,gBAAI3qC,GAAAA,IAAO,KAAX,sBAAA,EAAwC;AACtC,qBADsC,IACtC;AAFuB;;AAIzB,kBAAMupB,WAAAA,GAAc,KAAA,OAAA,GAChB,IAAA,0BAAA,CAAA,IAAA,EAAA,KAAA,EADgB,GAChB,CADgB,GAEhB,IAAA,wBAAA,CAAA,IAAA,EAAA,KAAA,EANqB,GAMrB,CAFJ;;AAGA,iBAAA,oBAAA,CAAA,IAAA,CAPyB,WAOzB;;AACA,mBARyB,WAQzB;AArCgB;;AAwClBqhB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAIxB,iBAAA,MAAA,MAAA,IAAqB,KAAA,oBAAA,CAAA,KAAA,CAArB,CAAqB,CAArB,EAAyD;AACvD/lB,cAAAA,MAAAA,CAAAA,MAAAA,CADuD,MACvDA;AALsB;AAxCR;;AAAA;;;;AAkDpB,cAAA,cAAA,CAAqB;AACnB1oB,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,IAAA,GAAYmsC,MAAAA,CADM,GAClB;AACA,iBAAA,KAAA,GAFkB,KAElB;AACA,iBAAA,YAAA,GAHkB,IAGlB;AACA,iBAAA,UAAA,GAJkB,IAIlB;AACA,kBAAM3sB,MAAAA,GAAS2sB,MAAAA,CALG,MAKlB;AACA,iBAAA,cAAA,GAAsB3sB,MAAAA,CANJ,MAMlB;AACA,iBAAA,OAAA,GAPkB,CAOlB;AACA,iBAAA,SAAA,GARkB,IAQlB;AAEA,iBAAA,aAAA,GAAqBA,MAAAA,CAAAA,YAAAA,IAVH,KAUlB;AACA,iBAAA,eAAA,GAAuBA,MAAAA,CAXL,cAWlB;;AACA,gBAAI,CAAC,KAAD,eAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,mBAAA,aAAA,GADgD,IAChD;AAbgB;;AAgBlB,iBAAA,qBAAA,GAA6B,CAACA,MAAAA,CAhBZ,aAgBlB;AACA,iBAAA,iBAAA,GAAyB,CAACA,MAAAA,CAjBR,YAiBlB;AAEA,iBAAA,eAAA,GAnBkB,IAmBlB;AACA,iBAAA,eAAA,GApBkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAoBlB;AACA,iBAAA,kBAAA,GArBkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAqBlB;AAtBiB;;AAyBnB,cAAIqvB,YAAJ,GAAmB;AACjB,mBAAO,KAAA,kBAAA,CADU,OACjB;AA1BiB;;AA6BnB,cAAI3gB,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AA9BiB;;AAiCnB,cAAIf,aAAJ,GAAoB;AAClB,mBAAO,KADW,cAClB;AAlCiB;;AAqCnB,cAAID,gBAAJ,GAAuB;AACrB,mBAAO,KADc,iBACrB;AAtCiB;;AAyCnB,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AA1CiB;;AA6CnB,gBAAM6hB,IAAN,GAAa;AACX,kBAAM,KAAA,eAAA,CADK,OACX;;AACA,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEn1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAHS;;AAKX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AANS;;AASX,kBAAMzX,KAAAA,GAAQ,KAAA,eAAA,CATH,IASG,EAAd;;AACA,gBAAIA,KAAAA,KAAJ,IAAA,EAAoB;AAClB,mBAAA,eAAA,GADkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAClB;AACA,qBAAO,KAFW,IAEX,EAAP;AAZS;;AAcX,iBAAA,OAAA,IAAgBA,KAAAA,CAdL,MAcX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AACduT,gBAAAA,MAAAA,EAAQ,KADM,OAAA;AAEdC,gBAAAA,KAAAA,EAAO,KAFO;AAAA,eAAhB;AAhBS;;AAsBX,kBAAMxP,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAtBJ,MAsBX;AACA,mBAAO;AAAEzD,cAAAA,KAAAA,EAAF,MAAA;AAAiBkX,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AApEiB;;AAuEnBhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AAGb,gBAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,mBAAA,MAAA,CADyB,MACzB;;AADyB;AAHd;;AAOb,iBAAA,eAAA,CAAA,OAAA,CAPa,MAOb;AA9EiB;;AAiFnB+3B,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,YAAA,GADa,MACb;;AACA,iBAAA,eAAA,CAFa,OAEb;AAnFiB;;AAsFnBC,UAAAA,kBAAAA,CAAAA,cAAAA,EAAmC;AACjC,iBAAA,eAAA,GADiC,cACjC;AACAp+B,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAA8B,MAAM;AAClC,mBAAA,eAAA,CADkC,OAClC;AADFA,aAAAA;AAIAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAyB,MAAM;AAE7BA,cAAAA,cAAAA,CAF6B,OAE7BA;AACA,mBAAA,KAAA,GAH6B,IAG7B;;AACA,mBAAA,eAAA,CAJ6B,OAI7B;AAJFA,aAAAA;AAOAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAA2B5J,MAAAA,IAAU;AACnC,mBAAA,MAAA,CADmC,MACnC;AADF4J,aAAAA;;AAMA,gBAAI,CAAC,KAAD,qBAAA,IAA+B,KAAnC,iBAAA,EAA2D;AACzD,mBAAA,MAAA,CAAY,IAAA,KAAA,CAAA,cAAA,CAD6C,uBAC7C,CAAZ;AApB+B;;AAwBjC,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,eAAA,CAAA,OAAA,CAA6B,KADR,YACrB;AAzB+B;AAtFhB;;AAAA;;AAoHrB,cAAA,eAAA,CAAsB;AACpBzoB,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,IAAA,GAAYmsC,MAAAA,CADM,GAClB;AACA,iBAAA,KAAA,GAFkB,KAElB;AACA,iBAAA,YAAA,GAHkB,IAGlB;AACA,iBAAA,UAAA,GAJkB,IAIlB;AACA,iBAAA,OAAA,GALkB,CAKlB;AACA,iBAAA,eAAA,GANkB,IAMlB;AACA,iBAAA,eAAA,GAPkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAOlB;AACA,kBAAM3sB,MAAAA,GAAS2sB,MAAAA,CARG,MAQlB;AACA,iBAAA,qBAAA,GAA6B,CAAC3sB,MAAAA,CATZ,aASlB;AAVkB;;AAapB,cAAIyN,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AAdkB;;AAiBpB,gBAAM6hB,IAAN,GAAa;AACX,kBAAM,KAAA,eAAA,CADK,OACX;;AACA,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEn1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAHS;;AAKX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AANS;;AASX,kBAAMzX,KAAAA,GAAQ,KAAA,eAAA,CATH,IASG,EAAd;;AACA,gBAAIA,KAAAA,KAAJ,IAAA,EAAoB;AAClB,mBAAA,eAAA,GADkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAClB;AACA,qBAAO,KAFW,IAEX,EAAP;AAZS;;AAcX,iBAAA,OAAA,IAAgBA,KAAAA,CAdL,MAcX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AAAEuT,gBAAAA,MAAAA,EAAQ,KADP;AACH,eAAhB;AAhBS;;AAmBX,kBAAMvP,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAnBJ,MAmBX;AACA,mBAAO;AAAEzD,cAAAA,KAAAA,EAAF,MAAA;AAAiBkX,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AArCkB;;AAwCpBhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AAGb,gBAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,mBAAA,MAAA,CADyB,MACzB;;AADyB;AAHd;;AAOb,iBAAA,eAAA,CAAA,OAAA,CAPa,MAOb;AA/CkB;;AAkDpB+3B,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,YAAA,GADa,MACb;;AACA,iBAAA,eAAA,CAFa,OAEb;AApDkB;;AAuDpBC,UAAAA,kBAAAA,CAAAA,cAAAA,EAAmC;AACjC,iBAAA,eAAA,GADiC,cACjC;AACAp+B,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAA8B,MAAM;AAClC,mBAAA,eAAA,CADkC,OAClC;AADFA,aAAAA;AAIAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAyB,MAAM;AAE7BA,cAAAA,cAAAA,CAF6B,OAE7BA;AACA,mBAAA,KAAA,GAH6B,IAG7B;;AACA,mBAAA,eAAA,CAJ6B,OAI7B;AAJFA,aAAAA;AAOAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAA2B5J,MAAAA,IAAU;AACnC,mBAAA,MAAA,CADmC,MACnC;AADF4J,aAAAA;;AAKA,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,eAAA,CAAA,OAAA,CAA6B,KADR,YACrB;AAnB+B;AAvDf;;AAAA;;AA+EtB,iBAAA,oBAAA,CAAA,SAAA,EAAA,OAAA,EAAkD;AAChD,iBAAO;AACLxjB,YAAAA,QAAAA,EAAUyhD,SAAAA,CADL,QAAA;AAELI,YAAAA,IAAAA,EAAMJ,SAAAA,CAFD,IAAA;AAGLK,YAAAA,IAAAA,EAAML,SAAAA,CAHD,QAAA;AAILxmC,YAAAA,IAAAA,EAAMwmC,SAAAA,CAJD,IAAA;AAKLpoB,YAAAA,IAAAA,EAAMooB,SAAAA,CALD,IAAA;AAMLM,YAAAA,MAAAA,EANK,KAAA;AAAA,YAAA;AAAA,WAAP;AA9SF;;AAyTA,cAAA,uBAAA,SAAA,cAAA,CAAqD;AACnDhnD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,kBADkB,MAClB;;AAEA,kBAAMinD,cAAAA,GAAiBzmD,QAAAA,IAAY;AACjC,kBAAIA,QAAAA,CAAAA,UAAAA,KAAJ,GAAA,EAAiC;AAC/B,sBAAMymB,KAAAA,GAAQ,IAAA,KAAA,CAAA,mBAAA,CAAwB,gBAAgB,KADvB,IAAA,IACjB,CAAd;AACA,qBAAA,YAAA,GAF+B,KAE/B;;AACA,qBAAA,kBAAA,CAAA,MAAA,CAH+B,KAG/B;;AAH+B;AADA;;AAOjC,mBAAA,kBAAA,CAPiC,OAOjC;;AACA,mBAAA,kBAAA,CARiC,QAQjC;;AAEA,oBAAMigC,iBAAAA,GAAoB1iD,IAAAA,IAAQ;AAGhC,uBAAO,KAAA,eAAA,CAAA,OAAA,CAA6BA,IAAAA,CAHJ,WAGIA,EAA7B,CAAP;AAHF,eAAA;;AAKA,oBAAM;AAAA,gBAAA,kBAAA;AAAA,gBAAA;AAAA,kBACJ,CAAA,GAAA,cAAA,CAAA,gCAAA,EAAiC;AAAA,gBAAA,iBAAA;AAE/B2iD,gBAAAA,MAAAA,EAAQhb,MAAAA,CAFuB,MAAA;AAG/BlrB,gBAAAA,cAAAA,EAAgB,KAHe,eAAA;AAI/BJ,gBAAAA,YAAAA,EAAc,KAJiB;AAAA,eAAjC,CADF;AAQA,mBAAA,iBAAA,GAvBiC,kBAuBjC;AAEA,mBAAA,cAAA,GAAsBumC,eAAAA,IAAmB,KAzBR,cAyBjC;AAEA,mBAAA,SAAA,GAAiBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EA3BgB,iBA2BhBA,CAAjB;AA3BF,aAAA;;AA8BA,iBAAA,QAAA,GAjCkB,IAiClB;;AACA,gBAAI,KAAA,IAAA,CAAA,QAAA,KAAJ,OAAA,EAAoC;AAClC,mBAAA,QAAA,GAAgBd,IAAAA,CAAAA,OAAAA,CACde,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgCnb,MAAAA,CADlBoa,WACde,CADcf,EADkB,cAClBA,CAAhB;AADF,aAAA,MAKO;AACL,mBAAA,QAAA,GAAgBC,KAAAA,CAAAA,OAAAA,CACdc,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgCnb,MAAAA,CADlBqa,WACdc,CADcd,EADX,cACWA,CAAhB;AAxCgB;;AA8ClB,iBAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAA0B3nC,MAAAA,IAAU;AAClC,mBAAA,YAAA,GADkC,MAClC;;AACA,mBAAA,kBAAA,CAAA,MAAA,CAFkC,MAElC;AAFF,aAAA;;AAOA,iBAAA,QAAA,CArDkB,GAqDlB;AAtDiD;;AAAA;;AA0DrD,cAAA,wBAAA,SAAA,eAAA,CAAuD;AACrD7e,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,kBAD8B,MAC9B;AAEA,iBAAA,YAAA,GAH8B,EAG9B;;AACA,iBAAA,MAAA,QAAA,IAAuBmsC,MAAAA,CAAvB,WAAA,EAA2C;AACzC,oBAAMxyB,KAAAA,GAAQwyB,MAAAA,CAAAA,WAAAA,CAD2B,QAC3BA,CAAd;;AACA,kBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC;AAAA;AAFO;;AAKzC,mBAAA,YAAA,CAAA,QAAA,IALyC,KAKzC;AAT4B;;AAW9B,iBAAA,YAAA,CAAA,KAAA,GAA0B,SAAA,KAAA,IAAkBtoC,GAAAA,GAXd,CAAA,EAW9B;;AAEA,kBAAMojD,cAAAA,GAAiBzmD,QAAAA,IAAY;AACjC,kBAAIA,QAAAA,CAAAA,UAAAA,KAAJ,GAAA,EAAiC;AAC/B,sBAAMymB,KAAAA,GAAQ,IAAA,KAAA,CAAA,mBAAA,CAAwB,gBAAgB,KADvB,IAAA,IACjB,CAAd;AACA,qBAAA,YAAA,GAF+B,KAE/B;AAF+B;AADA;;AAMjC,mBAAA,kBAAA,CANiC,QAMjC;AANF,aAAA;;AASA,iBAAA,QAAA,GAtB8B,IAsB9B;;AACA,gBAAI,KAAA,IAAA,CAAA,QAAA,KAAJ,OAAA,EAAoC;AAClC,mBAAA,QAAA,GAAgBs/B,IAAAA,CAAAA,OAAAA,CACde,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgC,KADlBf,YACde,CADcf,EADkB,cAClBA,CAAhB;AADF,aAAA,MAKO;AACL,mBAAA,QAAA,GAAgBC,KAAAA,CAAAA,OAAAA,CACdc,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgC,KADlBd,YACdc,CADcd,EADX,cACWA,CAAhB;AA7B4B;;AAmC9B,iBAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAA0B3nC,MAAAA,IAAU;AAClC,mBAAA,YAAA,GADkC,MAClC;AADF,aAAA;;AAGA,iBAAA,QAAA,CAtC8B,GAsC9B;AAvCmD;;AAAA;;AA2CvD,cAAA,yBAAA,SAAA,cAAA,CAAuD;AACrD7e,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,kBADkB,MAClB;AAEA,gBAAIs+B,IAAAA,GAAOj6B,kBAAAA,CAAmB,KAAA,IAAA,CAHZ,IAGPA,CAAX;;AAGA,gBAAIoiD,YAAAA,CAAAA,IAAAA,CAAkB,KAAA,IAAA,CAAtB,IAAIA,CAAJ,EAAuC;AACrCnoB,cAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAD8B,EAC9BA,CAAPA;AAPgB;;AAUlBrL,YAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAe,CAAA,KAAA,EAAA,IAAA,KAAiB;AAC9B,kBAAA,KAAA,EAAW;AACT,oBAAIhM,KAAAA,CAAAA,IAAAA,KAAJ,QAAA,EAA6B;AAC3BA,kBAAAA,KAAAA,GAAQ,IAAA,KAAA,CAAA,mBAAA,CAAwB,gBADL,IAAA,IACnB,CAARA;AAFO;;AAIT,qBAAA,YAAA,GAJS,KAIT;;AACA,qBAAA,kBAAA,CAAA,MAAA,CALS,KAKT;;AALS;AADmB;;AAU9B,mBAAA,cAAA,GAAsBsgC,IAAAA,CAVQ,IAU9B;;AAEA,mBAAA,kBAAA,CAAwBt0B,EAAAA,CAAAA,gBAAAA,CAZM,IAYNA,CAAxB;;AACA,mBAAA,kBAAA,CAb8B,OAa9B;AAbFA,aAAAA;AAXmD;;AAAA;;AA6BvD,cAAA,0BAAA,SAAA,eAAA,CAAyD;AACvDjzB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,kBAD8B,MAC9B;AAEA,gBAAIs+B,IAAAA,GAAOj6B,kBAAAA,CAAmB,KAAA,IAAA,CAHA,IAGnBA,CAAX;;AAGA,gBAAIoiD,YAAAA,CAAAA,IAAAA,CAAkB,KAAA,IAAA,CAAtB,IAAIA,CAAJ,EAAuC;AACrCnoB,cAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAD8B,EAC9BA,CAAPA;AAP4B;;AAU9B,iBAAA,kBAAA,CAAwB,EAAA,CAAA,gBAAA,CAAA,IAAA,EAA0B;AAAA,cAAA,KAAA;AAASz6B,cAAAA,GAAAA,EAAKA,GAAAA,GAAd;AAAA,aAA1B,CAAxB;AAXqD;;AAAA;;;;;;;;;;;;;;;;AC5azD,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAfA,YAAA,oBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAuBA,iBAAA,gCAAA,SAKG;AAAA,cALuC;AAAA,YAAA,iBAAA;AAAA,YAAA,MAAA;AAAA,YAAA,cAAA;AAA1C,YAAA;AAA0C,WAKvC;AACDV,WAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO8d,cAAAA,GAAP9d,CAAAA,EADC,2CACDA;AACA,gBAAMqkD,YAAAA,GAAe;AACnBC,YAAAA,kBAAAA,EADmB,KAAA;AAEnBL,YAAAA,eAAAA,EAFmB;AAAA,WAArB;AAKA,gBAAMruC,MAAAA,GAASrT,QAAAA,CAASwhD,iBAAAA,CAATxhD,gBAASwhD,CAATxhD,EAPd,EAOcA,CAAf;;AACA,cAAI,CAACqS,MAAAA,CAAAA,SAAAA,CAAL,MAAKA,CAAL,EAA+B;AAC7B,mBAD6B,YAC7B;AATD;;AAYDyvC,UAAAA,YAAAA,CAAAA,eAAAA,GAZC,MAYDA;;AAEA,cAAIzuC,MAAAA,IAAU,IAAd,cAAA,EAAkC;AAGhC,mBAHgC,YAGhC;AAjBD;;AAoBD,cAAI8H,YAAAA,IAAgB,CAApB,MAAA,EAA6B;AAC3B,mBAD2B,YAC3B;AArBD;;AAuBD,cAAIqmC,iBAAAA,CAAAA,eAAAA,CAAAA,KAAJ,OAAA,EAAoD;AAClD,mBADkD,YAClD;AAxBD;;AA2BD,gBAAMQ,eAAAA,GAAkBR,iBAAAA,CAAAA,kBAAAA,CAAAA,IA3BvB,UA2BD;;AACA,cAAIQ,eAAAA,KAAJ,UAAA,EAAoC;AAClC,mBADkC,YAClC;AA7BD;;AAgCDF,UAAAA,YAAAA,CAAAA,kBAAAA,GAhCC,IAgCDA;AACA,iBAjCC,YAiCD;AA7DF;;AAgEA,iBAAA,yBAAA,CAAA,iBAAA,EAAsD;AACpD,gBAAMG,kBAAAA,GAAqBT,iBAAAA,CADyB,qBACzBA,CAA3B;;AACA,cAAA,kBAAA,EAAwB;AACtB,gBAAIh5B,QAAAA,GAAW05B,CAAAA,GAAAA,oBAAAA,CAAAA,uCAAAA,EADO,kBACPA,CAAf;;AACA,gBAAI15B,QAAAA,CAAAA,QAAAA,CAAJ,GAAIA,CAAJ,EAA4B;AAC1B,kBAAI;AACFA,gBAAAA,QAAAA,GAAW7pB,kBAAAA,CADT,QACSA,CAAX6pB;AADF,eAAA,CAEE,OAAA,EAAA,EAHwB,CAAA;AAFN;;AAOtB,gBAAIwgB,CAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAJ,QAAIA,CAAJ,EAAyB;AACvB,qBADuB,QACvB;AARoB;AAF4B;;AAapD,iBAboD,IAapD;AA7EF;;AAgFA,iBAAA,yBAAA,CAAA,MAAA,EAAA,GAAA,EAAgD;AAC9C,cAAImZ,MAAAA,KAAAA,GAAAA,IAAmBA,MAAAA,KAAAA,CAAAA,IAAgBzkD,GAAAA,CAAAA,UAAAA,CAAvC,OAAuCA,CAAvC,EAAiE;AAC/D,mBAAO,IAAA,KAAA,CAAA,mBAAA,CAAwB,kBAAA,GAAA,GADgC,IACxD,CAAP;AAF4C;;AAI9C,iBAAO,IAAA,KAAA,CAAA,2BAAA,CACL,+BAAA,MAAA,2BADK,GAAA,IAAA,EAJuC,MAIvC,CAAP;AApFF;;AA0FA,iBAAA,sBAAA,CAAA,MAAA,EAAwC;AACtC,iBAAOykD,MAAAA,KAAAA,GAAAA,IAAkBA,MAAAA,KADa,GACtC;AA3FF;;;;;;;;;;;;;ACAA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AA+BA,iBAAA,uCAAA,CAAA,kBAAA,EAAqE;AACnE,cAAIC,kBAAAA,GAD+D,IACnE;AAGA,cAAIviB,GAAAA,GAAMwiB,aAAAA,CAAAA,aAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAJyD,kBAIzDA,CAAV;;AACA,cAAA,GAAA,EAAS;AACPxiB,YAAAA,GAAAA,GAAMA,GAAAA,CADC,CACDA,CAANA;AACA,gBAAIrX,QAAAA,GAAW85B,cAAAA,CAFR,GAEQA,CAAf;AACA95B,YAAAA,QAAAA,GAAWnR,QAAAA,CAHJ,QAGIA,CAAXmR;AACAA,YAAAA,QAAAA,GAAW+5B,aAAAA,CAJJ,QAIIA,CAAX/5B;AACAA,YAAAA,QAAAA,GAAWg6B,aAAAA,CALJ,QAKIA,CAAXh6B;AACA,mBAAOi6B,aAAAA,CANA,QAMAA,CAAP;AAXiE;;AAiBnE5iB,UAAAA,GAAAA,GAAM6iB,eAAAA,CAjB6D,kBAiB7DA,CAAN7iB;;AACA,cAAA,GAAA,EAAS;AAEP,kBAAMrX,QAAAA,GAAWg6B,aAAAA,CAFV,GAEUA,CAAjB;AACA,mBAAOC,aAAAA,CAHA,QAGAA,CAAP;AArBiE;;AAyBnE5iB,UAAAA,GAAAA,GAAMwiB,aAAAA,CAAAA,UAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAzB6D,kBAyB7DA,CAANxiB;;AACA,cAAA,GAAA,EAAS;AACPA,YAAAA,GAAAA,GAAMA,GAAAA,CADC,CACDA,CAANA;AACA,gBAAIrX,QAAAA,GAAW85B,cAAAA,CAFR,GAEQA,CAAf;AACA95B,YAAAA,QAAAA,GAAWg6B,aAAAA,CAHJ,QAGIA,CAAXh6B;AACA,mBAAOi6B,aAAAA,CAJA,QAIAA,CAAP;AA9BiE;;AAoCnE,mBAAA,aAAA,CAAA,gBAAA,EAAA,KAAA,EAAgD;AAC9C,mBAAO,IAAA,MAAA,CACL,gBAAA,gBAAA,GAAA,WAAA,GAAA,GAAA,GAAA,kBAAA,GAAA,GAAA,GAAA,yBAAA,GADK,GAAA,EADuC,KACvC,CAAP;AArCiE;;AAmDnE,mBAAA,UAAA,CAAA,QAAA,EAAA,KAAA,EAAqC;AACnC,gBAAA,QAAA,EAAc;AACZ,kBAAI,CAAC,iBAAA,IAAA,CAAL,KAAK,CAAL,EAAmC;AACjC,uBADiC,KACjC;AAFU;;AAIZ,kBAAI;AACF,sBAAME,OAAAA,GAAU,IAAA,WAAA,CAAA,QAAA,EAA0B;AAAEC,kBAAAA,KAAAA,EAD1C;AACwC,iBAA1B,CAAhB;AACA,sBAAMlrC,MAAAA,GAAS1c,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAFb,KAEaA,CAAf;AACAiZ,gBAAAA,KAAAA,GAAQ0uC,OAAAA,CAAAA,MAAAA,CAHN,MAGMA,CAAR1uC;AACAmuC,gBAAAA,kBAAAA,GAJE,KAIFA;AAJF,eAAA,CAKE,OAAA,CAAA,EAAU;AAGV,oBAAI,YAAA,IAAA,CAAJ,QAAI,CAAJ,EAAgC;AAE9B,sBAAI;AACFnuC,oBAAAA,KAAAA,GAAQtV,kBAAAA,CAAmByY,MAAAA,CADzB,KACyBA,CAAnBzY,CAARsV;AACAmuC,oBAAAA,kBAAAA,GAFE,KAEFA;AAFF,mBAAA,CAGE,OAAA,GAAA,EAL4B,CAAA;AAHtB;AATA;AADqB;;AAsBnC,mBAtBmC,KAsBnC;AAzEiE;;AA2EnE,mBAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,gBAAIA,kBAAAA,IAAsB,cAAA,IAAA,CAA1B,KAA0B,CAA1B,EAAqD;AAEnDnuC,cAAAA,KAAAA,GAAQ4uC,UAAAA,CAAAA,OAAAA,EAF2C,KAE3CA,CAAR5uC;;AACA,kBAAA,kBAAA,EAAwB;AAEtBA,gBAAAA,KAAAA,GAAQ4uC,UAAAA,CAAAA,YAAAA,EAFc,KAEdA,CAAR5uC;AALiD;AADzB;;AAS5B,mBAT4B,KAS5B;AApFiE;;AAsFnE,mBAAA,eAAA,CAAA,qBAAA,EAAgD;AAC9C,kBAAMnU,OAAAA,GADwC,EAC9C;AACA,gBAF8C,KAE9C;AAGA,kBAAMgjD,IAAAA,GAAOT,aAAAA,CAAAA,iCAAAA,EALiC,IAKjCA,CAAb;;AACA,mBAAQ,CAAA,KAAA,GAAQS,IAAAA,CAAAA,IAAAA,CAAT,qBAASA,CAAR,MAAR,IAAA,EAA4D;AAC1D,kBAAI,GAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IADsD,KAC1D;AACAnuC,cAAAA,CAAAA,GAAI3U,QAAAA,CAAAA,CAAAA,EAFsD,EAEtDA,CAAJ2U;;AACA,kBAAIA,CAAAA,IAAJ,OAAA,EAAkB;AAEhB,oBAAIA,CAAAA,KAAJ,CAAA,EAAa;AAAA;AAFG;;AAAA;AAHwC;;AAU1D7U,cAAAA,OAAAA,CAAAA,CAAAA,CAAAA,GAAa,CAAA,IAAA,EAAbA,IAAa,CAAbA;AAhB4C;;AAkB9C,kBAAMijD,KAAAA,GAlBwC,EAkB9C;;AACA,iBAAK,IAAIpuC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI7U,OAAAA,CAApB,MAAA,EAAoC,EAApC,CAAA,EAAyC;AACvC,kBAAI,EAAE,CAAA,IAAN,OAAI,CAAJ,EAAqB;AAAA;AADkB;;AAKvC,kBAAI,CAAA,IAAA,EAAA,IAAA,IAAeA,OAAAA,CALoB,CAKpBA,CAAnB;AACAkjD,cAAAA,IAAAA,GAAOV,cAAAA,CANgC,IAMhCA,CAAPU;;AACA,kBAAA,IAAA,EAAU;AACRA,gBAAAA,IAAAA,GAAO3rC,QAAAA,CADC,IACDA,CAAP2rC;;AACA,oBAAIruC,CAAAA,KAAJ,CAAA,EAAa;AACXquC,kBAAAA,IAAAA,GAAOT,aAAAA,CADI,IACJA,CAAPS;AAHM;AAP6B;;AAavCD,cAAAA,KAAAA,CAAAA,IAAAA,CAbuC,IAavCA;AAhC4C;;AAkC9C,mBAAOA,KAAAA,CAAAA,IAAAA,CAlCuC,EAkCvCA,CAAP;AAxHiE;;AA0HnE,mBAAA,cAAA,CAAA,KAAA,EAA+B;AAC7B,gBAAI9uC,KAAAA,CAAAA,UAAAA,CAAJ,GAAIA,CAAJ,EAA2B;AACzB,oBAAM8uC,KAAAA,GAAQ9uC,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CADW,KACXA,CAAd;;AAEA,mBAAK,IAAIjW,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI+kD,KAAAA,CAApB,MAAA,EAAkC,EAAlC,CAAA,EAAuC;AACrC,sBAAME,SAAAA,GAAYF,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CADmB,GACnBA,CAAlB;;AACA,oBAAIE,SAAAA,KAAc,CAAlB,CAAA,EAAsB;AACpBF,kBAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EADS,SACTA,CAAXA;AACAA,kBAAAA,KAAAA,CAAAA,MAAAA,GAAe/kD,CAAAA,GAFK,CAEpB+kD;AAJmC;;AAMrCA,gBAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAN0B,IAM1BA,CAAXA;AATuB;;AAWzB9uC,cAAAA,KAAAA,GAAQ8uC,KAAAA,CAAAA,IAAAA,CAXiB,GAWjBA,CAAR9uC;AAZ2B;;AAc7B,mBAd6B,KAc7B;AAxIiE;;AA0InE,mBAAA,aAAA,CAAA,QAAA,EAAiC;AAE/B,kBAAMivC,WAAAA,GAAcC,QAAAA,CAAAA,OAAAA,CAFW,GAEXA,CAApB;;AACA,gBAAID,WAAAA,KAAgB,CAApB,CAAA,EAAwB;AAItB,qBAJsB,QAItB;AAP6B;;AAS/B,kBAAME,QAAAA,GAAWD,QAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EATc,WASdA,CAAjB;AACA,kBAAME,SAAAA,GAAYF,QAAAA,CAAAA,KAAAA,CAAeD,WAAAA,GAVF,CAUbC,CAAlB;AAEA,kBAAMlvC,KAAAA,GAAQovC,SAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAZiB,EAYjBA,CAAd;AACA,mBAAOR,UAAAA,CAAAA,QAAAA,EAbwB,KAaxBA,CAAP;AAvJiE;;AAyJnE,mBAAA,aAAA,CAAA,KAAA,EAA8B;AAW5B,gBAAI,CAAC5uC,KAAAA,CAAAA,UAAAA,CAAD,IAACA,CAAD,IAA2B,uBAAA,IAAA,CAA/B,KAA+B,CAA/B,EAAmE;AACjE,qBADiE,KACjE;AAZ0B;;AAqB5B,mBAAO,KAAA,CAAA,OAAA,CAAA,gDAAA,EAEL,UAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAA4C;AAC1C,kBAAImvC,QAAAA,KAAAA,GAAAA,IAAoBA,QAAAA,KAAxB,GAAA,EAA0C;AAExCE,gBAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAFiC,GAEjCA,CAAPA;AACAA,gBAAAA,IAAAA,GAAO,IAAA,CAAA,OAAA,CAAA,oBAAA,EAAmC,UAAA,KAAA,EAAA,GAAA,EAAsB;AAC9D,yBAAO/vC,MAAAA,CAAAA,YAAAA,CAAoBvT,QAAAA,CAAAA,GAAAA,EADmC,EACnCA,CAApBuT,CAAP;AADF+vC,iBAAO,CAAPA;AAGA,uBAAOT,UAAAA,CAAAA,OAAAA,EANiC,IAMjCA,CAAP;AAPwC;;AAS1C,kBAAI;AACFS,gBAAAA,IAAAA,GAAOj4B,IAAAA,CADL,IACKA,CAAPi4B;AADF,eAAA,CAEE,OAAA,CAAA,EAXwC,CAAA;;AAY1C,qBAAOT,UAAAA,CAAAA,OAAAA,EAZmC,IAYnCA,CAAP;AAdJ,aAAO,CAAP;AA9KiE;;AAiMnE,iBAjMmE,EAiMnE;AAhOF;;;;;;;;;;;;;ACeA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAKA,YAAA,cAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AApBA;AAgCA,cAAMU,WAAAA,GAhCN,GAgCA;AACA,cAAMC,wBAAAA,GAjCN,GAiCA;;AAEA,iBAAA,cAAA,CAAA,GAAA,EAA6B;AAC3B,gBAAMroD,IAAAA,GAAOsoD,GAAAA,CADc,QAC3B;;AACA,cAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,mBAD4B,IAC5B;AAHyB;;AAK3B,gBAAM5b,KAAAA,GAAQ7sC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EALa,IAKbA,CAAd;AACA,iBAAO6sC,KAAAA,CANoB,MAM3B;AAzCF;;AA4CA,cAAA,cAAA,CAAqB;AACnBvtC,UAAAA,WAAAA,CAAAA,GAAAA,EAA4B;AAAA,gBAAX4yB,IAAW,uEAA5B5yB,EAA4B;AAC1B,iBAAA,GAAA,GAD0B,GAC1B;AACA,iBAAA,MAAA,GAAc,YAAA,IAAA,CAFY,GAEZ,CAAd;AACA,iBAAA,WAAA,GAAoB,KAAA,MAAA,IAAe4yB,IAAAA,CAAhB,WAAC,IAAoCtuB,MAAAA,CAAAA,MAAAA,CAH9B,IAG8BA,CAAxD;AACA,iBAAA,eAAA,GAAuBsuB,IAAAA,CAAAA,eAAAA,IAJG,KAI1B;;AACA,iBAAA,MAAA,GACEA,IAAAA,CAAAA,MAAAA,IACA,SAAA,qBAAA,GAAiC;AAC/B,qBAAO,IADwB,cACxB,EAAP;AAHJ,aAAA;;AAMA,iBAAA,SAAA,GAX0B,CAW1B;AACA,iBAAA,eAAA,GAAuBtuB,MAAAA,CAAAA,MAAAA,CAZG,IAYHA,CAAvB;AAbiB;;AAgBnB8kD,UAAAA,YAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAoC;AAClC,kBAAMx2B,IAAAA,GAAO;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,aAAb;;AAIA,iBAAA,MAAA,IAAA,IAAA,SAAA,EAA8B;AAC5BA,cAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAay2B,SAAAA,CADe,IACfA,CAAbz2B;AANgC;;AAQlC,mBAAO,KAAA,OAAA,CAR2B,IAQ3B,CAAP;AAxBiB;;AA2BnB02B,UAAAA,WAAAA,CAAAA,SAAAA,EAAuB;AACrB,mBAAO,KAAA,OAAA,CADc,SACd,CAAP;AA5BiB;;AA+BnB3oD,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,kBAAMwoD,GAAAA,GAAM,KADA,MACA,EAAZ;AACA,kBAAMI,KAAAA,GAAQ,KAFF,SAEE,EAAd;AACA,kBAAMC,cAAAA,GAAkB,KAAA,eAAA,CAAA,KAAA,IAA8B;AAH1C,cAAA;AAG0C,aAAtD;AAEAL,YAAAA,GAAAA,CAAAA,IAAAA,CAAAA,KAAAA,EAAgB,KALJ,GAKZA;AACAA,YAAAA,GAAAA,CAAAA,eAAAA,GAAsB,KANV,eAMZA;;AACA,iBAAA,MAAA,QAAA,IAAuB,KAAvB,WAAA,EAAyC;AACvC,oBAAMxvC,KAAAA,GAAQ,KAAA,WAAA,CADyB,QACzB,CAAd;;AACA,kBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC;AAAA;AAFK;;AAKvCwvC,cAAAA,GAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EALuC,KAKvCA;AAZU;;AAcZ,gBAAI,KAAA,MAAA,IAAe,WAAf,IAAA,IAAkC,SAAtC,IAAA,EAAqD;AACnDA,cAAAA,GAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAA8B,SAASv2B,IAAAA,CAAT,KAAA,IAAuBA,IAAAA,CAAAA,GAAAA,GADF,CAAA,EACnDu2B;AACAK,cAAAA,cAAAA,CAAAA,cAAAA,GAFmD,wBAEnDA;AAFF,aAAA,MAGO;AACLA,cAAAA,cAAAA,CAAAA,cAAAA,GADK,WACLA;AAlBU;;AAoBZL,YAAAA,GAAAA,CAAAA,YAAAA,GApBY,aAoBZA;;AAEA,gBAAIv2B,IAAAA,CAAJ,OAAA,EAAkB;AAChBu2B,cAAAA,GAAAA,CAAAA,OAAAA,GAAc,UAAA,GAAA,EAAe;AAC3Bv2B,gBAAAA,IAAAA,CAAAA,OAAAA,CAAau2B,GAAAA,CADc,MAC3Bv2B;AADFu2B,eAAAA;AAvBU;;AA2BZA,YAAAA,GAAAA,CAAAA,kBAAAA,GAAyB,KAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EA3Bb,KA2Ba,CAAzBA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,GAAiB,KAAA,UAAA,CAAA,IAAA,CAAA,IAAA,EA5BL,KA4BK,CAAjBA;AAEAK,YAAAA,cAAAA,CAAAA,iBAAAA,GAAmC52B,IAAAA,CA9BvB,iBA8BZ42B;AACAA,YAAAA,cAAAA,CAAAA,MAAAA,GAAwB52B,IAAAA,CA/BZ,MA+BZ42B;AACAA,YAAAA,cAAAA,CAAAA,OAAAA,GAAyB52B,IAAAA,CAhCb,OAgCZ42B;AACAA,YAAAA,cAAAA,CAAAA,UAAAA,GAA4B52B,IAAAA,CAjChB,UAiCZ42B;AAEAL,YAAAA,GAAAA,CAAAA,IAAAA,CAnCY,IAmCZA;AAEA,mBArCY,KAqCZ;AApEiB;;AAuEnBM,UAAAA,UAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAuB;AACrB,kBAAMD,cAAAA,GAAiB,KAAA,eAAA,CADF,KACE,CAAvB;;AACA,gBAAI,CAAJ,cAAA,EAAqB;AAAA;AAFA;;AAKrBA,YAAAA,cAAAA,CAAAA,UAAAA,GALqB,GAKrBA;AA5EiB;;AA+EnBE,UAAAA,aAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA0B;AACxB,kBAAMF,cAAAA,GAAiB,KAAA,eAAA,CADC,KACD,CAAvB;;AACA,gBAAI,CAAJ,cAAA,EAAqB;AAAA;AAFG;;AAMxB,kBAAML,GAAAA,GAAMK,cAAAA,CANY,GAMxB;;AACA,gBAAIL,GAAAA,CAAAA,UAAAA,IAAAA,CAAAA,IAAuBK,cAAAA,CAA3B,iBAAA,EAA6D;AAC3DA,cAAAA,cAAAA,CAD2D,iBAC3DA;AACA,qBAAOA,cAAAA,CAFoD,iBAE3D;AATsB;;AAYxB,gBAAIL,GAAAA,CAAAA,UAAAA,KAAJ,CAAA,EAA0B;AAAA;AAZF;;AAgBxB,gBAAI,EAAE,KAAA,IAAS,KAAf,eAAI,CAAJ,EAAsC;AAAA;AAhBd;;AAsBxB,mBAAO,KAAA,eAAA,CAtBiB,KAsBjB,CAAP;;AAGA,gBAAIA,GAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IAAoB,KAAxB,MAAA,EAAqC;AACnCK,cAAAA,cAAAA,CAAAA,OAAAA,GAAyBL,GAAAA,CADU,MACnCK;AADmC;AAzBb;;AA6BxB,kBAAMG,SAAAA,GAAYR,GAAAA,CAAAA,MAAAA,IA7BM,WA6BxB;AAKA,kBAAMS,4BAAAA,GACJD,SAAAA,KAAAA,WAAAA,IACAH,cAAAA,CAAAA,cAAAA,KApCsB,wBAkCxB;;AAIA,gBACE,CAAA,4BAAA,IACAG,SAAAA,KAAcH,cAAAA,CAFhB,cAAA,EAGE;AACAA,cAAAA,cAAAA,CAAAA,OAAAA,GAAyBL,GAAAA,CADzB,MACAK;AADA;AAzCsB;;AA8CxB,kBAAMpwC,KAAAA,GAAQywC,cAAAA,CA9CU,GA8CVA,CAAd;;AACA,gBAAIF,SAAAA,KAAJ,wBAAA,EAA4C;AAC1C,oBAAMG,WAAAA,GAAcX,GAAAA,CAAAA,iBAAAA,CADsB,eACtBA,CAApB;AACA,oBAAM3jD,OAAAA,GAAU,2BAAA,IAAA,CAF0B,WAE1B,CAAhB;AACAgkD,cAAAA,cAAAA,CAAAA,MAAAA,CAAsB;AACpBO,gBAAAA,KAAAA,EAAOrkD,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EADa,EACbA,CADa;AAAA,gBAAA;AAAA,eAAtB8jD;AAHF,aAAA,MAOO,IAAA,KAAA,EAAW;AAChBA,cAAAA,cAAAA,CAAAA,MAAAA,CAAsB;AACpBO,gBAAAA,KAAAA,EADoB,CAAA;AAAA,gBAAA;AAAA,eAAtBP;AADK,aAAA,MAKA;AACLA,cAAAA,cAAAA,CAAAA,OAAAA,GAAyBL,GAAAA,CADpB,MACLK;AA5DsB;AA/EP;;AA+InBQ,UAAAA,aAAAA,CAAAA,KAAAA,EAAqB;AACnB,mBAAO,KAAA,eAAA,CAAA,KAAA,EADY,GACnB;AAhJiB;;AAmJnBC,UAAAA,gBAAAA,CAAAA,KAAAA,EAAwB;AACtB,mBAAOV,KAAAA,IAAS,KADM,eACtB;AApJiB;;AAuJnBW,UAAAA,YAAAA,CAAAA,KAAAA,EAAoB;AAClB,kBAAMf,GAAAA,GAAM,KAAA,eAAA,CAAA,KAAA,EADM,GAClB;AACA,mBAAO,KAAA,eAAA,CAFW,KAEX,CAAP;AACAA,YAAAA,GAAAA,CAHkB,KAGlBA;AA1JiB;;AAAA;;AA+JrB,cAAA,gBAAA,CAAuB;AACrBnpD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,OAAA,GADkB,MAClB;AACA,iBAAA,QAAA,GAAgB,IAAA,cAAA,CAAmBwf,MAAAA,CAAnB,GAAA,EAA+B;AAC7CuB,cAAAA,WAAAA,EAAavB,MAAAA,CADgC,WAAA;AAE7CwB,cAAAA,eAAAA,EAAiBxB,MAAAA,CAF4B;AAAA,aAA/B,CAAhB;AAIA,iBAAA,eAAA,GAAuBA,MAAAA,CANL,cAMlB;AACA,iBAAA,kBAAA,GAPkB,IAOlB;AACA,iBAAA,oBAAA,GARkB,EAQlB;AATmB;;AAYrB2qC,UAAAA,2BAAAA,CAAAA,MAAAA,EAAoC;AAClC,kBAAMzmD,CAAAA,GAAI,KAAA,oBAAA,CAAA,OAAA,CADwB,MACxB,CAAV;;AACA,gBAAIA,CAAAA,IAAJ,CAAA,EAAY;AACV,mBAAA,oBAAA,CAAA,MAAA,CAAA,CAAA,EADU,CACV;AAHgC;AAZf;;AAmBrB4qC,UAAAA,aAAAA,GAAgB;AACdnrC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,yDACdA;AAIA,iBAAA,kBAAA,GAA0B,IAAA,iCAAA,CACxB,KADwB,QAAA,EAExB,KAPY,OAKY,CAA1B;AAIA,mBAAO,KATO,kBASd;AA5BmB;;AA+BrBqrC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,kBAAM9lB,MAAAA,GAAS,IAAA,kCAAA,CACb,KADa,QAAA,EAAA,KAAA,EADU,GACV,CAAf;AAKAA,YAAAA,MAAAA,CAAAA,QAAAA,GAAkB,KAAA,2BAAA,CAAA,IAAA,CANO,IAMP,CAAlBA;;AACA,iBAAA,oBAAA,CAAA,IAAA,CAPyB,MAOzB;;AACA,mBARyB,MAQzB;AAvCmB;;AA0CrB+lB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,iBAAA,kBAAA,EAAA,MAAA,CADwB,MACxB;;AAEA,iBAAA,MAAA,MAAA,IAAqB,KAAA,oBAAA,CAAA,KAAA,CAArB,CAAqB,CAArB,EAAyD;AACvD/lB,cAAAA,MAAAA,CAAAA,MAAAA,CADuD,MACvDA;AAJsB;AA1CL;;AAAA;;;;AAoDvB,cAAA,iCAAA,CAAwC;AACtC1oB,UAAAA,WAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAA6B;AAC3B,iBAAA,QAAA,GAD2B,OAC3B;AAEA,kBAAM4yB,IAAAA,GAAO;AACXw3B,cAAAA,iBAAAA,EAAmB,KAAA,kBAAA,CAAA,IAAA,CADR,IACQ,CADR;AAEXC,cAAAA,MAAAA,EAAQ,KAAA,OAAA,CAAA,IAAA,CAFG,IAEH,CAFG;AAGXC,cAAAA,OAAAA,EAAS,KAAA,QAAA,CAAA,IAAA,CAHE,IAGF,CAHE;AAIXb,cAAAA,UAAAA,EAAY,KAAA,WAAA,CAAA,IAAA,CAJD,IAIC;AAJD,aAAb;AAMA,iBAAA,IAAA,GAAYjqC,MAAAA,CATe,GAS3B;AACA,iBAAA,cAAA,GAAsB+qC,OAAAA,CAAAA,WAAAA,CAVK,IAULA,CAAtB;AACA,iBAAA,0BAAA,GAX2B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAW3B;AACA,iBAAA,aAAA,GAAqB/qC,MAAAA,CAAAA,YAAAA,IAZM,KAY3B;AACA,iBAAA,cAAA,GAAsBA,MAAAA,CAbK,MAa3B;AACA,iBAAA,eAAA,GAAuBA,MAAAA,CAdI,cAc3B;;AACA,gBAAI,CAAC,KAAD,eAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,mBAAA,aAAA,GADgD,IAChD;AAhByB;;AAmB3B,iBAAA,qBAAA,GAnB2B,KAmB3B;AACA,iBAAA,iBAAA,GApB2B,KAoB3B;AAEA,iBAAA,aAAA,GAtB2B,EAsB3B;AACA,iBAAA,SAAA,GAvB2B,EAuB3B;AACA,iBAAA,KAAA,GAxB2B,KAwB3B;AACA,iBAAA,YAAA,GAzB2B,SAyB3B;AACA,iBAAA,SAAA,GA1B2B,IA0B3B;AAEA,iBAAA,UAAA,GA5B2B,IA4B3B;AA7BoC;;AAgCtCgrC,UAAAA,kBAAAA,GAAqB;AACnB,kBAAMC,gBAAAA,GAAmB,KADN,cACnB;;AACA,kBAAMC,cAAAA,GAAiB,KAAA,QAAA,CAAA,aAAA,CAFJ,gBAEI,CAAvB;;AAEA,kBAAMxD,iBAAAA,GAAoB1iD,IAAAA,IAAQ;AAChC,qBAAOkmD,cAAAA,CAAAA,iBAAAA,CADyB,IACzBA,CAAP;AADF,aAAA;;AAGA,kBAAM;AAAA,cAAA,kBAAA;AAAA,cAAA;AAAA,gBACJ,CAAA,GAAA,cAAA,CAAA,gCAAA,EAAiC;AAAA,cAAA,iBAAA;AAE/BvD,cAAAA,MAAAA,EAAQ,KAAA,QAAA,CAFuB,MAAA;AAG/BlmC,cAAAA,cAAAA,EAAgB,KAHe,eAAA;AAI/BJ,cAAAA,YAAAA,EAAc,KAJiB;AAAA,aAAjC,CADF;;AAQA,gBAAA,kBAAA,EAAwB;AACtB,mBAAA,iBAAA,GADsB,IACtB;AAhBiB;;AAmBnB,iBAAA,cAAA,GAAsBumC,eAAAA,IAAmB,KAnBtB,cAmBnB;AAEA,iBAAA,SAAA,GAAiBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EArBE,iBAqBFA,CAAjB;;AAEA,gBAAI,KAAJ,iBAAA,EAA4B;AAK1B,mBAAA,QAAA,CAAA,YAAA,CAL0B,gBAK1B;AA5BiB;;AA+BnB,iBAAA,0BAAA,CA/BmB,OA+BnB;AA/DoC;;AAkEtCsD,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,gBAAA,IAAA,EAAU;AACR,kBAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,sBAAM/b,iBAAAA,GAAoB,KAAA,SAAA,CADG,KACH,EAA1B;;AACAA,gBAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,kBAAAA,KAAAA,EAAO9Y,IAAAA,CAAT,KAAA;AAAqBgwB,kBAAAA,IAAAA,EAArB;AAAA,iBAA1B+d;AAFF,eAAA,MAGO;AACL,qBAAA,aAAA,CAAA,IAAA,CAAwB/tC,IAAAA,CADnB,KACL;AALM;AADE;;AASZ,iBAAA,KAAA,GATY,IASZ;;AACA,gBAAI,KAAA,aAAA,CAAA,MAAA,GAAJ,CAAA,EAAmC;AAAA;AAVvB;;AAaZ,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9C+tC,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAA1B+d;AAdU;;AAgBZ,iBAAA,SAAA,CAAA,MAAA,GAhBY,CAgBZ;AAlFoC;;AAqFtCgc,UAAAA,QAAAA,CAAAA,MAAAA,EAAiB;AACf,iBAAA,YAAA,GAAoBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAAAA,MAAAA,EAAkC,KADvC,IACKA,CAApB;;AACA,iBAAA,0BAAA,CAAA,MAAA,CAAuC,KAFxB,YAEf;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9Cjc,cAAAA,iBAAAA,CAAAA,MAAAA,CAAyB,KADqB,YAC9CA;AAJa;;AAMf,iBAAA,SAAA,CAAA,MAAA,GANe,CAMf;AACA,iBAAA,aAAA,CAAA,MAAA,GAPe,CAOf;AA5FoC;;AA+FtCV,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,iBAAA,UAAA,GAAkB;AAChBvhB,cAAAA,MAAAA,EAAQD,GAAAA,CADQ,MAAA;AAEhBE,cAAAA,KAAAA,EAAOF,GAAAA,CAAAA,gBAAAA,GAAuBA,GAAAA,CAAvBA,KAAAA,GAAmC,KAF1B;AAAA,aAAlB;AAhGoC;;AAsGtC,cAAIwB,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AAvGoC;;AA0GtC,cAAIhB,gBAAJ,GAAuB;AACrB,mBAAO,KADc,iBACrB;AA3GoC;;AA8GtC,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AA/GoC;;AAkHtC,cAAIE,aAAJ,GAAoB;AAClB,mBAAO,KADW,cAClB;AAnHoC;;AAsHtC,cAAI0hB,YAAJ,GAAmB;AACjB,mBAAO,KAAA,0BAAA,CADU,OACjB;AAvHoC;;AA0HtC,gBAAMC,IAAN,GAAa;AACX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AAFS;;AAIX,gBAAI,KAAA,aAAA,CAAA,MAAA,GAAJ,CAAA,EAAmC;AACjC,oBAAM11B,KAAAA,GAAQ,KAAA,aAAA,CADmB,KACnB,EAAd;;AACA,qBAAO;AAAEO,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AANS;;AAQX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAElX,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AATS;;AAWX,kBAAM+d,iBAAAA,GAXK,CAAA,GAAA,KAAA,CAAA,uBAAA,GAWX;;AACA,iBAAA,SAAA,CAAA,IAAA,CAZW,iBAYX;;AACA,mBAAOA,iBAAAA,CAbI,OAaX;AAvIoC;;AA0ItC/f,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,0BAAA,CAAA,MAAA,CAFa,MAEb;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9C+f,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAA1B+d;AAJW;;AAMb,iBAAA,SAAA,CAAA,MAAA,GANa,CAMb;;AACA,gBAAI,KAAA,QAAA,CAAA,gBAAA,CAA+B,KAAnC,cAAI,CAAJ,EAAyD;AACvD,mBAAA,QAAA,CAAA,YAAA,CAA2B,KAD4B,cACvD;AARW;;AAUb,iBAAA,kBAAA,GAVa,IAUb;AApJoC;;AAAA;;AAyJxC,cAAA,kCAAA,CAAyC;AACvC5uC,UAAAA,WAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAiC;AAC/B,iBAAA,QAAA,GAD+B,OAC/B;AAEA,kBAAM4yB,IAAAA,GAAO;AACXy3B,cAAAA,MAAAA,EAAQ,KAAA,OAAA,CAAA,IAAA,CADG,IACH,CADG;AAEXC,cAAAA,OAAAA,EAAS,KAAA,QAAA,CAAA,IAAA,CAFE,IAEF,CAFE;AAGXb,cAAAA,UAAAA,EAAY,KAAA,WAAA,CAAA,IAAA,CAHD,IAGC;AAHD,aAAb;AAKA,iBAAA,IAAA,GAAYc,OAAAA,CARmB,GAQ/B;AACA,iBAAA,UAAA,GAAkBA,OAAAA,CAAAA,YAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EATa,IASbA,CAAlB;AACA,iBAAA,SAAA,GAV+B,EAU/B;AACA,iBAAA,YAAA,GAX+B,IAW/B;AACA,iBAAA,KAAA,GAZ+B,KAY/B;AACA,iBAAA,YAAA,GAb+B,SAa/B;AAEA,iBAAA,UAAA,GAf+B,IAe/B;AACA,iBAAA,QAAA,GAhB+B,IAgB/B;AAjBqC;;AAoBvCO,UAAAA,MAAAA,GAAS;AACP,iBAAA,QAAA,GADO,IACP;AArBqC;;AAwBvCH,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,kBAAMvxC,KAAAA,GAAQvY,IAAAA,CADF,KACZ;;AACA,gBAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,oBAAM+tC,iBAAAA,GAAoB,KAAA,SAAA,CADG,KACH,EAA1B;;AACAA,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAA1B+d;AAFF,aAAA,MAGO;AACL,mBAAA,YAAA,GADK,KACL;AANU;;AAQZ,iBAAA,KAAA,GARY,IAQZ;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9CA,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAA1B+d;AAVU;;AAYZ,iBAAA,SAAA,CAAA,MAAA,GAZY,CAYZ;;AACA,iBAbY,MAaZ;AArCqC;;AAwCvCgc,UAAAA,QAAAA,CAAAA,MAAAA,EAAiB;AACf,iBAAA,YAAA,GAAoBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAAAA,MAAAA,EAAkC,KADvC,IACKA,CAApB;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9Cjc,cAAAA,iBAAAA,CAAAA,MAAAA,CAAyB,KADqB,YAC9CA;AAHa;;AAKf,iBAAA,SAAA,CAAA,MAAA,GALe,CAKf;AACA,iBAAA,YAAA,GANe,IAMf;AA9CqC;;AAiDvCV,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,gBAAI,CAAC,KAAL,oBAAA,EAAgC;AAC9B,mBAAA,UAAA,GAAkB;AAAEvhB,gBAAAA,MAAAA,EAAQD,GAAAA,CADE;AACZ,eAAlB;AAFa;AAjDsB;;AAuDvC,cAAIO,oBAAJ,GAA2B;AACzB,mBADyB,KACzB;AAxDqC;;AA2DvC,gBAAM6hB,IAAN,GAAa;AACX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AAFS;;AAIX,gBAAI,KAAA,YAAA,KAAJ,IAAA,EAAgC;AAC9B,oBAAM11B,KAAAA,GAAQ,KADgB,YAC9B;AACA,mBAAA,YAAA,GAF8B,IAE9B;AACA,qBAAO;AAAEO,gBAAAA,KAAAA,EAAF,KAAA;AAAgBkX,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AAPS;;AASX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAElX,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAVS;;AAYX,kBAAM+d,iBAAAA,GAZK,CAAA,GAAA,KAAA,CAAA,uBAAA,GAYX;;AACA,iBAAA,SAAA,CAAA,IAAA,CAbW,iBAaX;;AACA,mBAAOA,iBAAAA,CAdI,OAcX;AAzEqC;;AA4EvC/f,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,MAAA,iBAAA,IAAgC,KAAhC,SAAA,EAAgD;AAC9C+f,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEj1B,gBAAAA,KAAAA,EAAF,SAAA;AAAoBkX,gBAAAA,IAAAA,EAApB;AAAA,eAA1B+d;AAHW;;AAKb,iBAAA,SAAA,CAAA,MAAA,GALa,CAKb;;AACA,gBAAI,KAAA,QAAA,CAAA,gBAAA,CAA+B,KAAnC,UAAI,CAAJ,EAAqD;AACnD,mBAAA,QAAA,CAAA,YAAA,CAA2B,KADwB,UACnD;AAPW;;AASb,iBATa,MASb;AArFqC;;AAAA;;;;;;;;;;;;;ACzYzC,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAKA,YAAA,cAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AApBA;;AAiCA,iBAAA,kBAAA,CAAA,OAAA,EAAA,eAAA,EAAA,eAAA,EAAuE;AACrE,iBAAO;AACLoY,YAAAA,MAAAA,EADK,KAAA;AAAA,YAAA,OAAA;AAGL+D,YAAAA,MAAAA,EAAQC,eAAAA,EAHH,MAAA;AAILC,YAAAA,IAAAA,EAJK,MAAA;AAKLC,YAAAA,WAAAA,EAAalqC,eAAAA,GAAAA,SAAAA,GALR,aAAA;AAMLmqC,YAAAA,QAAAA,EANK;AAAA,WAAP;AAlCF;;AA4CA,iBAAA,aAAA,CAAA,WAAA,EAAoC;AAClC,gBAAMC,OAAAA,GAAU,IADkB,OAClB,EAAhB;;AACA,eAAA,MAAA,QAAA,IAAA,WAAA,EAAoC;AAClC,kBAAMzxC,KAAAA,GAAQoH,WAAAA,CADoB,QACpBA,CAAd;;AACA,gBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC;AAAA;AAFA;;AAKlCqqC,YAAAA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EALkC,KAKlCA;AAPgC;;AASlC,iBATkC,OASlC;AArDF;;AAyDA,cAAA,cAAA,CAAqB;AACnBprD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,MAAA,GADkB,MAClB;AACA,iBAAA,MAAA,GAAc,YAAA,IAAA,CAAiBwf,MAAAA,CAFb,GAEJ,CAAd;AACA,iBAAA,WAAA,GAAoB,KAAA,MAAA,IAAeA,MAAAA,CAAhB,WAAC,IAHF,EAGlB;AAEA,iBAAA,kBAAA,GALkB,IAKlB;AACA,iBAAA,oBAAA,GANkB,EAMlB;AAPiB;;AAUnB,cAAIyuB,sBAAJ,GAA6B;AAC3B,mBAAO,KAAA,kBAAA,EAAA,OAAA,IADoB,CAC3B;AAXiB;;AAcnBK,UAAAA,aAAAA,GAAgB;AACdnrC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,uDACdA;AAIA,iBAAA,kBAAA,GAA0B,IAAA,oBAAA,CALZ,IAKY,CAA1B;AACA,mBAAO,KANO,kBAMd;AApBiB;;AAuBnBqrC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,gBAAI3qC,GAAAA,IAAO,KAAX,sBAAA,EAAwC;AACtC,qBADsC,IACtC;AAFuB;;AAIzB,kBAAM6kB,MAAAA,GAAS,IAAA,yBAAA,CAAA,IAAA,EAAA,KAAA,EAJU,GAIV,CAAf;;AACA,iBAAA,oBAAA,CAAA,IAAA,CALyB,MAKzB;;AACA,mBANyB,MAMzB;AA7BiB;;AAgCnB+lB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAIxB,iBAAA,MAAA,MAAA,IAAqB,KAAA,oBAAA,CAAA,KAAA,CAArB,CAAqB,CAArB,EAAyD;AACvD/lB,cAAAA,MAAAA,CAAAA,MAAAA,CADuD,MACvDA;AALsB;AAhCP;;AAAA;;;;AA2CrB,cAAA,oBAAA,CAA2B;AACzB1oB,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,OAAA,GADkB,MAClB;AACA,iBAAA,OAAA,GAFkB,IAElB;AACA,iBAAA,OAAA,GAHkB,CAGlB;AACA,iBAAA,SAAA,GAJkB,IAIlB;AACA,kBAAMwf,MAAAA,GAAS2sB,MAAAA,CALG,MAKlB;AACA,iBAAA,gBAAA,GAAwB3sB,MAAAA,CAAAA,eAAAA,IANN,KAMlB;AACA,iBAAA,cAAA,GAAsBA,MAAAA,CAPJ,MAOlB;AACA,iBAAA,kBAAA,GARkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAQlB;AACA,iBAAA,aAAA,GAAqBA,MAAAA,CAAAA,YAAAA,IATH,KASlB;AACA,iBAAA,eAAA,GAAuBA,MAAAA,CAVL,cAUlB;;AACA,gBAAI,CAAC,KAAD,eAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,mBAAA,aAAA,GADgD,IAChD;AAZgB;;AAelB,gBAAI,OAAA,eAAA,KAAJ,WAAA,EAA4C;AAC1C,mBAAA,gBAAA,GAAwB,IADkB,eAClB,EAAxB;AAhBgB;;AAkBlB,iBAAA,qBAAA,GAA6B,CAACA,MAAAA,CAlBZ,aAkBlB;AACA,iBAAA,iBAAA,GAAyB,CAACA,MAAAA,CAnBR,YAmBlB;AAEA,iBAAA,QAAA,GAAgB6rC,aAAAA,CAAc,KAAA,OAAA,CArBZ,WAqBFA,CAAhB;AAEA,kBAAMjoD,GAAAA,GAAMoc,MAAAA,CAvBM,GAuBlB;AACA/e,YAAAA,KAAAA,CAAAA,GAAAA,EAEE6qD,kBAAAA,CACE,KADFA,QAAAA,EAEE,KAFFA,gBAAAA,EAGE,KALJ7qD,gBAEE6qD,CAFF7qD,CAAAA,CAAAA,IAAAA,CAQQD,QAAAA,IAAY;AAChB,kBAAI,CAAC+qD,CAAAA,GAAAA,cAAAA,CAAAA,sBAAAA,EAAuB/qD,QAAAA,CAA5B,MAAK+qD,CAAL,EAA8C;AAC5C,sBAAMV,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAA0BrqD,QAAAA,CAA1BqqD,MAAAA,EADsC,GACtCA,CAAN;AAFc;;AAIhB,mBAAA,OAAA,GAAerqD,QAAAA,CAAAA,IAAAA,CAJC,SAIDA,EAAf;;AACA,mBAAA,kBAAA,CALgB,OAKhB;;AAEA,oBAAM0mD,iBAAAA,GAAoB1iD,IAAAA,IAAQ;AAChC,uBAAOhE,QAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CADyB,IACzBA,CAAP;AADF,eAAA;;AAGA,oBAAM;AAAA,gBAAA,kBAAA;AAAA,gBAAA;AAAA,kBACJ,CAAA,GAAA,cAAA,CAAA,gCAAA,EAAiC;AAAA,gBAAA,iBAAA;AAE/B2mD,gBAAAA,MAAAA,EAAQ,KAAA,OAAA,CAFuB,MAAA;AAG/BlmC,gBAAAA,cAAAA,EAAgB,KAHe,eAAA;AAI/BJ,gBAAAA,YAAAA,EAAc,KAJiB;AAAA,eAAjC,CADF;AAQA,mBAAA,iBAAA,GAlBgB,kBAkBhB;AAEA,mBAAA,cAAA,GAAsBumC,eAAAA,IAAmB,KApBzB,cAoBhB;AAEA,mBAAA,SAAA,GAAiBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAtBD,iBAsBCA,CAAjB;;AAIA,kBAAI,CAAC,KAAD,qBAAA,IAA+B,KAAnC,iBAAA,EAA2D;AACzD,qBAAA,MAAA,CAAY,IAAA,KAAA,CAAA,cAAA,CAD6C,wBAC7C,CAAZ;AA3Bc;AARpB5mD,aAAAA,EAAAA,KAAAA,CAsCS,KAAA,kBAAA,CA9DS,MAwBlBA;AAwCA,iBAAA,UAAA,GAhEkB,IAgElB;AAjEuB;;AAoEzB,cAAIouC,YAAJ,GAAmB;AACjB,mBAAO,KAAA,kBAAA,CADU,OACjB;AArEuB;;AAwEzB,cAAI3gB,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AAzEuB;;AA4EzB,cAAIf,aAAJ,GAAoB;AAClB,mBAAO,KADW,cAClB;AA7EuB;;AAgFzB,cAAID,gBAAJ,GAAuB;AACrB,mBAAO,KADc,iBACrB;AAjFuB;;AAoFzB,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AArFuB;;AAwFzB,gBAAM6hB,IAAN,GAAa;AACX,kBAAM,KAAA,kBAAA,CADK,OACX;AACA,kBAAM;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,gBAAkB,MAAM,KAAA,OAAA,CAFnB,IAEmB,EAA9B;;AACA,gBAAA,IAAA,EAAU;AACR,qBAAO;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAAP;AAJS;;AAMX,iBAAA,OAAA,IAAgBn1B,KAAAA,CANL,UAMX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AACdgT,gBAAAA,MAAAA,EAAQ,KADM,OAAA;AAEdC,gBAAAA,KAAAA,EAAO,KAFO;AAAA,eAAhB;AARS;;AAaX,kBAAMxP,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAbJ,MAaX;AACA,mBAAO;AAAEzD,cAAAA,KAAAA,EAAF,MAAA;AAAiBkX,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AAtGuB;;AAyGzBhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,MAAA,CADgB,MAChB;AAFW;;AAIb,gBAAI,KAAJ,gBAAA,EAA2B;AACzB,mBAAA,gBAAA,CADyB,KACzB;AALW;AAzGU;;AAAA;;AAoH3B,cAAA,yBAAA,CAAgC;AAC9B7uB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,iBAAA,OAAA,GAD8B,MAC9B;AACA,iBAAA,OAAA,GAF8B,IAE9B;AACA,iBAAA,OAAA,GAH8B,CAG9B;AACA,kBAAMwf,MAAAA,GAAS2sB,MAAAA,CAJe,MAI9B;AACA,iBAAA,gBAAA,GAAwB3sB,MAAAA,CAAAA,eAAAA,IALM,KAK9B;AACA,iBAAA,eAAA,GAN8B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAM9B;AACA,iBAAA,qBAAA,GAA6B,CAACA,MAAAA,CAPA,aAO9B;;AAEA,gBAAI,OAAA,eAAA,KAAJ,WAAA,EAA4C;AAC1C,mBAAA,gBAAA,GAAwB,IADkB,eAClB,EAAxB;AAV4B;;AAa9B,iBAAA,QAAA,GAAgB6rC,aAAAA,CAAc,KAAA,OAAA,CAbA,WAadA,CAAhB;;AACA,iBAAA,QAAA,CAAA,MAAA,CAAA,OAAA,EAA8B,SAAA,KAAA,IAAkBxnD,GAAAA,GAdlB,CAAA,EAc9B;;AAEA,kBAAMT,GAAAA,GAAMoc,MAAAA,CAhBkB,GAgB9B;AACA/e,YAAAA,KAAAA,CAAAA,GAAAA,EAEE6qD,kBAAAA,CACE,KADFA,QAAAA,EAEE,KAFFA,gBAAAA,EAGE,KALJ7qD,gBAEE6qD,CAFF7qD,CAAAA,CAAAA,IAAAA,CAQQD,QAAAA,IAAY;AAChB,kBAAI,CAAC+qD,CAAAA,GAAAA,cAAAA,CAAAA,sBAAAA,EAAuB/qD,QAAAA,CAA5B,MAAK+qD,CAAL,EAA8C;AAC5C,sBAAMV,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAA0BrqD,QAAAA,CAA1BqqD,MAAAA,EADsC,GACtCA,CAAN;AAFc;;AAIhB,mBAAA,eAAA,CAJgB,OAIhB;;AACA,mBAAA,OAAA,GAAerqD,QAAAA,CAAAA,IAAAA,CALC,SAKDA,EAAf;AAbJC,aAAAA,EAAAA,KAAAA,CAeS,KAAA,eAAA,CAhCqB,MAiB9BA;AAiBA,iBAAA,UAAA,GAlC8B,IAkC9B;AAnC4B;;AAsC9B,cAAIwsB,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AAvC4B;;AA0C9B,gBAAM6hB,IAAN,GAAa;AACX,kBAAM,KAAA,eAAA,CADK,OACX;AACA,kBAAM;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,gBAAkB,MAAM,KAAA,OAAA,CAFnB,IAEmB,EAA9B;;AACA,gBAAA,IAAA,EAAU;AACR,qBAAO;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAAP;AAJS;;AAMX,iBAAA,OAAA,IAAgBn1B,KAAAA,CANL,UAMX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AAAEgT,gBAAAA,MAAAA,EAAQ,KADP;AACH,eAAhB;AARS;;AAUX,kBAAMvP,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAVJ,MAUX;AACA,mBAAO;AAAEzD,cAAAA,KAAAA,EAAF,MAAA;AAAiBkX,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AArD4B;;AAwD9BhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,MAAA,CADgB,MAChB;AAFW;;AAIb,gBAAI,KAAJ,gBAAA,EAA2B;AACzB,mBAAA,gBAAA,CADyB,KACzB;AALW;AAxDe;;AAAA;;;;;;;;;ACxNhC;;;;AACA,UAAA,wBAAA,GAAA,EAAA;;;;AAEA;;;;AACA,eAAA,mBAAA,CAAA,QAAA,EAAA;AACA;AAAA;;AACA;AAAA,YAAA,YAAA,GAAA,wBAAA,CAAA,QAAA,CAAA;AACA;;AAAA,YAAA,YAAA,KAAA,SAAA,EAAA;AACA;AAAA,iBAAA,YAAA,CAAA,OAAA;AACA;AAAA;AACA;AAAA;;AACA;;;AAAA,YAAA,MAAA,GAAA,wBAAA,CAAA,QAAA,CAAA,GAAA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA,UAAA,OAAA,EAAA;AACA;;AAJA,SAAA;;;AAMA;AAAA;;AACA;;AAAA,QAAA,mBAAA,CAAA,QAAA,CAAA,CAAA,MAAA,EAAA,MAAA,CAAA,OAAA,EAAA,mBAAA;;;AAEA;AAAA;;AACA;;;AAAA,eAAA,MAAA,CAAA,OAAA;AACA;AAAA;;;;;;mC5BZA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A6BYA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAaA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAkBA,YAAA,IAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AArDA,YAAA,iBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,eAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,WAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,IAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,UAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAsEA,cAAM28B,YAAAA,GAtEN,UAsEA;AAGA,cAAMC,UAAAA,GAzEN,WAyEA;AAgB+C;AAC7C,cAAA,QAAA,CAAA,QAAA,EAA0C;AACxC,kBAAM;AAAA,cAAA;AAAA,gBAAoBC,mBAAAA,CADc,EACdA,CAA1B;;AAEAC,aAAAA,GAAAA,IAAAA,CAAAA,0BAAAA,EAA2BhsC,MAAAA,IAAU;AACnC,qBAAO,IAAA,aAAA,CAD4B,MAC5B,CAAP;AADFgsC,aAAAA;AAHF,WAAA,MAMO;AACL,kBAAM;AAAA,cAAA;AAAA,gBAAuBD,mBAAAA,CADxB,EACwBA,CAA7B;;AACA,kBAAM;AAAA,cAAA;AAAA,gBAAqBA,mBAAAA,CAFtB,EAEsBA,CAA3B;;AAEAC,aAAAA,GAAAA,IAAAA,CAAAA,0BAAAA,EAA2BhsC,MAAAA,IAAU;AACnC,kBAAIrf,CAAAA,GAAAA,cAAAA,CAAAA,eAAAA,EAAgBqf,MAAAA,CAApB,GAAIrf,CAAJ,EAAiC;AAC/B,uBAAO,IAAA,cAAA,CADwB,MACxB,CAAP;AAFiC;;AAInC,qBAAO,IAAA,gBAAA,CAJ4B,MAI5B,CAAP;AAJFqrD,aAAAA;AAX2C;AAzF/C;;;;;;;K7BUA;AAAA;CAVA","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  isString,\n  removeNullCharacters,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\n\nconst DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nconst PixelsPerInch = {\n  CSS: 96.0,\n  PDF: 72.0,\n\n  /** @type {number} */\n  get PDF_TO_CSS_UNITS() {\n    return shadow(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n  },\n};\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type) {\n    super(msg, \"RenderingCancelledException\");\n    this.type = type;\n  }\n}\n\nconst LinkTarget = {\n  NONE: 0, // Default value.\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4,\n};\n\n/**\n * @typedef ExternalLinkParameters\n * @typedef {Object} ExternalLinkParameters\n * @property {string} url - An absolute URL.\n * @property {LinkTarget} [target] - The link target. The default value is\n *   `LinkTarget.NONE`.\n * @property {string} [rel] - The link relationship. The default value is\n *   `DEFAULT_LINK_REL`.\n * @property {boolean} [enabled] - Whether the link should be enabled. The\n *   default value is true.\n */\n\n/**\n * Adds various attributes (href, title, target, rel) to hyperlinks.\n * @param {HTMLAnchorElement} link - The link element.\n * @param {ExternalLinkParameters} params\n */\nfunction addLinkAttributes(link, { url, target, rel, enabled = true } = {}) {\n  assert(\n    url && typeof url === \"string\",\n    'addLinkAttributes: A valid \"url\" parameter must provided.'\n  );\n\n  const urlNullRemoved = removeNullCharacters(url);\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = `Disabled: ${urlNullRemoved}`;\n    link.onclick = () => {\n      return false;\n    };\n  }\n\n  let targetStr = \"\"; // LinkTarget.NONE\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n  link.target = targetStr;\n\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @returns {string}\n */\nfunction getFilenameFromUrl(url) {\n  const anchor = url.indexOf(\"#\");\n  const query = url.indexOf(\"?\");\n  const end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length\n  );\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const time of this.times) {\n      const name = time.name;\n      if (name.length > longest) {\n        longest = name.length;\n      }\n    }\n    for (const time of this.times) {\n      const duration = time.end - time.start;\n      outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || !isString(input)) {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    if (!pdfDateStringRegex) {\n      pdfDateStringRegex = new RegExp(\n        \"^D:\" + // Prefix (required)\n          \"(\\\\d{4})\" + // Year (required)\n          \"(\\\\d{2})?\" + // Month (optional)\n          \"(\\\\d{2})?\" + // Day (optional)\n          \"(\\\\d{2})?\" + // Hour (optional)\n          \"(\\\\d{2})?\" + // Minute (optional)\n          \"(\\\\d{2})?\" + // Second (optional)\n          \"([Z|+|-])?\" + // Universal time relation (optional)\n          \"(\\\\d{2})?\" + // Offset hour (optional)\n          \"'?\" + // Splitting apostrophe (optional)\n          \"(\\\\d{2})?\" + // Offset minute (optional)\n          \"'?\" // Trailing apostrophe (optional)\n      );\n    }\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nexport {\n  addLinkAttributes,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  StatTimer,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1STANDARD: \"TYPE1STANDARD\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  /** @deprecated unused */\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  signatures: \"signatures\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontBuildPath: \"errorFontBuildPath\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n  errorContentSubStream: \"errorContentSubStream\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots && dots.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch (ex) {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nconst NullCharactersRegExp = /\\x00/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(\n      String.fromCharCode((char >> 8) & 0xff),\n      String.fromCharCode(char & 0xff)\n    );\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationMode,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for `globalThis` in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1, Node.js<12.0.0\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    globalThis.DOMMatrix = require(\"dommatrix/dist/dommatrix.js\");\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1, Node.js<12.0.0\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13, Node.js<12.9.0\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"CHROME\")) {\n      // Slightly reduce the size of the Chromium-extension, given\n      // that `ReadableStream` has been supported since Chrome 43.\n      return;\n    }\n    if (globalThis.ReadableStream || !isNodeJS) {\n      return;\n    }\n    globalThis.ReadableStream =\n      require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @private\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = false }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttribute(\"width\", `${width}px`);\n    svg.setAttribute(\"height\", `${height}px`);\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @private\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isSameOrigin,\n  MissingPDFException,\n  PasswordException,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n} from \"./node_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\n\nconst DefaultCanvasFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultStandardFontDataFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef {function} IPDFStreamFactory\n * @param {DocumentInitParameters} params - The document initialization\n *   parameters. The \"url\" key is always present.\n * @returns {Promise} A promise, which is resolved with an instance of\n *   {IPDFStream}.\n * @ignore\n */\n\n/**\n * @type IPDFStreamFactory\n * @private\n */\nlet createPDFNetworkStream;\n\n/**\n * Sets the function that instantiates an {IPDFStream} as an alternative PDF\n * data transport.\n *\n * @param {IPDFStreamFactory} pdfNetworkStreamFactory - The factory function\n *   that takes document initialization parameters (including a \"url\") and\n *   returns a promise which is resolved with an instance of {IPDFStream}.\n * @ignore\n */\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string|URL} [url] - The URL of the PDF.\n * @property {TypedArray|Array<number>|string} [data] - Binary PDF data. Use\n *    typed arrays (Uint8Array) to improve the memory usage. If PDF data is\n *    BASE64-encoded, use `atob()` to convert it to a binary string first.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {TypedArray} [initialData] - A typed array with the first portion\n *   or all of the pdf data. Used by the extension since some data is already\n *   loaded before the switch to range requests.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string|URL|TypedArray|PDFDataRangeTransport|DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  const task = new PDFDocumentLoadingTask();\n\n  let source;\n  if (typeof src === \"string\" || src instanceof URL) {\n    source = { url: src };\n  } else if (isArrayBuffer(src)) {\n    source = { data: src };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = { range: src };\n  } else {\n    if (typeof src !== \"object\") {\n      throw new Error(\n        \"Invalid parameter in getDocument, \" +\n          \"need either string, URL, Uint8Array, or parameter object.\"\n      );\n    }\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\n        \"Invalid parameter object: need either .data, .range or .url\"\n      );\n    }\n    source = src;\n  }\n  const params = Object.create(null);\n  let rangeTransport = null,\n    worker = null;\n\n  for (const key in source) {\n    const value = source[key];\n\n    switch (key) {\n      case \"url\":\n        if (typeof window !== \"undefined\") {\n          try {\n            // The full path is required in the 'url' field.\n            params[key] = new URL(value, window.location).href;\n            continue;\n          } catch (ex) {\n            warn(`Cannot create valid URL: \"${ex}\".`);\n          }\n        } else if (typeof value === \"string\" || value instanceof URL) {\n          params[key] = value.toString(); // Support Node.js environments.\n          continue;\n        }\n        throw new Error(\n          \"Invalid PDF url data: \" +\n            \"either string or URL-object is expected in the url property.\"\n        );\n      case \"range\":\n        rangeTransport = value;\n        continue;\n      case \"worker\":\n        worker = value;\n        continue;\n      case \"data\":\n        // Converting string or array-like data to Uint8Array.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          isNodeJS &&\n          typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n          value instanceof Buffer // eslint-disable-line no-undef\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (value instanceof Uint8Array) {\n          break; // Use the data as-is when it's already a Uint8Array.\n        } else if (typeof value === \"string\") {\n          params[key] = stringToBytes(value);\n        } else if (\n          typeof value === \"object\" &&\n          value !== null &&\n          !isNaN(value.length)\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (isArrayBuffer(value)) {\n          params[key] = new Uint8Array(value);\n        } else {\n          throw new Error(\n            \"Invalid PDF binary data: either typed array, \" +\n              \"string, or array-like object is expected in the data property.\"\n          );\n        }\n        continue;\n    }\n    params[key] = value;\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory =\n    params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.StandardFontDataFactory =\n    params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n  params.enableXfa = params.enableXfa === true;\n\n  if (\n    typeof params.docBaseUrl !== \"string\" ||\n    isDataScheme(params.docBaseUrl)\n  ) {\n    // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n    // URLs anyway. We want to avoid sending them to the worker-thread, since\n    // they contain the *entire* PDF document and can thus be arbitrarily long.\n    params.docBaseUrl = null;\n  }\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n  if (typeof params.useWorkerFetch !== \"boolean\") {\n    params.useWorkerFetch =\n      params.CMapReaderFactory === DOMCMapReaderFactory &&\n      params.StandardFontDataFactory === DOMStandardFontDataFactory;\n  }\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace =\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS;\n  }\n  if (typeof params.useSystemFonts !== \"boolean\") {\n    params.useSystemFonts =\n      !(\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        isNodeJS\n      ) && !params.disableFontFace;\n  }\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(params.verbosity);\n\n  if (!worker) {\n    const workerParams = {\n      verbosity: params.verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docId = task.docId;\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(\n        worker,\n        params,\n        rangeTransport,\n        docId\n      );\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length: params.length,\n              initialData: params.initialData,\n              progressiveDone: params.progressiveDone,\n              contentDispositionFilename: params.contentDispositionFilename,\n              disableRange: params.disableRange,\n              disableStream: params.disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          messageHandler.postMessageTransfers = worker.postMessageTransfers;\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            params\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @param {PDFDataRangeTransport} pdfDataRangeTransport\n * @param {string} docId - Unique document ID, used in `MessageHandler`.\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    source.contentDispositionFilename =\n      pdfDataRangeTransport.contentDispositionFilename;\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    {\n      docId,\n      apiVersion:\n        typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n          ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n          : null,\n      // Only send the required properties, and *not* the entire object.\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length,\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      postMessageTransfers: worker.postMessageTransfers,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties,\n      enableXfa: source.enableXfa,\n      useSystemFonts: source.useSystemFonts,\n      cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n      standardFontDataUrl: source.useWorkerFetch\n        ? source.standardFontDataUrl\n        : null,\n    }\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static get idCounters() {\n    return shadow(this, \"idCounters\", { doc: 0 });\n  }\n\n  constructor() {\n    this._capability = createPromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n\n    /**\n     * Callback for when an unsupported feature is used in the PDF document.\n     * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n     * @type {function}\n     */\n    this.onUnsupportedFeature = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    await this._transport?.destroy();\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = createPromiseCapability();\n  }\n\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"fingerprint\", {\n        get() {\n          deprecated(\n            \"`PDFDocumentProxy.fingerprint`, \" +\n              \"please use `PDFDocumentProxy.fingerprints` instead.\"\n          );\n          return this.fingerprints[0];\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return !!this._transport._htmlForXfa;\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<TypedArray>} A promise that is resolved with a\n   *   {TypedArray} that has the raw data from the PDF.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentStats\n   * @property {Object<string, boolean>} streamTypes - Used stream types in the\n   *   document (an item is set to true if specific stream ID was used in the\n   *   document).\n   * @property {Object<string, boolean>} fontTypes - Used font types in the\n   *   document (an item is set to true if specific font ID was used in the\n   *   document).\n   */\n\n  /**\n   * @returns {Promise<PDFDocumentStats>} A promise this is resolved with\n   *   current statistics about document structures (see\n   *   {@link PDFDocumentStats}).\n   */\n  getStats() {\n    return this._transport.getStats();\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      this._transport.annotationStorage.size <= 0\n    ) {\n      deprecated(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} normalizeWhitespace - Replaces all occurrences of\n *   whitespace with standard spaces (0x20). The default value is `false`.\n * @property {boolean} disableCombineTextItems - Do not attempt to combine\n *   same line {@link TextItem}'s. The default value is `false`.\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {Object} canvasContext - A 2D context of a DOM Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {Object} [imageLayer] - An object that has `beginLayout`,\n *   `endLayout` and `appendImage` functions.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object | string} [background] - Background to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this._annotationPromises = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    let promise = this._annotationPromises.get(intentArgs.cacheKey);\n    if (!promise) {\n      promise = this._transport.getAnnotations(\n        this._pageIndex,\n        intentArgs.renderingIntent\n      );\n      this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n      if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n        promise = promise.then(annotations => {\n          for (const annotation of annotations) {\n            if (annotation.titleObj !== undefined) {\n              Object.defineProperty(annotation, \"title\", {\n                get() {\n                  deprecated(\n                    \"`title`-property on annotation, please use `titleObj` instead.\"\n                  );\n                  return annotation.titleObj.str;\n                },\n              });\n            }\n            if (annotation.contentsObj !== undefined) {\n              Object.defineProperty(annotation, \"contents\", {\n                get() {\n                  deprecated(\n                    \"`contents`-property on annotation, please use `contentsObj` instead.\"\n                  );\n                  return annotation.contentsObj.str;\n                },\n              });\n            }\n          }\n          return annotations;\n        });\n      }\n    }\n    return promise;\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return (this._jsActionsPromise ||= this._transport.getPageJSActions(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    imageLayer = null,\n    canvasFactory = null,\n    background = null,\n    optionalContentConfigPromise = null,\n  }) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n      if (arguments[0]?.renderInteractiveForms !== undefined) {\n        deprecated(\n          \"render no longer accepts the `renderInteractiveForms`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].renderInteractiveForms === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_FORMS;\n        }\n      }\n      if (arguments[0]?.includeAnnotationStorage !== undefined) {\n        deprecated(\n          \"render no longer accepts the `includeAnnotationStorage`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].includeAnnotationStorage === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_STORAGE;\n        }\n      }\n    }\n\n    if (this._stats) {\n      this._stats.time(\"Overall\");\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render.\n    this.pendingCleanup = false;\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const canvasFactoryInstance =\n      canvasFactory ||\n      new DefaultCanvasFactory({ ownerDocument: this._ownerDocument });\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = createPromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup once rendering has finished (regardless of cleanupAfterRender).\n      if (this.cleanupAfterRender || intentPrint) {\n        this.pendingCleanup = true;\n      }\n      this._tryCleanup();\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n      }\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: canvasFactoryInstance,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n  } = {}) {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = createPromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    normalizeWhitespace = false,\n    disableCombineTextItems = false,\n    includeMarkedContent = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true,\n        includeMarkedContent: includeMarkedContent === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return (this._structTreePromise ||= this._transport.getStructTree(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n    this._transport.pageCache[this._pageIndex] = null;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    this.pendingCleanup = false;\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.pendingCleanup = true;\n    return this._tryCleanup(resetStats);\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup(resetStats = false) {\n    if (!this.pendingCleanup) {\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n\n    this._intentStates.clear();\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    if (resetStats && this._stats) {\n      this._stats = new StatTimer();\n    }\n    this.pendingCleanup = false;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    if (this._stats) {\n      this._stats.timeEnd(\"Page Request\");\n    }\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    if (intentState.displayReadyCapability) {\n      intentState.displayReadyCapability.resolve(transparency);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this._tryCleanup();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({ renderingIntent, cacheKey }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage:\n          renderingIntent & RenderingIntentFlag.ANNOTATIONS_STORAGE\n            ? this._transport.annotationStorage.serializable\n            : null,\n      }\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          this._abortOperatorList({ intentState, reason, force: true });\n          intentState.streamReaderCancelTimeout = null;\n        }, RENDERING_CANCELLED_TIMEOUT);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  constructor() {\n    this._listeners = [];\n    this._deferred = Promise.resolve(undefined);\n  }\n\n  postMessage(obj, transfers) {\n    function cloneValue(value) {\n      // Trying to perform a structured clone close to the spec, including\n      // transfers.\n      if (\n        typeof value === \"function\" ||\n        typeof value === \"symbol\" ||\n        value instanceof URL\n      ) {\n        throw new Error(\n          `LoopbackPort.postMessage - cannot clone: ${value?.toString()}`\n        );\n      }\n\n      if (typeof value !== \"object\" || value === null) {\n        return value;\n      }\n      if (cloned.has(value)) {\n        // already cloned the object\n        return cloned.get(value);\n      }\n      let buffer, result;\n      if ((buffer = value.buffer) && isArrayBuffer(buffer)) {\n        // We found object with ArrayBuffer (typed array).\n        if (transfers?.includes(buffer)) {\n          result = new value.constructor(\n            buffer,\n            value.byteOffset,\n            value.byteLength\n          );\n        } else {\n          result = new value.constructor(value);\n        }\n        cloned.set(value, result);\n        return result;\n      }\n      if (value instanceof Map) {\n        result = new Map();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const [key, val] of value) {\n          result.set(key, cloneValue(val));\n        }\n        return result;\n      }\n      if (value instanceof Set) {\n        result = new Set();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const val of value) {\n          result.add(cloneValue(val));\n        }\n        return result;\n      }\n      result = Array.isArray(value) ? [] : Object.create(null);\n      cloned.set(value, result); // Adding to cache now for cyclic references.\n      // Cloning all value and object properties, however ignoring properties\n      // defined via getter.\n      for (const i in value) {\n        let desc,\n          p = value;\n        while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n          p = Object.getPrototypeOf(p);\n        }\n        if (typeof desc.value === \"undefined\") {\n          continue;\n        }\n        if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n          continue;\n        }\n        result[i] = cloneValue(desc.value);\n      }\n      return result;\n    }\n\n    const cloned = new WeakMap();\n    const event = { data: cloneValue(obj) };\n\n    this._deferred.then(() => {\n      for (const listener of this._listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this._listeners.push(listener);\n  }\n\n  removeEventListener(name, listener) {\n    const i = this._listeners.indexOf(listener);\n    this._listeners.splice(i, 1);\n  }\n\n  terminate() {\n    this._listeners.length = 0;\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Object} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static get _workerPorts() {\n    return shadow(this, \"_workerPorts\", new WeakMap());\n  }\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    if (port && PDFWorker._workerPorts.has(port)) {\n      throw new Error(\"Cannot use more than one PDFWorker per port.\");\n    }\n\n    this.name = name;\n    this.destroyed = false;\n    this.postMessageTransfers = true;\n    this.verbosity = verbosity;\n\n    this._readyCapability = createPromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (port) {\n      PDFWorker._workerPorts.set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      typeof Worker !== \"undefined\" &&\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let workerSrc = PDFWorker.workerSrc;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        // Some versions of FF can't create a worker on localhost, see:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n        const worker = new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            // supportTypedArray\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n            if (!data.supportTransfers) {\n              this.postMessageTransfers = false;\n            }\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch (e) {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n          // Some versions of Opera throw a DATA_CLONE_ERR on serializing the\n          // typed array. Also, checking if we can use transfers.\n          try {\n            messageHandler.send(\"test\", testObj, [testObj.buffer]);\n          } catch (ex) {\n            warn(\"Cannot use postMessage transfers.\");\n            testObj[0] = 0;\n            messageHandler.send(\"test\", testObj);\n          }\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch (e) {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker._workerPorts.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    if (this._workerPorts.has(params.port)) {\n      return this._workerPorts.get(params.port);\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n        const worker = await import(\"pdfjs/core/worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  PDFWorker.getWorkerSrc = function () {\n    deprecated(\n      \"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\"\n    );\n    return this.workerSrc;\n  };\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  constructor(messageHandler, loadingTask, networkStream, params) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    if (!params.useWorkerFetch) {\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked,\n      });\n      this.StandardFontDataFactory = new params.StandardFontDataFactory({\n        baseUrl: params.standardFontDataUrl,\n      });\n    }\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n\n    this.pageCache = [];\n    this.pagePromises = [];\n    this.downloadInfoCapability = createPromiseCapability();\n\n    this.setupMessageHandler();\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let lastModified = \"\";\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        lastModified = this.annotationStorage.lastModified;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${lastModified}`,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = createPromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.pageCache) {\n      if (page) {\n        waitOn.push(page._destroy());\n      }\n    }\n    this.pageCache.length = 0;\n    this.pagePromises.length = 0;\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this._getFieldObjectsPromise = null;\n      this._hasJSActionsPromise = null;\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = createPromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress && loadingTask.onProgress) {\n            loadingTask.onProgress(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            if (loadingTask.onProgress) {\n              loadingTask.onProgress({\n                loaded: evt.loaded,\n                total: evt.total,\n              });\n            }\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = createPromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          this._passwordCapability.resolve({\n            password,\n          });\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.length,\n          total: data.length,\n        });\n      }\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.pageCache[data.pageIndex];\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const [id, type, exportedData] = data;\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          let fontRegistry = null;\n          if (params.pdfBug && globalThis.FontInspector?.enabled) {\n            fontRegistry = {\n              registerFont(font, url) {\n                globalThis.FontInspector.fontAdded(font, url);\n              },\n            };\n          }\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            fontRegistry,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", data => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return undefined;\n      }\n\n      const [id, pageIndex, type, imageData] = data;\n      const pageProxy = this.pageCache[pageIndex];\n      if (pageProxy.objs.has(id)) {\n        return undefined;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n          if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n            pageProxy.cleanupAfterRender = true;\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n      return undefined;\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.loaded,\n          total: data.total,\n        });\n      }\n    });\n\n    messageHandler.on(\n      \"UnsupportedFeature\",\n      this._onUnsupportedFeature.bind(this)\n    );\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.CMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.CMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.StandardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.StandardFontDataFactory.fetch(data);\n    });\n  }\n\n  _onUnsupportedFeature({ featureId }) {\n    if (this.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    if (this.loadingTask.onUnsupportedFeature) {\n      this.loadingTask.onUnsupportedFeature(featureId);\n    }\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request\"));\n    }\n\n    const pageIndex = pageNumber - 1;\n    if (pageIndex in this.pagePromises) {\n      return this.pagePromises[pageIndex];\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.ownerDocument,\n          this._params.pdfBug\n        );\n        this.pageCache[pageIndex] = page;\n        return page;\n      });\n    this.pagePromises[pageIndex] = promise;\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      ref,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  saveDocument() {\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: this.annotationStorage.serializable,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getFieldObjects() {\n    return (this._getFieldObjectsPromise ||=\n      this.messageHandler.sendWithPromise(\"GetFieldObjects\", null));\n  }\n\n  hasJSActions() {\n    return (this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\n      \"HasJSActions\",\n      null\n    ));\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    return this.messageHandler\n      .sendWithPromise(\"GetMetadata\", null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  getStats() {\n    return this.messageHandler.sendWithPromise(\"GetStats\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n      const page = this.pageCache[i];\n      if (!page) {\n        continue;\n      }\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this._getFieldObjectsPromise = null;\n    this._hasJSActionsPromise = null;\n  }\n\n  get loadingParams() {\n    const params = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch: params.disableAutoFetch,\n      enableXfa: params.enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n * @ignore\n */\nclass PDFObjects {\n  constructor() {\n    this._objs = Object.create(null);\n  }\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   * @private\n   */\n  _ensureObj(objId) {\n    if (this._objs[objId]) {\n      return this._objs[objId];\n    }\n    return (this._objs[objId] = {\n      capability: createPromiseCapability(),\n      data: null,\n      resolved: false,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      this._ensureObj(objId).capability.promise.then(callback);\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this._objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj || !obj.resolved) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  has(objId) {\n    const obj = this._objs[objId];\n    return obj?.resolved || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   */\n  resolve(objId, data) {\n    const obj = this._ensureObj(objId);\n\n    obj.resolved = true;\n    obj.data = data;\n    obj.capability.resolve(data);\n  }\n\n  clear() {\n    this._objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  constructor(internalRenderTask) {\n    this._internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   */\n  cancel() {\n    this._internalRenderTask.cancel();\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static get canvasInUse() {\n    return shadow(this, \"canvasInUse\", new WeakSet());\n  }\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this._pdfBug = pdfBug;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = createPromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, imageLayer, background } =\n      this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      imageLayer,\n      optionalContentConfig\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    if (this.graphicsReadyCallback) {\n      this.graphicsReadyCallback();\n    }\n  }\n\n  cancel(error = null) {\n    this.running = false;\n    this.cancelled = true;\n    if (this.gfx) {\n      this.gfx.endDrawing();\n    }\n    if (this._canvas) {\n      InternalRenderTask.canvasInUse.delete(this._canvas);\n    }\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          \"canvas\"\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      if (!this.graphicsReadyCallback) {\n        this.graphicsReadyCallback = this._continueBound;\n      }\n      return;\n    }\n\n    if (this.stepper) {\n      this.stepper.updateOperatorList(this.operatorList);\n    }\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        if (this._canvas) {\n          InternalRenderTask.canvasInUse.delete(this._canvas);\n        }\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  RenderTask,\n  setPDFNetworkStreamFactory,\n  version,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  IsEvalSupportedCached,\n  shadow,\n  string32,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  warn,\n} from \"../shared/util.js\";\n\nclass BaseFontLoader {\n  constructor({\n    docId,\n    onUnsupportedFeature,\n    ownerDocument = globalThis.document,\n    // For testing only.\n    styleElement = null,\n  }) {\n    if (this.constructor === BaseFontLoader) {\n      unreachable(\"Cannot initialize BaseFontLoader.\");\n    }\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = [];\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ? styleElement\n        : null;\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.push(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    let styleElement = this.styleElement;\n    if (!styleElement) {\n      styleElement = this.styleElement = this._document.createElement(\"style\");\n      styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .appendChild(styleElement);\n    }\n    const styleSheet = styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.length = 0;\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || font.missingFile) {\n      return;\n    }\n    font.attached = true;\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          this._onUnsupportedFeature({\n            featureId: UNSUPPORTED_FEATURES.errorFontLoadNative,\n          });\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent([rule], [font], request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  _queueLoadingCallback(callback) {\n    unreachable(\"Abstract method `_queueLoadingCallback`.\");\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  // eslint-disable-next-line getter-return\n  get isSyncFontLoadingSupported() {\n    unreachable(\"Abstract method `isSyncFontLoadingSupported`.\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get _loadTestFont() {\n    unreachable(\"Abstract method `_loadTestFont`.\");\n  }\n\n  _prepareFontLoadEvent(rules, fontsToLoad, request) {\n    unreachable(\"Abstract method `_prepareFontLoadEvent`.\");\n  }\n}\n\nlet FontLoader;\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  FontLoader = class MozcentralFontLoader extends BaseFontLoader {\n    get isSyncFontLoadingSupported() {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n  };\n} else {\n  // PDFJSDev.test('CHROME || GENERIC')\n\n  FontLoader = class GenericFontLoader extends BaseFontLoader {\n    constructor(params) {\n      super(params);\n      this.loadingContext = {\n        requests: [],\n        nextRequestId: 0,\n      };\n      this.loadTestFontId = 0;\n    }\n\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n        if (typeof navigator === \"undefined\") {\n          // Node.js - we can pretend that sync font loading is supported.\n          supported = true;\n        } else {\n          // User agent string sniffing is bad, but there is no reliable way to\n          // tell if the font is fully loaded and ready to be used with canvas.\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(\n            navigator.userAgent\n          );\n          if (m?.[1] >= 14) {\n            supported = true;\n          }\n          // TODO - other browsers...\n        }\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n\n        // Sending all completed requests in order of how they were queued.\n        while (context.requests.length > 0 && context.requests[0].done) {\n          const otherRequest = context.requests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n\n      const context = this.loadingContext;\n      const request = {\n        id: `pdfjs-font-loading-${context.nextRequestId++}`,\n        done: false,\n        complete: completeRequest,\n        callback,\n      };\n      context.requests.push(request);\n      return request;\n    }\n\n    get _loadTestFont() {\n      const getLoadTestFont = function () {\n        // This is a CFF font with 1 glyph for '.' that fills its entire width\n        // and height.\n        return atob(\n          \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n            \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n            \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n            \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n            \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n            \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n            \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n            \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n            \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n            \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n            \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n            \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n            \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n            \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n            \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n            \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n            \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n        );\n      };\n      return shadow(this, \"_loadTestFont\", getLoadTestFont());\n    }\n\n    _prepareFontLoadEvent(rules, fonts, request) {\n      /** Hack begin */\n      // There's currently no event when a font has finished downloading so the\n      // following code is a dirty hack to 'guess' when a font is ready.\n      // It's assumed fonts are loaded in order, so add a known test font after\n      // the desired fonts and then test for the loading of that test font.\n\n      function int32(data, offset) {\n        return (\n          (data.charCodeAt(offset) << 24) |\n          (data.charCodeAt(offset + 1) << 16) |\n          (data.charCodeAt(offset + 2) << 8) |\n          (data.charCodeAt(offset + 3) & 0xff)\n        );\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n\n      // The temporary canvas is used to determine if fonts are loaded.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n\n      let called = 0;\n      function isFontReady(name, callback) {\n        called++;\n        // With setTimeout clamping this gives the font ~100ms to load.\n        if (called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      // Chromium seems to cache fonts based on a hash of the actual font data,\n      // so the font must be modified for each load test else it will appear to\n      // be loaded already.\n      // TODO: This could maybe be made faster by avoiding the btoa of the full\n      // font by splitting it in chunks before hand and padding the font id.\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n      data = spliceString(\n        data,\n        COMMENT_OFFSET,\n        loadTestFontId.length,\n        loadTestFontId\n      );\n      // CFF checksum is important for IE, adjusting it\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        // align to 4 bytes boundary\n        checksum =\n          (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n\n      const names = [];\n      for (const font of fonts) {\n        names.push(font.loadedName);\n      }\n      names.push(loadTestFontId);\n\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n\n      for (const name of names) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = name;\n        div.appendChild(span);\n      }\n      this._document.body.appendChild(div);\n\n      isFontReady(loadTestFontId, () => {\n        this._document.body.removeChild(div);\n        request.complete();\n      });\n      /** Hack end */\n    }\n  };\n} // End of PDFJSDev.test('CHROME || GENERIC')\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature,\n      fontRegistry = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this);\n    }\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this, url);\n    }\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      this._onUnsupportedFeature({\n        featureId: UNSUPPORTED_FEATURES.errorFontGetPath,\n      });\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && IsEvalSupportedCached.value) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { unreachable } from \"../shared/util.js\";\n\nlet NodeCanvasFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCanvasFactory\");\n  }\n};\n\nlet NodeCMapReaderFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCMapReaderFactory\");\n  }\n};\n\nlet NodeStandardFontDataFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeStandardFontDataFactory\");\n  }\n};\n\nif ((typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS) {\n  const fetchData = function (url) {\n    return new Promise((resolve, reject) => {\n      const fs = __non_webpack_require__(\"fs\");\n      fs.readFile(url, (error, data) => {\n        if (error || !data) {\n          reject(new Error(error));\n          return;\n        }\n        resolve(new Uint8Array(data));\n      });\n    });\n  };\n\n  NodeCanvasFactory = class extends BaseCanvasFactory {\n    _createCanvas(width, height) {\n      const Canvas = __non_webpack_require__(\"canvas\");\n      return Canvas.createCanvas(width, height);\n    }\n  };\n\n  NodeCMapReaderFactory = class extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return fetchData(url).then(data => {\n        return { cMapData: data, compressionType };\n      });\n    }\n  };\n\n  NodeStandardFontDataFactory = class extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return fetchData(url);\n    }\n  };\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  constructor() {\n    this._storage = new Map();\n    this._timeStamp = Date.now();\n    this._modified = false;\n\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this._storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Set the value for a given key\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this._storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this._storage.set(key, value);\n    }\n    if (modified) {\n      this._timeStamp = Date.now();\n      this._setModified();\n    }\n  }\n\n  getAll() {\n    return this._storage.size > 0 ? objectFromMap(this._storage) : null;\n  }\n\n  get size() {\n    return this._storage.size;\n  }\n\n  /**\n   * @private\n   */\n  _setModified() {\n    if (!this._modified) {\n      this._modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this._modified) {\n      this._modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this._storage.size > 0 ? this._storage : null;\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get lastModified() {\n    return this._timeStamp.toString();\n  }\n}\n\nexport { AnnotationStorage };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  IsLittleEndianCached,\n  isNum,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { getShadingPattern, TilingPattern } from \"./pattern_helper.js\";\nimport { PixelsPerInch } from \"./display_utils.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// This value comes from sampling a few PDFs that re-use patterns, there doesn't\n// seem to be any that benefit from caching more than 2 patterns.\nconst MAX_CACHED_CANVAS_PATTERNS = 2;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and shedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\nconst COMPILE_TYPE3_GLYPHS = true;\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n// Because of https://bugs.chromium.org/p/chromium/issues/detail?id=1170396\n// some curves aren't rendered correctly.\n// Multiplying lineWidth by this factor should help to have \"correct\"\n// rendering with no artifacts.\n// Once the bug is fixed upstream, we can remove this constant and its use.\nconst LINEWIDTH_SCALE_FACTOR = 1.000001;\n\nfunction addContextCurrentTransform(ctx) {\n  // If the context doesn't expose a `mozCurrentTransform`, add a JS based one.\n  if (ctx.mozCurrentTransform) {\n    return;\n  }\n  ctx._originalSave = ctx.save;\n  ctx._originalRestore = ctx.restore;\n  ctx._originalRotate = ctx.rotate;\n  ctx._originalScale = ctx.scale;\n  ctx._originalTranslate = ctx.translate;\n  ctx._originalTransform = ctx.transform;\n  ctx._originalSetTransform = ctx.setTransform;\n  ctx._originalResetTransform = ctx.resetTransform;\n\n  ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n  ctx._transformStack = [];\n\n  try {\n    // The call to getOwnPropertyDescriptor throws an exception in Node.js:\n    // \"TypeError: Method lineWidth called on incompatible receiver\n    //  #<CanvasRenderingContext2D>\".\n    const desc = Object.getOwnPropertyDescriptor(\n      Object.getPrototypeOf(ctx),\n      \"lineWidth\"\n    );\n\n    ctx._setLineWidth = desc.set;\n    ctx._getLineWidth = desc.get;\n\n    Object.defineProperty(ctx, \"lineWidth\", {\n      set: function setLineWidth(width) {\n        this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n      },\n      get: function getLineWidth() {\n        return this._getLineWidth();\n      },\n    });\n  } catch (_) {}\n\n  Object.defineProperty(ctx, \"mozCurrentTransform\", {\n    get: function getCurrentTransform() {\n      return this._transformMatrix;\n    },\n  });\n\n  Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n    get: function getCurrentTransformInverse() {\n      // Calculation done using WolframAlpha:\n      // http://www.wolframalpha.com/input/?\n      //   i=Inverse+{{a%2C+c%2C+e}%2C+{b%2C+d%2C+f}%2C+{0%2C+0%2C+1}}\n\n      const [a, b, c, d, e, f] = this._transformMatrix;\n      const ad_bc = a * d - b * c;\n      const bc_ad = b * c - a * d;\n\n      return [\n        d / ad_bc,\n        b / bc_ad,\n        c / bc_ad,\n        a / ad_bc,\n        (d * e - c * f) / bc_ad,\n        (b * e - a * f) / ad_bc,\n      ];\n    },\n  });\n\n  ctx.save = function ctxSave() {\n    const old = this._transformMatrix;\n    this._transformStack.push(old);\n    this._transformMatrix = old.slice(0, 6);\n\n    this._originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    const prev = this._transformStack.pop();\n    if (prev) {\n      this._transformMatrix = prev;\n      this._originalRestore();\n    }\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    const m = this._transformMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n\n    this._originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    const m = this._transformMatrix;\n    m[0] *= x;\n    m[1] *= x;\n    m[2] *= y;\n    m[3] *= y;\n\n    this._originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * a + m[2] * b,\n      m[1] * a + m[3] * b,\n      m[0] * c + m[2] * d,\n      m[1] * c + m[3] * d,\n      m[0] * e + m[2] * f + m[4],\n      m[1] * e + m[3] * f + m[5],\n    ];\n\n    ctx._originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    this._transformMatrix = [a, b, c, d, e, f];\n\n    ctx._originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n    ctx._originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    const cosValue = Math.cos(angle);\n    const sinValue = Math.sin(angle);\n\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * cosValue + m[2] * sinValue,\n      m[1] * cosValue + m[3] * sinValue,\n      m[0] * -sinValue + m[2] * cosValue,\n      m[1] * -sinValue + m[3] * cosValue,\n      m[4],\n      m[5],\n    ];\n\n    this._originalRotate(angle);\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height, trackTransform) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n      // reset canvas transform for emulated mozCurrentTransform, if needed\n      canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    if (trackTransform) {\n      addContextCurrentTransform(canvasEntry.context);\n    }\n    return canvasEntry;\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\n/**\n * Least recently used cache implemented with a JS Map. JS Map keys are ordered\n * by last insertion.\n */\nclass LRUCache {\n  constructor(maxSize = 0) {\n    this._cache = new Map();\n    this._maxSize = maxSize;\n  }\n\n  has(key) {\n    return this._cache.has(key);\n  }\n\n  get(key) {\n    if (this._cache.has(key)) {\n      // Delete and set the value so it's moved to the end of the map iteration.\n      const value = this._cache.get(key);\n      this._cache.delete(key);\n      this._cache.set(key, value);\n    }\n    return this._cache.get(key);\n  }\n\n  set(key, value) {\n    if (this._maxSize <= 0) {\n      return;\n    }\n    if (this._cache.size + 1 > this._maxSize) {\n      // Delete the least recently used.\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  clear() {\n    this._cache.clear();\n  }\n}\n\nfunction compileType3Glyph(imgData) {\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width = imgData.width,\n    height = imgData.height,\n    width1 = width + 1;\n  let i, ii, j, j0;\n  const points = new Uint8Array(width1 * (height + 1));\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7,\n    data0 = imgData.data;\n  const data = new Uint8Array(lineSize * height);\n  let pos = 0;\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    const elem = data0[i];\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const outlines = [];\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    const coords = [p % width1, i];\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n\n      coords.push(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    outlines.push(coords);\n    --i;\n  }\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n    for (let k = 0, kk = outlines.length; k < kk; k++) {\n      const o = outlines[k];\n      c.moveTo(o[0], o[1]);\n      for (let l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor() {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.resumeSMaskCtx = null; // nonclonable field (see the save method below)\n    this.transferMaps = null;\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData, transferMaps = null) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n  if (transferMaps) {\n    switch (transferMaps.length) {\n      case 1:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[0];\n        transferMapBlue = transferMaps[0];\n        transferMapGray = transferMaps[0];\n        break;\n      case 4:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[1];\n        transferMapBlue = transferMaps[2];\n        transferMapGray = transferMaps[3];\n        break;\n    }\n  }\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    let white = 0xffffffff;\n    let black = IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n    if (transferMapGray) {\n      if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n        [white, black] = [black, white];\n      }\n    }\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < destPos; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n    let destPos = 3; // alpha component offset\n    for (let j = 0; j < thisChunkHeight; j++) {\n      let elem,\n        mask = 0;\n      for (let k = 0; k < width; k++) {\n        if (!mask) {\n          elem = src[srcPos++];\n          mask = 128;\n        }\n        dest[destPos] = elem & mask ? 0 : 255;\n        destPos += 4;\n        mask >>= 1;\n      }\n    }\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n  ];\n  for (let i = 0, ii = properties.length; i < ii; i++) {\n    const property = properties[i];\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = \"#000000\";\n  ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  let composeFn;\n  if (subtype === \"Luminosity\") {\n    composeFn = composeSMaskLuminosity;\n  } else {\n    composeFn = composeSMaskAlpha;\n  }\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n    const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    maskCtx.putImageData(layerData, 0, row);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx) {\n  const mask = smask.canvas;\n  const maskCtx = smask.context;\n\n  ctx.setTransform(\n    smask.scaleX,\n    0,\n    0,\n    smask.scaleY,\n    smask.offsetX,\n    smask.offsetY\n  );\n\n  genericComposeSMask(\n    maskCtx,\n    layerCtx,\n    mask.width,\n    mask.height,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap\n  );\n  ctx.drawImage(mask, 0, 0);\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    imageLayer,\n    optionalContentConfig\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState();\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.imageLayer = imageLayer;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.contentVisible = true;\n    this.markedContentStack = [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedCanvasPatterns = new LRUCache(MAX_CACHED_CANVAS_PATTERNS);\n    this.cachedPatterns = new Map();\n    if (canvasCtx) {\n      // NOTE: if mozCurrentTransform is polyfilled, then the current state of\n      // the transformation must already be set in canvasCtx._transformMatrix.\n      addContextCurrentTransform(canvasCtx);\n    }\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    this.ctx.save();\n    this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.restore();\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height,\n        true\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform.apply(this.ctx, transform);\n    }\n    this.ctx.transform.apply(this.ctx, viewport.transform);\n\n    this.baseTransform = this.ctx.mozCurrentTransform.slice();\n    this._combinedScaleFactor = Math.hypot(\n      this.baseTransform[0],\n      this.baseTransform[2]\n    );\n\n    if (this.imageLayer) {\n      this.imageLayer.beginLayout();\n    }\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  endDrawing() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.current.activeSMask !== null) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n\n    this.cachedCanvases.clear();\n    this.cachedCanvasPatterns.clear();\n    this.cachedPatterns.clear();\n\n    if (this.imageLayer) {\n      this.imageLayer.endLayout();\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        newWidth = Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        newHeight = Math.ceil(paintHeight / 2);\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const maskCanvas = this.cachedCanvases.getCanvas(\n      \"maskCanvas\",\n      width,\n      height\n    );\n    const maskCtx = maskCanvas.context;\n    putBinaryImageMask(maskCtx, img);\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n    const objToCanvas = ctx.mozCurrentTransform;\n    let maskToCanvas = Util.transform(objToCanvas, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.ceil(rect[2] - rect[0]);\n    const drawnHeight = Math.ceil(rect[3] - rect[1]);\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const fillCtx = fillCanvas.context;\n    // The offset will be the top-left cordinate mask.\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform.apply(fillCtx, maskToCanvas);\n    // Pre-scale if needed to improve image smoothing.\n    const scaled = this._scaleImage(\n      maskCanvas.canvas,\n      fillCtx.mozCurrentTransformInverse\n    );\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      fillCtx.mozCurrentTransform,\n      img.interpolate\n    );\n    fillCtx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.img.width,\n      scaled.img.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(fillCtx.mozCurrentTransformInverse, [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, false)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (let i = 0, ii = states.length; i < ii; i++) {\n      const state = states[i];\n      const key = state[0];\n      const value = state[1];\n\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = state[1];\n          break;\n        case \"ca\":\n          this.current.fillAlpha = state[1];\n          this.ctx.globalAlpha = state[1];\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          if (this.current.activeSMask) {\n            // If SMask is currrenly used, it needs to be suspended or\n            // finished. Suspend only makes sense when at least one save()\n            // was performed and state needs to be reverted on restore().\n            if (\n              this.stateStack.length > 0 &&\n              this.stateStack[this.stateStack.length - 1].activeSMask ===\n                this.current.activeSMask\n            ) {\n              this.suspendSMaskGroup();\n            } else {\n              this.endSMaskGroup();\n            }\n          }\n          this.current.activeSMask = value ? this.tempSMask : null;\n          if (this.current.activeSMask) {\n            this.beginSMaskGroup();\n          }\n          this.tempSMask = null;\n          break;\n        case \"TR\":\n          this.current.transferMaps = value;\n      }\n    }\n  }\n\n  beginSMaskGroup() {\n    const activeSMask = this.current.activeSMask;\n    const drawnWidth = activeSMask.canvas.width;\n    const drawnHeight = activeSMask.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n\n    const currentCtx = this.ctx;\n    const currentTransform = currentCtx.mozCurrentTransform;\n    this.ctx.save();\n\n    const groupCtx = scratchCanvas.context;\n    groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n    groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n    groupCtx.transform.apply(groupCtx, currentTransform);\n\n    activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  suspendSMaskGroup() {\n    // Similar to endSMaskGroup, the intermediate canvas has to be composed\n    // and future ctx state restored.\n    const groupCtx = this.ctx;\n    this.groupLevel--;\n    this.ctx = this.groupStack.pop();\n\n    composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n    this.ctx.restore();\n    this.ctx.save(); // save is needed since SMask will be resumed.\n    copyCtxState(groupCtx, this.ctx);\n\n    // Saving state for resuming.\n    this.current.resumeSMaskCtx = groupCtx;\n    // Transform was changed in the SMask canvas, reflecting this change on\n    // this.ctx.\n    const deltaTransform = Util.transform(\n      this.current.activeSMask.startTransformInverse,\n      groupCtx.mozCurrentTransform\n    );\n    this.ctx.transform.apply(this.ctx, deltaTransform);\n\n    // SMask was composed, the results at the groupCtx can be cleared.\n    groupCtx.save();\n    groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n    groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n    groupCtx.restore();\n  }\n\n  resumeSMaskGroup() {\n    // Resuming state saved by suspendSMaskGroup. We don't need to restore\n    // any groupCtx state since restore() command (the only caller) will do\n    // that for us. See also beginSMaskGroup.\n    const groupCtx = this.current.resumeSMaskCtx;\n    const currentCtx = this.ctx;\n    this.ctx = groupCtx;\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  endSMaskGroup() {\n    const groupCtx = this.ctx;\n    this.groupLevel--;\n    this.ctx = this.groupStack.pop();\n\n    composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n    this.ctx.restore();\n    copyCtxState(groupCtx, this.ctx);\n    // Transform was changed in the SMask canvas, reflecting this change on\n    // this.ctx.\n    const deltaTransform = Util.transform(\n      this.current.activeSMask.startTransformInverse,\n      groupCtx.mozCurrentTransform\n    );\n    this.ctx.transform.apply(this.ctx, deltaTransform);\n  }\n\n  save() {\n    this.ctx.save();\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n    this.current.resumeSMaskCtx = null;\n  }\n\n  restore() {\n    // SMask was suspended, we just need to resume it.\n    if (this.current.resumeSMaskCtx) {\n      this.resumeSMaskGroup();\n    }\n    // SMask has to be finished once there is no states that are using the\n    // same SMask.\n    if (\n      this.current.activeSMask !== null &&\n      (this.stateStack.length === 0 ||\n        this.stateStack[this.stateStack.length - 1].activeSMask !==\n          this.current.activeSMask)\n    ) {\n      this.endSMaskGroup();\n    }\n\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      this.ctx.restore();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedGetSinglePixelWidth = null;\n    } else {\n      // We've finished all the SMask groups, reflect that in our state.\n      this.current.activeSMask = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          break;\n        case OPS.curveTo:\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        const lineWidth = this.getSinglePixelWidth();\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          ctx.mozCurrentTransformInverse\n        );\n        // Prevent drawing too thin lines by enforcing a minimum line width.\n        ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n        ctx.stroke();\n        ctx.restore();\n      } else {\n        const lineWidth = this.getSinglePixelWidth();\n        if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n          // The current transform will transform a square pixel into a\n          // parallelogram where both heights are lower than 1 and not equal.\n          ctx.save();\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          // Prevent drawing too thin lines by enforcing a minimum line width.\n          ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n          ctx.stroke();\n        }\n      }\n    }\n    if (consumePath) {\n      this.consumePath();\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse\n      );\n      needRestore = true;\n    }\n\n    if (this.contentVisible) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath();\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      ctx.setTransform.apply(ctx, path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n    const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform.apply(ctx, patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n        }\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.save();\n          ctx.moveTo(x, y);\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.strokeText(character, 0, 0);\n          ctx.restore();\n        } else {\n          ctx.strokeText(character, x, y);\n        }\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n      paths.push({\n        transform: ctx.mozCurrentTransform,\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    let patternTransform;\n    if (current.patternFill) {\n      // TODO: Patterns are not applied correctly to text if a non-embedded\n      // font is used. E.g. issue 8111 and ShowText-ShadingPattern.pdf.\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse\n      );\n      patternTransform = ctx.mozCurrentTransform;\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let lineWidth = current.lineWidth;\n    let resetLineWidthToOne = false;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        this._cachedGetSinglePixelWidth = null;\n        lineWidth = this.getSinglePixelWidth();\n        resetLineWidthToOne = lineWidth < 0;\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (isNum(glyph)) {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(\n            character,\n            scaledX,\n            scaledY,\n            patternTransform,\n            resetLineWidthToOne\n          );\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform,\n              resetLineWidthToOne\n            );\n          }\n        }\n      }\n\n      let charWidth;\n      if (vertical) {\n        charWidth = width * widthAdvanceScale - spacing * fontDirection;\n      } else {\n        charWidth = width * widthAdvanceScale + spacing * fontDirection;\n      }\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (isNum(glyph)) {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform.apply(ctx, fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    // TODO According to the spec we're also suppose to ignore any operators\n    // that set color or include images while processing this type3 font.\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform =\n        this.baseTransform || this.ctx.mozCurrentTransform.slice();\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(\n        this.objs.get(objId),\n        this.cachedCanvasPatterns\n      );\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      ctx.mozCurrentTransformInverse,\n      true\n    );\n\n    const inv = ctx.mozCurrentTransformInverse;\n    if (inv) {\n      const canvas = ctx.canvas;\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform.apply(this, matrix);\n    }\n\n    this.baseTransform = this.ctx.mozCurrentTransform;\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = currentCtx.mozCurrentTransform;\n    if (group.matrix) {\n      currentCtx.transform.apply(currentCtx, group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      currentCtx.mozCurrentTransform\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform.apply(groupCtx, currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n\n    // Resetting mask state, masks will be applied on restore of the group.\n    this.current.activeSMask = null;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    this.ctx = this.groupStack.pop();\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n    } else {\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n    }\n    this.restore();\n  }\n\n  beginAnnotations() {\n    this.save();\n    if (this.baseTransform) {\n      this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n    }\n  }\n\n  endAnnotations() {\n    this.restore();\n  }\n\n  beginAnnotation(id, rect, transform, matrix) {\n    this.save();\n    resetCtxToDefault(this.ctx);\n    this.current = new CanvasExtraState();\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n      this.ctx.rect(rect[0], rect[1], width, height);\n      this.clip();\n      this.endPath();\n    }\n\n    this.transform.apply(this, transform);\n    this.transform.apply(this, matrix);\n  }\n\n  endAnnotation() {\n    this.restore();\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n\n    const glyph = this.processingType3;\n\n    if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n      if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n        glyph.compiled = compileType3Glyph({ data: img.data, width, height });\n      } else {\n        glyph.compiled = null;\n      }\n    }\n\n    if (glyph?.compiled) {\n      glyph.compiled(ctx);\n      return;\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n  }\n\n  paintImageMaskXObjectRepeat(\n    imgData,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = ctx.mozCurrentTransform;\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(imgData);\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    for (let i = 0, ii = images.length; i < ii; i++) {\n      const image = images[i];\n      const width = image.width,\n        height = image.height;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      putBinaryImageMask(maskCtx, image);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            ctx.mozCurrentTransformInverse,\n            false\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform.apply(ctx, image.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n      ctx.restore();\n    }\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    // typeof check is needed due to node.js support, see issue #8489\n    if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n      imgToPaint = tmpCanvas.canvas;\n    }\n\n    const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      ctx.mozCurrentTransform,\n      imgData.interpolate\n    );\n    ctx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n\n    if (this.imageLayer) {\n      const position = this.getCanvasPosition(0, -height);\n      this.imageLayer.appendImage({\n        imgData,\n        left: position[0],\n        top: position[1],\n        width: width / ctx.mozCurrentTransformInverse[0],\n        height: height / ctx.mozCurrentTransformInverse[3],\n      });\n    }\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const w = imgData.width;\n    const h = imgData.height;\n\n    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n    const tmpCtx = tmpCanvas.context;\n    putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n    for (let i = 0, ii = map.length; i < ii; i++) {\n      const entry = map[i];\n      ctx.save();\n      ctx.transform.apply(ctx, entry.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(\n        tmpCanvas.canvas,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      if (this.imageLayer) {\n        const position = this.getCanvasPosition(entry.x, entry.y);\n        this.imageLayer.appendImage({\n          imgData,\n          left: position[0],\n          top: position[1],\n          width: w,\n          height: h,\n        });\n      }\n      ctx.restore();\n    }\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath() {\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (this.pendingClip === EO_CLIP) {\n        ctx.clip(\"evenodd\");\n      } else {\n        ctx.clip();\n      }\n      this.pendingClip = null;\n    }\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (this._cachedGetSinglePixelWidth === null) {\n      // If transform is [a b] then a pixel (square) is transformed\n      //                 [c d]\n      // into a parallelogram: its area is the abs value of the determinant.\n      // This parallelogram has 2 heights:\n      //  - Area / |col_1|;\n      //  - Area / |col_2|.\n      // so in order to get a height of at least 1, pixel height\n      // must be computed as followed:\n      //  h = max(sqrt(a² + c²) / |det(M)|, sqrt(b² + d²) / |det(M)|).\n      // This is equivalent to:\n      //  h = max(|line_1_inv(M)|, |line_2_inv(M)|)\n      const m = this.ctx.mozCurrentTransform;\n\n      const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n      const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n      const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n      const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n      if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n        // The parallelogram isn't a square and at least one height\n        // is lower than 1 so the resulting line width must be 1\n        // but it cannot be achieved with one scale: when scaling a pixel\n        // we'll get a rectangle (see issue #12295).\n        // For example with matrix [0.001 0, 0, 100], a pixel is transformed\n        // in a rectangle 0.001x100. If we just scale by 1000 (to have a 1)\n        // then we'll get a rectangle 1x1e5 which is wrong.\n        // In this case, we must reset the transform, set linewidth to 1\n        // and then stroke.\n        this._cachedGetSinglePixelWidth = -(\n          this._combinedScaleFactor * pixelHeight\n        );\n      } else if (absDet > Number.EPSILON) {\n        this._cachedGetSinglePixelWidth = pixelHeight;\n      } else {\n        // Matrix is non-invertible.\n        this._cachedGetSinglePixelWidth = 1;\n      }\n    }\n\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getCanvasPosition(x, y) {\n    const transform = this.ctx.mozCurrentTransform;\n    return [\n      transform[0] * x + transform[2] * y + transform[4],\n      transform[1] * x + transform[3] * y + transform[5],\n    ];\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FormatError,\n  info,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR, cachedCanvasPatterns) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n    this.cachedCanvasPatterns = cachedCanvasPatterns;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    let pattern;\n    if (!shadingFill) {\n      if (this.cachedCanvasPatterns.has(this)) {\n        pattern = this.cachedCanvasPatterns.get(this);\n      } else {\n        const tmpCanvas = owner.cachedCanvases.getCanvas(\n          \"pattern\",\n          owner.ctx.canvas.width,\n          owner.ctx.canvas.height,\n          true\n        );\n\n        const tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n        tmpCtx.beginPath();\n        tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n\n        tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);\n        if (this.matrix) {\n          tmpCtx.transform.apply(tmpCtx, this.matrix);\n        }\n        applyBoundingBox(tmpCtx, this._bbox);\n\n        tmpCtx.fillStyle = this._createGradient(tmpCtx);\n        tmpCtx.fill();\n\n        pattern = ctx.createPattern(tmpCanvas.canvas, \"repeat\");\n        this.cachedCanvasPatterns.set(this, pattern);\n      }\n    } else {\n      // Don't bother caching gradients, they are quick to rebuild.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    if (!shadingFill) {\n      const domMatrix = new DOMMatrix(inverse);\n      try {\n        pattern.setTransform(domMatrix);\n      } catch (ex) {\n        // Avoid rendering breaking completely in Firefox 78 ESR,\n        // and in Node.js (see issue 13724).\n        warn(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n      }\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else {\n        k = (y1 - y) / (y1 - y2);\n      }\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (shadingFill) {\n      scale = Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      shadingFill ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (!shadingFill) {\n      ctx.setTransform.apply(ctx, owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform.apply(ctx, this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR, cachedCanvasPatterns) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR, cachedCanvasPatterns);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static get MAX_PATTERN_SIZE() {\n    return shadow(this, \"MAX_PATTERN_SIZE\", 3000);\n  }\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 cordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (!shadingFill) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    try {\n      pattern.setTransform(domMatrix);\n    } catch (ex) {\n      // Avoid rendering breaking completely in Firefox 78 ESR,\n      // and in Node.js (see issue 13724).\n      warn(`TilingPattern.getPattern: \"${ex?.message}\".`);\n    }\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, TilingPattern };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort =\n  GlobalWorkerOptions.workerPort === undefined\n    ? null\n    : GlobalWorkerOptions.workerPort;\n\nGlobalWorkerOptions.workerSrc =\n  GlobalWorkerOptions.workerSrc === undefined\n    ? \"\"\n    : GlobalWorkerOptions.workerSrc;\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  PasswordException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  warn,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      throw new Error(\n        'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n      );\n    }\n    warn('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n    return reason;\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this._postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this._postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          this._postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        self._postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull && streamSink.onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(\n            streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason))\n          );\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall && streamController.startCall.promise,\n      streamController.pullCall && streamController.pullCall.promise,\n      streamController.cancelCall && streamController.cancelCall.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  /**\n   * Sends raw message to the comObj.\n   * @param {Object} message - Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   * @private\n   */\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  constructor({ parsedData, rawData }) {\n    this._metadataMap = parsedData;\n    this._data = rawData;\n  }\n\n  getRaw() {\n    return this._data;\n  }\n\n  get(name) {\n    return this._metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this._metadataMap);\n  }\n\n  has(name) {\n    return this._metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectFromMap, warn } from \"../shared/util.js\";\n\nclass OptionalContentGroup {\n  constructor(name, intent) {\n    this.visible = true;\n    this.name = name;\n    this.intent = intent;\n  }\n}\n\nclass OptionalContentConfig {\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n    for (const group of data.groups) {\n      this._groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this._groups) {\n        group.visible = false;\n      }\n    }\n\n    for (const on of data.on) {\n      this._groups.get(on).visible = true;\n    }\n\n    for (const off of data.off) {\n      this._groups.get(off).visible = false;\n    }\n  }\n\n  _evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this._evaluateVisibilityExpression(element);\n      } else if (this._groups.has(element)) {\n        state = this._groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this._groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this._groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this._groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this._evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this._groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this._groups.get(id).visible = !!visible;\n  }\n\n  getOrder() {\n    if (!this._groups.size) {\n      return null;\n    }\n    if (this._order) {\n      return this._order.slice();\n    }\n    return Array.from(this._groups.keys());\n  }\n\n  getGroups() {\n    return this._groups.size > 0 ? objectFromMap(this._groups) : null;\n  }\n\n  getGroup(id) {\n    return this._groups.get(id) || null;\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, createPromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(params, pdfDataRangeTransport) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    this._contentDispositionFilename =\n      params.contentDispositionFilename || null;\n\n    const initialData = params.initialData;\n    if (initialData?.length > 0) {\n      const buffer = new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData(args) {\n    const buffer = new Uint8Array(args.chunk).buffer;\n    if (args.begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== args.begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      const firstReader = this._rangeReaders[0];\n      if (firstReader?.onProgress) {\n        firstReader.onProgress({ loaded: evt.loaded });\n      }\n    } else {\n      const fullReader = this._fullRequestReader;\n      if (fullReader?.onProgress) {\n        fullReader.onProgress({ loaded: evt.loaded, total: evt.total });\n      }\n    }\n  }\n\n  _onProgressiveDone() {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.progressiveDone();\n    }\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  shadow,\n  stringToPDFString,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst GetElementsByNameSet = new WeakSet();\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPage} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n * @property {Object} [mouseState]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement}\n   */\n  _createContainer(ignoreBorder = false) {\n    const data = this.data,\n      page = this.page,\n      viewport = this.viewport;\n    const container = document.createElement(\"section\");\n    let width = data.rect[2] - data.rect[0];\n    let height = data.rect[3] - data.rect[1];\n\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n    container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n      if (data.borderStyle.style !== AnnotationBorderStyleType.UNDERLINE) {\n        // Underline styles only have a bottom border, so we do not need\n        // to adjust for all borders. This yields a similar result as\n        // Adobe Acrobat/Reader.\n        width -= 2 * data.borderStyle.width;\n        height -= 2 * data.borderStyle.width;\n      }\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || data.color || null;\n      if (borderColor) {\n        container.style.borderColor = Util.makeHexColor(\n          data.color[0] | 0,\n          data.color[1] | 0,\n          data.color[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${rect[0]}px`;\n    container.style.top = `${rect[1]}px`;\n    container.style.width = `${width}px`;\n    container.style.height = `${height}px`;\n    return container;\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger = trigger || this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.style.height = container.style.height;\n      trigger.style.width = container.style.width;\n      container.appendChild(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      titleObj: data.titleObj,\n      modificationDate: data.modificationDate,\n      contentsObj: data.contentsObj,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = container.style.width;\n\n    container.appendChild(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _renderQuadrilaterals(className) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    for (const quadrilateral of this.quadrilaterals) {\n      quadrilateral.className = className;\n    }\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement|Array<HTMLSectionElement>}\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.getElementById(id);\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { id, exportValue } = domElement;\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n\n  static get platform() {\n    const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n\n    return shadow(this, \"platform\", {\n      isWin: platform.includes(\"Win\"),\n      isMac: platform.includes(\"Mac\"),\n    });\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.url ||\n      parameters.data.dest ||\n      parameters.data.action ||\n      parameters.data.isTooltipOnly ||\n      parameters.data.resetForm ||\n      (parameters.data.actions &&\n        (parameters.data.actions.Action ||\n          parameters.data.actions[\"Mouse Up\"] ||\n          parameters.data.actions[\"Mouse Down\"]))\n    );\n    super(parameters, { isRenderable, createQuadrilaterals: true });\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n\n    if (data.url) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n    } else {\n      let hasClickAction = false;\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        hasClickAction = true;\n        this._bindJSAction(link, data);\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n      } else if (!hasClickAction) {\n        this._bindLink(link, \"\");\n      }\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.className = \"linkAnnotation\";\n    this.container.appendChild(link);\n    return this.container;\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      link.className = \"internalLink\";\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    link.className = \"internalLink\";\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    link.className = \"internalLink\";\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    link.className = \"internalLink\";\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      if (otherClickAction) {\n        otherClickAction();\n      }\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value, valueAsString: value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n        const domElement = document.getElementById(id);\n        if (!domElement || !GetElementsByNameSet.has(domElement)) {\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.className = \"textAnnotation\";\n\n    const image = document.createElement(\"img\");\n    image.style.height = this.container.style.height;\n    image.style.width = this.container.style.width;\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.appendChild(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = AnnotationElement.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: event.target.checked,\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      event.target.style[styleName] = ColorConverters[`${color[0]}_HTML`](\n        color.slice(1)\n      );\n    };\n\n    const commonActions = {\n      display: event => {\n        const hidden = event.detail.display % 2 === 1;\n        event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden,\n          print: event.detail.display === 0 || event.detail.display === 3,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          print: event.detail.print,\n        });\n      },\n      hidden: event => {\n        event.target.style.visibility = event.detail.hidden\n          ? \"hidden\"\n          : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden: event.detail.hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        if (event.detail.readonly) {\n          event.target.setAttribute(\"readonly\", \"\");\n        } else {\n          event.target.removeAttribute(\"readonly\");\n        }\n      },\n      required: event => {\n        if (event.detail.required) {\n          event.target.setAttribute(\"required\", \"\");\n        } else {\n          event.target.removeAttribute(\"required\");\n        }\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n    };\n\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      if (action) {\n        action(jsEvent);\n      }\n    }\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.className = \"textWidgetAnnotation\";\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n        valueAsString: this.data.fieldValue,\n      });\n      const textContent = storedData.valueAsString || storedData.value || \"\";\n      const elementData = {\n        userValue: null,\n        formattedValue: null,\n        beforeInputSelectionRange: null,\n        beforeInputValue: null,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = textContent;\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", textContent);\n      }\n      GetElementsByNameSet.add(element);\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      elementData.userValue = textContent;\n      element.setAttribute(\"id\", id);\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue || \"\";\n        element.value = elementData.userValue = defaultValue;\n        delete elementData.formattedValue;\n      });\n\n      let blurListener = event => {\n        if (elementData.formattedValue) {\n          event.target.value = elementData.formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n        elementData.beforeInputSelectionRange = null;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.userValue) {\n            event.target.value = elementData.userValue;\n          }\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value || \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              if (!elementData.formattedValue) {\n                event.target.value = elementData.userValue;\n              }\n            },\n            valueAsString(event) {\n              elementData.formattedValue = event.detail.valueAsString || \"\";\n              if (event.target !== document.activeElement) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = elementData.formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue: elementData.formattedValue,\n              });\n            },\n            selRange(event) {\n              const [selStart, selEnd] = event.detail.selRange;\n              if (selStart >= 0 && selEnd < event.target.value.length) {\n                event.target.setSelectionRange(selStart, selEnd);\n              }\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          // if the key is one of Escape, Enter or Tab\n          // then the data are committed\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\") {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          // Save the entered value\n          elementData.userValue = event.target.value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: event.target.value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (this._mouseState.isDown) {\n            // Focus out using the mouse: data are committed\n            elementData.userValue = event.target.value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: 1,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n        element.addEventListener(\"mousedown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          elementData.beforeInputSelectionRange = null;\n        });\n        element.addEventListener(\"keyup\", event => {\n          // keyup is triggered after input\n          if (event.target.selectionStart === event.target.selectionEnd) {\n            elementData.beforeInputSelectionRange = null;\n          }\n        });\n        element.addEventListener(\"select\", event => {\n          elementData.beforeInputSelectionRange = [\n            event.target.selectionStart,\n            event.target.selectionEnd,\n          ];\n        });\n\n        if (this.data.actions?.Keystroke) {\n          // We should use beforeinput but this\n          // event isn't available in Firefox\n          element.addEventListener(\"input\", event => {\n            let selStart = -1;\n            let selEnd = -1;\n            if (elementData.beforeInputSelectionRange) {\n              [selStart, selEnd] = elementData.beforeInputSelectionRange;\n            }\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: elementData.beforeInputValue,\n                change: event.data,\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.maxLen !== null) {\n        element.maxLength = this.data.maxLen;\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / this.data.maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontSize, fontColor } = this.data.defaultAppearanceData;\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n    if (fontSize) {\n      style.fontSize = `${fontSize}px`;\n    }\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.className = \"buttonWidgetAnnotation checkBox\";\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"buttonWidgetAnnotation radioButton\";\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.className = \"buttonWidgetAnnotation pushButton\";\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"choiceWidgetAnnotation\";\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    // For printing/saving we currently only support choice widgets with one\n    // option selection. Therefore, listboxes (#12189) and comboboxes (#12224)\n    // are not properly printed/saved yet, so we only store the first item in\n    // the field value array instead of the entire array. Once support for those\n    // two field types is implemented, we should use the same pattern as the\n    // other interactive widgets where the return value of `getValue`\n    // is used and the full array of field values is stored.\n    storage.getValue(id, {\n      value:\n        this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined,\n    });\n\n    let { fontSize } = this.data.defaultAppearanceData;\n    if (!fontSize) {\n      fontSize = 9;\n    }\n    const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.disabled = this.data.readOnly;\n    selectElement.name = this.data.fieldName;\n    selectElement.setAttribute(\"id\", id);\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    selectElement.style.fontSize = `${fontSize}px`;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (this.data.combo) {\n        optionElement.style.fontSize = fontSizeStyle;\n      }\n      if (this.data.fieldValue.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n      }\n      selectElement.appendChild(optionElement);\n    }\n\n    const getValue = (event, isExport) => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = event.target.options;\n      if (!event.target.multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            selectElement.insertBefore(\n              optionElement,\n              selectElement.children[index]\n            );\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.appendChild(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(event, /* isExport */ true);\n        const value = getValue(event, /* isExport */ false);\n        storage.setValue(id, { value: exportValue });\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value,\n            changeEx: exportValue,\n            willCommit: true,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n        ],\n        event => event.target.checked\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(event) });\n      });\n    }\n\n    this._setBackgroundColor(selectElement);\n\n    this.container.appendChild(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.titleObj?.str || parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    // Do not render popup annotations for parent elements with these types as\n    // they create the popups themselves (because of custom trigger divs).\n    const IGNORE_TYPES = [\n      \"Line\",\n      \"Square\",\n      \"Circle\",\n      \"PolyLine\",\n      \"Polygon\",\n      \"Ink\",\n    ];\n\n    this.container.className = \"popupAnnotation\";\n\n    if (IGNORE_TYPES.includes(this.data.parentType)) {\n      return this.container;\n    }\n\n    const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n    const parentElements = this.layer.querySelectorAll(selector);\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n    this.container.style.left = `${popupLeft}px`;\n    this.container.style.top = `${popupTop}px`;\n\n    this.container.appendChild(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.titleObj = parameters.titleObj;\n    this.modificationDate = parameters.modificationDate;\n    this.contentsObj = parameters.contentsObj;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"popupWrapper\";\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"popup\";\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.dir = this.titleObj.dir;\n    title.textContent = this.titleObj.str;\n    popup.appendChild(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.appendChild(modificationDate);\n    }\n\n    const contents = this._formatContents(this.contentsObj);\n    popup.appendChild(contents);\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    }\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.appendChild(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.appendChild(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.appendChild(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex += 1;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex -= 1;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"freeTextAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"lineAnnotation\";\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n\n    svg.appendChild(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"squareAnnotation\";\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"circleAnnotation\";\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"caretAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.appendChild(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.className = \"highlightAnnotation\";\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.className = \"underlineAnnotation\";\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.className = \"squigglyAnnotation\";\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.className = \"strikeoutAnnotation\";\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"stampAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      id: stringToPDFString(filename),\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.className = \"fileAttachmentAnnotation\";\n\n    const trigger = document.createElement(\"div\");\n    trigger.style.height = this.container.style.height;\n    trigger.style.width = this.container.style.width;\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (\n      !this.data.hasPopup &&\n      (this.data.titleObj?.str || this.data.contentsObj?.str)\n    ) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.appendChild(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPage} page\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n */\n\nclass AnnotationLayer {\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static render(parameters) {\n    const sortedAnnotations = [],\n      popupAnnotations = [];\n    // Ensure that Popup annotations are handled last, since they're dependant\n    // upon the parent annotation having already been rendered (please refer to\n    // the `PopupAnnotationElement.render` method); fixes issue 11362.\n    for (const data of parameters.annotations) {\n      if (!data) {\n        continue;\n      }\n      if (data.annotationType === AnnotationType.POPUP) {\n        popupAnnotations.push(data);\n        continue;\n      }\n      sortedAnnotations.push(data);\n    }\n    if (popupAnnotations.length) {\n      sortedAnnotations.push(...popupAnnotations);\n    }\n\n    for (const data of sortedAnnotations) {\n      const element = AnnotationElementFactory.create({\n        data,\n        layer: parameters.div,\n        page: parameters.page,\n        viewport: parameters.viewport,\n        linkService: parameters.linkService,\n        downloadManager: parameters.downloadManager,\n        imageResourcesPath: parameters.imageResourcesPath || \"\",\n        renderForms: parameters.renderForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage:\n          parameters.annotationStorage || new AnnotationStorage(),\n        enableScripting: parameters.enableScripting,\n        hasJSActions: parameters.hasJSActions,\n        fieldObjects: parameters.fieldObjects,\n        mouseState: parameters.mouseState || { isDown: false },\n      });\n      if (element.isRenderable) {\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        if (Array.isArray(rendered)) {\n          for (const renderedElement of rendered) {\n            parameters.div.appendChild(renderedElement);\n          }\n        } else {\n          if (element instanceof PopupAnnotationElement) {\n            // Popup annotation elements should not be on top of other\n            // annotation elements to prevent interfering with mouse events.\n            parameters.div.prepend(rendered);\n          } else {\n            parameters.div.appendChild(rendered);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    for (const data of parameters.annotations) {\n      const elements = parameters.div.querySelectorAll(\n        `[data-annotation-id=\"${data.id}\"]`\n      );\n      if (elements) {\n        for (const element of elements) {\n          element.style.transform = transform;\n        }\n      }\n    }\n    parameters.div.hidden = false;\n  }\n}\n\nexport { AnnotationLayer };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    return this.RGB_HTML(this.CMYK_RGB(components));\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  createPromiseCapability,\n  Util,\n} from \"../shared/util.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {import(\"./api\").TextContent} [textContent] - Text content to\n *   render (the object is returned by the page's `getTextContent` method).\n * @property {ReadableStream} [textContentStream] - Text content stream to\n *   render (the stream is returned by the page's `streamTextContent` method).\n * @property {HTMLElement} container - HTML element that will contain text runs.\n * @property {import(\"./display_utils\").PageViewport} viewport - The target\n *   viewport to properly layout the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that are correspond\n *   to the text items of the textContent input. This is output and shall be\n *   initially be set to empty array.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *    the `str` property of the text items of textContent input. This is output\n *   and shall be initially be set to empty array.\n * @property {number} [timeout] - Delay in milliseconds before rendering of the\n *   text runs occurs.\n * @property {boolean} [enhanceTextSelection] - Whether to turn on the text\n *   selection enhancement.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\nconst AllWhitespaceRegexp = /^\\s+$/g;\n\nfunction getAscent(fontFamily, ctx) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  ctx.save();\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    ctx.restore();\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.restore();\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles, ctx) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = task._enhanceTextSelection\n    ? {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n        originalTransform: null,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        scale: 1,\n      }\n    : {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n      };\n\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._viewport.transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  textDiv.style.left = `${left}px`;\n  textDiv.style.top = `${top}px`;\n  textDiv.style.fontSize = `${fontHeight}px`;\n  textDiv.style.fontFamily = style.fontFamily;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (\n    geom.str.length > 1 ||\n    (task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str))\n  ) {\n    shouldScaleText = true;\n  } else if (geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    if (style.vertical) {\n      textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n    } else {\n      textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n    }\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._textContentStream) {\n    task._layoutText(textDiv);\n  }\n\n  if (task._enhanceTextSelection && textDivProperties.hasText) {\n    let angleCos = 1,\n      angleSin = 0;\n    if (angle !== 0) {\n      angleCos = Math.cos(angle);\n      angleSin = Math.sin(angle);\n    }\n    const divWidth =\n      (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n    const divHeight = fontHeight;\n\n    let m, b;\n    if (angle !== 0) {\n      m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n      b = Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n    } else {\n      b = [left, top, left + divWidth, top + divHeight];\n    }\n\n    task._bounds.push({\n      left: b[0],\n      top: b[1],\n      right: b[2],\n      bottom: b[3],\n      div: textDiv,\n      size: [divWidth, divHeight],\n      m,\n    });\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    task._renderingDone = true;\n    capability.resolve();\n    return;\n  }\n\n  if (!task._textContentStream) {\n    for (let i = 0; i < textDivsLength; i++) {\n      task._layoutText(textDivs[i]);\n    }\n  }\n\n  task._renderingDone = true;\n  capability.resolve();\n}\n\nfunction findPositiveMin(ts, offset, count) {\n  let result = 0;\n  for (let i = 0; i < count; i++) {\n    const t = ts[offset++];\n    if (t > 0) {\n      result = result ? Math.min(t, result) : t;\n    }\n  }\n  return result;\n}\n\nfunction expand(task) {\n  const bounds = task._bounds;\n  const viewport = task._viewport;\n\n  const expanded = expandBounds(viewport.width, viewport.height, bounds);\n  for (let i = 0; i < expanded.length; i++) {\n    const div = bounds[i].div;\n    const divProperties = task._textDivProperties.get(div);\n    if (divProperties.angle === 0) {\n      divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n      divProperties.paddingTop = bounds[i].top - expanded[i].top;\n      divProperties.paddingRight = expanded[i].right - bounds[i].right;\n      divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n      task._textDivProperties.set(div, divProperties);\n      continue;\n    }\n    // Box is rotated -- trying to find padding so rotated div will not\n    // exceed its expanded bounds.\n    const e = expanded[i],\n      b = bounds[i];\n    const m = b.m,\n      c = m[0],\n      s = m[1];\n    // Finding intersections with expanded box.\n    const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n    const ts = new Float64Array(64);\n    for (let j = 0, jj = points.length; j < jj; j++) {\n      const t = Util.applyTransform(points[j], m);\n      ts[j + 0] = c && (e.left - t[0]) / c;\n      ts[j + 4] = s && (e.top - t[1]) / s;\n      ts[j + 8] = c && (e.right - t[0]) / c;\n      ts[j + 12] = s && (e.bottom - t[1]) / s;\n\n      ts[j + 16] = s && (e.left - t[0]) / -s;\n      ts[j + 20] = c && (e.top - t[1]) / c;\n      ts[j + 24] = s && (e.right - t[0]) / -s;\n      ts[j + 28] = c && (e.bottom - t[1]) / c;\n\n      ts[j + 32] = c && (e.left - t[0]) / -c;\n      ts[j + 36] = s && (e.top - t[1]) / -s;\n      ts[j + 40] = c && (e.right - t[0]) / -c;\n      ts[j + 44] = s && (e.bottom - t[1]) / -s;\n\n      ts[j + 48] = s && (e.left - t[0]) / s;\n      ts[j + 52] = c && (e.top - t[1]) / -c;\n      ts[j + 56] = s && (e.right - t[0]) / s;\n      ts[j + 60] = c && (e.bottom - t[1]) / -c;\n    }\n    // Not based on math, but to simplify calculations, using cos and sin\n    // absolute values to not exceed the box (it can but insignificantly).\n    const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n    divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n    divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n    divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n    divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n    task._textDivProperties.set(div, divProperties);\n  }\n}\n\nfunction expandBounds(width, height, boxes) {\n  const bounds = boxes.map(function (box, i) {\n    return {\n      x1: box.left,\n      y1: box.top,\n      x2: box.right,\n      y2: box.bottom,\n      index: i,\n      x1New: undefined,\n      x2New: undefined,\n    };\n  });\n  expandBoundsLTR(width, bounds);\n\n  const expanded = new Array(boxes.length);\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i] = {\n      left: b.x1New,\n      top: 0,\n      right: b.x2New,\n      bottom: 0,\n    };\n  }\n\n  // Rotating on 90 degrees and extending extended boxes. Reusing the bounds\n  // array and objects.\n  boxes.map(function (box, i) {\n    const e = expanded[i],\n      b = bounds[i];\n    b.x1 = box.top;\n    b.y1 = width - e.right;\n    b.x2 = box.bottom;\n    b.y2 = width - e.left;\n    b.index = i;\n    b.x1New = undefined;\n    b.x2New = undefined;\n  });\n  expandBoundsLTR(height, bounds);\n\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i].top = b.x1New;\n    expanded[i].bottom = b.x2New;\n  }\n  return expanded;\n}\n\nfunction expandBoundsLTR(width, bounds) {\n  // Sorting by x1 coordinate and walk by the bounds in the same order.\n  bounds.sort(function (a, b) {\n    return a.x1 - b.x1 || a.index - b.index;\n  });\n\n  // First we see on the horizon is a fake boundary.\n  const fakeBoundary = {\n    x1: -Infinity,\n    y1: -Infinity,\n    x2: 0,\n    y2: Infinity,\n    index: -1,\n    x1New: 0,\n    x2New: 0,\n  };\n  const horizon = [\n    {\n      start: -Infinity,\n      end: Infinity,\n      boundary: fakeBoundary,\n    },\n  ];\n\n  for (const boundary of bounds) {\n    // Searching for the affected part of horizon.\n    // TODO red-black tree or simple binary search\n    let i = 0;\n    while (i < horizon.length && horizon[i].end <= boundary.y1) {\n      i++;\n    }\n    let j = horizon.length - 1;\n    while (j >= 0 && horizon[j].start >= boundary.y2) {\n      j--;\n    }\n\n    let horizonPart, affectedBoundary;\n    let q,\n      k,\n      maxXNew = -Infinity;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      let xNew;\n      if (affectedBoundary.x2 > boundary.x1) {\n        // In the middle of the previous element, new x shall be at the\n        // boundary start. Extending if further if the affected boundary\n        // placed on top of the current one.\n        xNew =\n          affectedBoundary.index > boundary.index\n            ? affectedBoundary.x1New\n            : boundary.x1;\n      } else if (affectedBoundary.x2New === undefined) {\n        // We have some space in between, new x in middle will be a fair\n        // choice.\n        xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n      } else {\n        // Affected boundary has x2new set, using it as new x.\n        xNew = affectedBoundary.x2New;\n      }\n      if (xNew > maxXNew) {\n        maxXNew = xNew;\n      }\n    }\n\n    // Set new x1 for current boundary.\n    boundary.x1New = maxXNew;\n\n    // Adjusts new x2 for the affected boundaries.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New === undefined) {\n        // Was not set yet, choosing new x if possible.\n        if (affectedBoundary.x2 > boundary.x1) {\n          // Current and affected boundaries intersect. If affected boundary\n          // is placed on top of the current, shrinking the affected.\n          if (affectedBoundary.index > boundary.index) {\n            affectedBoundary.x2New = affectedBoundary.x2;\n          }\n        } else {\n          affectedBoundary.x2New = maxXNew;\n        }\n      } else if (affectedBoundary.x2New > maxXNew) {\n        // Affected boundary is touching new x, pushing it back.\n        affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n      }\n    }\n\n    // Fixing the horizon.\n    const changedHorizon = [];\n    let lastBoundary = null;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      // Checking which boundary will be visible.\n      const useBoundary =\n        affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n      if (lastBoundary === useBoundary) {\n        // Merging with previous.\n        changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n      } else {\n        changedHorizon.push({\n          start: horizonPart.start,\n          end: horizonPart.end,\n          boundary: useBoundary,\n        });\n        lastBoundary = useBoundary;\n      }\n    }\n    if (horizon[i].start < boundary.y1) {\n      changedHorizon[0].start = boundary.y1;\n      changedHorizon.unshift({\n        start: horizon[i].start,\n        end: boundary.y1,\n        boundary: horizon[i].boundary,\n      });\n    }\n    if (boundary.y2 < horizon[j].end) {\n      changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n      changedHorizon.push({\n        start: boundary.y2,\n        end: horizon[j].end,\n        boundary: horizon[j].boundary,\n      });\n    }\n\n    // Set x2 new of boundary that is no longer visible (see overlapping case\n    // above).\n    // TODO more efficient, e.g. via reference counting.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New !== undefined) {\n        continue;\n      }\n      let used = false;\n      for (\n        k = i - 1;\n        !used && k >= 0 && horizon[k].start >= affectedBoundary.y1;\n        k--\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (\n        k = j + 1;\n        !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2;\n        k++\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (k = 0; !used && k < changedHorizon.length; k++) {\n        used = changedHorizon[k].boundary === affectedBoundary;\n      }\n      if (!used) {\n        affectedBoundary.x2New = maxXNew;\n      }\n    }\n\n    Array.prototype.splice.apply(\n      horizon,\n      [i, j - i + 1].concat(changedHorizon)\n    );\n  }\n\n  // Set new x2 for all unset boundaries.\n  for (const horizonPart of horizon) {\n    const affectedBoundary = horizonPart.boundary;\n    if (affectedBoundary.x2New === undefined) {\n      affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n    }\n  }\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContent,\n    textContentStream,\n    container,\n    viewport,\n    textDivs,\n    textContentItemsStr,\n    enhanceTextSelection,\n  }) {\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = createPromiseCapability();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        if (!this._enhanceTextSelection) {\n          // The `textDiv` properties are no longer needed.\n          this._textDivProperties = null;\n        }\n\n        if (this._layoutTextCtx) {\n          // Zeroing the width and height cause Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    if (this._renderTimer !== null) {\n      clearTimeout(this._renderTimer);\n      this._renderTimer = null;\n    }\n    this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i].str === undefined) {\n        if (\n          items[i].type === \"beginMarkedContentProps\" ||\n          items[i].type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (items[i].id !== null) {\n            this._container.setAttribute(\"id\", `${items[i].id}`);\n          }\n          parent.appendChild(this._container);\n        } else if (items[i].type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(items[i].str);\n      appendText(this, items[i], styleCache, this._layoutTextCtx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = this._textDivProperties.get(textDiv);\n\n    let transform = \"\";\n    if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n      const { fontSize, fontFamily } = textDiv.style;\n\n      // Only build font string and set to context if different from last.\n      if (\n        fontSize !== this._layoutTextLastFontSize ||\n        fontFamily !== this._layoutTextLastFontFamily\n      ) {\n        this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n        this._layoutTextLastFontSize = fontSize;\n        this._layoutTextLastFontFamily = fontFamily;\n      }\n      // Only measure the width for multi-char text divs, see `appendText`.\n      const { width } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n      if (width > 0) {\n        const scale = textDivProperties.canvasWidth / width;\n        if (this._enhanceTextSelection) {\n          textDivProperties.scale = scale;\n        }\n        transform = `scaleX(${scale})`;\n      }\n    }\n    if (textDivProperties.angle !== 0) {\n      transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n    }\n    if (transform.length > 0) {\n      if (this._enhanceTextSelection) {\n        textDivProperties.originalTransform = transform;\n      }\n      textDiv.style.transform = transform;\n    }\n\n    if (textDivProperties.hasText) {\n      this._container.appendChild(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.appendChild(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render(timeout = 0) {\n    const capability = createPromiseCapability();\n    let styleCache = Object.create(null);\n\n    // The temporary canvas is used to measure text length in the DOM.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n    ) {\n      canvas.mozOpaque = true;\n    }\n    this._layoutTextCtx = canvas.getContext(\"2d\", { alpha: false });\n\n    if (this._textContent) {\n      const textItems = this._textContent.items;\n      const textStyles = this._textContent.styles;\n      this._processItems(textItems, textStyles);\n      capability.resolve();\n    } else if (this._textContentStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentStream.getReader();\n      pump();\n    } else {\n      throw new Error(\n        'Neither \"textContent\" nor \"textContentStream\" parameters specified.'\n      );\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      if (!timeout) {\n        // Render right away\n        render(this);\n      } else {\n        // Schedule\n        this._renderTimer = setTimeout(() => {\n          render(this);\n          this._renderTimer = null;\n        }, timeout);\n      }\n    }, this._capability.reject);\n  }\n\n  /**\n   * @param {boolean} [expandDivs]\n   */\n  expandTextDivs(expandDivs = false) {\n    if (!this._enhanceTextSelection || !this._renderingDone) {\n      return;\n    }\n    if (this._bounds !== null) {\n      expand(this);\n      this._bounds = null;\n    }\n    const transformBuf = [],\n      paddingBuf = [];\n\n    for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n      const div = this._textDivs[i];\n      const divProps = this._textDivProperties.get(div);\n\n      if (!divProps.hasText) {\n        continue;\n      }\n      if (expandDivs) {\n        transformBuf.length = 0;\n        paddingBuf.length = 0;\n\n        if (divProps.originalTransform) {\n          transformBuf.push(divProps.originalTransform);\n        }\n        if (divProps.paddingTop > 0) {\n          paddingBuf.push(`${divProps.paddingTop}px`);\n          transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingRight > 0) {\n          paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingBottom > 0) {\n          paddingBuf.push(`${divProps.paddingBottom}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingLeft > 0) {\n          paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n          transformBuf.push(\n            `translateX(${-divProps.paddingLeft / divProps.scale}px)`\n          );\n        } else {\n          paddingBuf.push(0);\n        }\n\n        div.style.padding = paddingBuf.join(\" \");\n        if (transformBuf.length) {\n          div.style.transform = transformBuf.join(\" \");\n        }\n      } else {\n        div.style.padding = null;\n        div.style.transform = divProps.originalTransform;\n      }\n    }\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} renderParameters\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(renderParameters) {\n  const task = new TextLayerRenderTask({\n    textContent: renderParameters.textContent,\n    textContentStream: renderParameters.textContentStream,\n    container: renderParameters.container,\n    viewport: renderParameters.viewport,\n    textDivs: renderParameters.textDivs,\n    textContentItemsStr: renderParameters.textContentItemsStr,\n    enhanceTextSelection: renderParameters.enhanceTextSelection,\n  });\n  task._render(renderParameters.timeout);\n  return task;\n}\n\nexport { renderTextLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  createObjectURL,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNum,\n  OPS,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { DOMSVGFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = class {\n  constructor() {\n    unreachable(\"Not implemented: SVGGraphics\");\n  }\n};\n\nif (\n  typeof PDFJSDev === \"undefined\" ||\n  PDFJSDev.test(\"!PRODUCTION || GENERIC\")\n) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree[opTree.length - 1].items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  SVGGraphics = class {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.appendChild(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.appendChild(current.tspan);\n      current.txtgrp.appendChild(current.txtElement);\n\n      this._ensureTransformGroup().appendChild(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.appendChild(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n        ...Util.applyTransform([x0, y0], matrix),\n        ...Util.applyTransform([x1, y1], matrix),\n      ]);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.appendChild(bbox.childNodes[0]);\n      this.defs.appendChild(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.appendChild(stop);\n          }\n          this.defs.appendChild(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().appendChild(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.appendChild(clipElement);\n      this.defs.appendChild(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        for (const prev of this.extraStack) {\n          prev.clipGroup = null;\n        }\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.appendChild(imgEl);\n      } else {\n        this._ensureTransformGroup().appendChild(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(imgData) {\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.appendChild(mask);\n      this._ensureTransformGroup().appendChild(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.appendChild(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.appendChild(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.appendChild(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().appendChild(this.tgrp);\n        } else {\n          this.svg.appendChild(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { warn } from \"../shared/util.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      // We don't need to add dataId in the html object but it can\n      // be useful to know its value when writing printing tests:\n      // in this case, don't skip dataId to have its value.\n      if (value === null || value === undefined || key === \"dataId\") {\n        continue;\n      }\n\n      if (key !== \"style\") {\n        if (key === \"textContent\") {\n          html.textContent = value;\n        } else if (key === \"class\") {\n          html.setAttribute(key, value.join(\" \"));\n        } else {\n          if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n            continue; // Handled below.\n          }\n          html.setAttribute(key, value);\n        }\n      } else {\n        Object.assign(html.style, value);\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure overwrite\n    // any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfa;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.appendChild(rootHtml);\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    rootDiv.style.transform = transform;\n\n    // Set defaults.\n    rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack[stack.length - 1];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack[stack.length - 1][1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.appendChild(node);\n        continue;\n      }\n\n      let childHtml;\n      if (child?.attributes?.xmlns) {\n        childHtml = document.createElementNS(child.attributes.xmlns, name);\n      } else {\n        childHtml = document.createElement(name);\n      }\n\n      html.appendChild(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.appendChild(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the xfa layer.\n   *\n   * @public\n   * @param {XfaLayerParameters} parameters\n   * @memberof XfaLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    this._headersCapability = createPromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  assert(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Support UTF-8 decoding when TextDecoder is unsupported.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n        // Or TextDecoder API is not available (in IE / Edge).\n        if (/^utf-?8$/i.test(encoding)) {\n          // UTF-8 is commonly used, try to support it in another way:\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replace(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  createPromiseCapability,\n  stringToBytes,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  const array = stringToBytes(data);\n  return array.buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n    this.getXhr =\n      args.getXhr ||\n      function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = this.getXhr();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController?.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = createPromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\nexport { PDFFetchStream };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable sort-exports/sort-exports */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n\nimport {\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n} from \"./display/display_utils.js\";\nimport {\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n} from \"./display/api.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { isNodeJS } from \"./shared/is_node.js\";\nimport { renderTextLayer } from \"./display/text_layer.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n  const streamsPromise = Promise.all([\n    import(\"pdfjs/display/network.js\"),\n    import(\"pdfjs/display/fetch_stream.js\"),\n  ]);\n\n  setPDFNetworkStreamFactory(async params => {\n    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;\n    if (isValidFetchUrl(params.url)) {\n      return new PDFFetchStream(params);\n    }\n    return new PDFNetworkStream(params);\n  });\n} else if (PDFJSDev.test(\"GENERIC || CHROME\")) {\n  if (PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n    const { PDFNodeStream } = require(\"./display/node_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    const { PDFNetworkStream } = require(\"./display/network.js\");\n    const { PDFFetchStream } = require(\"./display/fetch_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      if (isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  }\n}\n\nexport {\n  // From \"./display/display_utils.js\":\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isPdfFile,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  getXfaPageViewport,\n  // From \"./shared/util.js\":\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n  // From \"./display/api.js\":\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n  // From \"./display/annotation_layer.js\":\n  AnnotationLayer,\n  // From \"./display/worker_options.js\":\n  GlobalWorkerOptions,\n  // From \"./display/text_layer.js\":\n  renderTextLayer,\n  // From \"./display/svg.js\":\n  SVGGraphics,\n  // From \"./display/xfa_layer.js\":\n  XfaLayer,\n};\n"]},"metadata":{},"sourceType":"script"}